/*!
 * v-title v2.0.1
 * (c) 2019-2022 yujinpan
 * Released under the MIT License.
 */

import 'core-js/modules/es.regexp.exec.js';
import 'core-js/modules/es.regexp.test.js';
import { getStyle } from 'element-ui/lib/utils/dom';

function getStyleToInt(elem, attribute) {
  return parseInt(getStyle(elem, attribute), 10) || 0;
}
function toNum(val) {
  return val ? val | 0 : val;
}
function toSize(val) {
  return /^\d+$/.test(val) ? val | 0 : val;
} // 校验是否溢出

function isOverflow(elem) {
  var multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var elemRect = elem.getBoundingClientRect();
  var range = document.createRange();
  range.setStart(elem, 0);
  range.setEnd(elem, elem.childNodes.length);
  var rangeRect = range.getBoundingClientRect();

  if (multiple) {
    var height = rangeRect.height;
    var padding = getStyleToInt(elem, 'paddingTop') + getStyleToInt(elem, 'paddingBottom');
    var border = getStyleToInt(elem, 'borderTopWidth') + getStyleToInt(elem, 'borderBottomWidth');
    return height + padding + border > elemRect.height;
  } else {
    var width = rangeRect.width;

    var _padding = getStyleToInt(elem, 'paddingLeft') + getStyleToInt(elem, 'paddingRight');

    var _border = getStyleToInt(elem, 'borderLeftWidth') + getStyleToInt(elem, 'borderRightWidth');

    return width + _padding + _border > elemRect.width;
  }
}

export { getStyleToInt, isOverflow, toNum, toSize };
