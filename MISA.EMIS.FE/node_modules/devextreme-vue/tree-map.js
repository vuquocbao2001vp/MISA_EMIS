/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxTreeMapborder = exports.DxTooltipBorder = exports.DxTooltip = exports.DxTitle = exports.DxTileLabel = exports.DxTile = exports.DxSubtitle = exports.DxSize = exports.DxShadow = exports.DxSelectionStyle = exports.DxMargin = exports.DxLoadingIndicator = exports.DxLabel = exports.DxHoverStyle = exports.DxGroupLabel = exports.DxGroup = exports.DxFormat = exports.DxFont = exports.DxExport = exports.DxColorizer = exports.DxBorder = exports.DxTreeMap = void 0;
var tree_map_1 = __importDefault(require("devextreme/viz/tree_map"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxTreeMap = index_1.createComponent({
    props: {
        childrenField: String,
        colorField: String,
        colorizer: Object,
        dataSource: {},
        disabled: Boolean,
        elementAttr: Object,
        export: Object,
        group: Object,
        hoverEnabled: Boolean,
        idField: String,
        interactWithGroup: Boolean,
        labelField: String,
        layoutAlgorithm: [Function, String],
        layoutDirection: String,
        loadingIndicator: Object,
        maxDepth: Number,
        onClick: Function,
        onDisposing: Function,
        onDrawn: Function,
        onDrill: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onHoverChanged: Function,
        onIncidentOccurred: Function,
        onInitialized: Function,
        onNodesInitialized: Function,
        onNodesRendering: Function,
        onOptionChanged: Function,
        onSelectionChanged: Function,
        parentField: String,
        pathModified: Boolean,
        redrawOnResize: Boolean,
        rtlEnabled: Boolean,
        selectionMode: String,
        size: Object,
        theme: String,
        tile: Object,
        title: [Object, String],
        tooltip: Object,
        valueField: String
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:childrenField": null,
        "update:colorField": null,
        "update:colorizer": null,
        "update:dataSource": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:export": null,
        "update:group": null,
        "update:hoverEnabled": null,
        "update:idField": null,
        "update:interactWithGroup": null,
        "update:labelField": null,
        "update:layoutAlgorithm": null,
        "update:layoutDirection": null,
        "update:loadingIndicator": null,
        "update:maxDepth": null,
        "update:onClick": null,
        "update:onDisposing": null,
        "update:onDrawn": null,
        "update:onDrill": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onHoverChanged": null,
        "update:onIncidentOccurred": null,
        "update:onInitialized": null,
        "update:onNodesInitialized": null,
        "update:onNodesRendering": null,
        "update:onOptionChanged": null,
        "update:onSelectionChanged": null,
        "update:parentField": null,
        "update:pathModified": null,
        "update:redrawOnResize": null,
        "update:rtlEnabled": null,
        "update:selectionMode": null,
        "update:size": null,
        "update:theme": null,
        "update:tile": null,
        "update:title": null,
        "update:tooltip": null,
        "update:valueField": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = tree_map_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            colorizer: { isCollectionItem: false, optionName: "colorizer" },
            export: { isCollectionItem: false, optionName: "export" },
            group: { isCollectionItem: false, optionName: "group" },
            loadingIndicator: { isCollectionItem: false, optionName: "loadingIndicator" },
            size: { isCollectionItem: false, optionName: "size" },
            tile: { isCollectionItem: false, optionName: "tile" },
            title: { isCollectionItem: false, optionName: "title" },
            tooltip: { isCollectionItem: false, optionName: "tooltip" }
        };
    }
});
exports.DxTreeMap = DxTreeMap;
var DxBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxBorder = DxBorder;
DxBorder.$_optionName = "border";
var DxColorizer = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colorCodeField": null,
        "update:colorizeGroups": null,
        "update:palette": null,
        "update:paletteExtensionMode": null,
        "update:range": null,
        "update:type": null,
    },
    props: {
        colorCodeField: String,
        colorizeGroups: Boolean,
        palette: [Array, String],
        paletteExtensionMode: String,
        range: Array,
        type: String
    }
});
exports.DxColorizer = DxColorizer;
DxColorizer.$_optionName = "colorizer";
var DxExport = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:fileName": null,
        "update:formats": null,
        "update:margin": null,
        "update:printingEnabled": null,
        "update:proxyUrl": null,
        "update:svgToCanvas": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        fileName: String,
        formats: Array,
        margin: Number,
        printingEnabled: Boolean,
        proxyUrl: String,
        svgToCanvas: Function
    }
});
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
var DxFont = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:family": null,
        "update:opacity": null,
        "update:size": null,
        "update:weight": null,
    },
    props: {
        color: String,
        family: String,
        opacity: Number,
        size: [Number, String],
        weight: Number
    }
});
exports.DxFont = DxFont;
DxFont.$_optionName = "font";
var DxFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
var DxGroup = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:headerHeight": null,
        "update:hoverEnabled": null,
        "update:hoverStyle": null,
        "update:label": null,
        "update:padding": null,
        "update:selectionStyle": null,
    },
    props: {
        border: Object,
        color: String,
        headerHeight: Number,
        hoverEnabled: Boolean,
        hoverStyle: Object,
        label: Object,
        padding: Number,
        selectionStyle: Object
    }
});
exports.DxGroup = DxGroup;
DxGroup.$_optionName = "group";
DxGroup.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    groupLabel: { isCollectionItem: false, optionName: "label" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    treeMapborder: { isCollectionItem: false, optionName: "border" }
};
var DxGroupLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:textOverflow": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        textOverflow: String,
        visible: Boolean
    }
});
exports.DxGroupLabel = DxGroupLabel;
DxGroupLabel.$_optionName = "label";
DxGroupLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
    },
    props: {
        border: Object,
        color: String
    }
});
exports.DxHoverStyle = DxHoverStyle;
DxHoverStyle.$_optionName = "hoverStyle";
var DxLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:textOverflow": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        textOverflow: String,
        visible: Boolean,
        wordWrap: String
    }
});
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
var DxLoadingIndicator = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:font": null,
        "update:show": null,
        "update:text": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        font: Object,
        show: Boolean,
        text: String
    }
});
exports.DxLoadingIndicator = DxLoadingIndicator;
DxLoadingIndicator.$_optionName = "loadingIndicator";
DxLoadingIndicator.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxMargin = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:left": null,
        "update:right": null,
        "update:top": null,
    },
    props: {
        bottom: Number,
        left: Number,
        right: Number,
        top: Number
    }
});
exports.DxMargin = DxMargin;
DxMargin.$_optionName = "margin";
var DxSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
    },
    props: {
        border: Object,
        color: String
    }
});
exports.DxSelectionStyle = DxSelectionStyle;
DxSelectionStyle.$_optionName = "selectionStyle";
var DxShadow = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:blur": null,
        "update:color": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
    },
    props: {
        blur: Number,
        color: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number
    }
});
exports.DxShadow = DxShadow;
DxShadow.$_optionName = "shadow";
var DxSize = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:width": null,
    },
    props: {
        height: Number,
        width: Number
    }
});
exports.DxSize = DxSize;
DxSize.$_optionName = "size";
var DxSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxSubtitle = DxSubtitle;
DxSubtitle.$_optionName = "subtitle";
DxSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxTile = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:hoverStyle": null,
        "update:label": null,
        "update:selectionStyle": null,
    },
    props: {
        border: Object,
        color: String,
        hoverStyle: Object,
        label: Object,
        selectionStyle: Object
    }
});
exports.DxTile = DxTile;
DxTile.$_optionName = "tile";
DxTile.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    tileLabel: { isCollectionItem: false, optionName: "label" },
    treeMapborder: { isCollectionItem: false, optionName: "border" }
};
var DxTileLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:textOverflow": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        textOverflow: String,
        visible: Boolean,
        wordWrap: String
    }
});
exports.DxTileLabel = DxTileLabel;
DxTileLabel.$_optionName = "label";
DxTileLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxTitle = DxTitle;
DxTitle.$_optionName = "title";
DxTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxTooltip = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:arrowLength": null,
        "update:border": null,
        "update:color": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:cornerRadius": null,
        "update:customizeTooltip": null,
        "update:enabled": null,
        "update:font": null,
        "update:format": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:shadow": null,
        "update:zIndex": null,
    },
    props: {
        arrowLength: Number,
        border: Object,
        color: String,
        container: {},
        contentTemplate: {},
        cornerRadius: Number,
        customizeTooltip: Function,
        enabled: Boolean,
        font: Object,
        format: [Object, Function, String],
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        shadow: Object,
        zIndex: Number
    }
});
exports.DxTooltip = DxTooltip;
DxTooltip.$_optionName = "tooltip";
DxTooltip.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    shadow: { isCollectionItem: false, optionName: "shadow" },
    tooltipBorder: { isCollectionItem: false, optionName: "border" }
};
var DxTooltipBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxTooltipBorder = DxTooltipBorder;
DxTooltipBorder.$_optionName = "border";
var DxTreeMapborder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:width": null,
    },
    props: {
        color: String,
        width: Number
    }
});
exports.DxTreeMapborder = DxTreeMapborder;
DxTreeMapborder.$_optionName = "border";
exports.default = DxTreeMap;
