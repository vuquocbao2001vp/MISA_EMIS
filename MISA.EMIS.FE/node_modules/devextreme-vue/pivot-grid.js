/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxTexts = exports.DxStateStoring = exports.DxScrolling = exports.DxPivotGridTexts = exports.DxLoadPanel = exports.DxHeaderFilterTexts = exports.DxHeaderFilter = exports.DxFieldPanelTexts = exports.DxFieldPanel = exports.DxFieldChooserTexts = exports.DxFieldChooser = exports.DxExport = exports.DxPivotGrid = void 0;
var pivot_grid_1 = __importDefault(require("devextreme/ui/pivot_grid"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxPivotGrid = index_1.createComponent({
    props: {
        allowExpandAll: Boolean,
        allowFiltering: Boolean,
        allowSorting: Boolean,
        allowSortingBySummary: Boolean,
        dataFieldArea: String,
        dataSource: {},
        disabled: Boolean,
        elementAttr: Object,
        encodeHtml: Boolean,
        export: Object,
        fieldChooser: Object,
        fieldPanel: Object,
        headerFilter: Object,
        height: [Function, Number, String],
        hideEmptySummaryCells: Boolean,
        hint: String,
        loadPanel: Object,
        onCellClick: Function,
        onCellPrepared: Function,
        onContentReady: Function,
        onContextMenuPreparing: Function,
        onDisposing: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        rowHeaderLayout: String,
        rtlEnabled: Boolean,
        scrolling: Object,
        showBorders: Boolean,
        showColumnGrandTotals: Boolean,
        showColumnTotals: Boolean,
        showRowGrandTotals: Boolean,
        showRowTotals: Boolean,
        showTotalsPrior: String,
        stateStoring: Object,
        tabIndex: Number,
        texts: Object,
        visible: Boolean,
        width: [Function, Number, String],
        wordWrapEnabled: Boolean
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowExpandAll": null,
        "update:allowFiltering": null,
        "update:allowSorting": null,
        "update:allowSortingBySummary": null,
        "update:dataFieldArea": null,
        "update:dataSource": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:encodeHtml": null,
        "update:export": null,
        "update:fieldChooser": null,
        "update:fieldPanel": null,
        "update:headerFilter": null,
        "update:height": null,
        "update:hideEmptySummaryCells": null,
        "update:hint": null,
        "update:loadPanel": null,
        "update:onCellClick": null,
        "update:onCellPrepared": null,
        "update:onContentReady": null,
        "update:onContextMenuPreparing": null,
        "update:onDisposing": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:rowHeaderLayout": null,
        "update:rtlEnabled": null,
        "update:scrolling": null,
        "update:showBorders": null,
        "update:showColumnGrandTotals": null,
        "update:showColumnTotals": null,
        "update:showRowGrandTotals": null,
        "update:showRowTotals": null,
        "update:showTotalsPrior": null,
        "update:stateStoring": null,
        "update:tabIndex": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null,
        "update:wordWrapEnabled": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = pivot_grid_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            export: { isCollectionItem: false, optionName: "export" },
            fieldChooser: { isCollectionItem: false, optionName: "fieldChooser" },
            fieldPanel: { isCollectionItem: false, optionName: "fieldPanel" },
            headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
            loadPanel: { isCollectionItem: false, optionName: "loadPanel" },
            pivotGridTexts: { isCollectionItem: false, optionName: "texts" },
            scrolling: { isCollectionItem: false, optionName: "scrolling" },
            stateStoring: { isCollectionItem: false, optionName: "stateStoring" },
            texts: { isCollectionItem: false, optionName: "texts" }
        };
    }
});
exports.DxPivotGrid = DxPivotGrid;
var DxExport = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:fileName": null,
        "update:ignoreExcelErrors": null,
        "update:proxyUrl": null,
    },
    props: {
        enabled: Boolean,
        fileName: String,
        ignoreExcelErrors: Boolean,
        proxyUrl: String
    }
});
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
var DxFieldChooser = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:applyChangesMode": null,
        "update:enabled": null,
        "update:height": null,
        "update:layout": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:title": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        applyChangesMode: String,
        enabled: Boolean,
        height: Number,
        layout: {
            type: Number,
            validator: function (v) { return typeof (v) !== "number" || [
                0,
                1,
                2
            ].indexOf(v) !== -1; }
        },
        searchTimeout: Number,
        texts: Object,
        title: String,
        width: Number
    }
});
exports.DxFieldChooser = DxFieldChooser;
DxFieldChooser.$_optionName = "fieldChooser";
DxFieldChooser.$_expectedChildren = {
    fieldChooserTexts: { isCollectionItem: false, optionName: "texts" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
var DxFieldChooserTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allFields": null,
        "update:columnFields": null,
        "update:dataFields": null,
        "update:filterFields": null,
        "update:rowFields": null,
    },
    props: {
        allFields: String,
        columnFields: String,
        dataFields: String,
        filterFields: String,
        rowFields: String
    }
});
exports.DxFieldChooserTexts = DxFieldChooserTexts;
DxFieldChooserTexts.$_optionName = "texts";
var DxFieldPanel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowFieldDragging": null,
        "update:showColumnFields": null,
        "update:showDataFields": null,
        "update:showFilterFields": null,
        "update:showRowFields": null,
        "update:texts": null,
        "update:visible": null,
    },
    props: {
        allowFieldDragging: Boolean,
        showColumnFields: Boolean,
        showDataFields: Boolean,
        showFilterFields: Boolean,
        showRowFields: Boolean,
        texts: Object,
        visible: Boolean
    }
});
exports.DxFieldPanel = DxFieldPanel;
DxFieldPanel.$_optionName = "fieldPanel";
DxFieldPanel.$_expectedChildren = {
    fieldPanelTexts: { isCollectionItem: false, optionName: "texts" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
var DxFieldPanelTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:columnFieldArea": null,
        "update:dataFieldArea": null,
        "update:filterFieldArea": null,
        "update:rowFieldArea": null,
    },
    props: {
        columnFieldArea: String,
        dataFieldArea: String,
        filterFieldArea: String,
        rowFieldArea: String
    }
});
exports.DxFieldPanelTexts = DxFieldPanelTexts;
DxFieldPanelTexts.$_optionName = "texts";
var DxHeaderFilter = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:height": null,
        "update:searchTimeout": null,
        "update:showRelevantValues": null,
        "update:texts": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        height: Number,
        searchTimeout: Number,
        showRelevantValues: Boolean,
        texts: Object,
        width: Number
    }
});
exports.DxHeaderFilter = DxHeaderFilter;
DxHeaderFilter.$_optionName = "headerFilter";
DxHeaderFilter.$_expectedChildren = {
    headerFilterTexts: { isCollectionItem: false, optionName: "texts" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
var DxHeaderFilterTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cancel": null,
        "update:emptyValue": null,
        "update:ok": null,
    },
    props: {
        cancel: String,
        emptyValue: String,
        ok: String
    }
});
exports.DxHeaderFilterTexts = DxHeaderFilterTexts;
DxHeaderFilterTexts.$_optionName = "texts";
var DxLoadPanel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:height": null,
        "update:indicatorSrc": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showIndicator": null,
        "update:showPane": null,
        "update:text": null,
        "update:width": null,
    },
    props: {
        enabled: Boolean,
        height: Number,
        indicatorSrc: String,
        shading: Boolean,
        shadingColor: String,
        showIndicator: Boolean,
        showPane: Boolean,
        text: String,
        width: Number
    }
});
exports.DxLoadPanel = DxLoadPanel;
DxLoadPanel.$_optionName = "loadPanel";
var DxPivotGridTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:collapseAll": null,
        "update:dataNotAvailable": null,
        "update:expandAll": null,
        "update:exportToExcel": null,
        "update:grandTotal": null,
        "update:noData": null,
        "update:removeAllSorting": null,
        "update:showFieldChooser": null,
        "update:sortColumnBySummary": null,
        "update:sortRowBySummary": null,
        "update:total": null,
    },
    props: {
        collapseAll: String,
        dataNotAvailable: String,
        expandAll: String,
        exportToExcel: String,
        grandTotal: String,
        noData: String,
        removeAllSorting: String,
        showFieldChooser: String,
        sortColumnBySummary: String,
        sortRowBySummary: String,
        total: String
    }
});
exports.DxPivotGridTexts = DxPivotGridTexts;
DxPivotGridTexts.$_optionName = "texts";
var DxScrolling = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:mode": null,
        "update:useNative": null,
    },
    props: {
        mode: String,
        useNative: [Boolean, String]
    }
});
exports.DxScrolling = DxScrolling;
DxScrolling.$_optionName = "scrolling";
var DxStateStoring = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customLoad": null,
        "update:customSave": null,
        "update:enabled": null,
        "update:savingTimeout": null,
        "update:storageKey": null,
        "update:type": null,
    },
    props: {
        customLoad: Function,
        customSave: Function,
        enabled: Boolean,
        savingTimeout: Number,
        storageKey: String,
        type: String
    }
});
exports.DxStateStoring = DxStateStoring;
DxStateStoring.$_optionName = "stateStoring";
var DxTexts = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allFields": null,
        "update:cancel": null,
        "update:collapseAll": null,
        "update:columnFieldArea": null,
        "update:columnFields": null,
        "update:dataFieldArea": null,
        "update:dataFields": null,
        "update:dataNotAvailable": null,
        "update:emptyValue": null,
        "update:expandAll": null,
        "update:exportToExcel": null,
        "update:filterFieldArea": null,
        "update:filterFields": null,
        "update:grandTotal": null,
        "update:noData": null,
        "update:ok": null,
        "update:removeAllSorting": null,
        "update:rowFieldArea": null,
        "update:rowFields": null,
        "update:showFieldChooser": null,
        "update:sortColumnBySummary": null,
        "update:sortRowBySummary": null,
        "update:total": null,
    },
    props: {
        allFields: String,
        cancel: String,
        collapseAll: String,
        columnFieldArea: String,
        columnFields: String,
        dataFieldArea: String,
        dataFields: String,
        dataNotAvailable: String,
        emptyValue: String,
        expandAll: String,
        exportToExcel: String,
        filterFieldArea: String,
        filterFields: String,
        grandTotal: String,
        noData: String,
        ok: String,
        removeAllSorting: String,
        rowFieldArea: String,
        rowFields: String,
        showFieldChooser: String,
        sortColumnBySummary: String,
        sortRowBySummary: String,
        total: String
    }
});
exports.DxTexts = DxTexts;
DxTexts.$_optionName = "texts";
exports.default = DxPivotGrid;
