/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxValidationRule = exports.DxStringLengthRule = exports.DxRequiredRule = exports.DxRangeRule = exports.DxPatternRule = exports.DxNumericRule = exports.DxEmailRule = exports.DxCustomRule = exports.DxCompareRule = exports.DxAsyncRule = exports.DxAdapter = exports.DxValidator = void 0;
var validator_1 = __importDefault(require("devextreme/ui/validator"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxValidator = index_1.createExtensionComponent({
    props: {
        adapter: Object,
        elementAttr: Object,
        height: [Function, Number, String],
        name: String,
        onDisposing: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValidated: Function,
        validationGroup: String,
        validationRules: Array,
        width: [Function, Number, String]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:adapter": null,
        "update:elementAttr": null,
        "update:height": null,
        "update:name": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onValidated": null,
        "update:validationGroup": null,
        "update:validationRules": null,
        "update:width": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = validator_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            adapter: { isCollectionItem: false, optionName: "adapter" },
            AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
            CompareRule: { isCollectionItem: true, optionName: "validationRules" },
            CustomRule: { isCollectionItem: true, optionName: "validationRules" },
            EmailRule: { isCollectionItem: true, optionName: "validationRules" },
            NumericRule: { isCollectionItem: true, optionName: "validationRules" },
            PatternRule: { isCollectionItem: true, optionName: "validationRules" },
            RangeRule: { isCollectionItem: true, optionName: "validationRules" },
            RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
            StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
            validationRule: { isCollectionItem: true, optionName: "validationRules" }
        };
    }
});
exports.DxValidator = DxValidator;
var DxAdapter = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:applyValidationResults": null,
        "update:bypass": null,
        "update:focus": null,
        "update:getValue": null,
        "update:reset": null,
        "update:validationRequestsCallbacks": null,
    },
    props: {
        applyValidationResults: Function,
        bypass: Function,
        focus: Function,
        getValue: Function,
        reset: Function,
        validationRequestsCallbacks: Array
    }
});
exports.DxAdapter = DxAdapter;
DxAdapter.$_optionName = "adapter";
var DxAsyncRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
    }
});
exports.DxAsyncRule = DxAsyncRule;
DxAsyncRule.$_optionName = "validationRules";
DxAsyncRule.$_isCollectionItem = true;
DxAsyncRule.$_predefinedProps = {
    type: "async"
};
var DxCompareRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
});
exports.DxCompareRule = DxCompareRule;
DxCompareRule.$_optionName = "validationRules";
DxCompareRule.$_isCollectionItem = true;
DxCompareRule.$_predefinedProps = {
    type: "compare"
};
var DxCustomRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
    }
});
exports.DxCustomRule = DxCustomRule;
DxCustomRule.$_optionName = "validationRules";
DxCustomRule.$_isCollectionItem = true;
DxCustomRule.$_predefinedProps = {
    type: "custom"
};
var DxEmailRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
});
exports.DxEmailRule = DxEmailRule;
DxEmailRule.$_optionName = "validationRules";
DxEmailRule.$_isCollectionItem = true;
DxEmailRule.$_predefinedProps = {
    type: "email"
};
var DxNumericRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
    }
});
exports.DxNumericRule = DxNumericRule;
DxNumericRule.$_optionName = "validationRules";
DxNumericRule.$_isCollectionItem = true;
DxNumericRule.$_predefinedProps = {
    type: "numeric"
};
var DxPatternRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:pattern": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        message: String,
        pattern: {},
        type: String
    }
});
exports.DxPatternRule = DxPatternRule;
DxPatternRule.$_optionName = "validationRules";
DxPatternRule.$_isCollectionItem = true;
DxPatternRule.$_predefinedProps = {
    type: "pattern"
};
var DxRangeRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:reevaluate": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        max: {},
        message: String,
        min: {},
        reevaluate: Boolean,
        type: String
    }
});
exports.DxRangeRule = DxRangeRule;
DxRangeRule.$_optionName = "validationRules";
DxRangeRule.$_isCollectionItem = true;
DxRangeRule.$_predefinedProps = {
    type: "range"
};
var DxRequiredRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:message": null,
        "update:trim": null,
        "update:type": null,
    },
    props: {
        message: String,
        trim: Boolean,
        type: String
    }
});
exports.DxRequiredRule = DxRequiredRule;
DxRequiredRule.$_optionName = "validationRules";
DxRequiredRule.$_isCollectionItem = true;
DxRequiredRule.$_predefinedProps = {
    type: "required"
};
var DxStringLengthRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:trim": null,
        "update:type": null,
    },
    props: {
        ignoreEmptyValue: Boolean,
        max: Number,
        message: String,
        min: Number,
        trim: Boolean,
        type: String
    }
});
exports.DxStringLengthRule = DxStringLengthRule;
DxStringLengthRule.$_optionName = "validationRules";
DxStringLengthRule.$_isCollectionItem = true;
DxStringLengthRule.$_predefinedProps = {
    type: "stringLength"
};
var DxValidationRule = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:pattern": null,
        "update:reevaluate": null,
        "update:trim": null,
        "update:type": null,
        "update:validationCallback": null,
    },
    props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        max: {},
        message: String,
        min: {},
        pattern: {},
        reevaluate: Boolean,
        trim: Boolean,
        type: String,
        validationCallback: Function
    }
});
exports.DxValidationRule = DxValidationRule;
DxValidationRule.$_optionName = "validationRules";
DxValidationRule.$_isCollectionItem = true;
DxValidationRule.$_predefinedProps = {
    type: "required"
};
exports.default = DxValidator;
