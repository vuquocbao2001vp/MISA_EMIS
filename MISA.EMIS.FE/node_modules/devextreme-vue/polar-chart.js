/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxPolarChartTitleSubtitle = exports.DxPolarChartTitle = exports.DxPointSelectionStyle = exports.DxPointHoverStyle = exports.DxPointBorder = exports.DxPoint = exports.DxMinVisualRangeLength = exports.DxMinorTickInterval = exports.DxMinorTick = exports.DxMinorGrid = exports.DxMargin = exports.DxLoadingIndicator = exports.DxLength = exports.DxLegendTitleSubtitle = exports.DxLegendTitle = exports.DxLegend = exports.DxLabel = exports.DxImage = exports.DxHoverStyle = exports.DxHatching = exports.DxGrid = exports.DxFormat = exports.DxFont = exports.DxExport = exports.DxDataPrepareSettings = exports.DxConstantLineStyleLabel = exports.DxConstantLineStyle = exports.DxConstantLineLabel = exports.DxConstantLine = exports.DxConnector = exports.DxCommonSeriesSettingsSelectionStyle = exports.DxCommonSeriesSettingsLabel = exports.DxCommonSeriesSettingsHoverStyle = exports.DxCommonSeriesSettings = exports.DxCommonAxisSettingsTick = exports.DxCommonAxisSettingsMinorTick = exports.DxCommonAxisSettingsLabel = exports.DxCommonAxisSettings = exports.DxCommonAnnotationSettings = exports.DxBorder = exports.DxAxisLabel = exports.DxArgumentFormat = exports.DxArgumentAxisTick = exports.DxArgumentAxisMinorTick = exports.DxArgumentAxis = exports.DxAnnotationBorder = exports.DxAnnotation = exports.DxAnimation = exports.DxAdaptiveLayout = exports.DxPolarChart = void 0;
exports.DxWholeRange = exports.DxVisualRange = exports.DxValueErrorBar = exports.DxValueAxis = exports.DxTooltipBorder = exports.DxTooltip = exports.DxTitle = exports.DxTickInterval = exports.DxTick = exports.DxSubtitle = exports.DxStripStyleLabel = exports.DxStripStyle = exports.DxStripLabel = exports.DxStrip = exports.DxSize = exports.DxShadow = exports.DxSeriesTemplate = exports.DxSeriesBorder = exports.DxSeries = exports.DxSelectionStyle = void 0;
var polar_chart_1 = __importDefault(require("devextreme/viz/polar_chart"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxPolarChart = index_1.createComponent({
    props: {
        adaptiveLayout: Object,
        animation: [Boolean, Object],
        annotations: Array,
        argumentAxis: Object,
        barGroupPadding: Number,
        barGroupWidth: Number,
        commonAnnotationSettings: Object,
        commonAxisSettings: Object,
        commonSeriesSettings: Object,
        containerBackgroundColor: String,
        customizeAnnotation: Function,
        customizeLabel: Function,
        customizePoint: Function,
        dataPrepareSettings: Object,
        dataSource: {},
        disabled: Boolean,
        elementAttr: Object,
        export: Object,
        legend: Object,
        loadingIndicator: Object,
        margin: Object,
        negativesAsZeroes: Boolean,
        onArgumentAxisClick: Function,
        onDisposing: Function,
        onDone: Function,
        onDrawn: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onIncidentOccurred: Function,
        onInitialized: Function,
        onLegendClick: Function,
        onOptionChanged: Function,
        onPointClick: Function,
        onPointHoverChanged: Function,
        onPointSelectionChanged: Function,
        onSeriesClick: Function,
        onSeriesHoverChanged: Function,
        onSeriesSelectionChanged: Function,
        onTooltipHidden: Function,
        onTooltipShown: Function,
        onZoomEnd: Function,
        onZoomStart: Function,
        palette: [Array, String],
        paletteExtensionMode: String,
        pathModified: Boolean,
        pointSelectionMode: String,
        redrawOnResize: Boolean,
        resolveLabelOverlapping: String,
        rtlEnabled: Boolean,
        series: [Array, Object],
        seriesSelectionMode: String,
        seriesTemplate: Object,
        size: Object,
        theme: String,
        title: [Object, String],
        tooltip: Object,
        useSpiderWeb: Boolean,
        valueAxis: Object
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:adaptiveLayout": null,
        "update:animation": null,
        "update:annotations": null,
        "update:argumentAxis": null,
        "update:barGroupPadding": null,
        "update:barGroupWidth": null,
        "update:commonAnnotationSettings": null,
        "update:commonAxisSettings": null,
        "update:commonSeriesSettings": null,
        "update:containerBackgroundColor": null,
        "update:customizeAnnotation": null,
        "update:customizeLabel": null,
        "update:customizePoint": null,
        "update:dataPrepareSettings": null,
        "update:dataSource": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:export": null,
        "update:legend": null,
        "update:loadingIndicator": null,
        "update:margin": null,
        "update:negativesAsZeroes": null,
        "update:onArgumentAxisClick": null,
        "update:onDisposing": null,
        "update:onDone": null,
        "update:onDrawn": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onIncidentOccurred": null,
        "update:onInitialized": null,
        "update:onLegendClick": null,
        "update:onOptionChanged": null,
        "update:onPointClick": null,
        "update:onPointHoverChanged": null,
        "update:onPointSelectionChanged": null,
        "update:onSeriesClick": null,
        "update:onSeriesHoverChanged": null,
        "update:onSeriesSelectionChanged": null,
        "update:onTooltipHidden": null,
        "update:onTooltipShown": null,
        "update:onZoomEnd": null,
        "update:onZoomStart": null,
        "update:palette": null,
        "update:paletteExtensionMode": null,
        "update:pathModified": null,
        "update:pointSelectionMode": null,
        "update:redrawOnResize": null,
        "update:resolveLabelOverlapping": null,
        "update:rtlEnabled": null,
        "update:series": null,
        "update:seriesSelectionMode": null,
        "update:seriesTemplate": null,
        "update:size": null,
        "update:theme": null,
        "update:title": null,
        "update:tooltip": null,
        "update:useSpiderWeb": null,
        "update:valueAxis": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = polar_chart_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            adaptiveLayout: { isCollectionItem: false, optionName: "adaptiveLayout" },
            animation: { isCollectionItem: false, optionName: "animation" },
            annotation: { isCollectionItem: true, optionName: "annotations" },
            argumentAxis: { isCollectionItem: false, optionName: "argumentAxis" },
            commonAnnotationSettings: { isCollectionItem: false, optionName: "commonAnnotationSettings" },
            commonAxisSettings: { isCollectionItem: false, optionName: "commonAxisSettings" },
            commonSeriesSettings: { isCollectionItem: false, optionName: "commonSeriesSettings" },
            dataPrepareSettings: { isCollectionItem: false, optionName: "dataPrepareSettings" },
            export: { isCollectionItem: false, optionName: "export" },
            legend: { isCollectionItem: false, optionName: "legend" },
            loadingIndicator: { isCollectionItem: false, optionName: "loadingIndicator" },
            margin: { isCollectionItem: false, optionName: "margin" },
            polarChartTitle: { isCollectionItem: false, optionName: "title" },
            series: { isCollectionItem: true, optionName: "series" },
            seriesTemplate: { isCollectionItem: false, optionName: "seriesTemplate" },
            size: { isCollectionItem: false, optionName: "size" },
            title: { isCollectionItem: false, optionName: "title" },
            tooltip: { isCollectionItem: false, optionName: "tooltip" },
            valueAxis: { isCollectionItem: false, optionName: "valueAxis" }
        };
    }
});
exports.DxPolarChart = DxPolarChart;
var DxAdaptiveLayout = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:keepLabels": null,
        "update:width": null,
    },
    props: {
        height: Number,
        keepLabels: Boolean,
        width: Number
    }
});
exports.DxAdaptiveLayout = DxAdaptiveLayout;
DxAdaptiveLayout.$_optionName = "adaptiveLayout";
var DxAnimation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:duration": null,
        "update:easing": null,
        "update:enabled": null,
        "update:maxPointCountSupported": null,
    },
    props: {
        duration: Number,
        easing: String,
        enabled: Boolean,
        maxPointCountSupported: Number
    }
});
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
var DxAnnotation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDragging": null,
        "update:angle": null,
        "update:argument": null,
        "update:arrowLength": null,
        "update:arrowWidth": null,
        "update:border": null,
        "update:color": null,
        "update:customizeTooltip": null,
        "update:data": null,
        "update:description": null,
        "update:font": null,
        "update:height": null,
        "update:image": null,
        "update:name": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:radius": null,
        "update:series": null,
        "update:shadow": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:tooltipEnabled": null,
        "update:tooltipTemplate": null,
        "update:type": null,
        "update:value": null,
        "update:width": null,
        "update:wordWrap": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        allowDragging: Boolean,
        angle: Number,
        argument: {},
        arrowLength: Number,
        arrowWidth: Number,
        border: Object,
        color: String,
        customizeTooltip: Function,
        data: {},
        description: String,
        font: Object,
        height: Number,
        image: [Object, String],
        name: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        radius: Number,
        series: String,
        shadow: Object,
        template: {},
        text: String,
        textOverflow: String,
        tooltipEnabled: Boolean,
        tooltipTemplate: {},
        type: String,
        value: {},
        width: Number,
        wordWrap: String,
        x: Number,
        y: Number
    }
});
exports.DxAnnotation = DxAnnotation;
DxAnnotation.$_optionName = "annotations";
DxAnnotation.$_isCollectionItem = true;
DxAnnotation.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    image: { isCollectionItem: false, optionName: "image" },
    shadow: { isCollectionItem: false, optionName: "shadow" }
};
var DxAnnotationBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxAnnotationBorder = DxAnnotationBorder;
DxAnnotationBorder.$_optionName = "border";
var DxArgumentAxis = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDecimals": null,
        "update:argumentType": null,
        "update:axisDivisionFactor": null,
        "update:categories": null,
        "update:color": null,
        "update:constantLines": null,
        "update:constantLineStyle": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:firstPointOnStartAngle": null,
        "update:grid": null,
        "update:hoverMode": null,
        "update:inverted": null,
        "update:label": null,
        "update:linearThreshold": null,
        "update:logarithmBase": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:minorTickCount": null,
        "update:minorTickInterval": null,
        "update:opacity": null,
        "update:originValue": null,
        "update:period": null,
        "update:startAngle": null,
        "update:strips": null,
        "update:stripStyle": null,
        "update:tick": null,
        "update:tickInterval": null,
        "update:type": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        allowDecimals: Boolean,
        argumentType: String,
        axisDivisionFactor: Number,
        categories: Array,
        color: String,
        constantLines: Array,
        constantLineStyle: Object,
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        firstPointOnStartAngle: Boolean,
        grid: Object,
        hoverMode: String,
        inverted: Boolean,
        label: Object,
        linearThreshold: Number,
        logarithmBase: Number,
        minorGrid: Object,
        minorTick: Object,
        minorTickCount: Number,
        minorTickInterval: [Number, Object, String],
        opacity: Number,
        originValue: Number,
        period: Number,
        startAngle: Number,
        strips: Array,
        stripStyle: Object,
        tick: Object,
        tickInterval: [Number, Object, String],
        type: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxArgumentAxis = DxArgumentAxis;
DxArgumentAxis.$_optionName = "argumentAxis";
DxArgumentAxis.$_expectedChildren = {
    argumentAxisMinorTick: { isCollectionItem: false, optionName: "minorTick" },
    argumentAxisTick: { isCollectionItem: false, optionName: "tick" },
    axisLabel: { isCollectionItem: false, optionName: "label" },
    constantLine: { isCollectionItem: true, optionName: "constantLines" },
    constantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    grid: { isCollectionItem: false, optionName: "grid" },
    label: { isCollectionItem: false, optionName: "label" },
    minorGrid: { isCollectionItem: false, optionName: "minorGrid" },
    minorTick: { isCollectionItem: false, optionName: "minorTick" },
    minorTickInterval: { isCollectionItem: false, optionName: "minorTickInterval" },
    strip: { isCollectionItem: true, optionName: "strips" },
    stripStyle: { isCollectionItem: false, optionName: "stripStyle" },
    tick: { isCollectionItem: false, optionName: "tick" },
    tickInterval: { isCollectionItem: false, optionName: "tickInterval" }
};
var DxArgumentAxisMinorTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:shift": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        shift: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxArgumentAxisMinorTick = DxArgumentAxisMinorTick;
DxArgumentAxisMinorTick.$_optionName = "minorTick";
var DxArgumentAxisTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:shift": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        shift: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxArgumentAxisTick = DxArgumentAxisTick;
DxArgumentAxisTick.$_optionName = "tick";
var DxArgumentFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxArgumentFormat = DxArgumentFormat;
DxArgumentFormat.$_optionName = "argumentFormat";
var DxAxisLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeHint": null,
        "update:customizeText": null,
        "update:font": null,
        "update:format": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:visible": null,
    },
    props: {
        customizeHint: Function,
        customizeText: Function,
        font: Object,
        format: [Object, Function, String],
        indentFromAxis: Number,
        overlappingBehavior: String,
        visible: Boolean
    }
});
exports.DxAxisLabel = DxAxisLabel;
DxAxisLabel.$_optionName = "label";
var DxBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxBorder = DxBorder;
DxBorder.$_optionName = "border";
var DxCommonAnnotationSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDragging": null,
        "update:angle": null,
        "update:argument": null,
        "update:arrowLength": null,
        "update:arrowWidth": null,
        "update:border": null,
        "update:color": null,
        "update:customizeTooltip": null,
        "update:data": null,
        "update:description": null,
        "update:font": null,
        "update:height": null,
        "update:image": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:radius": null,
        "update:series": null,
        "update:shadow": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:tooltipEnabled": null,
        "update:tooltipTemplate": null,
        "update:type": null,
        "update:value": null,
        "update:width": null,
        "update:wordWrap": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        allowDragging: Boolean,
        angle: Number,
        argument: {},
        arrowLength: Number,
        arrowWidth: Number,
        border: Object,
        color: String,
        customizeTooltip: Function,
        data: {},
        description: String,
        font: Object,
        height: Number,
        image: [Object, String],
        offsetX: Number,
        offsetY: Number,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        radius: Number,
        series: String,
        shadow: Object,
        template: {},
        text: String,
        textOverflow: String,
        tooltipEnabled: Boolean,
        tooltipTemplate: {},
        type: String,
        value: {},
        width: Number,
        wordWrap: String,
        x: Number,
        y: Number
    }
});
exports.DxCommonAnnotationSettings = DxCommonAnnotationSettings;
DxCommonAnnotationSettings.$_optionName = "commonAnnotationSettings";
var DxCommonAxisSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDecimals": null,
        "update:color": null,
        "update:constantLineStyle": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:grid": null,
        "update:inverted": null,
        "update:label": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:opacity": null,
        "update:stripStyle": null,
        "update:tick": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        allowDecimals: Boolean,
        color: String,
        constantLineStyle: Object,
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        grid: Object,
        inverted: Boolean,
        label: Object,
        minorGrid: Object,
        minorTick: Object,
        opacity: Number,
        stripStyle: Object,
        tick: Object,
        visible: Boolean,
        width: Number
    }
});
exports.DxCommonAxisSettings = DxCommonAxisSettings;
DxCommonAxisSettings.$_optionName = "commonAxisSettings";
DxCommonAxisSettings.$_expectedChildren = {
    commonAxisSettingsLabel: { isCollectionItem: false, optionName: "label" },
    commonAxisSettingsMinorTick: { isCollectionItem: false, optionName: "minorTick" },
    commonAxisSettingsTick: { isCollectionItem: false, optionName: "tick" },
    label: { isCollectionItem: false, optionName: "label" },
    minorTick: { isCollectionItem: false, optionName: "minorTick" },
    tick: { isCollectionItem: false, optionName: "tick" }
};
var DxCommonAxisSettingsLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        indentFromAxis: Number,
        overlappingBehavior: String,
        visible: Boolean
    }
});
exports.DxCommonAxisSettingsLabel = DxCommonAxisSettingsLabel;
DxCommonAxisSettingsLabel.$_optionName = "label";
var DxCommonAxisSettingsMinorTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxCommonAxisSettingsMinorTick = DxCommonAxisSettingsMinorTick;
DxCommonAxisSettingsMinorTick.$_optionName = "minorTick";
var DxCommonAxisSettingsTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxCommonAxisSettingsTick = DxCommonAxisSettingsTick;
DxCommonAxisSettingsTick.$_optionName = "tick";
var DxCommonSeriesSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:area": null,
        "update:argumentField": null,
        "update:axis": null,
        "update:bar": null,
        "update:barPadding": null,
        "update:barWidth": null,
        "update:border": null,
        "update:closed": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:ignoreEmptyPoints": null,
        "update:label": null,
        "update:line": null,
        "update:maxLabelCount": null,
        "update:minBarSize": null,
        "update:opacity": null,
        "update:point": null,
        "update:scatter": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:showInLegend": null,
        "update:stack": null,
        "update:stackedbar": null,
        "update:tagField": null,
        "update:type": null,
        "update:valueErrorBar": null,
        "update:valueField": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        area: {},
        argumentField: String,
        axis: String,
        bar: {},
        barPadding: Number,
        barWidth: Number,
        border: Object,
        closed: Boolean,
        color: String,
        dashStyle: String,
        hoverMode: String,
        hoverStyle: Object,
        ignoreEmptyPoints: Boolean,
        label: Object,
        line: {},
        maxLabelCount: Number,
        minBarSize: Number,
        opacity: Number,
        point: Object,
        scatter: {},
        selectionMode: String,
        selectionStyle: Object,
        showInLegend: Boolean,
        stack: String,
        stackedbar: {},
        tagField: String,
        type: String,
        valueErrorBar: Object,
        valueField: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxCommonSeriesSettings = DxCommonSeriesSettings;
DxCommonSeriesSettings.$_optionName = "commonSeriesSettings";
DxCommonSeriesSettings.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    commonSeriesSettingsHoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    commonSeriesSettingsLabel: { isCollectionItem: false, optionName: "label" },
    commonSeriesSettingsSelectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    point: { isCollectionItem: false, optionName: "point" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    seriesBorder: { isCollectionItem: false, optionName: "border" },
    valueErrorBar: { isCollectionItem: false, optionName: "valueErrorBar" }
};
var DxCommonSeriesSettingsHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        width: Number
    }
});
exports.DxCommonSeriesSettingsHoverStyle = DxCommonSeriesSettingsHoverStyle;
DxCommonSeriesSettingsHoverStyle.$_optionName = "hoverStyle";
DxCommonSeriesSettingsHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxCommonSeriesSettingsLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:font": null,
        "update:format": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:showForZeroValues": null,
        "update:visible": null,
    },
    props: {
        argumentFormat: [Object, Function, String],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeText: Function,
        displayFormat: String,
        font: Object,
        format: [Object, Function, String],
        position: String,
        rotationAngle: Number,
        showForZeroValues: Boolean,
        visible: Boolean
    }
});
exports.DxCommonSeriesSettingsLabel = DxCommonSeriesSettingsLabel;
DxCommonSeriesSettingsLabel.$_optionName = "label";
DxCommonSeriesSettingsLabel.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    connector: { isCollectionItem: false, optionName: "connector" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxCommonSeriesSettingsSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        width: Number
    }
});
exports.DxCommonSeriesSettingsSelectionStyle = DxCommonSeriesSettingsSelectionStyle;
DxCommonSeriesSettingsSelectionStyle.$_optionName = "selectionStyle";
DxCommonSeriesSettingsSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxConnector = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxConnector = DxConnector;
DxConnector.$_optionName = "connector";
var DxConstantLine = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:displayBehindSeries": null,
        "update:extendAxis": null,
        "update:label": null,
        "update:value": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        displayBehindSeries: Boolean,
        extendAxis: Boolean,
        label: Object,
        value: {},
        width: Number
    }
});
exports.DxConstantLine = DxConstantLine;
DxConstantLine.$_optionName = "constantLines";
DxConstantLine.$_isCollectionItem = true;
var DxConstantLineLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        text: String,
        visible: Boolean
    }
});
exports.DxConstantLineLabel = DxConstantLineLabel;
DxConstantLineLabel.$_optionName = "label";
var DxConstantLineStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        width: Number
    }
});
exports.DxConstantLineStyle = DxConstantLineStyle;
DxConstantLineStyle.$_optionName = "constantLineStyle";
DxConstantLineStyle.$_expectedChildren = {
    constantLineStyleLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" }
};
var DxConstantLineStyleLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        visible: Boolean
    }
});
exports.DxConstantLineStyleLabel = DxConstantLineStyleLabel;
DxConstantLineStyleLabel.$_optionName = "label";
var DxDataPrepareSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:checkTypeForAllData": null,
        "update:convertToAxisDataType": null,
        "update:sortingMethod": null,
    },
    props: {
        checkTypeForAllData: Boolean,
        convertToAxisDataType: Boolean,
        sortingMethod: [Boolean, Function]
    }
});
exports.DxDataPrepareSettings = DxDataPrepareSettings;
DxDataPrepareSettings.$_optionName = "dataPrepareSettings";
var DxExport = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:fileName": null,
        "update:formats": null,
        "update:margin": null,
        "update:printingEnabled": null,
        "update:proxyUrl": null,
        "update:svgToCanvas": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        fileName: String,
        formats: Array,
        margin: Number,
        printingEnabled: Boolean,
        proxyUrl: String,
        svgToCanvas: Function
    }
});
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
var DxFont = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:family": null,
        "update:opacity": null,
        "update:size": null,
        "update:weight": null,
    },
    props: {
        color: String,
        family: String,
        opacity: Number,
        size: [Number, String],
        weight: Number
    }
});
exports.DxFont = DxFont;
DxFont.$_optionName = "font";
var DxFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
var DxGrid = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxGrid = DxGrid;
DxGrid.$_optionName = "grid";
var DxHatching = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:direction": null,
        "update:opacity": null,
        "update:step": null,
        "update:width": null,
    },
    props: {
        direction: String,
        opacity: Number,
        step: Number,
        width: Number
    }
});
exports.DxHatching = DxHatching;
DxHatching.$_optionName = "hatching";
var DxHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:size": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        size: Number,
        width: Number
    }
});
exports.DxHoverStyle = DxHoverStyle;
DxHoverStyle.$_optionName = "hoverStyle";
var DxImage = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: Number,
        url: String,
        width: Number
    }
});
exports.DxImage = DxImage;
DxImage.$_optionName = "image";
var DxLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeHint": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:font": null,
        "update:format": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:showForZeroValues": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        argumentFormat: [Object, Function, String],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeHint: Function,
        customizeText: Function,
        displayFormat: String,
        font: Object,
        format: [Object, Function, String],
        indentFromAxis: Number,
        overlappingBehavior: String,
        position: String,
        rotationAngle: Number,
        showForZeroValues: Boolean,
        text: String,
        visible: Boolean
    }
});
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
var DxLegend = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:columnCount": null,
        "update:columnItemSpacing": null,
        "update:customizeHint": null,
        "update:customizeItems": null,
        "update:customizeText": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:hoverMode": null,
        "update:itemsAlignment": null,
        "update:itemTextPosition": null,
        "update:margin": null,
        "update:markerSize": null,
        "update:markerTemplate": null,
        "update:orientation": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:rowCount": null,
        "update:rowItemSpacing": null,
        "update:title": null,
        "update:verticalAlignment": null,
        "update:visible": null,
    },
    props: {
        backgroundColor: String,
        border: Object,
        columnCount: Number,
        columnItemSpacing: Number,
        customizeHint: Function,
        customizeItems: Function,
        customizeText: Function,
        font: Object,
        horizontalAlignment: String,
        hoverMode: String,
        itemsAlignment: String,
        itemTextPosition: String,
        margin: [Number, Object],
        markerSize: Number,
        markerTemplate: {},
        orientation: String,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        rowCount: Number,
        rowItemSpacing: Number,
        title: [Object, String],
        verticalAlignment: String,
        visible: Boolean
    }
});
exports.DxLegend = DxLegend;
DxLegend.$_optionName = "legend";
DxLegend.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    legendTitle: { isCollectionItem: false, optionName: "title" },
    margin: { isCollectionItem: false, optionName: "margin" },
    title: { isCollectionItem: false, optionName: "title" }
};
var DxLegendTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:verticalAlignment": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: Object,
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        verticalAlignment: String
    }
});
exports.DxLegendTitle = DxLegendTitle;
DxLegendTitle.$_optionName = "title";
DxLegendTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    legendTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxLegendTitleSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String
    }
});
exports.DxLegendTitleSubtitle = DxLegendTitleSubtitle;
DxLegendTitleSubtitle.$_optionName = "subtitle";
DxLegendTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxLength = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxLength = DxLength;
DxLength.$_optionName = "length";
var DxLoadingIndicator = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:font": null,
        "update:show": null,
        "update:text": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        font: Object,
        show: Boolean,
        text: String
    }
});
exports.DxLoadingIndicator = DxLoadingIndicator;
DxLoadingIndicator.$_optionName = "loadingIndicator";
DxLoadingIndicator.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxMargin = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:left": null,
        "update:right": null,
        "update:top": null,
    },
    props: {
        bottom: Number,
        left: Number,
        right: Number,
        top: Number
    }
});
exports.DxMargin = DxMargin;
DxMargin.$_optionName = "margin";
var DxMinorGrid = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxMinorGrid = DxMinorGrid;
DxMinorGrid.$_optionName = "minorGrid";
var DxMinorTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:shift": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        shift: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxMinorTick = DxMinorTick;
DxMinorTick.$_optionName = "minorTick";
var DxMinorTickInterval = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxMinorTickInterval = DxMinorTickInterval;
DxMinorTickInterval.$_optionName = "minorTickInterval";
var DxMinVisualRangeLength = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxMinVisualRangeLength = DxMinVisualRangeLength;
DxMinVisualRangeLength.$_optionName = "minVisualRangeLength";
var DxPoint = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:image": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:size": null,
        "update:symbol": null,
        "update:visible": null,
    },
    props: {
        border: Object,
        color: String,
        hoverMode: String,
        hoverStyle: Object,
        image: [Object, String],
        selectionMode: String,
        selectionStyle: Object,
        size: Number,
        symbol: String,
        visible: Boolean
    }
});
exports.DxPoint = DxPoint;
DxPoint.$_optionName = "point";
DxPoint.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    image: { isCollectionItem: false, optionName: "image" },
    pointBorder: { isCollectionItem: false, optionName: "border" },
    pointHoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    pointSelectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" }
};
var DxPointBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxPointBorder = DxPointBorder;
DxPointBorder.$_optionName = "border";
var DxPointHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:size": null,
    },
    props: {
        border: Object,
        color: String,
        size: Number
    }
});
exports.DxPointHoverStyle = DxPointHoverStyle;
DxPointHoverStyle.$_optionName = "hoverStyle";
DxPointHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    pointBorder: { isCollectionItem: false, optionName: "border" }
};
var DxPointSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:size": null,
    },
    props: {
        border: Object,
        color: String,
        size: Number
    }
});
exports.DxPointSelectionStyle = DxPointSelectionStyle;
DxPointSelectionStyle.$_optionName = "selectionStyle";
DxPointSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    pointBorder: { isCollectionItem: false, optionName: "border" }
};
var DxPolarChartTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxPolarChartTitle = DxPolarChartTitle;
DxPolarChartTitle.$_optionName = "title";
DxPolarChartTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    margin: { isCollectionItem: false, optionName: "margin" },
    polarChartTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxPolarChartTitleSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxPolarChartTitleSubtitle = DxPolarChartTitleSubtitle;
DxPolarChartTitleSubtitle.$_optionName = "subtitle";
DxPolarChartTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:size": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        size: Number,
        width: Number
    }
});
exports.DxSelectionStyle = DxSelectionStyle;
DxSelectionStyle.$_optionName = "selectionStyle";
var DxSeries = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentField": null,
        "update:axis": null,
        "update:barPadding": null,
        "update:barWidth": null,
        "update:border": null,
        "update:closed": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:ignoreEmptyPoints": null,
        "update:label": null,
        "update:maxLabelCount": null,
        "update:minBarSize": null,
        "update:name": null,
        "update:opacity": null,
        "update:point": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:showInLegend": null,
        "update:stack": null,
        "update:tag": null,
        "update:tagField": null,
        "update:type": null,
        "update:valueErrorBar": null,
        "update:valueField": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        argumentField: String,
        axis: String,
        barPadding: Number,
        barWidth: Number,
        border: Object,
        closed: Boolean,
        color: String,
        dashStyle: String,
        hoverMode: String,
        hoverStyle: Object,
        ignoreEmptyPoints: Boolean,
        label: Object,
        maxLabelCount: Number,
        minBarSize: Number,
        name: String,
        opacity: Number,
        point: Object,
        selectionMode: String,
        selectionStyle: Object,
        showInLegend: Boolean,
        stack: String,
        tag: {},
        tagField: String,
        type: String,
        valueErrorBar: Object,
        valueField: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxSeries = DxSeries;
DxSeries.$_optionName = "series";
DxSeries.$_isCollectionItem = true;
var DxSeriesBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxSeriesBorder = DxSeriesBorder;
DxSeriesBorder.$_optionName = "border";
var DxSeriesTemplate = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeSeries": null,
        "update:nameField": null,
    },
    props: {
        customizeSeries: Function,
        nameField: String
    }
});
exports.DxSeriesTemplate = DxSeriesTemplate;
DxSeriesTemplate.$_optionName = "seriesTemplate";
var DxShadow = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:blur": null,
        "update:color": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
    },
    props: {
        blur: Number,
        color: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number
    }
});
exports.DxShadow = DxShadow;
DxShadow.$_optionName = "shadow";
var DxSize = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:width": null,
    },
    props: {
        height: Number,
        width: Number
    }
});
exports.DxSize = DxSize;
DxSize.$_optionName = "size";
var DxStrip = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:endValue": null,
        "update:label": null,
        "update:startValue": null,
    },
    props: {
        color: String,
        endValue: {},
        label: Object,
        startValue: {}
    }
});
exports.DxStrip = DxStrip;
DxStrip.$_optionName = "strips";
DxStrip.$_isCollectionItem = true;
var DxStripLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:text": null,
    },
    props: {
        font: Object,
        text: String
    }
});
exports.DxStripLabel = DxStripLabel;
DxStripLabel.$_optionName = "label";
var DxStripStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:label": null,
    },
    props: {
        label: Object
    }
});
exports.DxStripStyle = DxStripStyle;
DxStripStyle.$_optionName = "stripStyle";
DxStripStyle.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" },
    stripStyleLabel: { isCollectionItem: false, optionName: "label" }
};
var DxStripStyleLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
    },
    props: {
        font: Object
    }
});
exports.DxStripStyleLabel = DxStripStyleLabel;
DxStripStyleLabel.$_optionName = "label";
var DxSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxSubtitle = DxSubtitle;
DxSubtitle.$_optionName = "subtitle";
var DxTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:shift": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        shift: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxTick = DxTick;
DxTick.$_optionName = "tick";
var DxTickInterval = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxTickInterval = DxTickInterval;
DxTickInterval.$_optionName = "tickInterval";
var DxTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: Object,
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxTitle = DxTitle;
DxTitle.$_optionName = "title";
var DxTooltip = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentFormat": null,
        "update:arrowLength": null,
        "update:border": null,
        "update:color": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:cornerRadius": null,
        "update:customizeTooltip": null,
        "update:enabled": null,
        "update:font": null,
        "update:format": null,
        "update:interactive": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:shadow": null,
        "update:shared": null,
        "update:zIndex": null,
    },
    props: {
        argumentFormat: [Object, Function, String],
        arrowLength: Number,
        border: Object,
        color: String,
        container: {},
        contentTemplate: {},
        cornerRadius: Number,
        customizeTooltip: Function,
        enabled: Boolean,
        font: Object,
        format: [Object, Function, String],
        interactive: Boolean,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        shadow: Object,
        shared: Boolean,
        zIndex: Number
    }
});
exports.DxTooltip = DxTooltip;
DxTooltip.$_optionName = "tooltip";
DxTooltip.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    shadow: { isCollectionItem: false, optionName: "shadow" },
    tooltipBorder: { isCollectionItem: false, optionName: "border" }
};
var DxTooltipBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxTooltipBorder = DxTooltipBorder;
DxTooltipBorder.$_optionName = "border";
var DxValueAxis = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDecimals": null,
        "update:axisDivisionFactor": null,
        "update:categories": null,
        "update:color": null,
        "update:constantLines": null,
        "update:constantLineStyle": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:grid": null,
        "update:inverted": null,
        "update:label": null,
        "update:linearThreshold": null,
        "update:logarithmBase": null,
        "update:maxValueMargin": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:minorTickCount": null,
        "update:minorTickInterval": null,
        "update:minValueMargin": null,
        "update:minVisualRangeLength": null,
        "update:opacity": null,
        "update:showZero": null,
        "update:strips": null,
        "update:stripStyle": null,
        "update:tick": null,
        "update:tickInterval": null,
        "update:type": null,
        "update:valueMarginsEnabled": null,
        "update:valueType": null,
        "update:visible": null,
        "update:visualRange": null,
        "update:visualRangeUpdateMode": null,
        "update:wholeRange": null,
        "update:width": null,
    },
    props: {
        allowDecimals: Boolean,
        axisDivisionFactor: Number,
        categories: Array,
        color: String,
        constantLines: Array,
        constantLineStyle: Object,
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        grid: Object,
        inverted: Boolean,
        label: Object,
        linearThreshold: Number,
        logarithmBase: Number,
        maxValueMargin: Number,
        minorGrid: Object,
        minorTick: Object,
        minorTickCount: Number,
        minorTickInterval: [Number, Object, String],
        minValueMargin: Number,
        minVisualRangeLength: [Number, Object, String],
        opacity: Number,
        showZero: Boolean,
        strips: Array,
        stripStyle: Object,
        tick: Object,
        tickInterval: [Number, Object, String],
        type: String,
        valueMarginsEnabled: Boolean,
        valueType: String,
        visible: Boolean,
        visualRange: [Array, Object],
        visualRangeUpdateMode: String,
        wholeRange: [Array, Object],
        width: Number
    }
});
exports.DxValueAxis = DxValueAxis;
DxValueAxis.$_optionName = "valueAxis";
DxValueAxis.$_expectedChildren = {
    axisLabel: { isCollectionItem: false, optionName: "label" },
    commonAxisSettingsTick: { isCollectionItem: false, optionName: "tick" },
    constantLine: { isCollectionItem: true, optionName: "constantLines" },
    label: { isCollectionItem: false, optionName: "label" },
    minorTickInterval: { isCollectionItem: false, optionName: "minorTickInterval" },
    minVisualRangeLength: { isCollectionItem: false, optionName: "minVisualRangeLength" },
    strip: { isCollectionItem: true, optionName: "strips" },
    tick: { isCollectionItem: false, optionName: "tick" },
    tickInterval: { isCollectionItem: false, optionName: "tickInterval" },
    visualRange: { isCollectionItem: false, optionName: "visualRange" },
    wholeRange: { isCollectionItem: false, optionName: "wholeRange" }
};
var DxValueErrorBar = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:displayMode": null,
        "update:edgeLength": null,
        "update:highValueField": null,
        "update:lineWidth": null,
        "update:lowValueField": null,
        "update:opacity": null,
        "update:type": null,
        "update:value": null,
    },
    props: {
        color: String,
        displayMode: String,
        edgeLength: Number,
        highValueField: String,
        lineWidth: Number,
        lowValueField: String,
        opacity: Number,
        type: String,
        value: Number
    }
});
exports.DxValueErrorBar = DxValueErrorBar;
DxValueErrorBar.$_optionName = "valueErrorBar";
var DxVisualRange = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:length": null,
        "update:startValue": null,
    },
    props: {
        endValue: {},
        length: [Number, Object, String],
        startValue: {}
    }
});
exports.DxVisualRange = DxVisualRange;
DxVisualRange.$_optionName = "visualRange";
DxVisualRange.$_expectedChildren = {
    length: { isCollectionItem: false, optionName: "length" }
};
var DxWholeRange = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:length": null,
        "update:startValue": null,
    },
    props: {
        endValue: {},
        length: [Number, Object, String],
        startValue: {}
    }
});
exports.DxWholeRange = DxWholeRange;
DxWholeRange.$_optionName = "wholeRange";
exports.default = DxPolarChart;
