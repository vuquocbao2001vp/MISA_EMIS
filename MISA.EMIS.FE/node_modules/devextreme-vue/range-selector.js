/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxSliderHandle = exports.DxSize = exports.DxShutter = exports.DxSeriesTemplate = exports.DxSeriesBorder = exports.DxSeries = exports.DxSelectionStyle = exports.DxScaleLabel = exports.DxScale = exports.DxReduction = exports.DxPointSelectionStyle = exports.DxPointImage = exports.DxPointHoverStyle = exports.DxPointBorder = exports.DxPoint = exports.DxMinRange = exports.DxMinorTickInterval = exports.DxMinorTick = exports.DxMaxRange = exports.DxMarkerLabel = exports.DxMarker = exports.DxMargin = exports.DxLoadingIndicator = exports.DxLength = exports.DxLabel = exports.DxIndent = exports.DxImage = exports.DxHoverStyle = exports.DxHeight = exports.DxHatching = exports.DxFormat = exports.DxFont = exports.DxExport = exports.DxDataPrepareSettings = exports.DxConnector = exports.DxCommonSeriesSettingsSelectionStyle = exports.DxCommonSeriesSettingsLabel = exports.DxCommonSeriesSettingsHoverStyle = exports.DxCommonSeriesSettings = exports.DxChart = exports.DxBreakStyle = exports.DxBreak = exports.DxBorder = exports.DxBehavior = exports.DxBackgroundImage = exports.DxBackground = exports.DxArgumentFormat = exports.DxAggregationInterval = exports.DxAggregation = exports.DxRangeSelector = void 0;
exports.DxWidth = exports.DxValueErrorBar = exports.DxValueAxis = exports.DxValue = exports.DxUrl = exports.DxTitle = exports.DxTickInterval = exports.DxTick = exports.DxSubtitle = exports.DxSliderMarker = void 0;
var range_selector_1 = __importDefault(require("devextreme/viz/range_selector"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxRangeSelector = index_1.createComponent({
    props: {
        background: Object,
        behavior: Object,
        chart: Object,
        containerBackgroundColor: String,
        dataSource: {},
        dataSourceField: String,
        disabled: Boolean,
        elementAttr: Object,
        export: Object,
        indent: Object,
        loadingIndicator: Object,
        margin: Object,
        onDisposing: Function,
        onDrawn: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onIncidentOccurred: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        pathModified: Boolean,
        redrawOnResize: Boolean,
        rtlEnabled: Boolean,
        scale: Object,
        selectedRangeColor: String,
        selectedRangeUpdateMode: String,
        shutter: Object,
        size: Object,
        sliderHandle: Object,
        sliderMarker: Object,
        theme: String,
        title: [Object, String],
        value: [Array, Object]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:background": null,
        "update:behavior": null,
        "update:chart": null,
        "update:containerBackgroundColor": null,
        "update:dataSource": null,
        "update:dataSourceField": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:export": null,
        "update:indent": null,
        "update:loadingIndicator": null,
        "update:margin": null,
        "update:onDisposing": null,
        "update:onDrawn": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onIncidentOccurred": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onValueChanged": null,
        "update:pathModified": null,
        "update:redrawOnResize": null,
        "update:rtlEnabled": null,
        "update:scale": null,
        "update:selectedRangeColor": null,
        "update:selectedRangeUpdateMode": null,
        "update:shutter": null,
        "update:size": null,
        "update:sliderHandle": null,
        "update:sliderMarker": null,
        "update:theme": null,
        "update:title": null,
        "update:value": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = range_selector_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            background: { isCollectionItem: false, optionName: "background" },
            behavior: { isCollectionItem: false, optionName: "behavior" },
            chart: { isCollectionItem: false, optionName: "chart" },
            export: { isCollectionItem: false, optionName: "export" },
            indent: { isCollectionItem: false, optionName: "indent" },
            loadingIndicator: { isCollectionItem: false, optionName: "loadingIndicator" },
            margin: { isCollectionItem: false, optionName: "margin" },
            scale: { isCollectionItem: false, optionName: "scale" },
            shutter: { isCollectionItem: false, optionName: "shutter" },
            size: { isCollectionItem: false, optionName: "size" },
            sliderHandle: { isCollectionItem: false, optionName: "sliderHandle" },
            sliderMarker: { isCollectionItem: false, optionName: "sliderMarker" },
            title: { isCollectionItem: false, optionName: "title" },
            value: { isCollectionItem: false, optionName: "value" }
        };
    }
});
exports.DxRangeSelector = DxRangeSelector;
var DxAggregation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculate": null,
        "update:enabled": null,
        "update:method": null,
    },
    props: {
        calculate: Function,
        enabled: Boolean,
        method: String
    }
});
exports.DxAggregation = DxAggregation;
DxAggregation.$_optionName = "aggregation";
var DxAggregationInterval = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxAggregationInterval = DxAggregationInterval;
DxAggregationInterval.$_optionName = "aggregationInterval";
var DxArgumentFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxArgumentFormat = DxArgumentFormat;
DxArgumentFormat.$_optionName = "argumentFormat";
var DxBackground = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:image": null,
        "update:visible": null,
    },
    props: {
        color: String,
        image: Object,
        visible: Boolean
    }
});
exports.DxBackground = DxBackground;
DxBackground.$_optionName = "background";
DxBackground.$_expectedChildren = {
    backgroundImage: { isCollectionItem: false, optionName: "image" },
    image: { isCollectionItem: false, optionName: "image" }
};
var DxBackgroundImage = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:location": null,
        "update:url": null,
    },
    props: {
        location: String,
        url: String
    }
});
exports.DxBackgroundImage = DxBackgroundImage;
DxBackgroundImage.$_optionName = "image";
var DxBehavior = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSlidersSwap": null,
        "update:animationEnabled": null,
        "update:callValueChanged": null,
        "update:manualRangeSelectionEnabled": null,
        "update:moveSelectedRangeByClick": null,
        "update:snapToTicks": null,
    },
    props: {
        allowSlidersSwap: Boolean,
        animationEnabled: Boolean,
        callValueChanged: String,
        manualRangeSelectionEnabled: Boolean,
        moveSelectedRangeByClick: Boolean,
        snapToTicks: Boolean
    }
});
exports.DxBehavior = DxBehavior;
DxBehavior.$_optionName = "behavior";
var DxBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxBorder = DxBorder;
DxBorder.$_optionName = "border";
var DxBreak = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:startValue": null,
    },
    props: {
        endValue: {},
        startValue: {}
    }
});
exports.DxBreak = DxBreak;
DxBreak.$_optionName = "breaks";
DxBreak.$_isCollectionItem = true;
var DxBreakStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:line": null,
        "update:width": null,
    },
    props: {
        color: String,
        line: String,
        width: Number
    }
});
exports.DxBreakStyle = DxBreakStyle;
DxBreakStyle.$_optionName = "breakStyle";
var DxChart = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:barGroupPadding": null,
        "update:barGroupWidth": null,
        "update:bottomIndent": null,
        "update:commonSeriesSettings": null,
        "update:dataPrepareSettings": null,
        "update:maxBubbleSize": null,
        "update:minBubbleSize": null,
        "update:negativesAsZeroes": null,
        "update:palette": null,
        "update:paletteExtensionMode": null,
        "update:series": null,
        "update:seriesTemplate": null,
        "update:topIndent": null,
        "update:valueAxis": null,
    },
    props: {
        barGroupPadding: Number,
        barGroupWidth: Number,
        bottomIndent: Number,
        commonSeriesSettings: Object,
        dataPrepareSettings: Object,
        maxBubbleSize: Number,
        minBubbleSize: Number,
        negativesAsZeroes: Boolean,
        palette: [Array, String],
        paletteExtensionMode: String,
        series: [Array, Object],
        seriesTemplate: Object,
        topIndent: Number,
        valueAxis: Object
    }
});
exports.DxChart = DxChart;
DxChart.$_optionName = "chart";
DxChart.$_expectedChildren = {
    commonSeriesSettings: { isCollectionItem: false, optionName: "commonSeriesSettings" },
    dataPrepareSettings: { isCollectionItem: false, optionName: "dataPrepareSettings" },
    series: { isCollectionItem: true, optionName: "series" },
    seriesTemplate: { isCollectionItem: false, optionName: "seriesTemplate" },
    valueAxis: { isCollectionItem: false, optionName: "valueAxis" }
};
var DxCommonSeriesSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregation": null,
        "update:area": null,
        "update:argumentField": null,
        "update:axis": null,
        "update:bar": null,
        "update:barOverlapGroup": null,
        "update:barPadding": null,
        "update:barWidth": null,
        "update:border": null,
        "update:bubble": null,
        "update:candlestick": null,
        "update:closeValueField": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:fullstackedarea": null,
        "update:fullstackedbar": null,
        "update:fullstackedline": null,
        "update:fullstackedspline": null,
        "update:fullstackedsplinearea": null,
        "update:highValueField": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:ignoreEmptyPoints": null,
        "update:innerColor": null,
        "update:label": null,
        "update:line": null,
        "update:lowValueField": null,
        "update:maxLabelCount": null,
        "update:minBarSize": null,
        "update:opacity": null,
        "update:openValueField": null,
        "update:pane": null,
        "update:point": null,
        "update:rangearea": null,
        "update:rangebar": null,
        "update:rangeValue1Field": null,
        "update:rangeValue2Field": null,
        "update:reduction": null,
        "update:scatter": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:showInLegend": null,
        "update:sizeField": null,
        "update:spline": null,
        "update:splinearea": null,
        "update:stack": null,
        "update:stackedarea": null,
        "update:stackedbar": null,
        "update:stackedline": null,
        "update:stackedspline": null,
        "update:stackedsplinearea": null,
        "update:steparea": null,
        "update:stepline": null,
        "update:stock": null,
        "update:tagField": null,
        "update:type": null,
        "update:valueErrorBar": null,
        "update:valueField": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        aggregation: Object,
        area: {},
        argumentField: String,
        axis: String,
        bar: {},
        barOverlapGroup: String,
        barPadding: Number,
        barWidth: Number,
        border: Object,
        bubble: {},
        candlestick: {},
        closeValueField: String,
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        fullstackedarea: {},
        fullstackedbar: {},
        fullstackedline: {},
        fullstackedspline: {},
        fullstackedsplinearea: {},
        highValueField: String,
        hoverMode: String,
        hoverStyle: Object,
        ignoreEmptyPoints: Boolean,
        innerColor: String,
        label: Object,
        line: {},
        lowValueField: String,
        maxLabelCount: Number,
        minBarSize: Number,
        opacity: Number,
        openValueField: String,
        pane: String,
        point: Object,
        rangearea: {},
        rangebar: {},
        rangeValue1Field: String,
        rangeValue2Field: String,
        reduction: Object,
        scatter: {},
        selectionMode: String,
        selectionStyle: Object,
        showInLegend: Boolean,
        sizeField: String,
        spline: {},
        splinearea: {},
        stack: String,
        stackedarea: {},
        stackedbar: {},
        stackedline: {},
        stackedspline: {},
        stackedsplinearea: {},
        steparea: {},
        stepline: {},
        stock: {},
        tagField: String,
        type: String,
        valueErrorBar: Object,
        valueField: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxCommonSeriesSettings = DxCommonSeriesSettings;
DxCommonSeriesSettings.$_optionName = "commonSeriesSettings";
DxCommonSeriesSettings.$_expectedChildren = {
    aggregation: { isCollectionItem: false, optionName: "aggregation" },
    border: { isCollectionItem: false, optionName: "border" },
    commonSeriesSettingsHoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    commonSeriesSettingsLabel: { isCollectionItem: false, optionName: "label" },
    commonSeriesSettingsSelectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    point: { isCollectionItem: false, optionName: "point" },
    reduction: { isCollectionItem: false, optionName: "reduction" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    seriesBorder: { isCollectionItem: false, optionName: "border" },
    valueErrorBar: { isCollectionItem: false, optionName: "valueErrorBar" }
};
var DxCommonSeriesSettingsHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        width: Number
    }
});
exports.DxCommonSeriesSettingsHoverStyle = DxCommonSeriesSettingsHoverStyle;
DxCommonSeriesSettingsHoverStyle.$_optionName = "hoverStyle";
DxCommonSeriesSettingsHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxCommonSeriesSettingsLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:font": null,
        "update:format": null,
        "update:horizontalOffset": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:showForZeroValues": null,
        "update:verticalOffset": null,
        "update:visible": null,
    },
    props: {
        alignment: String,
        argumentFormat: [Object, Function, String],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeText: Function,
        displayFormat: String,
        font: Object,
        format: [Object, Function, String],
        horizontalOffset: Number,
        position: String,
        rotationAngle: Number,
        showForZeroValues: Boolean,
        verticalOffset: Number,
        visible: Boolean
    }
});
exports.DxCommonSeriesSettingsLabel = DxCommonSeriesSettingsLabel;
DxCommonSeriesSettingsLabel.$_optionName = "label";
DxCommonSeriesSettingsLabel.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    connector: { isCollectionItem: false, optionName: "connector" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxCommonSeriesSettingsSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        width: Number
    }
});
exports.DxCommonSeriesSettingsSelectionStyle = DxCommonSeriesSettingsSelectionStyle;
DxCommonSeriesSettingsSelectionStyle.$_optionName = "selectionStyle";
DxCommonSeriesSettingsSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxConnector = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxConnector = DxConnector;
DxConnector.$_optionName = "connector";
var DxDataPrepareSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:checkTypeForAllData": null,
        "update:convertToAxisDataType": null,
        "update:sortingMethod": null,
    },
    props: {
        checkTypeForAllData: Boolean,
        convertToAxisDataType: Boolean,
        sortingMethod: [Boolean, Function]
    }
});
exports.DxDataPrepareSettings = DxDataPrepareSettings;
DxDataPrepareSettings.$_optionName = "dataPrepareSettings";
var DxExport = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:fileName": null,
        "update:formats": null,
        "update:margin": null,
        "update:printingEnabled": null,
        "update:proxyUrl": null,
        "update:svgToCanvas": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        fileName: String,
        formats: Array,
        margin: Number,
        printingEnabled: Boolean,
        proxyUrl: String,
        svgToCanvas: Function
    }
});
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
var DxFont = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:family": null,
        "update:opacity": null,
        "update:size": null,
        "update:weight": null,
    },
    props: {
        color: String,
        family: String,
        opacity: Number,
        size: [Number, String],
        weight: Number
    }
});
exports.DxFont = DxFont;
DxFont.$_optionName = "font";
var DxFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
var DxHatching = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:direction": null,
        "update:opacity": null,
        "update:step": null,
        "update:width": null,
    },
    props: {
        direction: String,
        opacity: Number,
        step: Number,
        width: Number
    }
});
exports.DxHatching = DxHatching;
DxHatching.$_optionName = "hatching";
var DxHeight = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: Number,
        rangeMinPoint: Number
    }
});
exports.DxHeight = DxHeight;
DxHeight.$_optionName = "height";
var DxHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:size": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        size: Number,
        width: Number
    }
});
exports.DxHoverStyle = DxHoverStyle;
DxHoverStyle.$_optionName = "hoverStyle";
var DxImage = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:location": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: [Number, Object],
        location: String,
        url: String,
        width: [Number, Object]
    }
});
exports.DxImage = DxImage;
DxImage.$_optionName = "image";
var DxIndent = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:right": null,
    },
    props: {
        left: Number,
        right: Number
    }
});
exports.DxIndent = DxIndent;
DxIndent.$_optionName = "indent";
var DxLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:font": null,
        "update:format": null,
        "update:horizontalOffset": null,
        "update:overlappingBehavior": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:showForZeroValues": null,
        "update:topIndent": null,
        "update:verticalOffset": null,
        "update:visible": null,
    },
    props: {
        alignment: String,
        argumentFormat: [Object, Function, String],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeText: Function,
        displayFormat: String,
        font: Object,
        format: [Object, Function, String],
        horizontalOffset: Number,
        overlappingBehavior: String,
        position: String,
        rotationAngle: Number,
        showForZeroValues: Boolean,
        topIndent: Number,
        verticalOffset: Number,
        visible: Boolean
    }
});
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
var DxLength = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxLength = DxLength;
DxLength.$_optionName = "length";
var DxLoadingIndicator = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:font": null,
        "update:show": null,
        "update:text": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        font: Object,
        show: Boolean,
        text: String
    }
});
exports.DxLoadingIndicator = DxLoadingIndicator;
DxLoadingIndicator.$_optionName = "loadingIndicator";
DxLoadingIndicator.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxMargin = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:left": null,
        "update:right": null,
        "update:top": null,
    },
    props: {
        bottom: Number,
        left: Number,
        right: Number,
        top: Number
    }
});
exports.DxMargin = DxMargin;
DxMargin.$_optionName = "margin";
var DxMarker = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:label": null,
        "update:separatorHeight": null,
        "update:textLeftIndent": null,
        "update:textTopIndent": null,
        "update:topIndent": null,
        "update:visible": null,
    },
    props: {
        label: Object,
        separatorHeight: Number,
        textLeftIndent: Number,
        textTopIndent: Number,
        topIndent: Number,
        visible: Boolean
    }
});
exports.DxMarker = DxMarker;
DxMarker.$_optionName = "marker";
DxMarker.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" },
    markerLabel: { isCollectionItem: false, optionName: "label" }
};
var DxMarkerLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeText": null,
        "update:format": null,
    },
    props: {
        customizeText: Function,
        format: [Object, Function, String]
    }
});
exports.DxMarkerLabel = DxMarkerLabel;
DxMarkerLabel.$_optionName = "label";
DxMarkerLabel.$_expectedChildren = {
    format: { isCollectionItem: false, optionName: "format" }
};
var DxMaxRange = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxMaxRange = DxMaxRange;
DxMaxRange.$_optionName = "maxRange";
var DxMinorTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxMinorTick = DxMinorTick;
DxMinorTick.$_optionName = "minorTick";
var DxMinorTickInterval = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxMinorTickInterval = DxMinorTickInterval;
DxMinorTickInterval.$_optionName = "minorTickInterval";
var DxMinRange = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxMinRange = DxMinRange;
DxMinRange.$_optionName = "minRange";
var DxPoint = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:image": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:size": null,
        "update:symbol": null,
        "update:visible": null,
    },
    props: {
        border: Object,
        color: String,
        hoverMode: String,
        hoverStyle: Object,
        image: [Object, String],
        selectionMode: String,
        selectionStyle: Object,
        size: Number,
        symbol: String,
        visible: Boolean
    }
});
exports.DxPoint = DxPoint;
DxPoint.$_optionName = "point";
DxPoint.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    image: { isCollectionItem: false, optionName: "image" },
    pointBorder: { isCollectionItem: false, optionName: "border" },
    pointHoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    pointImage: { isCollectionItem: false, optionName: "image" },
    pointSelectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" }
};
var DxPointBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxPointBorder = DxPointBorder;
DxPointBorder.$_optionName = "border";
var DxPointHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:size": null,
    },
    props: {
        border: Object,
        color: String,
        size: Number
    }
});
exports.DxPointHoverStyle = DxPointHoverStyle;
DxPointHoverStyle.$_optionName = "hoverStyle";
DxPointHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    pointBorder: { isCollectionItem: false, optionName: "border" }
};
var DxPointImage = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: [Number, Object],
        url: [Object, String],
        width: [Number, Object]
    }
});
exports.DxPointImage = DxPointImage;
DxPointImage.$_optionName = "image";
DxPointImage.$_expectedChildren = {
    height: { isCollectionItem: false, optionName: "height" },
    url: { isCollectionItem: false, optionName: "url" },
    width: { isCollectionItem: false, optionName: "width" }
};
var DxPointSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:size": null,
    },
    props: {
        border: Object,
        color: String,
        size: Number
    }
});
exports.DxPointSelectionStyle = DxPointSelectionStyle;
DxPointSelectionStyle.$_optionName = "selectionStyle";
DxPointSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    pointBorder: { isCollectionItem: false, optionName: "border" }
};
var DxReduction = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:level": null,
    },
    props: {
        color: String,
        level: String
    }
});
exports.DxReduction = DxReduction;
DxReduction.$_optionName = "reduction";
var DxScale = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregateByCategory": null,
        "update:aggregationGroupWidth": null,
        "update:aggregationInterval": null,
        "update:allowDecimals": null,
        "update:breaks": null,
        "update:breakStyle": null,
        "update:categories": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:endValue": null,
        "update:holidays": null,
        "update:label": null,
        "update:linearThreshold": null,
        "update:logarithmBase": null,
        "update:marker": null,
        "update:maxRange": null,
        "update:minorTick": null,
        "update:minorTickCount": null,
        "update:minorTickInterval": null,
        "update:minRange": null,
        "update:placeholderHeight": null,
        "update:showCustomBoundaryTicks": null,
        "update:singleWorkdays": null,
        "update:startValue": null,
        "update:tick": null,
        "update:tickInterval": null,
        "update:type": null,
        "update:valueType": null,
        "update:workdaysOnly": null,
        "update:workWeek": null,
    },
    props: {
        aggregateByCategory: Boolean,
        aggregationGroupWidth: Number,
        aggregationInterval: [Number, Object, String],
        allowDecimals: Boolean,
        breaks: Array,
        breakStyle: Object,
        categories: Array,
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        endValue: {},
        holidays: Array,
        label: Object,
        linearThreshold: Number,
        logarithmBase: Number,
        marker: Object,
        maxRange: [Number, Object, String],
        minorTick: Object,
        minorTickCount: Number,
        minorTickInterval: [Number, Object, String],
        minRange: [Number, Object, String],
        placeholderHeight: Number,
        showCustomBoundaryTicks: Boolean,
        singleWorkdays: Array,
        startValue: {},
        tick: Object,
        tickInterval: [Number, Object, String],
        type: String,
        valueType: String,
        workdaysOnly: Boolean,
        workWeek: Array
    }
});
exports.DxScale = DxScale;
DxScale.$_optionName = "scale";
DxScale.$_expectedChildren = {
    aggregationInterval: { isCollectionItem: false, optionName: "aggregationInterval" },
    break: { isCollectionItem: true, optionName: "breaks" },
    breakStyle: { isCollectionItem: false, optionName: "breakStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    marker: { isCollectionItem: false, optionName: "marker" },
    maxRange: { isCollectionItem: false, optionName: "maxRange" },
    minorTick: { isCollectionItem: false, optionName: "minorTick" },
    minorTickInterval: { isCollectionItem: false, optionName: "minorTickInterval" },
    minRange: { isCollectionItem: false, optionName: "minRange" },
    scaleLabel: { isCollectionItem: false, optionName: "label" },
    tick: { isCollectionItem: false, optionName: "tick" },
    tickInterval: { isCollectionItem: false, optionName: "tickInterval" }
};
var DxScaleLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeText": null,
        "update:font": null,
        "update:format": null,
        "update:overlappingBehavior": null,
        "update:topIndent": null,
        "update:visible": null,
    },
    props: {
        customizeText: Function,
        font: Object,
        format: [Object, Function, String],
        overlappingBehavior: String,
        topIndent: Number,
        visible: Boolean
    }
});
exports.DxScaleLabel = DxScaleLabel;
DxScaleLabel.$_optionName = "label";
DxScaleLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" }
};
var DxSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:size": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        size: Number,
        width: Number
    }
});
exports.DxSelectionStyle = DxSelectionStyle;
DxSelectionStyle.$_optionName = "selectionStyle";
var DxSeries = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregation": null,
        "update:argumentField": null,
        "update:axis": null,
        "update:barOverlapGroup": null,
        "update:barPadding": null,
        "update:barWidth": null,
        "update:border": null,
        "update:closeValueField": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:highValueField": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:ignoreEmptyPoints": null,
        "update:innerColor": null,
        "update:label": null,
        "update:lowValueField": null,
        "update:maxLabelCount": null,
        "update:minBarSize": null,
        "update:name": null,
        "update:opacity": null,
        "update:openValueField": null,
        "update:pane": null,
        "update:point": null,
        "update:rangeValue1Field": null,
        "update:rangeValue2Field": null,
        "update:reduction": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:showInLegend": null,
        "update:sizeField": null,
        "update:stack": null,
        "update:tag": null,
        "update:tagField": null,
        "update:type": null,
        "update:valueErrorBar": null,
        "update:valueField": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        aggregation: Object,
        argumentField: String,
        axis: String,
        barOverlapGroup: String,
        barPadding: Number,
        barWidth: Number,
        border: Object,
        closeValueField: String,
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        highValueField: String,
        hoverMode: String,
        hoverStyle: Object,
        ignoreEmptyPoints: Boolean,
        innerColor: String,
        label: Object,
        lowValueField: String,
        maxLabelCount: Number,
        minBarSize: Number,
        name: String,
        opacity: Number,
        openValueField: String,
        pane: String,
        point: Object,
        rangeValue1Field: String,
        rangeValue2Field: String,
        reduction: Object,
        selectionMode: String,
        selectionStyle: Object,
        showInLegend: Boolean,
        sizeField: String,
        stack: String,
        tag: {},
        tagField: String,
        type: String,
        valueErrorBar: Object,
        valueField: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxSeries = DxSeries;
DxSeries.$_optionName = "series";
DxSeries.$_isCollectionItem = true;
var DxSeriesBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxSeriesBorder = DxSeriesBorder;
DxSeriesBorder.$_optionName = "border";
var DxSeriesTemplate = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeSeries": null,
        "update:nameField": null,
    },
    props: {
        customizeSeries: Function,
        nameField: String
    }
});
exports.DxSeriesTemplate = DxSeriesTemplate;
DxSeriesTemplate.$_optionName = "seriesTemplate";
var DxShutter = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
    },
    props: {
        color: String,
        opacity: Number
    }
});
exports.DxShutter = DxShutter;
DxShutter.$_optionName = "shutter";
var DxSize = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:width": null,
    },
    props: {
        height: Number,
        width: Number
    }
});
exports.DxSize = DxSize;
DxSize.$_optionName = "size";
var DxSliderHandle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        width: Number
    }
});
exports.DxSliderHandle = DxSliderHandle;
DxSliderHandle.$_optionName = "sliderHandle";
var DxSliderMarker = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:customizeText": null,
        "update:font": null,
        "update:format": null,
        "update:invalidRangeColor": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:placeholderHeight": null,
        "update:visible": null,
    },
    props: {
        color: String,
        customizeText: Function,
        font: Object,
        format: [Object, Function, String],
        invalidRangeColor: String,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        placeholderHeight: Number,
        visible: Boolean
    }
});
exports.DxSliderMarker = DxSliderMarker;
DxSliderMarker.$_optionName = "sliderMarker";
DxSliderMarker.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" }
};
var DxSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxSubtitle = DxSubtitle;
DxSubtitle.$_optionName = "subtitle";
DxSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        width: Number
    }
});
exports.DxTick = DxTick;
DxTick.$_optionName = "tick";
var DxTickInterval = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxTickInterval = DxTickInterval;
DxTickInterval.$_optionName = "tickInterval";
var DxTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxTitle = DxTitle;
DxTitle.$_optionName = "title";
DxTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxUrl = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: String,
        rangeMinPoint: String
    }
});
exports.DxUrl = DxUrl;
DxUrl.$_optionName = "url";
var DxValue = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:length": null,
        "update:startValue": null,
    },
    props: {
        endValue: {},
        length: [Number, Object, String],
        startValue: {}
    }
});
exports.DxValue = DxValue;
DxValue.$_optionName = "value";
DxValue.$_expectedChildren = {
    length: { isCollectionItem: false, optionName: "length" }
};
var DxValueAxis = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:inverted": null,
        "update:logarithmBase": null,
        "update:max": null,
        "update:min": null,
        "update:type": null,
        "update:valueType": null,
    },
    props: {
        inverted: Boolean,
        logarithmBase: Number,
        max: Number,
        min: Number,
        type: String,
        valueType: String
    }
});
exports.DxValueAxis = DxValueAxis;
DxValueAxis.$_optionName = "valueAxis";
var DxValueErrorBar = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:displayMode": null,
        "update:edgeLength": null,
        "update:highValueField": null,
        "update:lineWidth": null,
        "update:lowValueField": null,
        "update:opacity": null,
        "update:type": null,
        "update:value": null,
    },
    props: {
        color: String,
        displayMode: String,
        edgeLength: Number,
        highValueField: String,
        lineWidth: Number,
        lowValueField: String,
        opacity: Number,
        type: String,
        value: Number
    }
});
exports.DxValueErrorBar = DxValueErrorBar;
DxValueErrorBar.$_optionName = "valueErrorBar";
var DxWidth = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: Number,
        rangeMinPoint: Number
    }
});
exports.DxWidth = DxWidth;
DxWidth.$_optionName = "width";
exports.default = DxRangeSelector;
