/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxLegendTitle = exports.DxLegend = exports.DxLabel = exports.DxImage = exports.DxHoverStyle = exports.DxHorizontalLineLabel = exports.DxHorizontalLine = exports.DxHeight = exports.DxHatching = exports.DxGrid = exports.DxFormat = exports.DxFont = exports.DxExport = exports.DxDragBoxStyle = exports.DxDataPrepareSettings = exports.DxCrosshair = exports.DxConstantLineStyle = exports.DxConstantLineLabel = exports.DxConstantLine = exports.DxConnector = exports.DxCommonSeriesSettingsSelectionStyle = exports.DxCommonSeriesSettingsLabel = exports.DxCommonSeriesSettingsHoverStyle = exports.DxCommonSeriesSettings = exports.DxCommonPaneSettings = exports.DxCommonAxisSettingsTitle = exports.DxCommonAxisSettingsLabel = exports.DxCommonAxisSettingsConstantLineStyleLabel = exports.DxCommonAxisSettingsConstantLineStyle = exports.DxCommonAxisSettings = exports.DxCommonAnnotationSettings = exports.DxChartTitleSubtitle = exports.DxChartTitle = exports.DxBreakStyle = exports.DxBreak = exports.DxBorder = exports.DxAxisTitle = exports.DxAxisLabel = exports.DxAxisConstantLineStyleLabel = exports.DxAxisConstantLineStyle = exports.DxArgumentFormat = exports.DxArgumentAxis = exports.DxAnnotationImage = exports.DxAnnotationBorder = exports.DxAnnotation = exports.DxAnimation = exports.DxAggregationInterval = exports.DxAggregation = exports.DxAdaptiveLayout = exports.DxChart = void 0;
exports.DxZoomAndPan = exports.DxWidth = exports.DxWholeRange = exports.DxVisualRange = exports.DxVerticalLine = exports.DxValueErrorBar = exports.DxValueAxis = exports.DxUrl = exports.DxTooltipBorder = exports.DxTooltip = exports.DxTitle = exports.DxTickInterval = exports.DxTick = exports.DxSubtitle = exports.DxStripStyleLabel = exports.DxStripStyle = exports.DxStripLabel = exports.DxStrip = exports.DxSize = exports.DxShadow = exports.DxSeriesTemplate = exports.DxSeriesBorder = exports.DxSeries = exports.DxSelectionStyle = exports.DxScrollBar = exports.DxReduction = exports.DxPointSelectionStyle = exports.DxPointImage = exports.DxPointHoverStyle = exports.DxPointBorder = exports.DxPoint = exports.DxPaneBorder = exports.DxPane = exports.DxMinVisualRangeLength = exports.DxMinorTickInterval = exports.DxMinorTick = exports.DxMinorGrid = exports.DxMargin = exports.DxLoadingIndicator = exports.DxLength = exports.DxLegendTitleSubtitle = void 0;
var chart_1 = __importDefault(require("devextreme/viz/chart"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxChart = index_1.createComponent({
    props: {
        adaptiveLayout: Object,
        adjustOnZoom: Boolean,
        animation: [Boolean, Object],
        annotations: Array,
        argumentAxis: Object,
        autoHidePointMarkers: Boolean,
        barGroupPadding: Number,
        barGroupWidth: Number,
        commonAnnotationSettings: Object,
        commonAxisSettings: Object,
        commonPaneSettings: Object,
        commonSeriesSettings: Object,
        containerBackgroundColor: String,
        crosshair: Object,
        customizeAnnotation: Function,
        customizeLabel: Function,
        customizePoint: Function,
        dataPrepareSettings: Object,
        dataSource: {},
        defaultPane: String,
        disabled: Boolean,
        elementAttr: Object,
        export: Object,
        legend: Object,
        loadingIndicator: Object,
        margin: Object,
        maxBubbleSize: Number,
        minBubbleSize: Number,
        negativesAsZeroes: Boolean,
        onArgumentAxisClick: Function,
        onDisposing: Function,
        onDone: Function,
        onDrawn: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onIncidentOccurred: Function,
        onInitialized: Function,
        onLegendClick: Function,
        onOptionChanged: Function,
        onPointClick: Function,
        onPointHoverChanged: Function,
        onPointSelectionChanged: Function,
        onSeriesClick: Function,
        onSeriesHoverChanged: Function,
        onSeriesSelectionChanged: Function,
        onTooltipHidden: Function,
        onTooltipShown: Function,
        onZoomEnd: Function,
        onZoomStart: Function,
        palette: [Array, String],
        paletteExtensionMode: String,
        panes: [Array, Object],
        pathModified: Boolean,
        pointSelectionMode: String,
        redrawOnResize: Boolean,
        resizePanesOnZoom: Boolean,
        resolveLabelOverlapping: String,
        rotated: Boolean,
        rtlEnabled: Boolean,
        scrollBar: Object,
        series: [Array, Object],
        seriesSelectionMode: String,
        seriesTemplate: Object,
        size: Object,
        stickyHovering: Boolean,
        synchronizeMultiAxes: Boolean,
        theme: String,
        title: [Object, String],
        tooltip: Object,
        valueAxis: [Array, Object],
        zoomAndPan: Object
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:adaptiveLayout": null,
        "update:adjustOnZoom": null,
        "update:animation": null,
        "update:annotations": null,
        "update:argumentAxis": null,
        "update:autoHidePointMarkers": null,
        "update:barGroupPadding": null,
        "update:barGroupWidth": null,
        "update:commonAnnotationSettings": null,
        "update:commonAxisSettings": null,
        "update:commonPaneSettings": null,
        "update:commonSeriesSettings": null,
        "update:containerBackgroundColor": null,
        "update:crosshair": null,
        "update:customizeAnnotation": null,
        "update:customizeLabel": null,
        "update:customizePoint": null,
        "update:dataPrepareSettings": null,
        "update:dataSource": null,
        "update:defaultPane": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:export": null,
        "update:legend": null,
        "update:loadingIndicator": null,
        "update:margin": null,
        "update:maxBubbleSize": null,
        "update:minBubbleSize": null,
        "update:negativesAsZeroes": null,
        "update:onArgumentAxisClick": null,
        "update:onDisposing": null,
        "update:onDone": null,
        "update:onDrawn": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onIncidentOccurred": null,
        "update:onInitialized": null,
        "update:onLegendClick": null,
        "update:onOptionChanged": null,
        "update:onPointClick": null,
        "update:onPointHoverChanged": null,
        "update:onPointSelectionChanged": null,
        "update:onSeriesClick": null,
        "update:onSeriesHoverChanged": null,
        "update:onSeriesSelectionChanged": null,
        "update:onTooltipHidden": null,
        "update:onTooltipShown": null,
        "update:onZoomEnd": null,
        "update:onZoomStart": null,
        "update:palette": null,
        "update:paletteExtensionMode": null,
        "update:panes": null,
        "update:pathModified": null,
        "update:pointSelectionMode": null,
        "update:redrawOnResize": null,
        "update:resizePanesOnZoom": null,
        "update:resolveLabelOverlapping": null,
        "update:rotated": null,
        "update:rtlEnabled": null,
        "update:scrollBar": null,
        "update:series": null,
        "update:seriesSelectionMode": null,
        "update:seriesTemplate": null,
        "update:size": null,
        "update:stickyHovering": null,
        "update:synchronizeMultiAxes": null,
        "update:theme": null,
        "update:title": null,
        "update:tooltip": null,
        "update:valueAxis": null,
        "update:zoomAndPan": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = chart_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            adaptiveLayout: { isCollectionItem: false, optionName: "adaptiveLayout" },
            animation: { isCollectionItem: false, optionName: "animation" },
            annotation: { isCollectionItem: true, optionName: "annotations" },
            argumentAxis: { isCollectionItem: false, optionName: "argumentAxis" },
            chartTitle: { isCollectionItem: false, optionName: "title" },
            commonAnnotationSettings: { isCollectionItem: false, optionName: "commonAnnotationSettings" },
            commonAxisSettings: { isCollectionItem: false, optionName: "commonAxisSettings" },
            commonPaneSettings: { isCollectionItem: false, optionName: "commonPaneSettings" },
            commonSeriesSettings: { isCollectionItem: false, optionName: "commonSeriesSettings" },
            crosshair: { isCollectionItem: false, optionName: "crosshair" },
            dataPrepareSettings: { isCollectionItem: false, optionName: "dataPrepareSettings" },
            export: { isCollectionItem: false, optionName: "export" },
            legend: { isCollectionItem: false, optionName: "legend" },
            loadingIndicator: { isCollectionItem: false, optionName: "loadingIndicator" },
            margin: { isCollectionItem: false, optionName: "margin" },
            pane: { isCollectionItem: true, optionName: "panes" },
            scrollBar: { isCollectionItem: false, optionName: "scrollBar" },
            series: { isCollectionItem: true, optionName: "series" },
            seriesTemplate: { isCollectionItem: false, optionName: "seriesTemplate" },
            size: { isCollectionItem: false, optionName: "size" },
            title: { isCollectionItem: false, optionName: "title" },
            tooltip: { isCollectionItem: false, optionName: "tooltip" },
            valueAxis: { isCollectionItem: true, optionName: "valueAxis" },
            zoomAndPan: { isCollectionItem: false, optionName: "zoomAndPan" }
        };
    }
});
exports.DxChart = DxChart;
var DxAdaptiveLayout = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:keepLabels": null,
        "update:width": null,
    },
    props: {
        height: Number,
        keepLabels: Boolean,
        width: Number
    }
});
exports.DxAdaptiveLayout = DxAdaptiveLayout;
DxAdaptiveLayout.$_optionName = "adaptiveLayout";
var DxAggregation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculate": null,
        "update:enabled": null,
        "update:method": null,
    },
    props: {
        calculate: Function,
        enabled: Boolean,
        method: String
    }
});
exports.DxAggregation = DxAggregation;
DxAggregation.$_optionName = "aggregation";
var DxAggregationInterval = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxAggregationInterval = DxAggregationInterval;
DxAggregationInterval.$_optionName = "aggregationInterval";
var DxAnimation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:duration": null,
        "update:easing": null,
        "update:enabled": null,
        "update:maxPointCountSupported": null,
    },
    props: {
        duration: Number,
        easing: String,
        enabled: Boolean,
        maxPointCountSupported: Number
    }
});
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
var DxAnnotation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDragging": null,
        "update:argument": null,
        "update:arrowLength": null,
        "update:arrowWidth": null,
        "update:axis": null,
        "update:border": null,
        "update:color": null,
        "update:customizeTooltip": null,
        "update:data": null,
        "update:description": null,
        "update:font": null,
        "update:height": null,
        "update:image": null,
        "update:name": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:series": null,
        "update:shadow": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:tooltipEnabled": null,
        "update:tooltipTemplate": null,
        "update:type": null,
        "update:value": null,
        "update:width": null,
        "update:wordWrap": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        allowDragging: Boolean,
        argument: {},
        arrowLength: Number,
        arrowWidth: Number,
        axis: String,
        border: Object,
        color: String,
        customizeTooltip: Function,
        data: {},
        description: String,
        font: Object,
        height: Number,
        image: [Object, String],
        name: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        series: String,
        shadow: Object,
        template: {},
        text: String,
        textOverflow: String,
        tooltipEnabled: Boolean,
        tooltipTemplate: {},
        type: String,
        value: {},
        width: Number,
        wordWrap: String,
        x: Number,
        y: Number
    }
});
exports.DxAnnotation = DxAnnotation;
DxAnnotation.$_optionName = "annotations";
DxAnnotation.$_isCollectionItem = true;
DxAnnotation.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    annotationImage: { isCollectionItem: false, optionName: "image" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    image: { isCollectionItem: false, optionName: "image" },
    shadow: { isCollectionItem: false, optionName: "shadow" }
};
var DxAnnotationBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxAnnotationBorder = DxAnnotationBorder;
DxAnnotationBorder.$_optionName = "border";
var DxAnnotationImage = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: Number,
        url: String,
        width: Number
    }
});
exports.DxAnnotationImage = DxAnnotationImage;
DxAnnotationImage.$_optionName = "image";
var DxArgumentAxis = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregateByCategory": null,
        "update:aggregatedPointsPosition": null,
        "update:aggregationGroupWidth": null,
        "update:aggregationInterval": null,
        "update:allowDecimals": null,
        "update:argumentType": null,
        "update:axisDivisionFactor": null,
        "update:breaks": null,
        "update:breakStyle": null,
        "update:categories": null,
        "update:color": null,
        "update:constantLines": null,
        "update:constantLineStyle": null,
        "update:customPosition": null,
        "update:customPositionAxis": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:grid": null,
        "update:holidays": null,
        "update:hoverMode": null,
        "update:inverted": null,
        "update:label": null,
        "update:linearThreshold": null,
        "update:logarithmBase": null,
        "update:maxValueMargin": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:minorTickCount": null,
        "update:minorTickInterval": null,
        "update:minValueMargin": null,
        "update:minVisualRangeLength": null,
        "update:offset": null,
        "update:opacity": null,
        "update:placeholderSize": null,
        "update:position": null,
        "update:singleWorkdays": null,
        "update:strips": null,
        "update:stripStyle": null,
        "update:tick": null,
        "update:tickInterval": null,
        "update:title": null,
        "update:type": null,
        "update:valueMarginsEnabled": null,
        "update:visible": null,
        "update:visualRange": null,
        "update:visualRangeUpdateMode": null,
        "update:wholeRange": null,
        "update:width": null,
        "update:workdaysOnly": null,
        "update:workWeek": null,
    },
    props: {
        aggregateByCategory: Boolean,
        aggregatedPointsPosition: String,
        aggregationGroupWidth: Number,
        aggregationInterval: [Number, Object, String],
        allowDecimals: Boolean,
        argumentType: String,
        axisDivisionFactor: Number,
        breaks: Array,
        breakStyle: Object,
        categories: Array,
        color: String,
        constantLines: Array,
        constantLineStyle: Object,
        customPosition: {},
        customPositionAxis: String,
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        grid: Object,
        holidays: Array,
        hoverMode: String,
        inverted: Boolean,
        label: Object,
        linearThreshold: Number,
        logarithmBase: Number,
        maxValueMargin: Number,
        minorGrid: Object,
        minorTick: Object,
        minorTickCount: Number,
        minorTickInterval: [Number, Object, String],
        minValueMargin: Number,
        minVisualRangeLength: [Number, Object, String],
        offset: Number,
        opacity: Number,
        placeholderSize: Number,
        position: String,
        singleWorkdays: Array,
        strips: Array,
        stripStyle: Object,
        tick: Object,
        tickInterval: [Number, Object, String],
        title: [Object, String],
        type: String,
        valueMarginsEnabled: Boolean,
        visible: Boolean,
        visualRange: [Array, Object],
        visualRangeUpdateMode: String,
        wholeRange: [Array, Object],
        width: Number,
        workdaysOnly: Boolean,
        workWeek: Array
    }
});
exports.DxArgumentAxis = DxArgumentAxis;
DxArgumentAxis.$_optionName = "argumentAxis";
DxArgumentAxis.$_expectedChildren = {
    aggregationInterval: { isCollectionItem: false, optionName: "aggregationInterval" },
    axisConstantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    axisLabel: { isCollectionItem: false, optionName: "label" },
    axisTitle: { isCollectionItem: false, optionName: "title" },
    break: { isCollectionItem: true, optionName: "breaks" },
    breakStyle: { isCollectionItem: false, optionName: "breakStyle" },
    constantLine: { isCollectionItem: true, optionName: "constantLines" },
    constantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    grid: { isCollectionItem: false, optionName: "grid" },
    label: { isCollectionItem: false, optionName: "label" },
    minorGrid: { isCollectionItem: false, optionName: "minorGrid" },
    minorTick: { isCollectionItem: false, optionName: "minorTick" },
    minorTickInterval: { isCollectionItem: false, optionName: "minorTickInterval" },
    minVisualRangeLength: { isCollectionItem: false, optionName: "minVisualRangeLength" },
    strip: { isCollectionItem: true, optionName: "strips" },
    stripStyle: { isCollectionItem: false, optionName: "stripStyle" },
    tick: { isCollectionItem: false, optionName: "tick" },
    tickInterval: { isCollectionItem: false, optionName: "tickInterval" },
    title: { isCollectionItem: false, optionName: "title" },
    visualRange: { isCollectionItem: false, optionName: "visualRange" },
    wholeRange: { isCollectionItem: false, optionName: "wholeRange" }
};
var DxArgumentFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxArgumentFormat = DxArgumentFormat;
DxArgumentFormat.$_optionName = "argumentFormat";
var DxAxisConstantLineStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        width: Number
    }
});
exports.DxAxisConstantLineStyle = DxAxisConstantLineStyle;
DxAxisConstantLineStyle.$_optionName = "constantLineStyle";
var DxAxisConstantLineStyleLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:position": null,
        "update:verticalAlignment": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        position: String,
        verticalAlignment: String,
        visible: Boolean
    }
});
exports.DxAxisConstantLineStyleLabel = DxAxisConstantLineStyleLabel;
DxAxisConstantLineStyleLabel.$_optionName = "label";
var DxAxisLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:customizeHint": null,
        "update:customizeText": null,
        "update:displayMode": null,
        "update:font": null,
        "update:format": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:staggeringSpacing": null,
        "update:template": null,
        "update:textOverflow": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        customizeHint: Function,
        customizeText: Function,
        displayMode: String,
        font: Object,
        format: [Object, Function, String],
        indentFromAxis: Number,
        overlappingBehavior: String,
        position: String,
        rotationAngle: Number,
        staggeringSpacing: Number,
        template: {},
        textOverflow: String,
        visible: Boolean,
        wordWrap: String
    }
});
exports.DxAxisLabel = DxAxisLabel;
DxAxisLabel.$_optionName = "label";
var DxAxisTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:font": null,
        "update:margin": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        font: Object,
        margin: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxAxisTitle = DxAxisTitle;
DxAxisTitle.$_optionName = "title";
var DxBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:left": null,
        "update:opacity": null,
        "update:right": null,
        "update:top": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        bottom: Boolean,
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        left: Boolean,
        opacity: Number,
        right: Boolean,
        top: Boolean,
        visible: Boolean,
        width: Number
    }
});
exports.DxBorder = DxBorder;
DxBorder.$_optionName = "border";
var DxBreak = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:startValue": null,
    },
    props: {
        endValue: {},
        startValue: {}
    }
});
exports.DxBreak = DxBreak;
DxBreak.$_optionName = "breaks";
DxBreak.$_isCollectionItem = true;
var DxBreakStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:line": null,
        "update:width": null,
    },
    props: {
        color: String,
        line: String,
        width: Number
    }
});
exports.DxBreakStyle = DxBreakStyle;
DxBreakStyle.$_optionName = "breakStyle";
var DxChartTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxChartTitle = DxChartTitle;
DxChartTitle.$_optionName = "title";
DxChartTitle.$_expectedChildren = {
    chartTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    font: { isCollectionItem: false, optionName: "font" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxChartTitleSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxChartTitleSubtitle = DxChartTitleSubtitle;
DxChartTitleSubtitle.$_optionName = "subtitle";
DxChartTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxCommonAnnotationSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDragging": null,
        "update:argument": null,
        "update:arrowLength": null,
        "update:arrowWidth": null,
        "update:axis": null,
        "update:border": null,
        "update:color": null,
        "update:customizeTooltip": null,
        "update:data": null,
        "update:description": null,
        "update:font": null,
        "update:height": null,
        "update:image": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:series": null,
        "update:shadow": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:tooltipEnabled": null,
        "update:tooltipTemplate": null,
        "update:type": null,
        "update:value": null,
        "update:width": null,
        "update:wordWrap": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        allowDragging: Boolean,
        argument: {},
        arrowLength: Number,
        arrowWidth: Number,
        axis: String,
        border: Object,
        color: String,
        customizeTooltip: Function,
        data: {},
        description: String,
        font: Object,
        height: Number,
        image: [Object, String],
        offsetX: Number,
        offsetY: Number,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        series: String,
        shadow: Object,
        template: {},
        text: String,
        textOverflow: String,
        tooltipEnabled: Boolean,
        tooltipTemplate: {},
        type: String,
        value: {},
        width: Number,
        wordWrap: String,
        x: Number,
        y: Number
    }
});
exports.DxCommonAnnotationSettings = DxCommonAnnotationSettings;
DxCommonAnnotationSettings.$_optionName = "commonAnnotationSettings";
var DxCommonAxisSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregatedPointsPosition": null,
        "update:allowDecimals": null,
        "update:breakStyle": null,
        "update:color": null,
        "update:constantLineStyle": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:grid": null,
        "update:inverted": null,
        "update:label": null,
        "update:maxValueMargin": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:minValueMargin": null,
        "update:opacity": null,
        "update:placeholderSize": null,
        "update:stripStyle": null,
        "update:tick": null,
        "update:title": null,
        "update:valueMarginsEnabled": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        aggregatedPointsPosition: String,
        allowDecimals: Boolean,
        breakStyle: Object,
        color: String,
        constantLineStyle: Object,
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        grid: Object,
        inverted: Boolean,
        label: Object,
        maxValueMargin: Number,
        minorGrid: Object,
        minorTick: Object,
        minValueMargin: Number,
        opacity: Number,
        placeholderSize: Number,
        stripStyle: Object,
        tick: Object,
        title: Object,
        valueMarginsEnabled: Boolean,
        visible: Boolean,
        width: Number
    }
});
exports.DxCommonAxisSettings = DxCommonAxisSettings;
DxCommonAxisSettings.$_optionName = "commonAxisSettings";
DxCommonAxisSettings.$_expectedChildren = {
    commonAxisSettingsConstantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    commonAxisSettingsLabel: { isCollectionItem: false, optionName: "label" },
    commonAxisSettingsTitle: { isCollectionItem: false, optionName: "title" },
    constantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    title: { isCollectionItem: false, optionName: "title" }
};
var DxCommonAxisSettingsConstantLineStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        width: Number
    }
});
exports.DxCommonAxisSettingsConstantLineStyle = DxCommonAxisSettingsConstantLineStyle;
DxCommonAxisSettingsConstantLineStyle.$_optionName = "constantLineStyle";
DxCommonAxisSettingsConstantLineStyle.$_expectedChildren = {
    commonAxisSettingsConstantLineStyleLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" }
};
var DxCommonAxisSettingsConstantLineStyleLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:position": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        position: String,
        visible: Boolean
    }
});
exports.DxCommonAxisSettingsConstantLineStyleLabel = DxCommonAxisSettingsConstantLineStyleLabel;
DxCommonAxisSettingsConstantLineStyleLabel.$_optionName = "label";
var DxCommonAxisSettingsLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:displayMode": null,
        "update:font": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:staggeringSpacing": null,
        "update:template": null,
        "update:textOverflow": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        displayMode: String,
        font: Object,
        indentFromAxis: Number,
        overlappingBehavior: String,
        position: String,
        rotationAngle: Number,
        staggeringSpacing: Number,
        template: {},
        textOverflow: String,
        visible: Boolean,
        wordWrap: String
    }
});
exports.DxCommonAxisSettingsLabel = DxCommonAxisSettingsLabel;
DxCommonAxisSettingsLabel.$_optionName = "label";
var DxCommonAxisSettingsTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:font": null,
        "update:margin": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        font: Object,
        margin: Number,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxCommonAxisSettingsTitle = DxCommonAxisSettingsTitle;
DxCommonAxisSettingsTitle.$_optionName = "title";
var DxCommonPaneSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:border": null,
    },
    props: {
        backgroundColor: String,
        border: Object
    }
});
exports.DxCommonPaneSettings = DxCommonPaneSettings;
DxCommonPaneSettings.$_optionName = "commonPaneSettings";
DxCommonPaneSettings.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    paneBorder: { isCollectionItem: false, optionName: "border" }
};
var DxCommonSeriesSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregation": null,
        "update:area": null,
        "update:argumentField": null,
        "update:axis": null,
        "update:bar": null,
        "update:barOverlapGroup": null,
        "update:barPadding": null,
        "update:barWidth": null,
        "update:border": null,
        "update:bubble": null,
        "update:candlestick": null,
        "update:closeValueField": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:fullstackedarea": null,
        "update:fullstackedbar": null,
        "update:fullstackedline": null,
        "update:fullstackedspline": null,
        "update:fullstackedsplinearea": null,
        "update:highValueField": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:ignoreEmptyPoints": null,
        "update:innerColor": null,
        "update:label": null,
        "update:line": null,
        "update:lowValueField": null,
        "update:maxLabelCount": null,
        "update:minBarSize": null,
        "update:opacity": null,
        "update:openValueField": null,
        "update:pane": null,
        "update:point": null,
        "update:rangearea": null,
        "update:rangebar": null,
        "update:rangeValue1Field": null,
        "update:rangeValue2Field": null,
        "update:reduction": null,
        "update:scatter": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:showInLegend": null,
        "update:sizeField": null,
        "update:spline": null,
        "update:splinearea": null,
        "update:stack": null,
        "update:stackedarea": null,
        "update:stackedbar": null,
        "update:stackedline": null,
        "update:stackedspline": null,
        "update:stackedsplinearea": null,
        "update:steparea": null,
        "update:stepline": null,
        "update:stock": null,
        "update:tagField": null,
        "update:type": null,
        "update:valueErrorBar": null,
        "update:valueField": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        aggregation: Object,
        area: {},
        argumentField: String,
        axis: String,
        bar: {},
        barOverlapGroup: String,
        barPadding: Number,
        barWidth: Number,
        border: Object,
        bubble: {},
        candlestick: {},
        closeValueField: String,
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        fullstackedarea: {},
        fullstackedbar: {},
        fullstackedline: {},
        fullstackedspline: {},
        fullstackedsplinearea: {},
        highValueField: String,
        hoverMode: String,
        hoverStyle: Object,
        ignoreEmptyPoints: Boolean,
        innerColor: String,
        label: Object,
        line: {},
        lowValueField: String,
        maxLabelCount: Number,
        minBarSize: Number,
        opacity: Number,
        openValueField: String,
        pane: String,
        point: Object,
        rangearea: {},
        rangebar: {},
        rangeValue1Field: String,
        rangeValue2Field: String,
        reduction: Object,
        scatter: {},
        selectionMode: String,
        selectionStyle: Object,
        showInLegend: Boolean,
        sizeField: String,
        spline: {},
        splinearea: {},
        stack: String,
        stackedarea: {},
        stackedbar: {},
        stackedline: {},
        stackedspline: {},
        stackedsplinearea: {},
        steparea: {},
        stepline: {},
        stock: {},
        tagField: String,
        type: String,
        valueErrorBar: Object,
        valueField: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxCommonSeriesSettings = DxCommonSeriesSettings;
DxCommonSeriesSettings.$_optionName = "commonSeriesSettings";
DxCommonSeriesSettings.$_expectedChildren = {
    aggregation: { isCollectionItem: false, optionName: "aggregation" },
    border: { isCollectionItem: false, optionName: "border" },
    commonSeriesSettingsHoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    commonSeriesSettingsLabel: { isCollectionItem: false, optionName: "label" },
    commonSeriesSettingsSelectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    point: { isCollectionItem: false, optionName: "point" },
    reduction: { isCollectionItem: false, optionName: "reduction" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    seriesBorder: { isCollectionItem: false, optionName: "border" },
    valueErrorBar: { isCollectionItem: false, optionName: "valueErrorBar" }
};
var DxCommonSeriesSettingsHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        width: Number
    }
});
exports.DxCommonSeriesSettingsHoverStyle = DxCommonSeriesSettingsHoverStyle;
DxCommonSeriesSettingsHoverStyle.$_optionName = "hoverStyle";
DxCommonSeriesSettingsHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxCommonSeriesSettingsLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:font": null,
        "update:format": null,
        "update:horizontalOffset": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:showForZeroValues": null,
        "update:verticalOffset": null,
        "update:visible": null,
    },
    props: {
        alignment: String,
        argumentFormat: [Object, Function, String],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeText: Function,
        displayFormat: String,
        font: Object,
        format: [Object, Function, String],
        horizontalOffset: Number,
        position: String,
        rotationAngle: Number,
        showForZeroValues: Boolean,
        verticalOffset: Number,
        visible: Boolean
    }
});
exports.DxCommonSeriesSettingsLabel = DxCommonSeriesSettingsLabel;
DxCommonSeriesSettingsLabel.$_optionName = "label";
DxCommonSeriesSettingsLabel.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    connector: { isCollectionItem: false, optionName: "connector" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxCommonSeriesSettingsSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        width: Number
    }
});
exports.DxCommonSeriesSettingsSelectionStyle = DxCommonSeriesSettingsSelectionStyle;
DxCommonSeriesSettingsSelectionStyle.$_optionName = "selectionStyle";
DxCommonSeriesSettingsSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
var DxConnector = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxConnector = DxConnector;
DxConnector.$_optionName = "connector";
var DxConstantLine = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:displayBehindSeries": null,
        "update:extendAxis": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:value": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        displayBehindSeries: Boolean,
        extendAxis: Boolean,
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        value: {},
        width: Number
    }
});
exports.DxConstantLine = DxConstantLine;
DxConstantLine.$_optionName = "constantLines";
DxConstantLine.$_isCollectionItem = true;
var DxConstantLineLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:position": null,
        "update:text": null,
        "update:verticalAlignment": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        position: String,
        text: String,
        verticalAlignment: String,
        visible: Boolean
    }
});
exports.DxConstantLineLabel = DxConstantLineLabel;
DxConstantLineLabel.$_optionName = "label";
var DxConstantLineStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        width: Number
    }
});
exports.DxConstantLineStyle = DxConstantLineStyle;
DxConstantLineStyle.$_optionName = "constantLineStyle";
var DxCrosshair = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:enabled": null,
        "update:horizontalLine": null,
        "update:label": null,
        "update:opacity": null,
        "update:verticalLine": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        enabled: Boolean,
        horizontalLine: [Boolean, Object],
        label: Object,
        opacity: Number,
        verticalLine: [Boolean, Object],
        width: Number
    }
});
exports.DxCrosshair = DxCrosshair;
DxCrosshair.$_optionName = "crosshair";
DxCrosshair.$_expectedChildren = {
    horizontalLine: { isCollectionItem: false, optionName: "horizontalLine" },
    horizontalLineLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" },
    verticalLine: { isCollectionItem: false, optionName: "verticalLine" }
};
var DxDataPrepareSettings = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:checkTypeForAllData": null,
        "update:convertToAxisDataType": null,
        "update:sortingMethod": null,
    },
    props: {
        checkTypeForAllData: Boolean,
        convertToAxisDataType: Boolean,
        sortingMethod: [Boolean, Function]
    }
});
exports.DxDataPrepareSettings = DxDataPrepareSettings;
DxDataPrepareSettings.$_optionName = "dataPrepareSettings";
var DxDragBoxStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
    },
    props: {
        color: String,
        opacity: Number
    }
});
exports.DxDragBoxStyle = DxDragBoxStyle;
DxDragBoxStyle.$_optionName = "dragBoxStyle";
var DxExport = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:fileName": null,
        "update:formats": null,
        "update:margin": null,
        "update:printingEnabled": null,
        "update:proxyUrl": null,
        "update:svgToCanvas": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        fileName: String,
        formats: Array,
        margin: Number,
        printingEnabled: Boolean,
        proxyUrl: String,
        svgToCanvas: Function
    }
});
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
var DxFont = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:family": null,
        "update:opacity": null,
        "update:size": null,
        "update:weight": null,
    },
    props: {
        color: String,
        family: String,
        opacity: Number,
        size: [Number, String],
        weight: Number
    }
});
exports.DxFont = DxFont;
DxFont.$_optionName = "font";
var DxFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
var DxGrid = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxGrid = DxGrid;
DxGrid.$_optionName = "grid";
var DxHatching = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:direction": null,
        "update:opacity": null,
        "update:step": null,
        "update:width": null,
    },
    props: {
        direction: String,
        opacity: Number,
        step: Number,
        width: Number
    }
});
exports.DxHatching = DxHatching;
DxHatching.$_optionName = "hatching";
var DxHeight = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: Number,
        rangeMinPoint: Number
    }
});
exports.DxHeight = DxHeight;
DxHeight.$_optionName = "height";
var DxHorizontalLine = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxHorizontalLine = DxHorizontalLine;
DxHorizontalLine.$_optionName = "horizontalLine";
DxHorizontalLine.$_expectedChildren = {
    horizontalLineLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" }
};
var DxHorizontalLineLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:customizeText": null,
        "update:font": null,
        "update:format": null,
        "update:visible": null,
    },
    props: {
        backgroundColor: String,
        customizeText: Function,
        font: Object,
        format: [Object, Function, String],
        visible: Boolean
    }
});
exports.DxHorizontalLineLabel = DxHorizontalLineLabel;
DxHorizontalLineLabel.$_optionName = "label";
var DxHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:size": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        size: Number,
        width: Number
    }
});
exports.DxHoverStyle = DxHoverStyle;
DxHoverStyle.$_optionName = "hoverStyle";
var DxImage = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: Number,
        url: String,
        width: Number
    }
});
exports.DxImage = DxImage;
DxImage.$_optionName = "image";
var DxLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeHint": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:displayMode": null,
        "update:font": null,
        "update:format": null,
        "update:horizontalAlignment": null,
        "update:horizontalOffset": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:showForZeroValues": null,
        "update:staggeringSpacing": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:verticalOffset": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        argumentFormat: [Object, Function, String],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeHint: Function,
        customizeText: Function,
        displayFormat: String,
        displayMode: String,
        font: Object,
        format: [Object, Function, String],
        horizontalAlignment: String,
        horizontalOffset: Number,
        indentFromAxis: Number,
        overlappingBehavior: String,
        position: String,
        rotationAngle: Number,
        showForZeroValues: Boolean,
        staggeringSpacing: Number,
        template: {},
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        verticalOffset: Number,
        visible: Boolean,
        wordWrap: String
    }
});
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
var DxLegend = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:columnCount": null,
        "update:columnItemSpacing": null,
        "update:customizeHint": null,
        "update:customizeItems": null,
        "update:customizeText": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:hoverMode": null,
        "update:itemsAlignment": null,
        "update:itemTextPosition": null,
        "update:margin": null,
        "update:markerSize": null,
        "update:markerTemplate": null,
        "update:orientation": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:position": null,
        "update:rowCount": null,
        "update:rowItemSpacing": null,
        "update:title": null,
        "update:verticalAlignment": null,
        "update:visible": null,
    },
    props: {
        backgroundColor: String,
        border: Object,
        columnCount: Number,
        columnItemSpacing: Number,
        customizeHint: Function,
        customizeItems: Function,
        customizeText: Function,
        font: Object,
        horizontalAlignment: String,
        hoverMode: String,
        itemsAlignment: String,
        itemTextPosition: String,
        margin: [Number, Object],
        markerSize: Number,
        markerTemplate: {},
        orientation: String,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        position: String,
        rowCount: Number,
        rowItemSpacing: Number,
        title: [Object, String],
        verticalAlignment: String,
        visible: Boolean
    }
});
exports.DxLegend = DxLegend;
DxLegend.$_optionName = "legend";
DxLegend.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    legendTitle: { isCollectionItem: false, optionName: "title" },
    margin: { isCollectionItem: false, optionName: "margin" },
    title: { isCollectionItem: false, optionName: "title" }
};
var DxLegendTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:verticalAlignment": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: Object,
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        verticalAlignment: String
    }
});
exports.DxLegendTitle = DxLegendTitle;
DxLegendTitle.$_optionName = "title";
DxLegendTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    legendTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxLegendTitleSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String
    }
});
exports.DxLegendTitleSubtitle = DxLegendTitleSubtitle;
DxLegendTitleSubtitle.$_optionName = "subtitle";
DxLegendTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxLength = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxLength = DxLength;
DxLength.$_optionName = "length";
var DxLoadingIndicator = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:font": null,
        "update:show": null,
        "update:text": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        font: Object,
        show: Boolean,
        text: String
    }
});
exports.DxLoadingIndicator = DxLoadingIndicator;
DxLoadingIndicator.$_optionName = "loadingIndicator";
DxLoadingIndicator.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxMargin = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:left": null,
        "update:right": null,
        "update:top": null,
    },
    props: {
        bottom: Number,
        left: Number,
        right: Number,
        top: Number
    }
});
exports.DxMargin = DxMargin;
DxMargin.$_optionName = "margin";
var DxMinorGrid = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxMinorGrid = DxMinorGrid;
DxMinorGrid.$_optionName = "minorGrid";
var DxMinorTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:shift": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        shift: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxMinorTick = DxMinorTick;
DxMinorTick.$_optionName = "minorTick";
var DxMinorTickInterval = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxMinorTickInterval = DxMinorTickInterval;
DxMinorTickInterval.$_optionName = "minorTickInterval";
var DxMinVisualRangeLength = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxMinVisualRangeLength = DxMinVisualRangeLength;
DxMinVisualRangeLength.$_optionName = "minVisualRangeLength";
var DxPane = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:height": null,
        "update:name": null,
    },
    props: {
        backgroundColor: String,
        border: Object,
        height: [Number, String],
        name: String
    }
});
exports.DxPane = DxPane;
DxPane.$_optionName = "panes";
DxPane.$_isCollectionItem = true;
var DxPaneBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:left": null,
        "update:opacity": null,
        "update:right": null,
        "update:top": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        bottom: Boolean,
        color: String,
        dashStyle: String,
        left: Boolean,
        opacity: Number,
        right: Boolean,
        top: Boolean,
        visible: Boolean,
        width: Number
    }
});
exports.DxPaneBorder = DxPaneBorder;
DxPaneBorder.$_optionName = "border";
var DxPoint = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:image": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:size": null,
        "update:symbol": null,
        "update:visible": null,
    },
    props: {
        border: Object,
        color: String,
        hoverMode: String,
        hoverStyle: Object,
        image: [Object, String],
        selectionMode: String,
        selectionStyle: Object,
        size: Number,
        symbol: String,
        visible: Boolean
    }
});
exports.DxPoint = DxPoint;
DxPoint.$_optionName = "point";
DxPoint.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    image: { isCollectionItem: false, optionName: "image" },
    pointBorder: { isCollectionItem: false, optionName: "border" },
    pointHoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    pointImage: { isCollectionItem: false, optionName: "image" },
    pointSelectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" }
};
var DxPointBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxPointBorder = DxPointBorder;
DxPointBorder.$_optionName = "border";
var DxPointHoverStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:size": null,
    },
    props: {
        border: Object,
        color: String,
        size: Number
    }
});
exports.DxPointHoverStyle = DxPointHoverStyle;
DxPointHoverStyle.$_optionName = "hoverStyle";
DxPointHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    pointBorder: { isCollectionItem: false, optionName: "border" }
};
var DxPointImage = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: [Number, Object],
        url: [Object, String],
        width: [Number, Object]
    }
});
exports.DxPointImage = DxPointImage;
DxPointImage.$_optionName = "image";
DxPointImage.$_expectedChildren = {
    height: { isCollectionItem: false, optionName: "height" },
    url: { isCollectionItem: false, optionName: "url" },
    width: { isCollectionItem: false, optionName: "width" }
};
var DxPointSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:size": null,
    },
    props: {
        border: Object,
        color: String,
        size: Number
    }
});
exports.DxPointSelectionStyle = DxPointSelectionStyle;
DxPointSelectionStyle.$_optionName = "selectionStyle";
DxPointSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    pointBorder: { isCollectionItem: false, optionName: "border" }
};
var DxReduction = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:level": null,
    },
    props: {
        color: String,
        level: String
    }
});
exports.DxReduction = DxReduction;
DxReduction.$_optionName = "reduction";
var DxScrollBar = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:offset": null,
        "update:opacity": null,
        "update:position": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        offset: Number,
        opacity: Number,
        position: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxScrollBar = DxScrollBar;
DxScrollBar.$_optionName = "scrollBar";
var DxSelectionStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:size": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: String,
        dashStyle: String,
        hatching: Object,
        size: Number,
        width: Number
    }
});
exports.DxSelectionStyle = DxSelectionStyle;
DxSelectionStyle.$_optionName = "selectionStyle";
var DxSeries = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregation": null,
        "update:argumentField": null,
        "update:axis": null,
        "update:barOverlapGroup": null,
        "update:barPadding": null,
        "update:barWidth": null,
        "update:border": null,
        "update:closeValueField": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:highValueField": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:ignoreEmptyPoints": null,
        "update:innerColor": null,
        "update:label": null,
        "update:lowValueField": null,
        "update:maxLabelCount": null,
        "update:minBarSize": null,
        "update:name": null,
        "update:opacity": null,
        "update:openValueField": null,
        "update:pane": null,
        "update:point": null,
        "update:rangeValue1Field": null,
        "update:rangeValue2Field": null,
        "update:reduction": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:showInLegend": null,
        "update:sizeField": null,
        "update:stack": null,
        "update:tag": null,
        "update:tagField": null,
        "update:type": null,
        "update:valueErrorBar": null,
        "update:valueField": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        aggregation: Object,
        argumentField: String,
        axis: String,
        barOverlapGroup: String,
        barPadding: Number,
        barWidth: Number,
        border: Object,
        closeValueField: String,
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        highValueField: String,
        hoverMode: String,
        hoverStyle: Object,
        ignoreEmptyPoints: Boolean,
        innerColor: String,
        label: Object,
        lowValueField: String,
        maxLabelCount: Number,
        minBarSize: Number,
        name: String,
        opacity: Number,
        openValueField: String,
        pane: String,
        point: Object,
        rangeValue1Field: String,
        rangeValue2Field: String,
        reduction: Object,
        selectionMode: String,
        selectionStyle: Object,
        showInLegend: Boolean,
        sizeField: String,
        stack: String,
        tag: {},
        tagField: String,
        type: String,
        valueErrorBar: Object,
        valueField: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxSeries = DxSeries;
DxSeries.$_optionName = "series";
DxSeries.$_isCollectionItem = true;
var DxSeriesBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        visible: Boolean,
        width: Number
    }
});
exports.DxSeriesBorder = DxSeriesBorder;
DxSeriesBorder.$_optionName = "border";
var DxSeriesTemplate = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeSeries": null,
        "update:nameField": null,
    },
    props: {
        customizeSeries: Function,
        nameField: String
    }
});
exports.DxSeriesTemplate = DxSeriesTemplate;
DxSeriesTemplate.$_optionName = "seriesTemplate";
var DxShadow = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:blur": null,
        "update:color": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
    },
    props: {
        blur: Number,
        color: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number
    }
});
exports.DxShadow = DxShadow;
DxShadow.$_optionName = "shadow";
var DxSize = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:width": null,
    },
    props: {
        height: Number,
        width: Number
    }
});
exports.DxSize = DxSize;
DxSize.$_optionName = "size";
var DxStrip = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:endValue": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:startValue": null,
    },
    props: {
        color: String,
        endValue: {},
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        startValue: {}
    }
});
exports.DxStrip = DxStrip;
DxStrip.$_optionName = "strips";
DxStrip.$_isCollectionItem = true;
var DxStripLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:text": null,
        "update:verticalAlignment": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        text: String,
        verticalAlignment: String
    }
});
exports.DxStripLabel = DxStripLabel;
DxStripLabel.$_optionName = "label";
var DxStripStyle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
    },
    props: {
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number
    }
});
exports.DxStripStyle = DxStripStyle;
DxStripStyle.$_optionName = "stripStyle";
DxStripStyle.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" },
    stripStyleLabel: { isCollectionItem: false, optionName: "label" }
};
var DxStripStyleLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:verticalAlignment": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        verticalAlignment: String
    }
});
exports.DxStripStyleLabel = DxStripStyleLabel;
DxStripStyleLabel.$_optionName = "label";
var DxSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxSubtitle = DxSubtitle;
DxSubtitle.$_optionName = "subtitle";
var DxTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:shift": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        shift: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxTick = DxTick;
DxTick.$_optionName = "tick";
var DxTickInterval = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
});
exports.DxTickInterval = DxTickInterval;
DxTickInterval.$_optionName = "tickInterval";
var DxTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        font: Object,
        horizontalAlignment: String,
        margin: Number,
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxTitle = DxTitle;
DxTitle.$_optionName = "title";
var DxTooltip = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentFormat": null,
        "update:arrowLength": null,
        "update:border": null,
        "update:color": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:cornerRadius": null,
        "update:customizeTooltip": null,
        "update:enabled": null,
        "update:font": null,
        "update:format": null,
        "update:interactive": null,
        "update:location": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:shadow": null,
        "update:shared": null,
        "update:zIndex": null,
    },
    props: {
        argumentFormat: [Object, Function, String],
        arrowLength: Number,
        border: Object,
        color: String,
        container: {},
        contentTemplate: {},
        cornerRadius: Number,
        customizeTooltip: Function,
        enabled: Boolean,
        font: Object,
        format: [Object, Function, String],
        interactive: Boolean,
        location: String,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        shadow: Object,
        shared: Boolean,
        zIndex: Number
    }
});
exports.DxTooltip = DxTooltip;
DxTooltip.$_optionName = "tooltip";
DxTooltip.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    shadow: { isCollectionItem: false, optionName: "shadow" },
    tooltipBorder: { isCollectionItem: false, optionName: "border" }
};
var DxTooltipBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxTooltipBorder = DxTooltipBorder;
DxTooltipBorder.$_optionName = "border";
var DxUrl = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: String,
        rangeMinPoint: String
    }
});
exports.DxUrl = DxUrl;
DxUrl.$_optionName = "url";
var DxValueAxis = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregatedPointsPosition": null,
        "update:allowDecimals": null,
        "update:autoBreaksEnabled": null,
        "update:axisDivisionFactor": null,
        "update:breaks": null,
        "update:breakStyle": null,
        "update:categories": null,
        "update:color": null,
        "update:constantLines": null,
        "update:constantLineStyle": null,
        "update:customPosition": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:grid": null,
        "update:inverted": null,
        "update:label": null,
        "update:linearThreshold": null,
        "update:logarithmBase": null,
        "update:maxAutoBreakCount": null,
        "update:maxValueMargin": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:minorTickCount": null,
        "update:minorTickInterval": null,
        "update:minValueMargin": null,
        "update:minVisualRangeLength": null,
        "update:multipleAxesSpacing": null,
        "update:name": null,
        "update:offset": null,
        "update:opacity": null,
        "update:pane": null,
        "update:placeholderSize": null,
        "update:position": null,
        "update:showZero": null,
        "update:strips": null,
        "update:stripStyle": null,
        "update:synchronizedValue": null,
        "update:tick": null,
        "update:tickInterval": null,
        "update:title": null,
        "update:type": null,
        "update:valueMarginsEnabled": null,
        "update:valueType": null,
        "update:visible": null,
        "update:visualRange": null,
        "update:visualRangeUpdateMode": null,
        "update:wholeRange": null,
        "update:width": null,
    },
    props: {
        aggregatedPointsPosition: String,
        allowDecimals: Boolean,
        autoBreaksEnabled: Boolean,
        axisDivisionFactor: Number,
        breaks: Array,
        breakStyle: Object,
        categories: Array,
        color: String,
        constantLines: Array,
        constantLineStyle: Object,
        customPosition: {},
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        grid: Object,
        inverted: Boolean,
        label: Object,
        linearThreshold: Number,
        logarithmBase: Number,
        maxAutoBreakCount: Number,
        maxValueMargin: Number,
        minorGrid: Object,
        minorTick: Object,
        minorTickCount: Number,
        minorTickInterval: [Number, Object, String],
        minValueMargin: Number,
        minVisualRangeLength: [Number, Object, String],
        multipleAxesSpacing: Number,
        name: String,
        offset: Number,
        opacity: Number,
        pane: String,
        placeholderSize: Number,
        position: String,
        showZero: Boolean,
        strips: Array,
        stripStyle: Object,
        synchronizedValue: Number,
        tick: Object,
        tickInterval: [Number, Object, String],
        title: [Object, String],
        type: String,
        valueMarginsEnabled: Boolean,
        valueType: String,
        visible: Boolean,
        visualRange: [Array, Object],
        visualRangeUpdateMode: String,
        wholeRange: [Array, Object],
        width: Number
    }
});
exports.DxValueAxis = DxValueAxis;
DxValueAxis.$_optionName = "valueAxis";
DxValueAxis.$_isCollectionItem = true;
DxValueAxis.$_expectedChildren = {
    axisConstantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    axisLabel: { isCollectionItem: false, optionName: "label" },
    axisTitle: { isCollectionItem: false, optionName: "title" },
    break: { isCollectionItem: true, optionName: "breaks" },
    constantLine: { isCollectionItem: true, optionName: "constantLines" },
    constantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    minorTickInterval: { isCollectionItem: false, optionName: "minorTickInterval" },
    minVisualRangeLength: { isCollectionItem: false, optionName: "minVisualRangeLength" },
    strip: { isCollectionItem: true, optionName: "strips" },
    tickInterval: { isCollectionItem: false, optionName: "tickInterval" },
    title: { isCollectionItem: false, optionName: "title" },
    visualRange: { isCollectionItem: false, optionName: "visualRange" },
    wholeRange: { isCollectionItem: false, optionName: "wholeRange" }
};
var DxValueErrorBar = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:displayMode": null,
        "update:edgeLength": null,
        "update:highValueField": null,
        "update:lineWidth": null,
        "update:lowValueField": null,
        "update:opacity": null,
        "update:type": null,
        "update:value": null,
    },
    props: {
        color: String,
        displayMode: String,
        edgeLength: Number,
        highValueField: String,
        lineWidth: Number,
        lowValueField: String,
        opacity: Number,
        type: String,
        value: Number
    }
});
exports.DxValueErrorBar = DxValueErrorBar;
DxValueErrorBar.$_optionName = "valueErrorBar";
var DxVerticalLine = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxVerticalLine = DxVerticalLine;
DxVerticalLine.$_optionName = "verticalLine";
DxVerticalLine.$_expectedChildren = {
    horizontalLineLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" }
};
var DxVisualRange = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:length": null,
        "update:startValue": null,
    },
    props: {
        endValue: {},
        length: [Number, Object, String],
        startValue: {}
    }
});
exports.DxVisualRange = DxVisualRange;
DxVisualRange.$_optionName = "visualRange";
var DxWholeRange = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:length": null,
        "update:startValue": null,
    },
    props: {
        endValue: {},
        length: [Number, Object, String],
        startValue: {}
    }
});
exports.DxWholeRange = DxWholeRange;
DxWholeRange.$_optionName = "wholeRange";
var DxWidth = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: Number,
        rangeMinPoint: Number
    }
});
exports.DxWidth = DxWidth;
DxWidth.$_optionName = "width";
var DxZoomAndPan = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowMouseWheel": null,
        "update:allowTouchGestures": null,
        "update:argumentAxis": null,
        "update:dragBoxStyle": null,
        "update:dragToZoom": null,
        "update:panKey": null,
        "update:valueAxis": null,
    },
    props: {
        allowMouseWheel: Boolean,
        allowTouchGestures: Boolean,
        argumentAxis: String,
        dragBoxStyle: Object,
        dragToZoom: Boolean,
        panKey: String,
        valueAxis: String
    }
});
exports.DxZoomAndPan = DxZoomAndPan;
DxZoomAndPan.$_optionName = "zoomAndPan";
DxZoomAndPan.$_expectedChildren = {
    dragBoxStyle: { isCollectionItem: false, optionName: "dragBoxStyle" }
};
exports.default = DxChart;
