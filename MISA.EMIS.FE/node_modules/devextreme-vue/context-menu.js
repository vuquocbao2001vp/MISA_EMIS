/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxTo = exports.DxShowSubmenuMode = exports.DxShowEvent = exports.DxShow = exports.DxPosition = exports.DxOffset = exports.DxMy = exports.DxItem = exports.DxHide = exports.DxFrom = exports.DxDelay = exports.DxCollision = exports.DxBoundaryOffset = exports.DxAt = exports.DxAnimation = exports.DxContextMenu = void 0;
var context_menu_1 = __importDefault(require("devextreme/ui/context_menu"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxContextMenu = index_1.createComponent({
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animation: Object,
        closeOnOutsideClick: [Boolean, Function],
        cssClass: String,
        dataSource: {},
        disabled: Boolean,
        disabledExpr: [Function, String],
        displayExpr: [Function, String],
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hideOnOutsideClick: [Boolean, Function],
        hint: String,
        hoverStateEnabled: Boolean,
        items: Array,
        itemsExpr: [Function, String],
        itemTemplate: {},
        onContentReady: Function,
        onDisposing: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onItemClick: Function,
        onItemContextMenu: Function,
        onItemRendered: Function,
        onOptionChanged: Function,
        onPositioning: Function,
        onSelectionChanged: Function,
        onShowing: Function,
        onShown: Function,
        position: Object,
        rtlEnabled: Boolean,
        selectByClick: Boolean,
        selectedExpr: [Function, String],
        selectedItem: {},
        selectionMode: String,
        showEvent: [Object, String],
        showSubmenuMode: [Object, String],
        submenuDirection: String,
        tabIndex: Number,
        target: {},
        visible: Boolean,
        width: [Function, Number, String]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animation": null,
        "update:closeOnOutsideClick": null,
        "update:cssClass": null,
        "update:dataSource": null,
        "update:disabled": null,
        "update:disabledExpr": null,
        "update:displayExpr": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hideOnOutsideClick": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:items": null,
        "update:itemsExpr": null,
        "update:itemTemplate": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onItemClick": null,
        "update:onItemContextMenu": null,
        "update:onItemRendered": null,
        "update:onOptionChanged": null,
        "update:onPositioning": null,
        "update:onSelectionChanged": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:position": null,
        "update:rtlEnabled": null,
        "update:selectByClick": null,
        "update:selectedExpr": null,
        "update:selectedItem": null,
        "update:selectionMode": null,
        "update:showEvent": null,
        "update:showSubmenuMode": null,
        "update:submenuDirection": null,
        "update:tabIndex": null,
        "update:target": null,
        "update:visible": null,
        "update:width": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = context_menu_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            animation: { isCollectionItem: false, optionName: "animation" },
            item: { isCollectionItem: true, optionName: "items" },
            position: { isCollectionItem: false, optionName: "position" },
            showEvent: { isCollectionItem: false, optionName: "showEvent" },
            showSubmenuMode: { isCollectionItem: false, optionName: "showSubmenuMode" }
        };
    }
});
exports.DxContextMenu = DxContextMenu;
var DxAnimation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null,
    },
    props: {
        hide: [Object, Number, String],
        show: [Object, Number, String]
    }
});
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
DxAnimation.$_expectedChildren = {
    hide: { isCollectionItem: false, optionName: "hide" },
    show: { isCollectionItem: false, optionName: "show" }
};
var DxAt = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
exports.DxAt = DxAt;
DxAt.$_optionName = "at";
var DxBoundaryOffset = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
});
exports.DxBoundaryOffset = DxBoundaryOffset;
DxBoundaryOffset.$_optionName = "boundaryOffset";
var DxCollision = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
exports.DxCollision = DxCollision;
DxCollision.$_optionName = "collision";
var DxDelay = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null,
    },
    props: {
        hide: Number,
        show: Number
    }
});
exports.DxDelay = DxDelay;
DxDelay.$_optionName = "delay";
var DxFrom = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
});
exports.DxFrom = DxFrom;
DxFrom.$_optionName = "from";
DxFrom.$_expectedChildren = {
    position: { isCollectionItem: false, optionName: "position" }
};
var DxHide = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
});
exports.DxHide = DxHide;
DxHide.$_optionName = "hide";
DxHide.$_expectedChildren = {
    from: { isCollectionItem: false, optionName: "from" },
    to: { isCollectionItem: false, optionName: "to" }
};
var DxItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:beginGroup": null,
        "update:closeMenuOnClick": null,
        "update:disabled": null,
        "update:html": null,
        "update:icon": null,
        "update:items": null,
        "update:selectable": null,
        "update:selected": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        beginGroup: Boolean,
        closeMenuOnClick: Boolean,
        disabled: Boolean,
        html: String,
        icon: String,
        items: Array,
        selectable: Boolean,
        selected: Boolean,
        template: {},
        text: String,
        visible: Boolean
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
var DxMy = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
exports.DxMy = DxMy;
DxMy.$_optionName = "my";
var DxOffset = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
});
exports.DxOffset = DxOffset;
DxOffset.$_optionName = "offset";
var DxPosition = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:at": null,
        "update:boundary": null,
        "update:boundaryOffset": null,
        "update:collision": null,
        "update:my": null,
        "update:of": null,
        "update:offset": null,
    },
    props: {
        at: [Object, String],
        boundary: {},
        boundaryOffset: [Object, String],
        collision: [Object, String],
        my: [Object, String],
        of: {},
        offset: [Object, String]
    }
});
exports.DxPosition = DxPosition;
DxPosition.$_optionName = "position";
var DxShow = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
});
exports.DxShow = DxShow;
DxShow.$_optionName = "show";
var DxShowEvent = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:delay": null,
        "update:name": null,
    },
    props: {
        delay: Number,
        name: String
    }
});
exports.DxShowEvent = DxShowEvent;
DxShowEvent.$_optionName = "showEvent";
var DxShowSubmenuMode = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:delay": null,
        "update:name": null,
    },
    props: {
        delay: [Number, Object],
        name: String
    }
});
exports.DxShowSubmenuMode = DxShowSubmenuMode;
DxShowSubmenuMode.$_optionName = "showSubmenuMode";
DxShowSubmenuMode.$_expectedChildren = {
    delay: { isCollectionItem: false, optionName: "delay" }
};
var DxTo = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
});
exports.DxTo = DxTo;
DxTo.$_optionName = "to";
exports.default = DxContextMenu;
