/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initBaseComponent = exports.initDxComponent = void 0;
var vue_1 = require("vue");
var callbacks_1 = __importDefault(require("devextreme/core/utils/callbacks"));
var events_1 = require("devextreme/events");
var vue_helper_1 = require("./vue-helper");
var children_processing_1 = require("./children-processing");
var configuration_1 = __importStar(require("./configuration"));
var configuration_component_1 = require("./configuration-component");
var constants_1 = require("./constants");
var helpers_1 = require("./helpers");
var templates_manager_1 = require("./templates-manager");
var includeAttrs = ["id", "class", "style"];
function getAttrs(attrs) {
    var attributes = {};
    includeAttrs.forEach(function (attr) {
        var attrValue = attrs[attr];
        if (attrValue) {
            attributes[attr] = attrValue;
        }
    });
    return attributes;
}
function initBaseComponent() {
    return vue_1.defineComponent({
        inheritAttrs: false,
        data: function () {
            return {
                eventBus: callbacks_1.default()
            };
        },
        provide: function () {
            return {
                eventBus: this.eventBus
            };
        },
        render: function () {
            var thisComponent = this;
            var children = [];
            if (thisComponent.$_config.cleanNested) {
                thisComponent.$_config.cleanNested();
            }
            children_processing_1.pullAllChildren(vue_helper_1.defaultSlots(this), children, thisComponent.$_config);
            this.$_processChildren(children);
            return vue_1.h("div", __assign({}, getAttrs(this.$attrs)), children);
        },
        beforeUpdate: function () {
            var thisComponent = this;
            thisComponent.$_config.setPrevNestedOptions(thisComponent.$_config.getNestedOptionValues());
        },
        updated: function () {
            var thisComponent = this;
            var nodes = cleanWidgetNode(this.$el);
            vue_helper_1.getChildren(thisComponent).forEach(function (child) {
                var _a;
                configuration_component_1.initOptionChangedFunc(child.$_config, child.type.props || {}, (_a = child === null || child === void 0 ? void 0 : child.component) === null || _a === void 0 ? void 0 : _a.proxy, child.$_innerChanges);
            });
            thisComponent.$_templatesManager.discover();
            thisComponent.$_instance.beginUpdate();
            if (thisComponent.$_templatesManager.isDirty) {
                thisComponent.$_instance.option("integrationOptions.templates", thisComponent.$_templatesManager.templates);
                var props = thisComponent.$.vnode.props;
                for (var _i = 0, _a = Object.keys(thisComponent.$_templatesManager.templates); _i < _a.length; _i++) {
                    var name_1 = _a[_i];
                    thisComponent.$_instance.option(helpers_1.getTemplatePropName(props, name_1), name_1);
                }
                thisComponent.$_templatesManager.resetDirtyFlag();
            }
            for (var _b = 0, _c = Object.keys(thisComponent.$_pendingOptions); _b < _c.length; _b++) {
                var name_2 = _c[_b];
                thisComponent.$_instance.option(name_2, thisComponent.$_pendingOptions[name_2]);
            }
            thisComponent.$_pendingOptions = {};
            this.$_applyConfigurationChanges();
            thisComponent.$_instance.endUpdate();
            restoreNodes(this.$el, nodes);
            this.eventBus.fire();
        },
        beforeUnmount: function () {
            var thisComponent = this;
            var instance = thisComponent.$_instance;
            if (instance) {
                events_1.triggerHandler(this.$el, constants_1.DX_REMOVE_EVENT);
                instance.dispose();
            }
        },
        created: function () {
            var thisComponent = this;
            var props = vue_helper_1.getComponentProps(this);
            thisComponent.$_config = new configuration_1.default(function (n, v) {
                if (Array.isArray(v)) {
                    thisComponent.$_instance.option(n, v);
                }
                else {
                    thisComponent.$_pendingOptions[n === vue_helper_1.VMODEL_NAME ? "value" : n] = v;
                }
            }, null, props && __assign({}, props), thisComponent.$_expectedChildren);
            thisComponent.$_innerChanges = {};
            thisComponent.$_config.init(this.$props && Object.keys(this.$props));
        },
        methods: {
            $_applyConfigurationChanges: function () {
                var thisComponent = this;
                thisComponent.$_config.componentsCountChanged.forEach(function (_a) {
                    var optionPath = _a.optionPath, isCollection = _a.isCollection, removed = _a.removed;
                    var options = thisComponent.$_config.getNestedOptionValues();
                    if (!isCollection && removed) {
                        thisComponent.$_instance.resetOption(optionPath);
                    }
                    else {
                        thisComponent.$_instance.option(optionPath, helpers_1.getOptionValue(options, optionPath));
                    }
                });
                thisComponent.$_config.cleanComponentsCountChanged();
            },
            $_createWidget: function (element) {
                var thisComponent = this;
                thisComponent.$_pendingOptions = {};
                thisComponent.$_templatesManager = new templates_manager_1.TemplatesManager(this);
                var config = thisComponent.$_config;
                if (config.initialValues.hasOwnProperty(vue_helper_1.VMODEL_NAME)) {
                    config.initialValues.value = vue_helper_1.getVModelValue(config.initialValues);
                }
                var options = __assign(__assign(__assign(__assign({ templatesRenderAsynchronously: thisComponent.$_hasAsyncTemplate }, vue_helper_1.getComponentProps(thisComponent)), config.initialValues), config.getNestedOptionValues()), this.$_getIntegrationOptions());
                var instance = new thisComponent.$_WidgetClass(element, options);
                thisComponent.$_instance = instance;
                instance.on("optionChanged", function (args) { return config.onOptionChanged(args); });
                configuration_1.setEmitOptionChangedFunc(config, thisComponent, thisComponent.$_innerChanges);
                configuration_1.bindOptionWatchers(config, thisComponent, thisComponent.$_innerChanges);
                this.$_createEmitters(instance);
            },
            $_getIntegrationOptions: function () {
                var thisComponent = this;
                var result = __assign({ integrationOptions: {
                        watchMethod: this.$_getWatchMethod(),
                    } }, this.$_getExtraIntegrationOptions());
                if (thisComponent.$_templatesManager.isDirty) {
                    var templates = thisComponent.$_templatesManager.templates;
                    result.integrationOptions.templates = templates;
                    var props = thisComponent.$.vnode.props;
                    for (var _i = 0, _a = Object.keys(templates); _i < _a.length; _i++) {
                        var name_3 = _a[_i];
                        result[helpers_1.getTemplatePropName(props, name_3)] = name_3;
                    }
                    thisComponent.$_templatesManager.resetDirtyFlag();
                }
                return result;
            },
            $_getWatchMethod: function () {
                var _this = this;
                return function (valueGetter, valueChangeCallback, options) {
                    options = options || {};
                    if (!options.skipImmediate) {
                        valueChangeCallback(valueGetter());
                    }
                    return _this.$watch(function () {
                        return valueGetter();
                    }, function (newValue, oldValue) {
                        if (helpers_1.toComparable(oldValue) !== helpers_1.toComparable(newValue) || options.deep) {
                            valueChangeCallback(newValue);
                        }
                    }, {
                        deep: options.deep
                    });
                };
            },
            $_getExtraIntegrationOptions: function () {
                return {};
            },
            $_processChildren: function (_children) {
                return;
            },
            $_createEmitters: function (instance) {
                var _this = this;
                if (this.$attrs) {
                    Object.keys(this.$attrs).forEach(function (listenerName) {
                        var eventName = helpers_1.camelize(listenerName);
                        instance.on(eventName, function (e) {
                            _this.$emit(listenerName, e);
                        });
                    });
                }
            }
        }
    });
}
exports.initBaseComponent = initBaseComponent;
function cleanWidgetNode(node) {
    var removedNodes = [];
    helpers_1.forEachChildNode(node, function (childNode) {
        var parent = childNode.parentNode;
        var isExtension = childNode.hasAttribute && childNode.hasAttribute("isExtension");
        if ((childNode.nodeName === "#comment" || isExtension) && parent) {
            removedNodes.push(childNode);
            parent.removeChild(childNode);
        }
    });
    return removedNodes;
}
function restoreNodes(el, nodes) {
    nodes.forEach(function (node) {
        el.appendChild(node);
    });
}
function initDxComponent() {
    return vue_1.defineComponent({
        extends: initBaseComponent(),
        methods: {
            $_getExtraIntegrationOptions: function () {
                return {
                    onInitializing: function () {
                        this.beginUpdate();
                    }
                };
            },
            $_processChildren: function (children) {
                children.forEach(function (childNode) {
                    if (!childNode || typeof childNode !== "object") {
                        return;
                    }
                    childNode.$_hasOwner = true;
                });
            },
        },
        mounted: function () {
            var _this = this;
            var nodes = cleanWidgetNode(this.$el);
            var thisComponent = this;
            this.$_createWidget(this.$el);
            thisComponent.$_instance.endUpdate();
            restoreNodes(this.$el, nodes);
            if (this.$slots && this.$slots.default) {
                vue_helper_1.getChildren(thisComponent).forEach(function (child) {
                    var childExtenton = child;
                    if (childExtenton && childExtenton.$_isExtension) {
                        childExtenton.$_attachTo(_this.$el);
                    }
                });
            }
        }
    });
}
exports.initDxComponent = initDxComponent;
