/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxValueIndicator = exports.DxTooltip = exports.DxTitle = exports.DxTick = exports.DxText = exports.DxSubvalueIndicator = exports.DxSubtitle = exports.DxSize = exports.DxShadow = exports.DxScale = exports.DxRangeContainer = exports.DxRange = exports.DxMinorTick = exports.DxMargin = exports.DxLoadingIndicator = exports.DxLabel = exports.DxGeometry = exports.DxFormat = exports.DxFont = exports.DxExport = exports.DxBorder = exports.DxAnimation = exports.DxCircularGauge = void 0;
var circular_gauge_1 = __importDefault(require("devextreme/viz/circular_gauge"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxCircularGauge = index_1.createComponent({
    props: {
        animation: Object,
        containerBackgroundColor: String,
        disabled: Boolean,
        elementAttr: Object,
        export: Object,
        geometry: Object,
        loadingIndicator: Object,
        margin: Object,
        onDisposing: Function,
        onDrawn: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onIncidentOccurred: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onTooltipHidden: Function,
        onTooltipShown: Function,
        pathModified: Boolean,
        rangeContainer: Object,
        redrawOnResize: Boolean,
        rtlEnabled: Boolean,
        scale: Object,
        size: Object,
        subvalueIndicator: Object,
        subvalues: Array,
        theme: String,
        title: [Object, String],
        tooltip: Object,
        value: Number,
        valueIndicator: Object
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:animation": null,
        "update:containerBackgroundColor": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:export": null,
        "update:geometry": null,
        "update:loadingIndicator": null,
        "update:margin": null,
        "update:onDisposing": null,
        "update:onDrawn": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onIncidentOccurred": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onTooltipHidden": null,
        "update:onTooltipShown": null,
        "update:pathModified": null,
        "update:rangeContainer": null,
        "update:redrawOnResize": null,
        "update:rtlEnabled": null,
        "update:scale": null,
        "update:size": null,
        "update:subvalueIndicator": null,
        "update:subvalues": null,
        "update:theme": null,
        "update:title": null,
        "update:tooltip": null,
        "update:value": null,
        "update:valueIndicator": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = circular_gauge_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            animation: { isCollectionItem: false, optionName: "animation" },
            export: { isCollectionItem: false, optionName: "export" },
            geometry: { isCollectionItem: false, optionName: "geometry" },
            loadingIndicator: { isCollectionItem: false, optionName: "loadingIndicator" },
            margin: { isCollectionItem: false, optionName: "margin" },
            rangeContainer: { isCollectionItem: false, optionName: "rangeContainer" },
            scale: { isCollectionItem: false, optionName: "scale" },
            size: { isCollectionItem: false, optionName: "size" },
            subvalueIndicator: { isCollectionItem: false, optionName: "subvalueIndicator" },
            title: { isCollectionItem: false, optionName: "title" },
            tooltip: { isCollectionItem: false, optionName: "tooltip" },
            valueIndicator: { isCollectionItem: false, optionName: "valueIndicator" }
        };
    }
});
exports.DxCircularGauge = DxCircularGauge;
var DxAnimation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:duration": null,
        "update:easing": null,
        "update:enabled": null,
    },
    props: {
        duration: Number,
        easing: String,
        enabled: Boolean
    }
});
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
var DxBorder = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxBorder = DxBorder;
DxBorder.$_optionName = "border";
var DxExport = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:fileName": null,
        "update:formats": null,
        "update:margin": null,
        "update:printingEnabled": null,
        "update:proxyUrl": null,
        "update:svgToCanvas": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        fileName: String,
        formats: Array,
        margin: Number,
        printingEnabled: Boolean,
        proxyUrl: String,
        svgToCanvas: Function
    }
});
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
var DxFont = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:family": null,
        "update:opacity": null,
        "update:size": null,
        "update:weight": null,
    },
    props: {
        color: String,
        family: String,
        opacity: Number,
        size: [Number, String],
        weight: Number
    }
});
exports.DxFont = DxFont;
DxFont.$_optionName = "font";
var DxFormat = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
var DxGeometry = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endAngle": null,
        "update:startAngle": null,
    },
    props: {
        endAngle: Number,
        startAngle: Number
    }
});
exports.DxGeometry = DxGeometry;
DxGeometry.$_optionName = "geometry";
var DxLabel = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeText": null,
        "update:font": null,
        "update:format": null,
        "update:hideFirstOrLast": null,
        "update:indentFromTick": null,
        "update:overlappingBehavior": null,
        "update:useRangeColors": null,
        "update:visible": null,
    },
    props: {
        customizeText: Function,
        font: Object,
        format: [Object, Function, String],
        hideFirstOrLast: String,
        indentFromTick: Number,
        overlappingBehavior: String,
        useRangeColors: Boolean,
        visible: Boolean
    }
});
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
DxLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" }
};
var DxLoadingIndicator = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:font": null,
        "update:show": null,
        "update:text": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        font: Object,
        show: Boolean,
        text: String
    }
});
exports.DxLoadingIndicator = DxLoadingIndicator;
DxLoadingIndicator.$_optionName = "loadingIndicator";
DxLoadingIndicator.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxMargin = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:left": null,
        "update:right": null,
        "update:top": null,
    },
    props: {
        bottom: Number,
        left: Number,
        right: Number,
        top: Number
    }
});
exports.DxMargin = DxMargin;
DxMargin.$_optionName = "margin";
var DxMinorTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxMinorTick = DxMinorTick;
DxMinorTick.$_optionName = "minorTick";
var DxRange = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:endValue": null,
        "update:startValue": null,
    },
    props: {
        color: String,
        endValue: Number,
        startValue: Number
    }
});
exports.DxRange = DxRange;
DxRange.$_optionName = "ranges";
DxRange.$_isCollectionItem = true;
var DxRangeContainer = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:offset": null,
        "update:orientation": null,
        "update:palette": null,
        "update:paletteExtensionMode": null,
        "update:ranges": null,
        "update:width": null,
    },
    props: {
        backgroundColor: String,
        offset: Number,
        orientation: String,
        palette: [Array, String],
        paletteExtensionMode: String,
        ranges: Array,
        width: Number
    }
});
exports.DxRangeContainer = DxRangeContainer;
DxRangeContainer.$_optionName = "rangeContainer";
DxRangeContainer.$_expectedChildren = {
    range: { isCollectionItem: true, optionName: "ranges" }
};
var DxScale = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDecimals": null,
        "update:customMinorTicks": null,
        "update:customTicks": null,
        "update:endValue": null,
        "update:label": null,
        "update:minorTick": null,
        "update:minorTickInterval": null,
        "update:orientation": null,
        "update:scaleDivisionFactor": null,
        "update:startValue": null,
        "update:tick": null,
        "update:tickInterval": null,
    },
    props: {
        allowDecimals: Boolean,
        customMinorTicks: Array,
        customTicks: Array,
        endValue: Number,
        label: Object,
        minorTick: Object,
        minorTickInterval: Number,
        orientation: String,
        scaleDivisionFactor: Number,
        startValue: Number,
        tick: Object,
        tickInterval: Number
    }
});
exports.DxScale = DxScale;
DxScale.$_optionName = "scale";
DxScale.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" },
    minorTick: { isCollectionItem: false, optionName: "minorTick" },
    tick: { isCollectionItem: false, optionName: "tick" }
};
var DxShadow = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:blur": null,
        "update:color": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
    },
    props: {
        blur: Number,
        color: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number
    }
});
exports.DxShadow = DxShadow;
DxShadow.$_optionName = "shadow";
var DxSize = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:width": null,
    },
    props: {
        height: Number,
        width: Number
    }
});
exports.DxSize = DxSize;
DxSize.$_optionName = "size";
var DxSubtitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
});
exports.DxSubtitle = DxSubtitle;
DxSubtitle.$_optionName = "subtitle";
DxSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
var DxSubvalueIndicator = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:arrowLength": null,
        "update:backgroundColor": null,
        "update:baseValue": null,
        "update:beginAdaptingAtRadius": null,
        "update:color": null,
        "update:horizontalOrientation": null,
        "update:indentFromCenter": null,
        "update:length": null,
        "update:offset": null,
        "update:palette": null,
        "update:secondColor": null,
        "update:secondFraction": null,
        "update:size": null,
        "update:spindleGapSize": null,
        "update:spindleSize": null,
        "update:text": null,
        "update:type": null,
        "update:verticalOrientation": null,
        "update:width": null,
    },
    props: {
        arrowLength: Number,
        backgroundColor: String,
        baseValue: Number,
        beginAdaptingAtRadius: Number,
        color: String,
        horizontalOrientation: String,
        indentFromCenter: Number,
        length: Number,
        offset: Number,
        palette: [Array, String],
        secondColor: String,
        secondFraction: Number,
        size: Number,
        spindleGapSize: Number,
        spindleSize: Number,
        text: Object,
        type: String,
        verticalOrientation: String,
        width: Number
    }
});
exports.DxSubvalueIndicator = DxSubvalueIndicator;
DxSubvalueIndicator.$_optionName = "subvalueIndicator";
DxSubvalueIndicator.$_expectedChildren = {
    text: { isCollectionItem: false, optionName: "text" }
};
var DxText = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeText": null,
        "update:font": null,
        "update:format": null,
        "update:indent": null,
    },
    props: {
        customizeText: Function,
        font: Object,
        format: [Object, Function, String],
        indent: Number
    }
});
exports.DxText = DxText;
DxText.$_optionName = "text";
DxText.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" }
};
var DxTick = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
});
exports.DxTick = DxTick;
DxTick.$_optionName = "tick";
var DxTitle = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
});
exports.DxTitle = DxTitle;
DxTitle.$_optionName = "title";
DxTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
var DxTooltip = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:arrowLength": null,
        "update:border": null,
        "update:color": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:cornerRadius": null,
        "update:customizeTooltip": null,
        "update:enabled": null,
        "update:font": null,
        "update:format": null,
        "update:interactive": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:shadow": null,
        "update:zIndex": null,
    },
    props: {
        arrowLength: Number,
        border: Object,
        color: String,
        container: {},
        contentTemplate: {},
        cornerRadius: Number,
        customizeTooltip: Function,
        enabled: Boolean,
        font: Object,
        format: [Object, Function, String],
        interactive: Boolean,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        shadow: Object,
        zIndex: Number
    }
});
exports.DxTooltip = DxTooltip;
DxTooltip.$_optionName = "tooltip";
DxTooltip.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    shadow: { isCollectionItem: false, optionName: "shadow" }
};
var DxValueIndicator = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:arrowLength": null,
        "update:backgroundColor": null,
        "update:baseValue": null,
        "update:beginAdaptingAtRadius": null,
        "update:color": null,
        "update:horizontalOrientation": null,
        "update:indentFromCenter": null,
        "update:length": null,
        "update:offset": null,
        "update:palette": null,
        "update:secondColor": null,
        "update:secondFraction": null,
        "update:size": null,
        "update:spindleGapSize": null,
        "update:spindleSize": null,
        "update:text": null,
        "update:type": null,
        "update:verticalOrientation": null,
        "update:width": null,
    },
    props: {
        arrowLength: Number,
        backgroundColor: String,
        baseValue: Number,
        beginAdaptingAtRadius: Number,
        color: String,
        horizontalOrientation: String,
        indentFromCenter: Number,
        length: Number,
        offset: Number,
        palette: [Array, String],
        secondColor: String,
        secondFraction: Number,
        size: Number,
        spindleGapSize: Number,
        spindleSize: Number,
        text: Object,
        type: String,
        verticalOrientation: String,
        width: Number
    }
});
exports.DxValueIndicator = DxValueIndicator;
DxValueIndicator.$_optionName = "valueIndicator";
exports.default = DxCircularGauge;
