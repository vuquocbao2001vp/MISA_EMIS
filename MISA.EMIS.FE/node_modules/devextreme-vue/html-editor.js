/*!
 * devextreme-vue
 * Version: 22.1.4
 * Build date: Fri Jul 22 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxVariables = exports.DxToolbarItem = exports.DxToolbar = exports.DxTableResizing = exports.DxTableContextMenuItem = exports.DxTableContextMenu = exports.DxTab = exports.DxMention = exports.DxMediaResizing = exports.DxItem = exports.DxImageUpload = exports.DxFileUploaderOptions = exports.DxHtmlEditor = void 0;
var html_editor_1 = __importDefault(require("devextreme/ui/html_editor"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxHtmlEditor = index_1.createComponent({
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowSoftLineBreak: Boolean,
        customizeModules: Function,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        imageUpload: Object,
        isValid: Boolean,
        mediaResizing: Object,
        mentions: Array,
        name: String,
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        placeholder: String,
        readOnly: Boolean,
        rtlEnabled: Boolean,
        stylingMode: String,
        tabIndex: Number,
        tableContextMenu: Object,
        tableResizing: Object,
        toolbar: Object,
        validationError: {},
        validationErrors: Array,
        validationMessageMode: String,
        validationStatus: String,
        value: {},
        valueType: String,
        variables: Object,
        visible: Boolean,
        width: [Function, Number, String]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowSoftLineBreak": null,
        "update:customizeModules": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:imageUpload": null,
        "update:isValid": null,
        "update:mediaResizing": null,
        "update:mentions": null,
        "update:name": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onValueChanged": null,
        "update:placeholder": null,
        "update:readOnly": null,
        "update:rtlEnabled": null,
        "update:stylingMode": null,
        "update:tabIndex": null,
        "update:tableContextMenu": null,
        "update:tableResizing": null,
        "update:toolbar": null,
        "update:validationError": null,
        "update:validationErrors": null,
        "update:validationMessageMode": null,
        "update:validationStatus": null,
        "update:value": null,
        "update:valueType": null,
        "update:variables": null,
        "update:visible": null,
        "update:width": null,
    },
    model: { prop: "value", event: "update:value" },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = html_editor_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            imageUpload: { isCollectionItem: false, optionName: "imageUpload" },
            mediaResizing: { isCollectionItem: false, optionName: "mediaResizing" },
            mention: { isCollectionItem: true, optionName: "mentions" },
            tableContextMenu: { isCollectionItem: false, optionName: "tableContextMenu" },
            tableResizing: { isCollectionItem: false, optionName: "tableResizing" },
            toolbar: { isCollectionItem: false, optionName: "toolbar" },
            variables: { isCollectionItem: false, optionName: "variables" }
        };
    }
});
exports.DxHtmlEditor = DxHtmlEditor;
var DxFileUploaderOptions = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:abortUpload": null,
        "update:accept": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowCanceling": null,
        "update:allowedFileExtensions": null,
        "update:bindingOptions": null,
        "update:chunkSize": null,
        "update:dialogTrigger": null,
        "update:disabled": null,
        "update:dropZone": null,
        "update:elementAttr": null,
        "update:extendSelection": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:inputAttr": null,
        "update:invalidFileExtensionMessage": null,
        "update:invalidMaxFileSizeMessage": null,
        "update:invalidMinFileSizeMessage": null,
        "update:isValid": null,
        "update:labelText": null,
        "update:maxFileSize": null,
        "update:minFileSize": null,
        "update:multiple": null,
        "update:name": null,
        "update:onBeforeSend": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onDropZoneEnter": null,
        "update:onDropZoneLeave": null,
        "update:onFilesUploaded": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onProgress": null,
        "update:onUploadAborted": null,
        "update:onUploaded": null,
        "update:onUploadError": null,
        "update:onUploadStarted": null,
        "update:onValueChanged": null,
        "update:progress": null,
        "update:readOnly": null,
        "update:readyToUploadMessage": null,
        "update:rtlEnabled": null,
        "update:selectButtonText": null,
        "update:showFileList": null,
        "update:stylingMode": null,
        "update:tabIndex": null,
        "update:uploadAbortedMessage": null,
        "update:uploadButtonText": null,
        "update:uploadChunk": null,
        "update:uploadCustomData": null,
        "update:uploadedMessage": null,
        "update:uploadFailedMessage": null,
        "update:uploadFile": null,
        "update:uploadHeaders": null,
        "update:uploadMethod": null,
        "update:uploadMode": null,
        "update:uploadUrl": null,
        "update:validationError": null,
        "update:validationErrors": null,
        "update:validationMessageMode": null,
        "update:validationStatus": null,
        "update:value": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        abortUpload: Function,
        accept: String,
        accessKey: String,
        activeStateEnabled: Boolean,
        allowCanceling: Boolean,
        allowedFileExtensions: Array,
        bindingOptions: Object,
        chunkSize: Number,
        dialogTrigger: {},
        disabled: Boolean,
        dropZone: {},
        elementAttr: Object,
        extendSelection: Boolean,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        inputAttr: {},
        invalidFileExtensionMessage: String,
        invalidMaxFileSizeMessage: String,
        invalidMinFileSizeMessage: String,
        isValid: Boolean,
        labelText: String,
        maxFileSize: Number,
        minFileSize: Number,
        multiple: Boolean,
        name: String,
        onBeforeSend: Function,
        onContentReady: Function,
        onDisposing: Function,
        onDropZoneEnter: Function,
        onDropZoneLeave: Function,
        onFilesUploaded: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onProgress: Function,
        onUploadAborted: Function,
        onUploaded: Function,
        onUploadError: Function,
        onUploadStarted: Function,
        onValueChanged: Function,
        progress: Number,
        readOnly: Boolean,
        readyToUploadMessage: String,
        rtlEnabled: Boolean,
        selectButtonText: String,
        showFileList: Boolean,
        stylingMode: String,
        tabIndex: Number,
        uploadAbortedMessage: String,
        uploadButtonText: String,
        uploadChunk: Function,
        uploadCustomData: {},
        uploadedMessage: String,
        uploadFailedMessage: String,
        uploadFile: Function,
        uploadHeaders: {},
        uploadMethod: String,
        uploadMode: String,
        uploadUrl: String,
        validationError: {},
        validationErrors: Array,
        validationMessageMode: String,
        validationStatus: String,
        value: Array,
        visible: Boolean,
        width: [Function, Number, String]
    }
});
exports.DxFileUploaderOptions = DxFileUploaderOptions;
DxFileUploaderOptions.$_optionName = "fileUploaderOptions";
var DxImageUpload = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:fileUploaderOptions": null,
        "update:fileUploadMode": null,
        "update:tabs": null,
        "update:uploadDirectory": null,
        "update:uploadUrl": null,
    },
    props: {
        fileUploaderOptions: Object,
        fileUploadMode: String,
        tabs: Array,
        uploadDirectory: String,
        uploadUrl: String
    }
});
exports.DxImageUpload = DxImageUpload;
DxImageUpload.$_optionName = "imageUpload";
DxImageUpload.$_expectedChildren = {
    fileUploaderOptions: { isCollectionItem: false, optionName: "fileUploaderOptions" },
    tab: { isCollectionItem: true, optionName: "tabs" }
};
var DxItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:acceptedValues": null,
        "update:beginGroup": null,
        "update:closeMenuOnClick": null,
        "update:cssClass": null,
        "update:disabled": null,
        "update:formatName": null,
        "update:formatValues": null,
        "update:html": null,
        "update:icon": null,
        "update:items": null,
        "update:locateInMenu": null,
        "update:location": null,
        "update:menuItemTemplate": null,
        "update:name": null,
        "update:options": null,
        "update:selectable": null,
        "update:selected": null,
        "update:showText": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
        "update:widget": null,
    },
    props: {
        acceptedValues: Array,
        beginGroup: Boolean,
        closeMenuOnClick: Boolean,
        cssClass: String,
        disabled: Boolean,
        formatName: String,
        formatValues: Array,
        html: String,
        icon: String,
        items: Array,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: {},
        selectable: Boolean,
        selected: Boolean,
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
var DxMediaResizing = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowedTargets": null,
        "update:enabled": null,
    },
    props: {
        allowedTargets: Array,
        enabled: Boolean
    }
});
exports.DxMediaResizing = DxMediaResizing;
DxMediaResizing.$_optionName = "mediaResizing";
var DxMention = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:itemTemplate": null,
        "update:marker": null,
        "update:minSearchLength": null,
        "update:searchExpr": null,
        "update:searchTimeout": null,
        "update:template": null,
        "update:valueExpr": null,
    },
    props: {
        dataSource: {},
        displayExpr: [Function, String],
        itemTemplate: {},
        marker: String,
        minSearchLength: Number,
        searchExpr: [Array, Function, String],
        searchTimeout: Number,
        template: {},
        valueExpr: [Function, String]
    }
});
exports.DxMention = DxMention;
DxMention.$_optionName = "mentions";
DxMention.$_isCollectionItem = true;
var DxTab = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:name": null,
    },
    props: {
        name: String
    }
});
exports.DxTab = DxTab;
DxTab.$_optionName = "tabs";
DxTab.$_isCollectionItem = true;
var DxTableContextMenu = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:items": null,
    },
    props: {
        enabled: Boolean,
        items: Array
    }
});
exports.DxTableContextMenu = DxTableContextMenu;
DxTableContextMenu.$_optionName = "tableContextMenu";
DxTableContextMenu.$_expectedChildren = {
    item: { isCollectionItem: true, optionName: "items" },
    tableContextMenuItem: { isCollectionItem: true, optionName: "items" }
};
var DxTableContextMenuItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:beginGroup": null,
        "update:closeMenuOnClick": null,
        "update:disabled": null,
        "update:html": null,
        "update:icon": null,
        "update:items": null,
        "update:name": null,
        "update:selectable": null,
        "update:selected": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        beginGroup: Boolean,
        closeMenuOnClick: Boolean,
        disabled: Boolean,
        html: String,
        icon: String,
        items: Array,
        name: String,
        selectable: Boolean,
        selected: Boolean,
        template: {},
        text: String,
        visible: Boolean
    }
});
exports.DxTableContextMenuItem = DxTableContextMenuItem;
DxTableContextMenuItem.$_optionName = "items";
DxTableContextMenuItem.$_isCollectionItem = true;
var DxTableResizing = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:minColumnWidth": null,
        "update:minRowHeight": null,
    },
    props: {
        enabled: Boolean,
        minColumnWidth: Number,
        minRowHeight: Number
    }
});
exports.DxTableResizing = DxTableResizing;
DxTableResizing.$_optionName = "tableResizing";
var DxToolbar = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:container": null,
        "update:items": null,
        "update:multiline": null,
    },
    props: {
        container: {},
        items: Array,
        multiline: Boolean
    }
});
exports.DxToolbar = DxToolbar;
DxToolbar.$_optionName = "toolbar";
DxToolbar.$_expectedChildren = {
    item: { isCollectionItem: true, optionName: "items" },
    toolbarItem: { isCollectionItem: true, optionName: "items" }
};
var DxToolbarItem = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:acceptedValues": null,
        "update:cssClass": null,
        "update:disabled": null,
        "update:formatName": null,
        "update:formatValues": null,
        "update:html": null,
        "update:locateInMenu": null,
        "update:location": null,
        "update:menuItemTemplate": null,
        "update:name": null,
        "update:options": null,
        "update:showText": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
        "update:widget": null,
    },
    props: {
        acceptedValues: Array,
        cssClass: String,
        disabled: Boolean,
        formatName: String,
        formatValues: Array,
        html: String,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: {},
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxToolbarItem = DxToolbarItem;
DxToolbarItem.$_optionName = "items";
DxToolbarItem.$_isCollectionItem = true;
var DxVariables = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:dataSource": null,
        "update:escapeChar": null,
    },
    props: {
        dataSource: {},
        escapeChar: [Array, String]
    }
});
exports.DxVariables = DxVariables;
DxVariables.$_optionName = "variables";
exports.default = DxHtmlEditor;
