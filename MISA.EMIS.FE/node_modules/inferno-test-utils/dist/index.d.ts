import { VNode } from 'inferno';
import { getTagNameOfVNode as _getTagNameOfVNode, isClassVNode as _isClassVNode, isComponentVNode as _isComponentVNode, isDOMVNode as _isDOMVNode, isFunctionalVNode as _isFunctionalVNode, isTextVNode as _isTextVNode, isVNode as _isVNode, Wrapper as _Wrapper } from './utils';
import { renderToSnapshot as _renderToSnapshot, vNodeToSnapshot as _vNodeToSnapshot } from './jest';
export declare function isVNodeOfType(obj: VNode, type: string | Function): boolean;
export declare function isDOMVNodeOfType(obj: VNode, type: string): boolean;
export declare function isFunctionalVNodeOfType(obj: VNode, type: Function): boolean;
export declare function isClassVNodeOfType(obj: VNode, type: Function): boolean;
export declare function isComponentVNodeOfType(obj: VNode, type: Function): boolean;
export declare function isDOMElement(obj: any): boolean;
export declare function isDOMElementOfType(obj: any, type: string): boolean;
export declare function isRenderedClassComponent(obj: any): boolean;
export declare function isRenderedClassComponentOfType(obj: any, type: Function): boolean;
export declare function findAllInRenderedTree(renderedTree: any, predicate: (vNode: VNode) => boolean): VNode[] | any;
export declare function findAllInVNodeTree(vNodeTree: VNode, predicate: (vNode: VNode) => boolean): any;
export declare function scryRenderedDOMElementsWithClass(renderedTree: any, classNames: string | string[]): Element[];
export declare function scryRenderedDOMElementsWithTag(renderedTree: any, tagName: string): Element[];
export declare function scryRenderedVNodesWithType(renderedTree: any, type: string | Function): VNode[];
export declare function scryVNodesWithType(vNodeTree: VNode, type: string | Function): VNode[];
export declare function findRenderedDOMElementWithClass(renderedTree: any, classNames: string | string[]): Element;
export declare function findRenderedDOMElementWithTag(renderedTree: any, tagName: string): Element;
export declare function findRenderedVNodeWithType(renderedTree: any, type: string | Function): VNode;
export declare function findVNodeWithType(vNodeTree: VNode, type: string | Function): VNode;
export declare function renderIntoContainer(input: any): any;
export declare const vNodeToSnapshot: typeof _vNodeToSnapshot;
export declare const renderToSnapshot: typeof _renderToSnapshot;
export declare const getTagNameOfVNode: typeof _getTagNameOfVNode;
export declare const isClassVNode: typeof _isClassVNode;
export declare const isComponentVNode: typeof _isComponentVNode;
export declare const isDOMVNode: typeof _isDOMVNode;
export declare const isFunctionalVNode: typeof _isFunctionalVNode;
export declare const isTextVNode: typeof _isTextVNode;
export declare const isVNode: typeof _isVNode;
export declare const Wrapper: typeof _Wrapper;
