{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataProvider.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport config from \"../../../../core/config\";\nimport { AppointmentDataSource } from \"./appointmentDataSource\";\nimport { AppointmentFilterBaseStrategy, AppointmentFilterVirtualStrategy } from \"./appointmentFilter\";\nimport combineRemoteFilter from \"../../../../renovation/ui/scheduler/utils/filtering/remote\";\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\nexport class AppointmentDataProvider {\n  constructor(options) {\n    this.options = options;\n    this.dataSource = this.options.dataSource;\n    this.dataAccessors = this.options.dataAccessors;\n    this.timeZoneCalculator = this.options.timeZoneCalculator;\n    this.appointmentDataSource = new AppointmentDataSource(this.dataSource);\n    this.initFilterStrategy();\n  }\n\n  get keyName() {\n    return this.appointmentDataSource.keyName;\n  }\n\n  get filterStrategyName() {\n    return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard;\n  }\n\n  getFilterStrategy() {\n    if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {\n      this.initFilterStrategy();\n    }\n\n    return this.filterStrategy;\n  }\n\n  initFilterStrategy() {\n    var filterOptions = {\n      resources: this.options.resources,\n      dataAccessors: this.dataAccessors,\n      startDayHour: this.options.startDayHour,\n      endDayHour: this.options.endDayHour,\n      showAllDayPanel: this.options.showAllDayPanel,\n      timeZoneCalculator: this.options.timeZoneCalculator,\n      loadedResources: this.options.getLoadedResources,\n      supportAllDayRow: this.options.getSupportAllDayRow,\n      viewType: this.options.getViewType,\n      viewDirection: this.options.getViewDirection,\n      dateRange: this.options.getDateRange,\n      groupCount: this.options.getGroupCount,\n      viewDataProvider: this.options.getViewDataProvider,\n      allDayPanelMode: this.options.allDayPanelMode\n    };\n    this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new AppointmentFilterVirtualStrategy(filterOptions) : new AppointmentFilterBaseStrategy(filterOptions);\n  }\n\n  setDataSource(dataSource) {\n    this.dataSource = dataSource;\n    this.initFilterStrategy();\n    this.appointmentDataSource.setDataSource(this.dataSource);\n  }\n\n  updateDataAccessors(dataAccessors) {\n    this.dataAccessors = dataAccessors;\n    this.initFilterStrategy();\n  }\n\n  filter(preparedItems) {\n    return this.getFilterStrategy().filter(preparedItems);\n  }\n\n  filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\n    if (!this.dataSource || !remoteFiltering) {\n      return;\n    }\n\n    var dataSourceFilter = this.dataSource.filter();\n    var filter = combineRemoteFilter({\n      dataSourceFilter: dataSourceFilter,\n      dataAccessors: this.dataAccessors,\n      min: min,\n      max: max,\n      dateSerializationFormat: dateSerializationFormat,\n      forceIsoDateParsing: config().forceIsoDateParsing\n    });\n    this.dataSource.filter(filter);\n  }\n\n  hasAllDayAppointments(filteredItems, preparedItems) {\n    return this.getFilterStrategy().hasAllDayAppointments(filteredItems, preparedItems);\n  }\n\n  filterLoadedAppointments(filterOption, preparedItems) {\n    return this.getFilterStrategy().filterLoadedAppointments(filterOption, preparedItems);\n  }\n\n  calculateAppointmentEndDate(isAllDay, startDate) {\n    return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate);\n  }\n\n  cleanState() {\n    this.appointmentDataSource.cleanState();\n  }\n\n  getUpdatedAppointment() {\n    return this.appointmentDataSource._updatedAppointment;\n  }\n\n  getUpdatedAppointmentKeys() {\n    return this.appointmentDataSource._updatedAppointmentKeys;\n  }\n\n  add(rawAppointment) {\n    return this.appointmentDataSource.add(rawAppointment);\n  }\n\n  update(target, rawAppointment) {\n    return this.appointmentDataSource.update(target, rawAppointment);\n  }\n\n  remove(rawAppointment) {\n    return this.appointmentDataSource.remove(rawAppointment);\n  }\n\n}","map":{"version":3,"names":["config","AppointmentDataSource","AppointmentFilterBaseStrategy","AppointmentFilterVirtualStrategy","combineRemoteFilter","FilterStrategies","virtual","standard","AppointmentDataProvider","constructor","options","dataSource","dataAccessors","timeZoneCalculator","appointmentDataSource","initFilterStrategy","keyName","filterStrategyName","getIsVirtualScrolling","getFilterStrategy","filterStrategy","strategyName","filterOptions","resources","startDayHour","endDayHour","showAllDayPanel","loadedResources","getLoadedResources","supportAllDayRow","getSupportAllDayRow","viewType","getViewType","viewDirection","getViewDirection","dateRange","getDateRange","groupCount","getGroupCount","viewDataProvider","getViewDataProvider","allDayPanelMode","setDataSource","updateDataAccessors","filter","preparedItems","filterByDate","min","max","remoteFiltering","dateSerializationFormat","dataSourceFilter","forceIsoDateParsing","hasAllDayAppointments","filteredItems","filterLoadedAppointments","filterOption","calculateAppointmentEndDate","isAllDay","startDate","cleanState","getUpdatedAppointment","_updatedAppointment","getUpdatedAppointmentKeys","_updatedAppointmentKeys","add","rawAppointment","update","target","remove"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/appointments/dataProvider/appointmentDataProvider.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataProvider.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport config from \"../../../../core/config\";\r\nimport {\r\n    AppointmentDataSource\r\n} from \"./appointmentDataSource\";\r\nimport {\r\n    AppointmentFilterBaseStrategy,\r\n    AppointmentFilterVirtualStrategy\r\n} from \"./appointmentFilter\";\r\nimport combineRemoteFilter from \"../../../../renovation/ui/scheduler/utils/filtering/remote\";\r\nvar FilterStrategies = {\r\n    virtual: \"virtual\",\r\n    standard: \"standard\"\r\n};\r\nexport class AppointmentDataProvider {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.dataSource = this.options.dataSource;\r\n        this.dataAccessors = this.options.dataAccessors;\r\n        this.timeZoneCalculator = this.options.timeZoneCalculator;\r\n        this.appointmentDataSource = new AppointmentDataSource(this.dataSource);\r\n        this.initFilterStrategy()\r\n    }\r\n    get keyName() {\r\n        return this.appointmentDataSource.keyName\r\n    }\r\n    get filterStrategyName() {\r\n        return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard\r\n    }\r\n    getFilterStrategy() {\r\n        if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {\r\n            this.initFilterStrategy()\r\n        }\r\n        return this.filterStrategy\r\n    }\r\n    initFilterStrategy() {\r\n        var filterOptions = {\r\n            resources: this.options.resources,\r\n            dataAccessors: this.dataAccessors,\r\n            startDayHour: this.options.startDayHour,\r\n            endDayHour: this.options.endDayHour,\r\n            showAllDayPanel: this.options.showAllDayPanel,\r\n            timeZoneCalculator: this.options.timeZoneCalculator,\r\n            loadedResources: this.options.getLoadedResources,\r\n            supportAllDayRow: this.options.getSupportAllDayRow,\r\n            viewType: this.options.getViewType,\r\n            viewDirection: this.options.getViewDirection,\r\n            dateRange: this.options.getDateRange,\r\n            groupCount: this.options.getGroupCount,\r\n            viewDataProvider: this.options.getViewDataProvider,\r\n            allDayPanelMode: this.options.allDayPanelMode\r\n        };\r\n        this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new AppointmentFilterVirtualStrategy(filterOptions) : new AppointmentFilterBaseStrategy(filterOptions)\r\n    }\r\n    setDataSource(dataSource) {\r\n        this.dataSource = dataSource;\r\n        this.initFilterStrategy();\r\n        this.appointmentDataSource.setDataSource(this.dataSource)\r\n    }\r\n    updateDataAccessors(dataAccessors) {\r\n        this.dataAccessors = dataAccessors;\r\n        this.initFilterStrategy()\r\n    }\r\n    filter(preparedItems) {\r\n        return this.getFilterStrategy().filter(preparedItems)\r\n    }\r\n    filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\r\n        if (!this.dataSource || !remoteFiltering) {\r\n            return\r\n        }\r\n        var dataSourceFilter = this.dataSource.filter();\r\n        var filter = combineRemoteFilter({\r\n            dataSourceFilter: dataSourceFilter,\r\n            dataAccessors: this.dataAccessors,\r\n            min: min,\r\n            max: max,\r\n            dateSerializationFormat: dateSerializationFormat,\r\n            forceIsoDateParsing: config().forceIsoDateParsing\r\n        });\r\n        this.dataSource.filter(filter)\r\n    }\r\n    hasAllDayAppointments(filteredItems, preparedItems) {\r\n        return this.getFilterStrategy().hasAllDayAppointments(filteredItems, preparedItems)\r\n    }\r\n    filterLoadedAppointments(filterOption, preparedItems) {\r\n        return this.getFilterStrategy().filterLoadedAppointments(filterOption, preparedItems)\r\n    }\r\n    calculateAppointmentEndDate(isAllDay, startDate) {\r\n        return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate)\r\n    }\r\n    cleanState() {\r\n        this.appointmentDataSource.cleanState()\r\n    }\r\n    getUpdatedAppointment() {\r\n        return this.appointmentDataSource._updatedAppointment\r\n    }\r\n    getUpdatedAppointmentKeys() {\r\n        return this.appointmentDataSource._updatedAppointmentKeys\r\n    }\r\n    add(rawAppointment) {\r\n        return this.appointmentDataSource.add(rawAppointment)\r\n    }\r\n    update(target, rawAppointment) {\r\n        return this.appointmentDataSource.update(target, rawAppointment)\r\n    }\r\n    remove(rawAppointment) {\r\n        return this.appointmentDataSource.remove(rawAppointment)\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}