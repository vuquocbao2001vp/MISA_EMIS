{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isEmptyObject, isFunction, type } from \"../../core/utils/type\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { ensureDefined, equalByValue } from \"../../core/utils/common\";\nimport messageLocalization from \"../../localization/message\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Widget from \"../widget/ui.widget\";\nimport notify from \"../notify\";\nimport { findItemsByKeys, extendAttributes } from \"./ui.file_manager.common\";\nimport FileItemsController from \"./file_items_controller\";\nimport { defaultPermissions, FileManagerCommandManager } from \"./ui.file_manager.command_manager\";\nimport FileManagerContextMenu from \"./ui.file_manager.context_menu\";\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\nimport FileManagerDetailsItemList from \"./ui.file_manager.item_list.details\";\nimport FileManagerThumbnailsItemList from \"./ui.file_manager.item_list.thumbnails\";\nimport FileManagerToolbar from \"./ui.file_manager.toolbar\";\nimport FileManagerNotificationControl from \"./ui.file_manager.notification\";\nimport FileManagerEditingControl from \"./ui.file_manager.editing\";\nimport FileManagerBreadcrumbs from \"./ui.file_manager.breadcrumbs\";\nimport FileManagerAdaptivityControl from \"./ui.file_manager.adaptivity\";\nimport { normalizeOptions } from \"../../core/options/utils\";\nimport { equals } from \"../../core/utils/comparator\";\nvar FILE_MANAGER_CLASS = \"dx-filemanager\";\nvar FILE_MANAGER_WRAPPER_CLASS = FILE_MANAGER_CLASS + \"-wrapper\";\nvar FILE_MANAGER_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-container\";\nvar FILE_MANAGER_DIRS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-dirs-panel\";\nvar FILE_MANAGER_EDITING_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-editing-container\";\nvar FILE_MANAGER_ITEMS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-items-panel\";\nvar FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS = FILE_MANAGER_CLASS + \"-item-custom-thumbnail\";\nvar PARENT_DIRECTORY_KEY_PREFIX = \"[*DXPDK*]$40F96F03-FBD8-43DF-91BE-F55F4B8BA871$\";\nvar VIEW_AREAS = {\n  folders: \"navPane\",\n  items: \"itemView\"\n};\n\nclass FileManager extends Widget {\n  _initTemplates() {}\n\n  _init() {\n    super._init();\n\n    this._initActions();\n\n    this._providerUpdateDeferred = null;\n    this._lockCurrentPathProcessing = false;\n    this._wasRendered = false;\n    this._controller = new FileItemsController({\n      currentPath: this.option(\"currentPath\"),\n      currentPathKeys: this.option(\"currentPathKeys\"),\n      rootText: this.option(\"rootFolderName\"),\n      fileProvider: this.option(\"fileSystemProvider\"),\n      allowedFileExtensions: this.option(\"allowedFileExtensions\"),\n      uploadMaxFileSize: this.option(\"upload\").maxFileSize,\n      uploadChunkSize: this.option(\"upload\").chunkSize,\n      onInitialized: this._onControllerInitialized.bind(this),\n      onDataLoading: this._onDataLoading.bind(this),\n      onSelectedDirectoryChanged: this._onSelectedDirectoryChanged.bind(this),\n      onPathPotentiallyChanged: this._checkPathActuality.bind(this),\n      editingEvents: this._actions.editing\n    });\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    this._firstItemViewLoad = true;\n    this._lockSelectionProcessing = false;\n    this._lockFocusedItemProcessing = false;\n    this._itemKeyToFocus = void 0;\n    this._loadedWidgets = [];\n    this._commandManager = new FileManagerCommandManager(this.option(\"permissions\"));\n    this.$element().addClass(FILE_MANAGER_CLASS);\n\n    if (this._wasRendered) {\n      this._prepareToLoad();\n    } else {\n      this._wasRendered = true;\n    }\n\n    this._createNotificationControl();\n\n    this._initCommandManager();\n  }\n\n  _createNotificationControl() {\n    var $notificationControl = $(\"<div>\").addClass(\"dx-filemanager-notification-container\").appendTo(this.$element());\n    this._notificationControl = this._createComponent($notificationControl, FileManagerNotificationControl, {\n      progressPanelContainer: this.$element(),\n      contentTemplate: (container, notificationControl) => this._createWrapper(container, notificationControl),\n      onActionProgress: e => this._onActionProgress(e),\n      positionTarget: \".\".concat(FILE_MANAGER_CONTAINER_CLASS),\n      showProgressPanel: this.option(\"notifications.showPanel\"),\n      showNotificationPopup: this.option(\"notifications.showPopup\")\n    });\n  }\n\n  _createWrapper(container, notificationControl) {\n    this._$wrapper = $(\"<div>\").addClass(FILE_MANAGER_WRAPPER_CLASS).appendTo(container);\n\n    this._createEditing(notificationControl);\n\n    var $toolbar = $(\"<div>\").appendTo(this._$wrapper);\n    this._toolbar = this._createComponent($toolbar, FileManagerToolbar, {\n      commandManager: this._commandManager,\n      generalItems: this.option(\"toolbar.items\"),\n      fileItems: this.option(\"toolbar.fileSelectionItems\"),\n      itemViewMode: this.option(\"itemView\").mode,\n      onItemClick: args => this._actions.onToolbarItemClick(args)\n    });\n\n    this._createAdaptivityControl();\n  }\n\n  _createAdaptivityControl() {\n    var $container = $(\"<div>\").addClass(FILE_MANAGER_CONTAINER_CLASS).appendTo(this._$wrapper);\n    this._adaptivityControl = this._createComponent($container, FileManagerAdaptivityControl, {\n      drawerTemplate: container => this._createFilesTreeView(container),\n      contentTemplate: container => this._createItemsPanel(container),\n      onAdaptiveStateChanged: e => this._onAdaptiveStateChanged(e)\n    });\n\n    this._editing.setUploaderSplitterElement(this._adaptivityControl.getSplitterElement());\n  }\n\n  _createEditing(notificationControl) {\n    var $editingContainer = $(\"<div>\").addClass(FILE_MANAGER_EDITING_CONTAINER_CLASS).appendTo(this.$element());\n    this._editing = this._createComponent($editingContainer, FileManagerEditingControl, {\n      controller: this._controller,\n      model: {\n        getMultipleSelectedItems: this._getSelectedItemInfos.bind(this)\n      },\n      getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n      notificationControl: notificationControl,\n      uploadDropZonePlaceholderContainer: this.$element(),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      onSuccess: _ref => {\n        var {\n          updatedOnlyFiles: updatedOnlyFiles\n        } = _ref;\n        return this._redrawComponent(updatedOnlyFiles);\n      },\n      onError: e => this._onEditingError(e)\n    });\n  }\n\n  _createItemsPanel($container) {\n    this._$itemsPanel = $(\"<div>\").addClass(FILE_MANAGER_ITEMS_PANEL_CLASS).appendTo($container);\n\n    this._createBreadcrumbs(this._$itemsPanel);\n\n    this._createItemView(this._$itemsPanel);\n\n    this._updateUploadDropZone();\n  }\n\n  _updateUploadDropZone() {\n    var dropZone = this._commandManager.isCommandAvailable(\"upload\") ? this._$itemsPanel : $();\n\n    this._editing.setUploaderDropZone(dropZone);\n  }\n\n  _createFilesTreeView(container) {\n    this._filesTreeViewContextMenu = this._createContextMenu(false, VIEW_AREAS.folders);\n    var $filesTreeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_PANEL_CLASS).appendTo(container);\n    this._filesTreeView = this._createComponent($filesTreeView, FileManagerFilesTreeView, {\n      storeExpandedState: true,\n      contextMenu: this._filesTreeViewContextMenu,\n      getDirectories: this.getDirectories.bind(this),\n      getCurrentDirectory: this._getCurrentDirectory.bind(this),\n      onDirectoryClick: _ref2 => {\n        var {\n          itemData: itemData\n        } = _ref2;\n        return this._setCurrentDirectory(itemData);\n      },\n      onItemListDataLoaded: () => this._tryEndLoading(VIEW_AREAS.folders)\n    });\n\n    this._filesTreeView.updateCurrentDirectory();\n  }\n\n  _createItemView($container, viewMode) {\n    this._itemViewContextMenu = this._createContextMenu(true, VIEW_AREAS.items);\n    var itemViewOptions = this.option(\"itemView\");\n    var options = {\n      selectionMode: this.option(\"selectionMode\"),\n      selectedItemKeys: this.option(\"selectedItemKeys\"),\n      focusedItemKey: this.option(\"focusedItemKey\"),\n      contextMenu: this._itemViewContextMenu,\n      getItems: this._getItemViewItems.bind(this),\n      onError: _ref3 => {\n        var {\n          error: error\n        } = _ref3;\n        return this._showError(error);\n      },\n      onSelectionChanged: this._onItemViewSelectionChanged.bind(this),\n      onFocusedItemChanged: this._onItemViewFocusedItemChanged.bind(this),\n      onSelectedItemOpened: this._onSelectedItemOpened.bind(this),\n      onContextMenuShowing: e => this._onContextMenuShowing(VIEW_AREAS.items, e),\n      onItemListItemsLoaded: () => this._tryEndLoading(VIEW_AREAS.items),\n      getItemThumbnail: this._getItemThumbnailInfo.bind(this),\n      customizeDetailColumns: this.option(\"customizeDetailColumns\"),\n      detailColumns: this.option(\"itemView.details.columns\")\n    };\n    var $itemView = $(\"<div>\").appendTo($container);\n    viewMode = viewMode || itemViewOptions.mode;\n    var widgetClass = \"thumbnails\" === viewMode ? FileManagerThumbnailsItemList : FileManagerDetailsItemList;\n    this._itemView = this._createComponent($itemView, widgetClass, options);\n  }\n\n  _createBreadcrumbs($container) {\n    var $breadcrumbs = $(\"<div>\").appendTo($container);\n    this._breadcrumbs = this._createComponent($breadcrumbs, FileManagerBreadcrumbs, {\n      rootFolderDisplayName: this.option(\"rootFolderName\"),\n      onCurrentDirectoryChanging: _ref4 => {\n        var {\n          currentDirectory: currentDirectory\n        } = _ref4;\n        return this._setCurrentDirectory(currentDirectory, true);\n      }\n    });\n\n    this._breadcrumbs.setCurrentDirectory(this._getCurrentDirectory());\n  }\n\n  _createContextMenu(isolateCreationItemCommands, viewArea) {\n    var $contextMenu = $(\"<div>\").appendTo(this._$wrapper);\n    return this._createComponent($contextMenu, FileManagerContextMenu, {\n      commandManager: this._commandManager,\n      items: this.option(\"contextMenu.items\"),\n      onItemClick: args => this._actions.onContextMenuItemClick(args),\n      onContextMenuShowing: e => this._onContextMenuShowing(viewArea, e),\n      isolateCreationItemCommands: isolateCreationItemCommands,\n      viewArea: viewArea\n    });\n  }\n\n  _initCommandManager() {\n    var actions = extend(this._editing.getCommandActions(), {\n      refresh: () => this._refreshAndShowProgress(),\n      thumbnails: () => this.option(\"itemView.mode\", \"thumbnails\"),\n      details: () => this.option(\"itemView.mode\", \"details\"),\n      clearSelection: () => this._clearSelection(),\n      showNavPane: () => this._adaptivityControl.toggleDrawer()\n    });\n\n    this._commandManager.registerActions(actions);\n  }\n\n  _onItemViewSelectionChanged(_ref5) {\n    var {\n      selectedItemInfos: selectedItemInfos,\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      currentSelectedItemKeys: currentSelectedItemKeys,\n      currentDeselectedItemKeys: currentDeselectedItemKeys\n    } = _ref5;\n    this._lockSelectionProcessing = true;\n    this.option(\"selectedItemKeys\", selectedItemKeys);\n    this._lockSelectionProcessing = false;\n\n    this._actions.onSelectionChanged({\n      selectedItems: selectedItems,\n      selectedItemKeys: selectedItemKeys,\n      currentSelectedItemKeys: currentSelectedItemKeys,\n      currentDeselectedItemKeys: currentDeselectedItemKeys\n    });\n\n    this._updateToolbar(selectedItemInfos);\n  }\n\n  _onItemViewFocusedItemChanged(e) {\n    this._lockFocusedItemProcessing = true;\n    this.option(\"focusedItemKey\", e.itemKey);\n    this._lockFocusedItemProcessing = false;\n\n    this._actions.onFocusedItemChanged({\n      item: e.item,\n      itemElement: e.itemElement\n    });\n  }\n\n  _onAdaptiveStateChanged(_ref6) {\n    var {\n      enabled: enabled\n    } = _ref6;\n\n    this._commandManager.setCommandEnabled(\"showNavPane\", enabled);\n\n    this._updateToolbar();\n  }\n\n  _onActionProgress(_ref7) {\n    var {\n      message: message,\n      status: status\n    } = _ref7;\n\n    this._toolbar.updateRefreshItem(message, status);\n\n    this._updateToolbar();\n  }\n\n  _onEditingError(e) {\n    var args = extendAttributes({}, e, [\"errorCode\", \"errorText\", \"fileSystemItem\"]);\n\n    this._actions.onErrorOccurred(args);\n\n    e.errorText = args.errorText;\n  }\n\n  _refreshAndShowProgress() {\n    this._prepareToLoad();\n\n    return when(this._notificationControl.tryShowProgressPanel(), this._controller.refresh()).then(() => this._filesTreeView.refresh());\n  }\n\n  _isAllWidgetsLoaded() {\n    return 2 === this._loadedWidgets.length && -1 !== this._loadedWidgets.indexOf(VIEW_AREAS.folders) && -1 !== this._loadedWidgets.indexOf(VIEW_AREAS.items);\n  }\n\n  _tryEndLoading(area) {\n    this._loadedWidgets.push(area);\n\n    if (this._isAllWidgetsLoaded()) {\n      this._controller.endSingleLoad();\n    }\n  }\n\n  _prepareToLoad() {\n    this._loadedWidgets = [];\n\n    this._controller.startSingleLoad();\n  }\n\n  _updateToolbar(selectedItems) {\n    var items = selectedItems || this._getSelectedItemInfos();\n\n    this._toolbar.option(\"contextItems\", ensureDefined(items, []));\n  }\n\n  _switchView(viewMode) {\n    this._disposeWidget(this._itemView.option(\"contextMenu\"));\n\n    this._disposeWidget(this._itemView);\n\n    this._createItemView(this._$itemsPanel, viewMode);\n\n    this._toolbar.option({\n      itemViewMode: viewMode\n    });\n  }\n\n  _disposeWidget(widget) {\n    widget.dispose();\n    widget.$element().remove();\n  }\n\n  _clearSelection() {\n    this._itemView.clearSelection();\n  }\n\n  _showError(message) {\n    this._showNotification(message, false);\n  }\n\n  _showNotification(message, isSuccess) {\n    notify({\n      message: message,\n      width: 450\n    }, isSuccess ? \"success\" : \"error\", 5e3);\n  }\n\n  _redrawComponent(onlyFileItemsView) {\n    this._itemView.refresh().then(() => !onlyFileItemsView && this._filesTreeView.refresh());\n  }\n\n  _getItemViewItems() {\n    var showFolders = this.option(\"itemView\").showFolders;\n\n    var result = this._controller.getCurrentItems(!showFolders);\n\n    this._updateToolbarWithSelectionOnFirstLoad(result);\n\n    if (this.option(\"itemView.showParentFolder\")) {\n      result = when(result).then(items => this._getPreparedItemViewItems(items));\n    }\n\n    return result;\n  }\n\n  _updateToolbarWithSelectionOnFirstLoad(itemsResult) {\n    if (!this._firstItemViewLoad) {\n      return;\n    }\n\n    this._firstItemViewLoad = false;\n    var selectedItemKeys = this.option(\"selectedItemKeys\");\n\n    if (selectedItemKeys.length > 0) {\n      when(itemsResult).done(items => {\n        var selectedItems = findItemsByKeys(items, selectedItemKeys);\n\n        if (selectedItems.length > 0) {\n          this._updateToolbar(selectedItems);\n        }\n      });\n    }\n  }\n\n  _getPreparedItemViewItems(items) {\n    var selectedDir = this._getCurrentDirectory();\n\n    if (selectedDir.fileItem.isRoot()) {\n      return items;\n    }\n\n    var parentDirItem = selectedDir.fileItem.createClone();\n    parentDirItem.isParentFolder = true;\n    parentDirItem.name = \"..\";\n    parentDirItem.relativeName = \"..\";\n    parentDirItem.key = \"\".concat(PARENT_DIRECTORY_KEY_PREFIX).concat(selectedDir.fileItem.key);\n    var itemsCopy = [...items];\n    itemsCopy.unshift({\n      fileItem: parentDirItem,\n      icon: \"parentfolder\"\n    });\n    return itemsCopy;\n  }\n\n  _onContextMenuShowing(viewArea, e) {\n    var _e$itemData;\n\n    var eventArgs = extendAttributes({}, e, [\"targetElement\", \"cancel\", \"event\"]);\n    eventArgs = extend(eventArgs, {\n      viewArea: viewArea,\n      fileSystemItem: null === (_e$itemData = e.itemData) || void 0 === _e$itemData ? void 0 : _e$itemData.fileItem,\n      _isActionButton: e.isActionButton\n    });\n\n    this._actions.onContextMenuShowing(eventArgs);\n\n    e.cancel = ensureDefined(eventArgs.cancel, false);\n  }\n\n  _getItemThumbnailInfo(fileInfo) {\n    var func = this.option(\"customizeThumbnail\");\n    var thumbnail = isFunction(func) ? func(fileInfo.fileItem) : fileInfo.fileItem.thumbnail;\n\n    if (thumbnail) {\n      return {\n        thumbnail: thumbnail,\n        cssClass: FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS\n      };\n    }\n\n    return {\n      thumbnail: fileInfo.icon\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      fileSystemProvider: null,\n      currentPath: \"\",\n      currentPathKeys: [],\n      rootFolderName: messageLocalization.format(\"dxFileManager-rootDirectoryName\"),\n      selectionMode: \"multiple\",\n      selectedItemKeys: [],\n      focusedItemKey: void 0,\n      toolbar: {\n        items: [\"showNavPane\", \"create\", \"upload\", \"switchView\", {\n          name: \"separator\",\n          location: \"after\"\n        }, \"refresh\"],\n        fileSelectionItems: [\"download\", \"separator\", \"move\", \"copy\", \"rename\", \"separator\", \"delete\", \"clearSelection\", {\n          name: \"separator\",\n          location: \"after\"\n        }, \"refresh\"]\n      },\n      contextMenu: {\n        items: [\"create\", \"upload\", \"rename\", \"move\", \"copy\", \"delete\", \"refresh\", \"download\"]\n      },\n      itemView: {\n        details: {\n          columns: [\"thumbnail\", \"name\", \"dateModified\", \"size\"]\n        },\n        mode: \"details\",\n        showFolders: true,\n        showParentFolder: true\n      },\n      customizeThumbnail: null,\n      customizeDetailColumns: null,\n      onContextMenuItemClick: null,\n      onContextMenuShowing: null,\n      onCurrentDirectoryChanged: null,\n      onSelectedFileOpened: null,\n      onSelectionChanged: null,\n      onFocusedItemChanged: null,\n      onToolbarItemClick: null,\n      onErrorOccurred: null,\n      onDirectoryCreating: null,\n      onDirectoryCreated: null,\n      onItemRenaming: null,\n      onItemRenamed: null,\n      onItemDeleting: null,\n      onItemDeleted: null,\n      onItemCopying: null,\n      onItemCopied: null,\n      onItemMoving: null,\n      onItemMoved: null,\n      onFileUploading: null,\n      onFileUploaded: null,\n      onItemDownloading: null,\n      allowedFileExtensions: [],\n      upload: {\n        maxFileSize: 0,\n        chunkSize: 2e5\n      },\n      permissions: extend({}, defaultPermissions),\n      notifications: {\n        showPanel: true,\n        showPopup: true\n      }\n    });\n  }\n\n  option(options, value) {\n    var optionsToCheck = normalizeOptions(options, value);\n    var isGetter = arguments.length < 2 && \"object\" !== type(options);\n\n    var isOptionDefined = name => isDefined(optionsToCheck[name]);\n\n    var isOptionValueDiffers = name => {\n      if (!isOptionDefined(name)) {\n        return false;\n      }\n\n      var previousValue = this.option(name);\n      var value = optionsToCheck[name];\n      return !equals(previousValue, value);\n    };\n\n    if (!isGetter && isOptionDefined(\"fileSystemProvider\")) {\n      this._providerUpdateDeferred = new Deferred();\n\n      if (isOptionValueDiffers(\"currentPath\") || isOptionValueDiffers(\"currentPathKeys\")) {\n        this._lockCurrentPathProcessing = true;\n      }\n    }\n\n    return super.option(...arguments);\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"currentPath\":\n        var updateFunc = () => {\n          this._lockCurrentPathProcessing = false;\n          return this._controller.setCurrentPath(args.value);\n        };\n\n        this._lockCurrentPathProcessing = true;\n        this._providerUpdateDeferred ? this._providerUpdateDeferred.then(updateFunc) : updateFunc();\n        break;\n\n      case \"currentPathKeys\":\n        var _updateFunc = () => {\n          this._lockCurrentPathProcessing = false;\n          return this._controller.setCurrentPathByKeys(args.value);\n        };\n\n        this._lockCurrentPathProcessing = true;\n        this._providerUpdateDeferred ? this._providerUpdateDeferred.then(_updateFunc) : _updateFunc();\n        break;\n\n      case \"selectedItemKeys\":\n        if (!this._lockSelectionProcessing && this._itemView) {\n          this._itemView.option(\"selectedItemKeys\", args.value);\n        }\n\n        break;\n\n      case \"focusedItemKey\":\n        if (!this._lockFocusedItemProcessing && this._itemView) {\n          this._itemView.option(\"focusedItemKey\", args.value);\n        }\n\n        break;\n\n      case \"rootFolderName\":\n        this._controller.setRootText(args.value);\n\n        this._invalidate();\n\n        break;\n\n      case \"fileSystemProvider\":\n        if (!this._lockCurrentPathProcessing) {\n          this._providerUpdateDeferred = new Deferred();\n        }\n\n        var pathKeys = this._lockCurrentPathProcessing ? void 0 : this.option(\"currentPathKeys\");\n\n        this._controller.updateProvider(args.value, pathKeys).then(() => this._providerUpdateDeferred.resolve()).always(() => {\n          this._providerUpdateDeferred = null;\n          this.repaint();\n        });\n\n        break;\n\n      case \"allowedFileExtensions\":\n        this._controller.setAllowedFileExtensions(args.value);\n\n        this._invalidate();\n\n        break;\n\n      case \"upload\":\n        this._controller.setUploadOptions(this.option(\"upload\"));\n\n        this._invalidate();\n\n        break;\n\n      case \"permissions\":\n        this._commandManager.updatePermissions(this.option(\"permissions\"));\n\n        this._filesTreeViewContextMenu.tryUpdateVisibleContextMenu();\n\n        this._itemViewContextMenu.tryUpdateVisibleContextMenu();\n\n        this._toolbar.updateItemPermissions();\n\n        this._updateUploadDropZone();\n\n        break;\n\n      case \"selectionMode\":\n      case \"customizeThumbnail\":\n      case \"customizeDetailColumns\":\n        this._invalidate();\n\n        break;\n\n      case \"itemView\":\n        if (\"itemView.mode\" === args.fullName) {\n          this._switchView(args.value);\n        } else {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"toolbar\":\n        var toolbarOptions = {};\n\n        if (\"toolbar\" === args.fullName) {\n          if (args.value.items) {\n            toolbarOptions.generalItems = args.value.items;\n          }\n\n          if (args.value.fileSelectionItems) {\n            toolbarOptions.fileItems = args.value.fileSelectionItems;\n          }\n        }\n\n        if (0 === args.fullName.indexOf(\"toolbar.items\")) {\n          toolbarOptions.generalItems = this.option(\"toolbar.items\");\n        }\n\n        if (0 === args.fullName.indexOf(\"toolbar.fileSelectionItems\")) {\n          toolbarOptions.fileItems = this.option(\"toolbar.fileSelectionItems\");\n        }\n\n        this._toolbar.option(toolbarOptions);\n\n        break;\n\n      case \"contextMenu\":\n        if (\"contextMenu\" === args.fullName && args.value.items || 0 === args.fullName.indexOf(\"contextMenu.items\")) {\n          var contextMenuItems = this.option(\"contextMenu.items\");\n\n          this._filesTreeViewContextMenu.option(\"items\", contextMenuItems);\n\n          this._itemViewContextMenu.option(\"items\", contextMenuItems);\n        }\n\n        break;\n\n      case \"notifications\":\n        this._notificationControl.option(\"showProgressPanel\", this.option(\"notifications.showPanel\"));\n\n        this._notificationControl.option(\"showNotificationPopup\", this.option(\"notifications.showPopup\"));\n\n        break;\n\n      case \"onContextMenuItemClick\":\n      case \"onContextMenuShowing\":\n      case \"onCurrentDirectoryChanged\":\n      case \"onSelectedFileOpened\":\n      case \"onSelectionChanged\":\n      case \"onFocusedItemChanged\":\n      case \"onToolbarItemClick\":\n      case \"onErrorOccurred\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      case \"onDirectoryCreating\":\n      case \"onDirectoryCreated\":\n      case \"onItemRenaming\":\n      case \"onItemRenamed\":\n      case \"onItemDeleting\":\n      case \"onItemDeleted\":\n      case \"onItemCopying\":\n      case \"onItemCopied\":\n      case \"onItemMoving\":\n      case \"onItemMoved\":\n      case \"onFileUploading\":\n      case \"onFileUploaded\":\n      case \"onItemDownloading\":\n        this._actions.editing[name] = this._createActionByOption(name);\n        break;\n\n      case \"rtlEnabled\":\n        this._editing.updateDialogRtl(args.value);\n\n        super._optionChanged(args);\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _initActions() {\n    this._actions = {\n      onContextMenuItemClick: this._createActionByOption(\"onContextMenuItemClick\"),\n      onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\n      onCurrentDirectoryChanged: this._createActionByOption(\"onCurrentDirectoryChanged\"),\n      onSelectedFileOpened: this._createActionByOption(\"onSelectedFileOpened\"),\n      onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\n      onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\n      onToolbarItemClick: this._createActionByOption(\"onToolbarItemClick\"),\n      onErrorOccurred: this._createActionByOption(\"onErrorOccurred\"),\n      editing: {\n        onDirectoryCreating: this._createActionByOption(\"onDirectoryCreating\"),\n        onDirectoryCreated: this._createActionByOption(\"onDirectoryCreated\"),\n        onItemRenaming: this._createActionByOption(\"onItemRenaming\"),\n        onItemRenamed: this._createActionByOption(\"onItemRenamed\"),\n        onItemDeleting: this._createActionByOption(\"onItemDeleting\"),\n        onItemDeleted: this._createActionByOption(\"onItemDeleted\"),\n        onItemCopying: this._createActionByOption(\"onItemCopying\"),\n        onItemCopied: this._createActionByOption(\"onItemCopied\"),\n        onItemMoving: this._createActionByOption(\"onItemMoving\"),\n        onItemMoved: this._createActionByOption(\"onItemMoved\"),\n        onFileUploading: this._createActionByOption(\"onFileUploading\"),\n        onFileUploaded: this._createActionByOption(\"onFileUploaded\"),\n        onItemDownloading: this._createActionByOption(\"onItemDownloading\")\n      }\n    };\n  }\n\n  executeCommand(commandName) {\n    return this._commandManager.executeCommand(commandName);\n  }\n\n  _setCurrentDirectory(directoryInfo, checkActuality) {\n    this._controller.setCurrentDirectory(directoryInfo, checkActuality);\n  }\n\n  _getCurrentDirectory() {\n    return this._controller.getCurrentDirectory();\n  }\n\n  _onControllerInitialized(_ref8) {\n    var {\n      controller: controller\n    } = _ref8;\n    this._controller = this._controller || controller;\n\n    this._syncToCurrentDirectory();\n  }\n\n  _onDataLoading(_ref9) {\n    var {\n      operation: operation\n    } = _ref9;\n    var options = null;\n\n    if (\"navigation\" === operation) {\n      options = {\n        focusedItemKey: this._itemKeyToFocus,\n        selectedItemKeys: this.option(\"selectedItemKeys\")\n      };\n      this._itemKeyToFocus = void 0;\n    }\n\n    this._itemView.refresh(options);\n  }\n\n  _onSelectedDirectoryChanged() {\n    var currentDirectory = this._getCurrentDirectory();\n\n    this._syncToCurrentDirectory();\n\n    this._actions.onCurrentDirectoryChanged({\n      directory: currentDirectory.fileItem\n    });\n  }\n\n  _syncToCurrentDirectory() {\n    var currentDirectory = this._getCurrentDirectory();\n\n    if (this._filesTreeView) {\n      this._filesTreeView.updateCurrentDirectory();\n    }\n\n    if (this._breadcrumbs) {\n      this._breadcrumbs.setCurrentDirectory(currentDirectory);\n    }\n\n    this._checkPathActuality();\n  }\n\n  _checkPathActuality() {\n    if (this._lockCurrentPathProcessing) {\n      return;\n    }\n\n    var currentPath = this._controller.getCurrentPath();\n\n    var currentPathKeys = this._controller.getCurrentPathKeys();\n\n    var options = {};\n\n    if (this.option(\"currentPath\") !== currentPath) {\n      options.currentPath = currentPath;\n    }\n\n    if (!equalByValue(this.option(\"currentPathKeys\"), currentPathKeys)) {\n      options.currentPathKeys = currentPathKeys;\n    }\n\n    if (!isEmptyObject(options)) {\n      this.option(options);\n    }\n  }\n\n  getDirectories(parentDirectoryInfo, skipNavigationOnError) {\n    return this._controller.getDirectories(parentDirectoryInfo, skipNavigationOnError);\n  }\n\n  _getSelectedItemInfos() {\n    return this._itemView ? this._itemView.getSelectedItems() : [];\n  }\n\n  refresh() {\n    return this.executeCommand(\"refresh\");\n  }\n\n  getCurrentDirectory() {\n    var directoryInfo = this._getCurrentDirectory();\n\n    return directoryInfo && directoryInfo.fileItem || null;\n  }\n\n  getSelectedItems() {\n    return this._getSelectedItemInfos().map(itemInfo => itemInfo.fileItem);\n  }\n\n  _onSelectedItemOpened(_ref10) {\n    var {\n      fileItemInfo: fileItemInfo\n    } = _ref10;\n    var fileItem = fileItemInfo.fileItem;\n\n    if (!fileItem.isDirectory) {\n      this._actions.onSelectedFileOpened({\n        file: fileItem\n      });\n\n      return;\n    }\n\n    if (fileItem.isParentFolder) {\n      this._itemKeyToFocus = this._getCurrentDirectory().fileItem.key;\n    }\n\n    var newCurrentDirectory = fileItem.isParentFolder ? this._getCurrentDirectory().parentDirectory : fileItemInfo;\n\n    this._setCurrentDirectory(newCurrentDirectory);\n\n    if (newCurrentDirectory) {\n      this._filesTreeView.toggleDirectoryExpandedState(newCurrentDirectory.parentDirectory, true);\n    }\n  }\n\n}\n\nregisterComponent(\"dxFileManager\", FileManager);\nexport default FileManager;","map":{"version":3,"names":["$","extend","isDefined","isEmptyObject","isFunction","type","Deferred","when","ensureDefined","equalByValue","messageLocalization","registerComponent","Widget","notify","findItemsByKeys","extendAttributes","FileItemsController","defaultPermissions","FileManagerCommandManager","FileManagerContextMenu","FileManagerFilesTreeView","FileManagerDetailsItemList","FileManagerThumbnailsItemList","FileManagerToolbar","FileManagerNotificationControl","FileManagerEditingControl","FileManagerBreadcrumbs","FileManagerAdaptivityControl","normalizeOptions","equals","FILE_MANAGER_CLASS","FILE_MANAGER_WRAPPER_CLASS","FILE_MANAGER_CONTAINER_CLASS","FILE_MANAGER_DIRS_PANEL_CLASS","FILE_MANAGER_EDITING_CONTAINER_CLASS","FILE_MANAGER_ITEMS_PANEL_CLASS","FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS","PARENT_DIRECTORY_KEY_PREFIX","VIEW_AREAS","folders","items","FileManager","_initTemplates","_init","_initActions","_providerUpdateDeferred","_lockCurrentPathProcessing","_wasRendered","_controller","currentPath","option","currentPathKeys","rootText","fileProvider","allowedFileExtensions","uploadMaxFileSize","maxFileSize","uploadChunkSize","chunkSize","onInitialized","_onControllerInitialized","bind","onDataLoading","_onDataLoading","onSelectedDirectoryChanged","_onSelectedDirectoryChanged","onPathPotentiallyChanged","_checkPathActuality","editingEvents","_actions","editing","_initMarkup","_firstItemViewLoad","_lockSelectionProcessing","_lockFocusedItemProcessing","_itemKeyToFocus","_loadedWidgets","_commandManager","$element","addClass","_prepareToLoad","_createNotificationControl","_initCommandManager","$notificationControl","appendTo","_notificationControl","_createComponent","progressPanelContainer","contentTemplate","container","notificationControl","_createWrapper","onActionProgress","e","_onActionProgress","positionTarget","concat","showProgressPanel","showNotificationPopup","_$wrapper","_createEditing","$toolbar","_toolbar","commandManager","generalItems","fileItems","itemViewMode","mode","onItemClick","args","onToolbarItemClick","_createAdaptivityControl","$container","_adaptivityControl","drawerTemplate","_createFilesTreeView","_createItemsPanel","onAdaptiveStateChanged","_onAdaptiveStateChanged","_editing","setUploaderSplitterElement","getSplitterElement","$editingContainer","controller","model","getMultipleSelectedItems","_getSelectedItemInfos","getItemThumbnail","_getItemThumbnailInfo","uploadDropZonePlaceholderContainer","rtlEnabled","onSuccess","_ref","updatedOnlyFiles","_redrawComponent","onError","_onEditingError","_$itemsPanel","_createBreadcrumbs","_createItemView","_updateUploadDropZone","dropZone","isCommandAvailable","setUploaderDropZone","_filesTreeViewContextMenu","_createContextMenu","$filesTreeView","_filesTreeView","storeExpandedState","contextMenu","getDirectories","getCurrentDirectory","_getCurrentDirectory","onDirectoryClick","_ref2","itemData","_setCurrentDirectory","onItemListDataLoaded","_tryEndLoading","updateCurrentDirectory","viewMode","_itemViewContextMenu","itemViewOptions","options","selectionMode","selectedItemKeys","focusedItemKey","getItems","_getItemViewItems","_ref3","error","_showError","onSelectionChanged","_onItemViewSelectionChanged","onFocusedItemChanged","_onItemViewFocusedItemChanged","onSelectedItemOpened","_onSelectedItemOpened","onContextMenuShowing","_onContextMenuShowing","onItemListItemsLoaded","customizeDetailColumns","detailColumns","$itemView","widgetClass","_itemView","$breadcrumbs","_breadcrumbs","rootFolderDisplayName","onCurrentDirectoryChanging","_ref4","currentDirectory","setCurrentDirectory","isolateCreationItemCommands","viewArea","$contextMenu","onContextMenuItemClick","actions","getCommandActions","refresh","_refreshAndShowProgress","thumbnails","details","clearSelection","_clearSelection","showNavPane","toggleDrawer","registerActions","_ref5","selectedItemInfos","selectedItems","currentSelectedItemKeys","currentDeselectedItemKeys","_updateToolbar","itemKey","item","itemElement","_ref6","enabled","setCommandEnabled","_ref7","message","status","updateRefreshItem","onErrorOccurred","errorText","tryShowProgressPanel","then","_isAllWidgetsLoaded","length","indexOf","area","push","endSingleLoad","startSingleLoad","_switchView","_disposeWidget","widget","dispose","remove","_showNotification","isSuccess","width","onlyFileItemsView","showFolders","result","getCurrentItems","_updateToolbarWithSelectionOnFirstLoad","_getPreparedItemViewItems","itemsResult","done","selectedDir","fileItem","isRoot","parentDirItem","createClone","isParentFolder","name","relativeName","key","itemsCopy","unshift","icon","_e$itemData","eventArgs","fileSystemItem","_isActionButton","isActionButton","cancel","fileInfo","func","thumbnail","cssClass","_getDefaultOptions","fileSystemProvider","rootFolderName","format","toolbar","location","fileSelectionItems","itemView","columns","showParentFolder","customizeThumbnail","onCurrentDirectoryChanged","onSelectedFileOpened","onDirectoryCreating","onDirectoryCreated","onItemRenaming","onItemRenamed","onItemDeleting","onItemDeleted","onItemCopying","onItemCopied","onItemMoving","onItemMoved","onFileUploading","onFileUploaded","onItemDownloading","upload","permissions","notifications","showPanel","showPopup","value","optionsToCheck","isGetter","arguments","isOptionDefined","isOptionValueDiffers","previousValue","_optionChanged","updateFunc","setCurrentPath","_updateFunc","setCurrentPathByKeys","setRootText","_invalidate","pathKeys","updateProvider","resolve","always","repaint","setAllowedFileExtensions","setUploadOptions","updatePermissions","tryUpdateVisibleContextMenu","updateItemPermissions","fullName","toolbarOptions","contextMenuItems","_createActionByOption","updateDialogRtl","executeCommand","commandName","directoryInfo","checkActuality","_ref8","_syncToCurrentDirectory","_ref9","operation","directory","getCurrentPath","getCurrentPathKeys","parentDirectoryInfo","skipNavigationOnError","getSelectedItems","map","itemInfo","_ref10","fileItemInfo","isDirectory","file","newCurrentDirectory","parentDirectory","toggleDirectoryExpandedState"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isFunction,\r\n    type\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    ensureDefined,\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport notify from \"../notify\";\r\nimport {\r\n    findItemsByKeys,\r\n    extendAttributes\r\n} from \"./ui.file_manager.common\";\r\nimport FileItemsController from \"./file_items_controller\";\r\nimport {\r\n    defaultPermissions,\r\n    FileManagerCommandManager\r\n} from \"./ui.file_manager.command_manager\";\r\nimport FileManagerContextMenu from \"./ui.file_manager.context_menu\";\r\nimport FileManagerFilesTreeView from \"./ui.file_manager.files_tree_view\";\r\nimport FileManagerDetailsItemList from \"./ui.file_manager.item_list.details\";\r\nimport FileManagerThumbnailsItemList from \"./ui.file_manager.item_list.thumbnails\";\r\nimport FileManagerToolbar from \"./ui.file_manager.toolbar\";\r\nimport FileManagerNotificationControl from \"./ui.file_manager.notification\";\r\nimport FileManagerEditingControl from \"./ui.file_manager.editing\";\r\nimport FileManagerBreadcrumbs from \"./ui.file_manager.breadcrumbs\";\r\nimport FileManagerAdaptivityControl from \"./ui.file_manager.adaptivity\";\r\nimport {\r\n    normalizeOptions\r\n} from \"../../core/options/utils\";\r\nimport {\r\n    equals\r\n} from \"../../core/utils/comparator\";\r\nvar FILE_MANAGER_CLASS = \"dx-filemanager\";\r\nvar FILE_MANAGER_WRAPPER_CLASS = FILE_MANAGER_CLASS + \"-wrapper\";\r\nvar FILE_MANAGER_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-container\";\r\nvar FILE_MANAGER_DIRS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-dirs-panel\";\r\nvar FILE_MANAGER_EDITING_CONTAINER_CLASS = FILE_MANAGER_CLASS + \"-editing-container\";\r\nvar FILE_MANAGER_ITEMS_PANEL_CLASS = FILE_MANAGER_CLASS + \"-items-panel\";\r\nvar FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS = FILE_MANAGER_CLASS + \"-item-custom-thumbnail\";\r\nvar PARENT_DIRECTORY_KEY_PREFIX = \"[*DXPDK*]$40F96F03-FBD8-43DF-91BE-F55F4B8BA871$\";\r\nvar VIEW_AREAS = {\r\n    folders: \"navPane\",\r\n    items: \"itemView\"\r\n};\r\nclass FileManager extends Widget {\r\n    _initTemplates() {}\r\n    _init() {\r\n        super._init();\r\n        this._initActions();\r\n        this._providerUpdateDeferred = null;\r\n        this._lockCurrentPathProcessing = false;\r\n        this._wasRendered = false;\r\n        this._controller = new FileItemsController({\r\n            currentPath: this.option(\"currentPath\"),\r\n            currentPathKeys: this.option(\"currentPathKeys\"),\r\n            rootText: this.option(\"rootFolderName\"),\r\n            fileProvider: this.option(\"fileSystemProvider\"),\r\n            allowedFileExtensions: this.option(\"allowedFileExtensions\"),\r\n            uploadMaxFileSize: this.option(\"upload\").maxFileSize,\r\n            uploadChunkSize: this.option(\"upload\").chunkSize,\r\n            onInitialized: this._onControllerInitialized.bind(this),\r\n            onDataLoading: this._onDataLoading.bind(this),\r\n            onSelectedDirectoryChanged: this._onSelectedDirectoryChanged.bind(this),\r\n            onPathPotentiallyChanged: this._checkPathActuality.bind(this),\r\n            editingEvents: this._actions.editing\r\n        })\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._firstItemViewLoad = true;\r\n        this._lockSelectionProcessing = false;\r\n        this._lockFocusedItemProcessing = false;\r\n        this._itemKeyToFocus = void 0;\r\n        this._loadedWidgets = [];\r\n        this._commandManager = new FileManagerCommandManager(this.option(\"permissions\"));\r\n        this.$element().addClass(FILE_MANAGER_CLASS);\r\n        if (this._wasRendered) {\r\n            this._prepareToLoad()\r\n        } else {\r\n            this._wasRendered = true\r\n        }\r\n        this._createNotificationControl();\r\n        this._initCommandManager()\r\n    }\r\n    _createNotificationControl() {\r\n        var $notificationControl = $(\"<div>\").addClass(\"dx-filemanager-notification-container\").appendTo(this.$element());\r\n        this._notificationControl = this._createComponent($notificationControl, FileManagerNotificationControl, {\r\n            progressPanelContainer: this.$element(),\r\n            contentTemplate: (container, notificationControl) => this._createWrapper(container, notificationControl),\r\n            onActionProgress: e => this._onActionProgress(e),\r\n            positionTarget: \".\".concat(FILE_MANAGER_CONTAINER_CLASS),\r\n            showProgressPanel: this.option(\"notifications.showPanel\"),\r\n            showNotificationPopup: this.option(\"notifications.showPopup\")\r\n        })\r\n    }\r\n    _createWrapper(container, notificationControl) {\r\n        this._$wrapper = $(\"<div>\").addClass(FILE_MANAGER_WRAPPER_CLASS).appendTo(container);\r\n        this._createEditing(notificationControl);\r\n        var $toolbar = $(\"<div>\").appendTo(this._$wrapper);\r\n        this._toolbar = this._createComponent($toolbar, FileManagerToolbar, {\r\n            commandManager: this._commandManager,\r\n            generalItems: this.option(\"toolbar.items\"),\r\n            fileItems: this.option(\"toolbar.fileSelectionItems\"),\r\n            itemViewMode: this.option(\"itemView\").mode,\r\n            onItemClick: args => this._actions.onToolbarItemClick(args)\r\n        });\r\n        this._createAdaptivityControl()\r\n    }\r\n    _createAdaptivityControl() {\r\n        var $container = $(\"<div>\").addClass(FILE_MANAGER_CONTAINER_CLASS).appendTo(this._$wrapper);\r\n        this._adaptivityControl = this._createComponent($container, FileManagerAdaptivityControl, {\r\n            drawerTemplate: container => this._createFilesTreeView(container),\r\n            contentTemplate: container => this._createItemsPanel(container),\r\n            onAdaptiveStateChanged: e => this._onAdaptiveStateChanged(e)\r\n        });\r\n        this._editing.setUploaderSplitterElement(this._adaptivityControl.getSplitterElement())\r\n    }\r\n    _createEditing(notificationControl) {\r\n        var $editingContainer = $(\"<div>\").addClass(FILE_MANAGER_EDITING_CONTAINER_CLASS).appendTo(this.$element());\r\n        this._editing = this._createComponent($editingContainer, FileManagerEditingControl, {\r\n            controller: this._controller,\r\n            model: {\r\n                getMultipleSelectedItems: this._getSelectedItemInfos.bind(this)\r\n            },\r\n            getItemThumbnail: this._getItemThumbnailInfo.bind(this),\r\n            notificationControl: notificationControl,\r\n            uploadDropZonePlaceholderContainer: this.$element(),\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            onSuccess: _ref => {\r\n                var {\r\n                    updatedOnlyFiles: updatedOnlyFiles\r\n                } = _ref;\r\n                return this._redrawComponent(updatedOnlyFiles)\r\n            },\r\n            onError: e => this._onEditingError(e)\r\n        })\r\n    }\r\n    _createItemsPanel($container) {\r\n        this._$itemsPanel = $(\"<div>\").addClass(FILE_MANAGER_ITEMS_PANEL_CLASS).appendTo($container);\r\n        this._createBreadcrumbs(this._$itemsPanel);\r\n        this._createItemView(this._$itemsPanel);\r\n        this._updateUploadDropZone()\r\n    }\r\n    _updateUploadDropZone() {\r\n        var dropZone = this._commandManager.isCommandAvailable(\"upload\") ? this._$itemsPanel : $();\r\n        this._editing.setUploaderDropZone(dropZone)\r\n    }\r\n    _createFilesTreeView(container) {\r\n        this._filesTreeViewContextMenu = this._createContextMenu(false, VIEW_AREAS.folders);\r\n        var $filesTreeView = $(\"<div>\").addClass(FILE_MANAGER_DIRS_PANEL_CLASS).appendTo(container);\r\n        this._filesTreeView = this._createComponent($filesTreeView, FileManagerFilesTreeView, {\r\n            storeExpandedState: true,\r\n            contextMenu: this._filesTreeViewContextMenu,\r\n            getDirectories: this.getDirectories.bind(this),\r\n            getCurrentDirectory: this._getCurrentDirectory.bind(this),\r\n            onDirectoryClick: _ref2 => {\r\n                var {\r\n                    itemData: itemData\r\n                } = _ref2;\r\n                return this._setCurrentDirectory(itemData)\r\n            },\r\n            onItemListDataLoaded: () => this._tryEndLoading(VIEW_AREAS.folders)\r\n        });\r\n        this._filesTreeView.updateCurrentDirectory()\r\n    }\r\n    _createItemView($container, viewMode) {\r\n        this._itemViewContextMenu = this._createContextMenu(true, VIEW_AREAS.items);\r\n        var itemViewOptions = this.option(\"itemView\");\r\n        var options = {\r\n            selectionMode: this.option(\"selectionMode\"),\r\n            selectedItemKeys: this.option(\"selectedItemKeys\"),\r\n            focusedItemKey: this.option(\"focusedItemKey\"),\r\n            contextMenu: this._itemViewContextMenu,\r\n            getItems: this._getItemViewItems.bind(this),\r\n            onError: _ref3 => {\r\n                var {\r\n                    error: error\r\n                } = _ref3;\r\n                return this._showError(error)\r\n            },\r\n            onSelectionChanged: this._onItemViewSelectionChanged.bind(this),\r\n            onFocusedItemChanged: this._onItemViewFocusedItemChanged.bind(this),\r\n            onSelectedItemOpened: this._onSelectedItemOpened.bind(this),\r\n            onContextMenuShowing: e => this._onContextMenuShowing(VIEW_AREAS.items, e),\r\n            onItemListItemsLoaded: () => this._tryEndLoading(VIEW_AREAS.items),\r\n            getItemThumbnail: this._getItemThumbnailInfo.bind(this),\r\n            customizeDetailColumns: this.option(\"customizeDetailColumns\"),\r\n            detailColumns: this.option(\"itemView.details.columns\")\r\n        };\r\n        var $itemView = $(\"<div>\").appendTo($container);\r\n        viewMode = viewMode || itemViewOptions.mode;\r\n        var widgetClass = \"thumbnails\" === viewMode ? FileManagerThumbnailsItemList : FileManagerDetailsItemList;\r\n        this._itemView = this._createComponent($itemView, widgetClass, options)\r\n    }\r\n    _createBreadcrumbs($container) {\r\n        var $breadcrumbs = $(\"<div>\").appendTo($container);\r\n        this._breadcrumbs = this._createComponent($breadcrumbs, FileManagerBreadcrumbs, {\r\n            rootFolderDisplayName: this.option(\"rootFolderName\"),\r\n            onCurrentDirectoryChanging: _ref4 => {\r\n                var {\r\n                    currentDirectory: currentDirectory\r\n                } = _ref4;\r\n                return this._setCurrentDirectory(currentDirectory, true)\r\n            }\r\n        });\r\n        this._breadcrumbs.setCurrentDirectory(this._getCurrentDirectory())\r\n    }\r\n    _createContextMenu(isolateCreationItemCommands, viewArea) {\r\n        var $contextMenu = $(\"<div>\").appendTo(this._$wrapper);\r\n        return this._createComponent($contextMenu, FileManagerContextMenu, {\r\n            commandManager: this._commandManager,\r\n            items: this.option(\"contextMenu.items\"),\r\n            onItemClick: args => this._actions.onContextMenuItemClick(args),\r\n            onContextMenuShowing: e => this._onContextMenuShowing(viewArea, e),\r\n            isolateCreationItemCommands: isolateCreationItemCommands,\r\n            viewArea: viewArea\r\n        })\r\n    }\r\n    _initCommandManager() {\r\n        var actions = extend(this._editing.getCommandActions(), {\r\n            refresh: () => this._refreshAndShowProgress(),\r\n            thumbnails: () => this.option(\"itemView.mode\", \"thumbnails\"),\r\n            details: () => this.option(\"itemView.mode\", \"details\"),\r\n            clearSelection: () => this._clearSelection(),\r\n            showNavPane: () => this._adaptivityControl.toggleDrawer()\r\n        });\r\n        this._commandManager.registerActions(actions)\r\n    }\r\n    _onItemViewSelectionChanged(_ref5) {\r\n        var {\r\n            selectedItemInfos: selectedItemInfos,\r\n            selectedItems: selectedItems,\r\n            selectedItemKeys: selectedItemKeys,\r\n            currentSelectedItemKeys: currentSelectedItemKeys,\r\n            currentDeselectedItemKeys: currentDeselectedItemKeys\r\n        } = _ref5;\r\n        this._lockSelectionProcessing = true;\r\n        this.option(\"selectedItemKeys\", selectedItemKeys);\r\n        this._lockSelectionProcessing = false;\r\n        this._actions.onSelectionChanged({\r\n            selectedItems: selectedItems,\r\n            selectedItemKeys: selectedItemKeys,\r\n            currentSelectedItemKeys: currentSelectedItemKeys,\r\n            currentDeselectedItemKeys: currentDeselectedItemKeys\r\n        });\r\n        this._updateToolbar(selectedItemInfos)\r\n    }\r\n    _onItemViewFocusedItemChanged(e) {\r\n        this._lockFocusedItemProcessing = true;\r\n        this.option(\"focusedItemKey\", e.itemKey);\r\n        this._lockFocusedItemProcessing = false;\r\n        this._actions.onFocusedItemChanged({\r\n            item: e.item,\r\n            itemElement: e.itemElement\r\n        })\r\n    }\r\n    _onAdaptiveStateChanged(_ref6) {\r\n        var {\r\n            enabled: enabled\r\n        } = _ref6;\r\n        this._commandManager.setCommandEnabled(\"showNavPane\", enabled);\r\n        this._updateToolbar()\r\n    }\r\n    _onActionProgress(_ref7) {\r\n        var {\r\n            message: message,\r\n            status: status\r\n        } = _ref7;\r\n        this._toolbar.updateRefreshItem(message, status);\r\n        this._updateToolbar()\r\n    }\r\n    _onEditingError(e) {\r\n        var args = extendAttributes({}, e, [\"errorCode\", \"errorText\", \"fileSystemItem\"]);\r\n        this._actions.onErrorOccurred(args);\r\n        e.errorText = args.errorText\r\n    }\r\n    _refreshAndShowProgress() {\r\n        this._prepareToLoad();\r\n        return when(this._notificationControl.tryShowProgressPanel(), this._controller.refresh()).then(() => this._filesTreeView.refresh())\r\n    }\r\n    _isAllWidgetsLoaded() {\r\n        return 2 === this._loadedWidgets.length && -1 !== this._loadedWidgets.indexOf(VIEW_AREAS.folders) && -1 !== this._loadedWidgets.indexOf(VIEW_AREAS.items)\r\n    }\r\n    _tryEndLoading(area) {\r\n        this._loadedWidgets.push(area);\r\n        if (this._isAllWidgetsLoaded()) {\r\n            this._controller.endSingleLoad()\r\n        }\r\n    }\r\n    _prepareToLoad() {\r\n        this._loadedWidgets = [];\r\n        this._controller.startSingleLoad()\r\n    }\r\n    _updateToolbar(selectedItems) {\r\n        var items = selectedItems || this._getSelectedItemInfos();\r\n        this._toolbar.option(\"contextItems\", ensureDefined(items, []))\r\n    }\r\n    _switchView(viewMode) {\r\n        this._disposeWidget(this._itemView.option(\"contextMenu\"));\r\n        this._disposeWidget(this._itemView);\r\n        this._createItemView(this._$itemsPanel, viewMode);\r\n        this._toolbar.option({\r\n            itemViewMode: viewMode\r\n        })\r\n    }\r\n    _disposeWidget(widget) {\r\n        widget.dispose();\r\n        widget.$element().remove()\r\n    }\r\n    _clearSelection() {\r\n        this._itemView.clearSelection()\r\n    }\r\n    _showError(message) {\r\n        this._showNotification(message, false)\r\n    }\r\n    _showNotification(message, isSuccess) {\r\n        notify({\r\n            message: message,\r\n            width: 450\r\n        }, isSuccess ? \"success\" : \"error\", 5e3)\r\n    }\r\n    _redrawComponent(onlyFileItemsView) {\r\n        this._itemView.refresh().then(() => !onlyFileItemsView && this._filesTreeView.refresh())\r\n    }\r\n    _getItemViewItems() {\r\n        var showFolders = this.option(\"itemView\").showFolders;\r\n        var result = this._controller.getCurrentItems(!showFolders);\r\n        this._updateToolbarWithSelectionOnFirstLoad(result);\r\n        if (this.option(\"itemView.showParentFolder\")) {\r\n            result = when(result).then(items => this._getPreparedItemViewItems(items))\r\n        }\r\n        return result\r\n    }\r\n    _updateToolbarWithSelectionOnFirstLoad(itemsResult) {\r\n        if (!this._firstItemViewLoad) {\r\n            return\r\n        }\r\n        this._firstItemViewLoad = false;\r\n        var selectedItemKeys = this.option(\"selectedItemKeys\");\r\n        if (selectedItemKeys.length > 0) {\r\n            when(itemsResult).done(items => {\r\n                var selectedItems = findItemsByKeys(items, selectedItemKeys);\r\n                if (selectedItems.length > 0) {\r\n                    this._updateToolbar(selectedItems)\r\n                }\r\n            })\r\n        }\r\n    }\r\n    _getPreparedItemViewItems(items) {\r\n        var selectedDir = this._getCurrentDirectory();\r\n        if (selectedDir.fileItem.isRoot()) {\r\n            return items\r\n        }\r\n        var parentDirItem = selectedDir.fileItem.createClone();\r\n        parentDirItem.isParentFolder = true;\r\n        parentDirItem.name = \"..\";\r\n        parentDirItem.relativeName = \"..\";\r\n        parentDirItem.key = \"\".concat(PARENT_DIRECTORY_KEY_PREFIX).concat(selectedDir.fileItem.key);\r\n        var itemsCopy = [...items];\r\n        itemsCopy.unshift({\r\n            fileItem: parentDirItem,\r\n            icon: \"parentfolder\"\r\n        });\r\n        return itemsCopy\r\n    }\r\n    _onContextMenuShowing(viewArea, e) {\r\n        var _e$itemData;\r\n        var eventArgs = extendAttributes({}, e, [\"targetElement\", \"cancel\", \"event\"]);\r\n        eventArgs = extend(eventArgs, {\r\n            viewArea: viewArea,\r\n            fileSystemItem: null === (_e$itemData = e.itemData) || void 0 === _e$itemData ? void 0 : _e$itemData.fileItem,\r\n            _isActionButton: e.isActionButton\r\n        });\r\n        this._actions.onContextMenuShowing(eventArgs);\r\n        e.cancel = ensureDefined(eventArgs.cancel, false)\r\n    }\r\n    _getItemThumbnailInfo(fileInfo) {\r\n        var func = this.option(\"customizeThumbnail\");\r\n        var thumbnail = isFunction(func) ? func(fileInfo.fileItem) : fileInfo.fileItem.thumbnail;\r\n        if (thumbnail) {\r\n            return {\r\n                thumbnail: thumbnail,\r\n                cssClass: FILE_MANAGER_ITEM_CUSTOM_THUMBNAIL_CLASS\r\n            }\r\n        }\r\n        return {\r\n            thumbnail: fileInfo.icon\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            fileSystemProvider: null,\r\n            currentPath: \"\",\r\n            currentPathKeys: [],\r\n            rootFolderName: messageLocalization.format(\"dxFileManager-rootDirectoryName\"),\r\n            selectionMode: \"multiple\",\r\n            selectedItemKeys: [],\r\n            focusedItemKey: void 0,\r\n            toolbar: {\r\n                items: [\"showNavPane\", \"create\", \"upload\", \"switchView\", {\r\n                    name: \"separator\",\r\n                    location: \"after\"\r\n                }, \"refresh\"],\r\n                fileSelectionItems: [\"download\", \"separator\", \"move\", \"copy\", \"rename\", \"separator\", \"delete\", \"clearSelection\", {\r\n                    name: \"separator\",\r\n                    location: \"after\"\r\n                }, \"refresh\"]\r\n            },\r\n            contextMenu: {\r\n                items: [\"create\", \"upload\", \"rename\", \"move\", \"copy\", \"delete\", \"refresh\", \"download\"]\r\n            },\r\n            itemView: {\r\n                details: {\r\n                    columns: [\"thumbnail\", \"name\", \"dateModified\", \"size\"]\r\n                },\r\n                mode: \"details\",\r\n                showFolders: true,\r\n                showParentFolder: true\r\n            },\r\n            customizeThumbnail: null,\r\n            customizeDetailColumns: null,\r\n            onContextMenuItemClick: null,\r\n            onContextMenuShowing: null,\r\n            onCurrentDirectoryChanged: null,\r\n            onSelectedFileOpened: null,\r\n            onSelectionChanged: null,\r\n            onFocusedItemChanged: null,\r\n            onToolbarItemClick: null,\r\n            onErrorOccurred: null,\r\n            onDirectoryCreating: null,\r\n            onDirectoryCreated: null,\r\n            onItemRenaming: null,\r\n            onItemRenamed: null,\r\n            onItemDeleting: null,\r\n            onItemDeleted: null,\r\n            onItemCopying: null,\r\n            onItemCopied: null,\r\n            onItemMoving: null,\r\n            onItemMoved: null,\r\n            onFileUploading: null,\r\n            onFileUploaded: null,\r\n            onItemDownloading: null,\r\n            allowedFileExtensions: [],\r\n            upload: {\r\n                maxFileSize: 0,\r\n                chunkSize: 2e5\r\n            },\r\n            permissions: extend({}, defaultPermissions),\r\n            notifications: {\r\n                showPanel: true,\r\n                showPopup: true\r\n            }\r\n        })\r\n    }\r\n    option(options, value) {\r\n        var optionsToCheck = normalizeOptions(options, value);\r\n        var isGetter = arguments.length < 2 && \"object\" !== type(options);\r\n        var isOptionDefined = name => isDefined(optionsToCheck[name]);\r\n        var isOptionValueDiffers = name => {\r\n            if (!isOptionDefined(name)) {\r\n                return false\r\n            }\r\n            var previousValue = this.option(name);\r\n            var value = optionsToCheck[name];\r\n            return !equals(previousValue, value)\r\n        };\r\n        if (!isGetter && isOptionDefined(\"fileSystemProvider\")) {\r\n            this._providerUpdateDeferred = new Deferred;\r\n            if (isOptionValueDiffers(\"currentPath\") || isOptionValueDiffers(\"currentPathKeys\")) {\r\n                this._lockCurrentPathProcessing = true\r\n            }\r\n        }\r\n        return super.option(...arguments)\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"currentPath\":\r\n                var updateFunc = () => {\r\n                    this._lockCurrentPathProcessing = false;\r\n                    return this._controller.setCurrentPath(args.value)\r\n                };\r\n                this._lockCurrentPathProcessing = true;\r\n                this._providerUpdateDeferred ? this._providerUpdateDeferred.then(updateFunc) : updateFunc();\r\n                break;\r\n            case \"currentPathKeys\":\r\n                var _updateFunc = () => {\r\n                    this._lockCurrentPathProcessing = false;\r\n                    return this._controller.setCurrentPathByKeys(args.value)\r\n                };\r\n                this._lockCurrentPathProcessing = true;\r\n                this._providerUpdateDeferred ? this._providerUpdateDeferred.then(_updateFunc) : _updateFunc();\r\n                break;\r\n            case \"selectedItemKeys\":\r\n                if (!this._lockSelectionProcessing && this._itemView) {\r\n                    this._itemView.option(\"selectedItemKeys\", args.value)\r\n                }\r\n                break;\r\n            case \"focusedItemKey\":\r\n                if (!this._lockFocusedItemProcessing && this._itemView) {\r\n                    this._itemView.option(\"focusedItemKey\", args.value)\r\n                }\r\n                break;\r\n            case \"rootFolderName\":\r\n                this._controller.setRootText(args.value);\r\n                this._invalidate();\r\n                break;\r\n            case \"fileSystemProvider\":\r\n                if (!this._lockCurrentPathProcessing) {\r\n                    this._providerUpdateDeferred = new Deferred\r\n                }\r\n                var pathKeys = this._lockCurrentPathProcessing ? void 0 : this.option(\"currentPathKeys\");\r\n                this._controller.updateProvider(args.value, pathKeys).then(() => this._providerUpdateDeferred.resolve()).always(() => {\r\n                    this._providerUpdateDeferred = null;\r\n                    this.repaint()\r\n                });\r\n                break;\r\n            case \"allowedFileExtensions\":\r\n                this._controller.setAllowedFileExtensions(args.value);\r\n                this._invalidate();\r\n                break;\r\n            case \"upload\":\r\n                this._controller.setUploadOptions(this.option(\"upload\"));\r\n                this._invalidate();\r\n                break;\r\n            case \"permissions\":\r\n                this._commandManager.updatePermissions(this.option(\"permissions\"));\r\n                this._filesTreeViewContextMenu.tryUpdateVisibleContextMenu();\r\n                this._itemViewContextMenu.tryUpdateVisibleContextMenu();\r\n                this._toolbar.updateItemPermissions();\r\n                this._updateUploadDropZone();\r\n                break;\r\n            case \"selectionMode\":\r\n            case \"customizeThumbnail\":\r\n            case \"customizeDetailColumns\":\r\n                this._invalidate();\r\n                break;\r\n            case \"itemView\":\r\n                if (\"itemView.mode\" === args.fullName) {\r\n                    this._switchView(args.value)\r\n                } else {\r\n                    this._invalidate()\r\n                }\r\n                break;\r\n            case \"toolbar\":\r\n                var toolbarOptions = {};\r\n                if (\"toolbar\" === args.fullName) {\r\n                    if (args.value.items) {\r\n                        toolbarOptions.generalItems = args.value.items\r\n                    }\r\n                    if (args.value.fileSelectionItems) {\r\n                        toolbarOptions.fileItems = args.value.fileSelectionItems\r\n                    }\r\n                }\r\n                if (0 === args.fullName.indexOf(\"toolbar.items\")) {\r\n                    toolbarOptions.generalItems = this.option(\"toolbar.items\")\r\n                }\r\n                if (0 === args.fullName.indexOf(\"toolbar.fileSelectionItems\")) {\r\n                    toolbarOptions.fileItems = this.option(\"toolbar.fileSelectionItems\")\r\n                }\r\n                this._toolbar.option(toolbarOptions);\r\n                break;\r\n            case \"contextMenu\":\r\n                if (\"contextMenu\" === args.fullName && args.value.items || 0 === args.fullName.indexOf(\"contextMenu.items\")) {\r\n                    var contextMenuItems = this.option(\"contextMenu.items\");\r\n                    this._filesTreeViewContextMenu.option(\"items\", contextMenuItems);\r\n                    this._itemViewContextMenu.option(\"items\", contextMenuItems)\r\n                }\r\n                break;\r\n            case \"notifications\":\r\n                this._notificationControl.option(\"showProgressPanel\", this.option(\"notifications.showPanel\"));\r\n                this._notificationControl.option(\"showNotificationPopup\", this.option(\"notifications.showPopup\"));\r\n                break;\r\n            case \"onContextMenuItemClick\":\r\n            case \"onContextMenuShowing\":\r\n            case \"onCurrentDirectoryChanged\":\r\n            case \"onSelectedFileOpened\":\r\n            case \"onSelectionChanged\":\r\n            case \"onFocusedItemChanged\":\r\n            case \"onToolbarItemClick\":\r\n            case \"onErrorOccurred\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            case \"onDirectoryCreating\":\r\n            case \"onDirectoryCreated\":\r\n            case \"onItemRenaming\":\r\n            case \"onItemRenamed\":\r\n            case \"onItemDeleting\":\r\n            case \"onItemDeleted\":\r\n            case \"onItemCopying\":\r\n            case \"onItemCopied\":\r\n            case \"onItemMoving\":\r\n            case \"onItemMoved\":\r\n            case \"onFileUploading\":\r\n            case \"onFileUploaded\":\r\n            case \"onItemDownloading\":\r\n                this._actions.editing[name] = this._createActionByOption(name);\r\n                break;\r\n            case \"rtlEnabled\":\r\n                this._editing.updateDialogRtl(args.value);\r\n                super._optionChanged(args);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onContextMenuItemClick: this._createActionByOption(\"onContextMenuItemClick\"),\r\n            onContextMenuShowing: this._createActionByOption(\"onContextMenuShowing\"),\r\n            onCurrentDirectoryChanged: this._createActionByOption(\"onCurrentDirectoryChanged\"),\r\n            onSelectedFileOpened: this._createActionByOption(\"onSelectedFileOpened\"),\r\n            onSelectionChanged: this._createActionByOption(\"onSelectionChanged\"),\r\n            onFocusedItemChanged: this._createActionByOption(\"onFocusedItemChanged\"),\r\n            onToolbarItemClick: this._createActionByOption(\"onToolbarItemClick\"),\r\n            onErrorOccurred: this._createActionByOption(\"onErrorOccurred\"),\r\n            editing: {\r\n                onDirectoryCreating: this._createActionByOption(\"onDirectoryCreating\"),\r\n                onDirectoryCreated: this._createActionByOption(\"onDirectoryCreated\"),\r\n                onItemRenaming: this._createActionByOption(\"onItemRenaming\"),\r\n                onItemRenamed: this._createActionByOption(\"onItemRenamed\"),\r\n                onItemDeleting: this._createActionByOption(\"onItemDeleting\"),\r\n                onItemDeleted: this._createActionByOption(\"onItemDeleted\"),\r\n                onItemCopying: this._createActionByOption(\"onItemCopying\"),\r\n                onItemCopied: this._createActionByOption(\"onItemCopied\"),\r\n                onItemMoving: this._createActionByOption(\"onItemMoving\"),\r\n                onItemMoved: this._createActionByOption(\"onItemMoved\"),\r\n                onFileUploading: this._createActionByOption(\"onFileUploading\"),\r\n                onFileUploaded: this._createActionByOption(\"onFileUploaded\"),\r\n                onItemDownloading: this._createActionByOption(\"onItemDownloading\")\r\n            }\r\n        }\r\n    }\r\n    executeCommand(commandName) {\r\n        return this._commandManager.executeCommand(commandName)\r\n    }\r\n    _setCurrentDirectory(directoryInfo, checkActuality) {\r\n        this._controller.setCurrentDirectory(directoryInfo, checkActuality)\r\n    }\r\n    _getCurrentDirectory() {\r\n        return this._controller.getCurrentDirectory()\r\n    }\r\n    _onControllerInitialized(_ref8) {\r\n        var {\r\n            controller: controller\r\n        } = _ref8;\r\n        this._controller = this._controller || controller;\r\n        this._syncToCurrentDirectory()\r\n    }\r\n    _onDataLoading(_ref9) {\r\n        var {\r\n            operation: operation\r\n        } = _ref9;\r\n        var options = null;\r\n        if (\"navigation\" === operation) {\r\n            options = {\r\n                focusedItemKey: this._itemKeyToFocus,\r\n                selectedItemKeys: this.option(\"selectedItemKeys\")\r\n            };\r\n            this._itemKeyToFocus = void 0\r\n        }\r\n        this._itemView.refresh(options)\r\n    }\r\n    _onSelectedDirectoryChanged() {\r\n        var currentDirectory = this._getCurrentDirectory();\r\n        this._syncToCurrentDirectory();\r\n        this._actions.onCurrentDirectoryChanged({\r\n            directory: currentDirectory.fileItem\r\n        })\r\n    }\r\n    _syncToCurrentDirectory() {\r\n        var currentDirectory = this._getCurrentDirectory();\r\n        if (this._filesTreeView) {\r\n            this._filesTreeView.updateCurrentDirectory()\r\n        }\r\n        if (this._breadcrumbs) {\r\n            this._breadcrumbs.setCurrentDirectory(currentDirectory)\r\n        }\r\n        this._checkPathActuality()\r\n    }\r\n    _checkPathActuality() {\r\n        if (this._lockCurrentPathProcessing) {\r\n            return\r\n        }\r\n        var currentPath = this._controller.getCurrentPath();\r\n        var currentPathKeys = this._controller.getCurrentPathKeys();\r\n        var options = {};\r\n        if (this.option(\"currentPath\") !== currentPath) {\r\n            options.currentPath = currentPath\r\n        }\r\n        if (!equalByValue(this.option(\"currentPathKeys\"), currentPathKeys)) {\r\n            options.currentPathKeys = currentPathKeys\r\n        }\r\n        if (!isEmptyObject(options)) {\r\n            this.option(options)\r\n        }\r\n    }\r\n    getDirectories(parentDirectoryInfo, skipNavigationOnError) {\r\n        return this._controller.getDirectories(parentDirectoryInfo, skipNavigationOnError)\r\n    }\r\n    _getSelectedItemInfos() {\r\n        return this._itemView ? this._itemView.getSelectedItems() : []\r\n    }\r\n    refresh() {\r\n        return this.executeCommand(\"refresh\")\r\n    }\r\n    getCurrentDirectory() {\r\n        var directoryInfo = this._getCurrentDirectory();\r\n        return directoryInfo && directoryInfo.fileItem || null\r\n    }\r\n    getSelectedItems() {\r\n        return this._getSelectedItemInfos().map(itemInfo => itemInfo.fileItem)\r\n    }\r\n    _onSelectedItemOpened(_ref10) {\r\n        var {\r\n            fileItemInfo: fileItemInfo\r\n        } = _ref10;\r\n        var fileItem = fileItemInfo.fileItem;\r\n        if (!fileItem.isDirectory) {\r\n            this._actions.onSelectedFileOpened({\r\n                file: fileItem\r\n            });\r\n            return\r\n        }\r\n        if (fileItem.isParentFolder) {\r\n            this._itemKeyToFocus = this._getCurrentDirectory().fileItem.key\r\n        }\r\n        var newCurrentDirectory = fileItem.isParentFolder ? this._getCurrentDirectory().parentDirectory : fileItemInfo;\r\n        this._setCurrentDirectory(newCurrentDirectory);\r\n        if (newCurrentDirectory) {\r\n            this._filesTreeView.toggleDirectoryExpandedState(newCurrentDirectory.parentDirectory, true)\r\n        }\r\n    }\r\n}\r\nregisterComponent(\"dxFileManager\", FileManager);\r\nexport default FileManager;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}