{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setOuterHeight, setHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport { noop } from \"../../../core/utils/common\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getPublicElement } from \"../../../core/element\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport WorkSpace from \"./ui.scheduler.work_space\";\nimport { extend } from \"../../../core/utils/extend\";\nimport dateLocalization from \"../../../localization/date\";\nimport tableCreatorModule from \"../table_creator\";\nimport { TIME_PANEL_CLASS, DATE_TABLE_CLASS, DATE_TABLE_ROW_CLASS, GROUP_ROW_CLASS, GROUP_HEADER_CONTENT_CLASS } from \"../classes\";\nimport { createReducedResourcesTree, getDataAccessors, getPathToLeaf } from \"../resources/utils\";\nimport { calculateStartViewDate } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/agenda\";\nimport { formatWeekday, getVerticalGroupCountClass } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { VIEWS } from \"../constants\";\nimport dateUtils from \"../../../core/utils/date\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\nvar INNER_CELL_MARGIN = 5;\nvar OUTER_CELL_MARGIN = 20;\n\nclass SchedulerAgenda extends WorkSpace {\n  get type() {\n    return VIEWS.AGENDA;\n  }\n\n  get renderingStrategy() {\n    return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance();\n  }\n\n  get appointmentDataProvider() {\n    return this.option(\"getAppointmentDataProvider\")();\n  }\n\n  getStartViewDate() {\n    return this._startViewDate;\n  }\n\n  _init() {\n    super._init();\n\n    this._activeStateUnit = void 0;\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      agendaDuration: 7,\n      rowHeight: 60,\n      noDataText: \"\"\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n    var value = args.value;\n\n    switch (name) {\n      case \"agendaDuration\":\n        break;\n\n      case \"noDataText\":\n      case \"rowHeight\":\n        this._recalculateAgenda(this._rows);\n\n        break;\n\n      case \"groups\":\n        if (!value || !value.length) {\n          if (this._$groupTable) {\n            this._$groupTable.remove();\n\n            this._$groupTable = null;\n\n            this._detachGroupCountClass();\n          }\n        } else if (!this._$groupTable) {\n          this._initGroupTable();\n\n          this._dateTableScrollable.$content().prepend(this._$groupTable);\n        }\n\n        super._optionChanged(args);\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _renderFocusState() {\n    return noop();\n  }\n\n  _renderFocusTarget() {\n    return noop();\n  }\n\n  _cleanFocusState() {\n    return noop();\n  }\n\n  supportAllDayRow() {\n    return false;\n  }\n\n  _isVerticalGroupedWorkSpace() {\n    return false;\n  }\n\n  _getElementClass() {\n    return AGENDA_CLASS;\n  }\n\n  _calculateStartViewDate() {\n    return calculateStartViewDate(this.option(\"currentDate\"), this.option(\"startDayHour\"));\n  }\n\n  _getRowCount() {\n    return this.option(\"agendaDuration\");\n  }\n\n  _getCellCount() {\n    return 1;\n  }\n\n  _getTimePanelRowCount() {\n    return this.option(\"agendaDuration\");\n  }\n\n  _renderAllDayPanel() {\n    return noop();\n  }\n\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n\n  _initWorkSpaceUnits() {\n    this._initGroupTable();\n\n    this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\n    this._$dateTable = $(\"<table>\").addClass(DATE_TABLE_CLASS);\n    this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\n    this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\n  }\n\n  _initGroupTable() {\n    var groups = this.option(\"groups\");\n\n    if (groups && groups.length) {\n      this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS);\n    }\n  }\n\n  _renderView() {\n    this._startViewDate = this._calculateStartViewDate();\n    this._rows = [];\n\n    this._initPositionHelper();\n  }\n\n  _recalculateAgenda(rows) {\n    var cellTemplates = [];\n\n    this._cleanView();\n\n    if (this._rowsIsEmpty(rows)) {\n      this._renderNoData();\n\n      return;\n    }\n\n    this._rows = rows;\n\n    if (this._$groupTable) {\n      cellTemplates = this._renderGroupHeader();\n\n      this._setGroupHeaderCellsHeight();\n    }\n\n    this._renderTimePanel();\n\n    this._renderDateTable();\n\n    this.invoke(\"onAgendaReady\", rows);\n\n    this._applyCellTemplates(cellTemplates);\n\n    this._dateTableScrollable.update();\n  }\n\n  _renderNoData() {\n    this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\n\n    this._dateTableScrollable.$content().append(this._$noDataContainer);\n  }\n\n  _setTableSizes() {\n    return noop();\n  }\n\n  _toggleHorizontalScrollClass() {\n    return noop();\n  }\n\n  _createCrossScrollingConfig() {\n    return noop();\n  }\n\n  _setGroupHeaderCellsHeight() {\n    var $cells = this._getGroupHeaderCells().filter(function (_, element) {\n      return !element.getAttribute(\"rowSpan\");\n    });\n\n    var rows = this._removeEmptyRows(this._rows);\n\n    if (!rows.length) {\n      return;\n    }\n\n    for (var i = 0; i < $cells.length; i++) {\n      var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\n      setOuterHeight($cellContent, this._getGroupRowHeight(rows[i]));\n    }\n  }\n\n  _rowsIsEmpty(rows) {\n    var result = true;\n\n    for (var i = 0; i < rows.length; i++) {\n      var groupRow = rows[i];\n\n      for (var j = 0; j < groupRow.length; j++) {\n        if (groupRow[j]) {\n          result = false;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  _attachGroupCountClass() {\n    var className = getVerticalGroupCountClass(this.option(\"groups\"));\n    this.$element().addClass(className);\n  }\n\n  _removeEmptyRows(rows) {\n    var result = [];\n\n    for (var i = 0; i < rows.length; i++) {\n      if (rows[i].length && !(data = rows[i], !data.some(function (value) {\n        return value > 0;\n      }))) {\n        result.push(rows[i]);\n      }\n    }\n\n    var data;\n    return result;\n  }\n\n  _getGroupHeaderContainer() {\n    return this._$groupTable;\n  }\n\n  _makeGroupRows() {\n    var tree = createReducedResourcesTree(this.option(\"loadedResources\"), (field, action) => getDataAccessors(this.option(\"getResourceDataAccessors\")(), field, action), this.option(\"getFilteredItems\")());\n    var cellTemplate = this.option(\"resourceCellTemplate\");\n    var getGroupHeaderContentClass = GROUP_HEADER_CONTENT_CLASS;\n    var cellTemplates = [];\n    var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\n      cellTag: \"th\",\n      groupTableClass: GROUP_TABLE_CLASS,\n      groupRowClass: GROUP_ROW_CLASS,\n      groupCellClass: this._getGroupHeaderClass(),\n\n      groupCellCustomContent(cell, cellText, index, data) {\n        var container = domAdapter.createElement(\"div\");\n        var contentWrapper = domAdapter.createElement(\"div\");\n        container.className = getGroupHeaderContentClass;\n        contentWrapper.appendChild(cellText);\n        container.appendChild(contentWrapper);\n        container.className = getGroupHeaderContentClass;\n\n        if (cellTemplate && cellTemplate.render) {\n          cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\n            model: {\n              data: data.data,\n              id: data.value,\n              color: data.color,\n              text: cellText.textContent\n            },\n            container: getPublicElement($(container)),\n            index: index\n          }));\n        } else {\n          contentWrapper.appendChild(cellText);\n          container.appendChild(contentWrapper);\n        }\n\n        cell.appendChild(container);\n      },\n\n      cellTemplate: cellTemplate\n    });\n    return {\n      elements: $(table).find(\".\".concat(GROUP_ROW_CLASS)),\n      cellTemplates: cellTemplates\n    };\n  }\n\n  _cleanView() {\n    this._$dateTable.empty();\n\n    this._$timePanel.empty();\n\n    if (this._$groupTable) {\n      this._$groupTable.empty();\n    }\n\n    if (this._$noDataContainer) {\n      this._$noDataContainer.empty();\n\n      this._$noDataContainer.remove();\n\n      delete this._$noDataContainer;\n    }\n  }\n\n  _createWorkSpaceElements() {\n    this._createWorkSpaceStaticElements();\n  }\n\n  _createWorkSpaceStaticElements() {\n    this._$dateTableContainer.append(this._$dateTable);\n\n    this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n\n    if (this._$groupTable) {\n      this._$dateTableScrollableContent.prepend(this._$groupTable);\n    }\n\n    this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\n\n    this.$element().append(this._dateTableScrollable.$element());\n  }\n\n  _renderDateTable() {\n    this._renderTableBody({\n      container: getPublicElement(this._$dateTable),\n      rowClass: DATE_TABLE_ROW_CLASS,\n      cellClass: this._getDateTableCellClass()\n    });\n  }\n\n  _attachTablesEvents() {\n    return noop();\n  }\n\n  _attachEvents() {\n    return noop();\n  }\n\n  _cleanCellDataCache() {\n    return noop();\n  }\n\n  isIndicationAvailable() {\n    return false;\n  }\n\n  _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\n    var groupsOpt = this.option(\"groups\");\n    var groups = {};\n    var isGroupedView = !!groupsOpt.length;\n    var path = isGroupedView && getPathToLeaf(rowIndex, groupsOpt) || [];\n    path.forEach(function (resourceValue, resourceIndex) {\n      var resourceName = groupsOpt[resourceIndex].name;\n      groups[resourceName] = resourceValue;\n    });\n    var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\n    return {\n      model: {\n        text: text,\n        date: date,\n        groups: groups,\n        groupIndex: groupIndex\n      },\n      container: getPublicElement($cell),\n      index: rowIndex\n    };\n  }\n\n  _renderTableBody(options) {\n    var cellTemplates = [];\n    var cellTemplateOpt = options.cellTemplate;\n    this._$rows = [];\n    var i;\n\n    var fillTableBody = function (rowIndex, rowSize) {\n      if (rowSize) {\n        var date;\n        var cellDateNumber;\n        var cellDayName;\n        var $row = $(\"<tr>\");\n        var $td = $(\"<td>\");\n        setHeight($td, this._getRowHeight(rowSize));\n\n        if (options.getStartDate) {\n          date = options.getStartDate && options.getStartDate(rowIndex);\n          cellDateNumber = dateLocalization.format(date, \"d\");\n          cellDayName = dateLocalization.format(date, formatWeekday);\n        }\n\n        if (cellTemplateOpt && cellTemplateOpt.render) {\n          var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\n\n          cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions));\n        } else if (cellDateNumber && cellDayName) {\n          $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName);\n        }\n\n        if (options.rowClass) {\n          $row.addClass(options.rowClass);\n        }\n\n        if (options.cellClass) {\n          $td.addClass(options.cellClass);\n        }\n\n        $row.append($td);\n\n        this._$rows.push($row);\n      }\n    }.bind(this);\n\n    for (i = 0; i < this._rows.length; i++) {\n      each(this._rows[i], fillTableBody);\n\n      this._setLastRowClass();\n    }\n\n    $(options.container).append($(\"<tbody>\").append(this._$rows));\n\n    this._applyCellTemplates(cellTemplates);\n  }\n\n  _setLastRowClass() {\n    if (this._rows.length > 1 && this._$rows.length) {\n      var $lastRow = this._$rows[this._$rows.length - 1];\n      $lastRow.addClass(LAST_ROW_CLASS);\n    }\n  }\n\n  _renderTimePanel() {\n    this._renderTableBody({\n      container: getPublicElement(this._$timePanel),\n      rowCount: this._getTimePanelRowCount(),\n      cellCount: 1,\n      rowClass: TIME_PANEL_ROW_CLASS,\n      cellClass: TIME_PANEL_CELL_CLASS,\n      cellTemplate: this.option(\"dateCellTemplate\"),\n      getStartDate: this._getTimePanelStartDate.bind(this)\n    });\n  }\n\n  _getTimePanelStartDate(rowIndex) {\n    var current = new Date(this.option(\"currentDate\"));\n    var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\n    return cellDate;\n  }\n\n  _getRowHeight(rowSize) {\n    var baseHeight = this.option(\"rowHeight\");\n    var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\n    return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0;\n  }\n\n  _getGroupRowHeight(groupRows) {\n    if (!groupRows) {\n      return;\n    }\n\n    var result = 0;\n\n    for (var i = 0; i < groupRows.length; i++) {\n      result += this._getRowHeight(groupRows[i]);\n    }\n\n    return result;\n  }\n\n  _calculateRows(appointments) {\n    return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"));\n  }\n\n  onDataSourceChanged(appointments) {\n    super.onDataSourceChanged();\n\n    this._renderView();\n\n    var rows = this._calculateRows(appointments);\n\n    this._recalculateAgenda(rows);\n  }\n\n  getAgendaVerticalStepHeight() {\n    return this.option(\"rowHeight\");\n  }\n\n  getEndViewDate() {\n    var currentDate = new Date(this.option(\"currentDate\"));\n    var agendaDuration = this.option(\"agendaDuration\");\n    currentDate.setHours(this.option(\"endDayHour\"));\n    var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\n    return new Date(result);\n  }\n\n  getEndViewDateByEndDayHour() {\n    return this.getEndViewDate();\n  }\n\n  getCellDataByCoordinates() {\n    return {\n      startDate: null,\n      endDate: null\n    };\n  }\n\n  updateScrollPosition(date) {\n    var newDate = this.timeZoneCalculator.createDate(date, {\n      path: \"toGrid\"\n    });\n    var bounds = this.getVisibleBounds();\n    var startDateHour = newDate.getHours();\n    var startDateMinutes = newDate.getMinutes();\n\n    if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\n      this.scrollToTime(startDateHour, startDateMinutes, newDate);\n    }\n  }\n\n  needUpdateScrollPosition(hours, minutes, bounds) {\n    var isUpdateNeeded = false;\n\n    if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\n      isUpdateNeeded = true;\n    }\n\n    if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\n      isUpdateNeeded = true;\n    }\n\n    if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\n      isUpdateNeeded = true;\n    }\n\n    return isUpdateNeeded;\n  }\n\n  renovatedRenderSupported() {\n    return false;\n  }\n\n  _setSelectedCellsByCellData() {}\n\n  _getIntervalDuration() {\n    return dateUtils.dateToMilliseconds(\"day\") * this.option(\"intervalCount\");\n  }\n\n  getDOMElementsMetaData() {\n    return {\n      dateTableCellsMeta: [[{}]],\n      allDayPanelCellsMeta: [{}]\n    };\n  }\n\n}\n\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\nexport default SchedulerAgenda;","map":{"version":3,"names":["setOuterHeight","setHeight","$","domAdapter","noop","each","getPublicElement","registerComponent","WorkSpace","extend","dateLocalization","tableCreatorModule","TIME_PANEL_CLASS","DATE_TABLE_CLASS","DATE_TABLE_ROW_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CONTENT_CLASS","createReducedResourcesTree","getDataAccessors","getPathToLeaf","calculateStartViewDate","formatWeekday","getVerticalGroupCountClass","VIEWS","dateUtils","tableCreator","AGENDA_CLASS","AGENDA_DATE_CLASS","GROUP_TABLE_CLASS","TIME_PANEL_ROW_CLASS","TIME_PANEL_CELL_CLASS","NODATA_CONTAINER_CLASS","LAST_ROW_CLASS","INNER_CELL_MARGIN","OUTER_CELL_MARGIN","SchedulerAgenda","type","AGENDA","renderingStrategy","invoke","getRenderingStrategyInstance","appointmentDataProvider","option","getStartViewDate","_startViewDate","_init","_activeStateUnit","_getDefaultOptions","agendaDuration","rowHeight","noDataText","_optionChanged","args","name","value","_recalculateAgenda","_rows","length","_$groupTable","remove","_detachGroupCountClass","_initGroupTable","_dateTableScrollable","$content","prepend","_renderFocusState","_renderFocusTarget","_cleanFocusState","supportAllDayRow","_isVerticalGroupedWorkSpace","_getElementClass","_calculateStartViewDate","_getRowCount","_getCellCount","_getTimePanelRowCount","_renderAllDayPanel","_toggleAllDayVisibility","_initWorkSpaceUnits","_$timePanel","addClass","_$dateTable","_$dateTableScrollableContent","_$dateTableContainer","groups","_renderView","_initPositionHelper","rows","cellTemplates","_cleanView","_rowsIsEmpty","_renderNoData","_renderGroupHeader","_setGroupHeaderCellsHeight","_renderTimePanel","_renderDateTable","_applyCellTemplates","update","_$noDataContainer","html","append","_setTableSizes","_toggleHorizontalScrollClass","_createCrossScrollingConfig","$cells","_getGroupHeaderCells","filter","_","element","getAttribute","_removeEmptyRows","i","$cellContent","eq","find","_getGroupRowHeight","result","groupRow","j","_attachGroupCountClass","className","$element","data","some","push","_getGroupHeaderContainer","_makeGroupRows","tree","field","action","cellTemplate","getGroupHeaderContentClass","table","makeGroupedTableFromJSON","VERTICAL","cellTag","groupTableClass","groupRowClass","groupCellClass","_getGroupHeaderClass","groupCellCustomContent","cell","cellText","index","container","createElement","contentWrapper","appendChild","render","bind","model","id","color","text","textContent","elements","concat","empty","_createWorkSpaceElements","_createWorkSpaceStaticElements","_renderTableBody","rowClass","cellClass","_getDateTableCellClass","_attachTablesEvents","_attachEvents","_cleanCellDataCache","isIndicationAvailable","_prepareCellTemplateOptions","date","rowIndex","$cell","groupsOpt","isGroupedView","path","forEach","resourceValue","resourceIndex","resourceName","groupIndex","_getGroupIndexByResourceId","options","cellTemplateOpt","_$rows","fillTableBody","rowSize","cellDateNumber","cellDayName","$row","$td","_getRowHeight","getStartDate","format","templateOptions","_setLastRowClass","$lastRow","rowCount","cellCount","_getTimePanelStartDate","current","Date","cellDate","setDate","getDate","baseHeight","innerOffset","groupRows","_calculateRows","appointments","calculateRows","onDataSourceChanged","getAgendaVerticalStepHeight","getEndViewDate","currentDate","setHours","getEndViewDateByEndDayHour","getCellDataByCoordinates","startDate","endDate","updateScrollPosition","newDate","timeZoneCalculator","createDate","bounds","getVisibleBounds","startDateHour","getHours","startDateMinutes","getMinutes","needUpdateScrollPosition","scrollToTime","hours","minutes","isUpdateNeeded","top","bottom","renovatedRenderSupported","_setSelectedCellsByCellData","_getIntervalDuration","dateToMilliseconds","getDOMElementsMetaData","dateTableCellsMeta","allDayPanelCellsMeta"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.agenda.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.agenda.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setOuterHeight,\r\n    setHeight\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport WorkSpace from \"./ui.scheduler.work_space\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport dateLocalization from \"../../../localization/date\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nimport {\r\n    TIME_PANEL_CLASS,\r\n    DATE_TABLE_CLASS,\r\n    DATE_TABLE_ROW_CLASS,\r\n    GROUP_ROW_CLASS,\r\n    GROUP_HEADER_CONTENT_CLASS\r\n} from \"../classes\";\r\nimport {\r\n    createReducedResourcesTree,\r\n    getDataAccessors,\r\n    getPathToLeaf\r\n} from \"../resources/utils\";\r\nimport {\r\n    calculateStartViewDate\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/agenda\";\r\nimport {\r\n    formatWeekday,\r\n    getVerticalGroupCountClass\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    VIEWS\r\n} from \"../constants\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nvar AGENDA_CLASS = \"dx-scheduler-agenda\";\r\nvar AGENDA_DATE_CLASS = \"dx-scheduler-agenda-date\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar NODATA_CONTAINER_CLASS = \"dx-scheduler-agenda-nodata\";\r\nvar LAST_ROW_CLASS = \"dx-scheduler-date-table-last-row\";\r\nvar INNER_CELL_MARGIN = 5;\r\nvar OUTER_CELL_MARGIN = 20;\r\nclass SchedulerAgenda extends WorkSpace {\r\n    get type() {\r\n        return VIEWS.AGENDA\r\n    }\r\n    get renderingStrategy() {\r\n        return this.invoke(\"getLayoutManager\").getRenderingStrategyInstance()\r\n    }\r\n    get appointmentDataProvider() {\r\n        return this.option(\"getAppointmentDataProvider\")()\r\n    }\r\n    getStartViewDate() {\r\n        return this._startViewDate\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this._activeStateUnit = void 0\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            agendaDuration: 7,\r\n            rowHeight: 60,\r\n            noDataText: \"\"\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        var value = args.value;\r\n        switch (name) {\r\n            case \"agendaDuration\":\r\n                break;\r\n            case \"noDataText\":\r\n            case \"rowHeight\":\r\n                this._recalculateAgenda(this._rows);\r\n                break;\r\n            case \"groups\":\r\n                if (!value || !value.length) {\r\n                    if (this._$groupTable) {\r\n                        this._$groupTable.remove();\r\n                        this._$groupTable = null;\r\n                        this._detachGroupCountClass()\r\n                    }\r\n                } else if (!this._$groupTable) {\r\n                    this._initGroupTable();\r\n                    this._dateTableScrollable.$content().prepend(this._$groupTable)\r\n                }\r\n                super._optionChanged(args);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _renderFocusState() {\r\n        return noop()\r\n    }\r\n    _renderFocusTarget() {\r\n        return noop()\r\n    }\r\n    _cleanFocusState() {\r\n        return noop()\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return false\r\n    }\r\n    _getElementClass() {\r\n        return AGENDA_CLASS\r\n    }\r\n    _calculateStartViewDate() {\r\n        return calculateStartViewDate(this.option(\"currentDate\"), this.option(\"startDayHour\"))\r\n    }\r\n    _getRowCount() {\r\n        return this.option(\"agendaDuration\")\r\n    }\r\n    _getCellCount() {\r\n        return 1\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this.option(\"agendaDuration\")\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._initGroupTable();\r\n        this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\r\n        this._$dateTable = $(\"<table>\").addClass(DATE_TABLE_CLASS);\r\n        this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\r\n        this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\")\r\n    }\r\n    _initGroupTable() {\r\n        var groups = this.option(\"groups\");\r\n        if (groups && groups.length) {\r\n            this._$groupTable = $(\"<table>\").addClass(GROUP_TABLE_CLASS)\r\n        }\r\n    }\r\n    _renderView() {\r\n        this._startViewDate = this._calculateStartViewDate();\r\n        this._rows = [];\r\n        this._initPositionHelper()\r\n    }\r\n    _recalculateAgenda(rows) {\r\n        var cellTemplates = [];\r\n        this._cleanView();\r\n        if (this._rowsIsEmpty(rows)) {\r\n            this._renderNoData();\r\n            return\r\n        }\r\n        this._rows = rows;\r\n        if (this._$groupTable) {\r\n            cellTemplates = this._renderGroupHeader();\r\n            this._setGroupHeaderCellsHeight()\r\n        }\r\n        this._renderTimePanel();\r\n        this._renderDateTable();\r\n        this.invoke(\"onAgendaReady\", rows);\r\n        this._applyCellTemplates(cellTemplates);\r\n        this._dateTableScrollable.update()\r\n    }\r\n    _renderNoData() {\r\n        this._$noDataContainer = $(\"<div>\").addClass(NODATA_CONTAINER_CLASS).html(this.option(\"noDataText\"));\r\n        this._dateTableScrollable.$content().append(this._$noDataContainer)\r\n    }\r\n    _setTableSizes() {\r\n        return noop()\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        return noop()\r\n    }\r\n    _createCrossScrollingConfig() {\r\n        return noop()\r\n    }\r\n    _setGroupHeaderCellsHeight() {\r\n        var $cells = this._getGroupHeaderCells().filter((function(_, element) {\r\n            return !element.getAttribute(\"rowSpan\")\r\n        }));\r\n        var rows = this._removeEmptyRows(this._rows);\r\n        if (!rows.length) {\r\n            return\r\n        }\r\n        for (var i = 0; i < $cells.length; i++) {\r\n            var $cellContent = $cells.eq(i).find(\".dx-scheduler-group-header-content\");\r\n            setOuterHeight($cellContent, this._getGroupRowHeight(rows[i]))\r\n        }\r\n    }\r\n    _rowsIsEmpty(rows) {\r\n        var result = true;\r\n        for (var i = 0; i < rows.length; i++) {\r\n            var groupRow = rows[i];\r\n            for (var j = 0; j < groupRow.length; j++) {\r\n                if (groupRow[j]) {\r\n                    result = false;\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _attachGroupCountClass() {\r\n        var className = getVerticalGroupCountClass(this.option(\"groups\"));\r\n        this.$element().addClass(className)\r\n    }\r\n    _removeEmptyRows(rows) {\r\n        var result = [];\r\n        for (var i = 0; i < rows.length; i++) {\r\n            if (rows[i].length && !(data = rows[i], !data.some((function(value) {\r\n                    return value > 0\r\n                })))) {\r\n                result.push(rows[i])\r\n            }\r\n        }\r\n        var data;\r\n        return result\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        return this._$groupTable\r\n    }\r\n    _makeGroupRows() {\r\n        var tree = createReducedResourcesTree(this.option(\"loadedResources\"), (field, action) => getDataAccessors(this.option(\"getResourceDataAccessors\")(), field, action), this.option(\"getFilteredItems\")());\r\n        var cellTemplate = this.option(\"resourceCellTemplate\");\r\n        var getGroupHeaderContentClass = GROUP_HEADER_CONTENT_CLASS;\r\n        var cellTemplates = [];\r\n        var table = tableCreator.makeGroupedTableFromJSON(tableCreator.VERTICAL, tree, {\r\n            cellTag: \"th\",\r\n            groupTableClass: GROUP_TABLE_CLASS,\r\n            groupRowClass: GROUP_ROW_CLASS,\r\n            groupCellClass: this._getGroupHeaderClass(),\r\n            groupCellCustomContent(cell, cellText, index, data) {\r\n                var container = domAdapter.createElement(\"div\");\r\n                var contentWrapper = domAdapter.createElement(\"div\");\r\n                container.className = getGroupHeaderContentClass;\r\n                contentWrapper.appendChild(cellText);\r\n                container.appendChild(contentWrapper);\r\n                container.className = getGroupHeaderContentClass;\r\n                if (cellTemplate && cellTemplate.render) {\r\n                    cellTemplates.push(cellTemplate.render.bind(cellTemplate, {\r\n                        model: {\r\n                            data: data.data,\r\n                            id: data.value,\r\n                            color: data.color,\r\n                            text: cellText.textContent\r\n                        },\r\n                        container: getPublicElement($(container)),\r\n                        index: index\r\n                    }))\r\n                } else {\r\n                    contentWrapper.appendChild(cellText);\r\n                    container.appendChild(contentWrapper)\r\n                }\r\n                cell.appendChild(container)\r\n            },\r\n            cellTemplate: cellTemplate\r\n        });\r\n        return {\r\n            elements: $(table).find(\".\".concat(GROUP_ROW_CLASS)),\r\n            cellTemplates: cellTemplates\r\n        }\r\n    }\r\n    _cleanView() {\r\n        this._$dateTable.empty();\r\n        this._$timePanel.empty();\r\n        if (this._$groupTable) {\r\n            this._$groupTable.empty()\r\n        }\r\n        if (this._$noDataContainer) {\r\n            this._$noDataContainer.empty();\r\n            this._$noDataContainer.remove();\r\n            delete this._$noDataContainer\r\n        }\r\n    }\r\n    _createWorkSpaceElements() {\r\n        this._createWorkSpaceStaticElements()\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        this._$dateTableContainer.append(this._$dateTable);\r\n        this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n        if (this._$groupTable) {\r\n            this._$dateTableScrollableContent.prepend(this._$groupTable)\r\n        }\r\n        this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\r\n        this.$element().append(this._dateTableScrollable.$element())\r\n    }\r\n    _renderDateTable() {\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowClass: DATE_TABLE_ROW_CLASS,\r\n            cellClass: this._getDateTableCellClass()\r\n        })\r\n    }\r\n    _attachTablesEvents() {\r\n        return noop()\r\n    }\r\n    _attachEvents() {\r\n        return noop()\r\n    }\r\n    _cleanCellDataCache() {\r\n        return noop()\r\n    }\r\n    isIndicationAvailable() {\r\n        return false\r\n    }\r\n    _prepareCellTemplateOptions(text, date, rowIndex, $cell) {\r\n        var groupsOpt = this.option(\"groups\");\r\n        var groups = {};\r\n        var isGroupedView = !!groupsOpt.length;\r\n        var path = isGroupedView && getPathToLeaf(rowIndex, groupsOpt) || [];\r\n        path.forEach((function(resourceValue, resourceIndex) {\r\n            var resourceName = groupsOpt[resourceIndex].name;\r\n            groups[resourceName] = resourceValue\r\n        }));\r\n        var groupIndex = isGroupedView ? this._getGroupIndexByResourceId(groups) : void 0;\r\n        return {\r\n            model: {\r\n                text: text,\r\n                date: date,\r\n                groups: groups,\r\n                groupIndex: groupIndex\r\n            },\r\n            container: getPublicElement($cell),\r\n            index: rowIndex\r\n        }\r\n    }\r\n    _renderTableBody(options) {\r\n        var cellTemplates = [];\r\n        var cellTemplateOpt = options.cellTemplate;\r\n        this._$rows = [];\r\n        var i;\r\n        var fillTableBody = function(rowIndex, rowSize) {\r\n            if (rowSize) {\r\n                var date;\r\n                var cellDateNumber;\r\n                var cellDayName;\r\n                var $row = $(\"<tr>\");\r\n                var $td = $(\"<td>\");\r\n                setHeight($td, this._getRowHeight(rowSize));\r\n                if (options.getStartDate) {\r\n                    date = options.getStartDate && options.getStartDate(rowIndex);\r\n                    cellDateNumber = dateLocalization.format(date, \"d\");\r\n                    cellDayName = dateLocalization.format(date, formatWeekday)\r\n                }\r\n                if (cellTemplateOpt && cellTemplateOpt.render) {\r\n                    var templateOptions = this._prepareCellTemplateOptions(cellDateNumber + \" \" + cellDayName, date, i, $td);\r\n                    cellTemplates.push(cellTemplateOpt.render.bind(cellTemplateOpt, templateOptions))\r\n                } else if (cellDateNumber && cellDayName) {\r\n                    $td.addClass(AGENDA_DATE_CLASS).text(cellDateNumber + \" \" + cellDayName)\r\n                }\r\n                if (options.rowClass) {\r\n                    $row.addClass(options.rowClass)\r\n                }\r\n                if (options.cellClass) {\r\n                    $td.addClass(options.cellClass)\r\n                }\r\n                $row.append($td);\r\n                this._$rows.push($row)\r\n            }\r\n        }.bind(this);\r\n        for (i = 0; i < this._rows.length; i++) {\r\n            each(this._rows[i], fillTableBody);\r\n            this._setLastRowClass()\r\n        }\r\n        $(options.container).append($(\"<tbody>\").append(this._$rows));\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _setLastRowClass() {\r\n        if (this._rows.length > 1 && this._$rows.length) {\r\n            var $lastRow = this._$rows[this._$rows.length - 1];\r\n            $lastRow.addClass(LAST_ROW_CLASS)\r\n        }\r\n    }\r\n    _renderTimePanel() {\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount(),\r\n            cellCount: 1,\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellClass: TIME_PANEL_CELL_CLASS,\r\n            cellTemplate: this.option(\"dateCellTemplate\"),\r\n            getStartDate: this._getTimePanelStartDate.bind(this)\r\n        })\r\n    }\r\n    _getTimePanelStartDate(rowIndex) {\r\n        var current = new Date(this.option(\"currentDate\"));\r\n        var cellDate = new Date(current.setDate(current.getDate() + rowIndex));\r\n        return cellDate\r\n    }\r\n    _getRowHeight(rowSize) {\r\n        var baseHeight = this.option(\"rowHeight\");\r\n        var innerOffset = (rowSize - 1) * INNER_CELL_MARGIN;\r\n        return rowSize ? baseHeight * rowSize + innerOffset + OUTER_CELL_MARGIN : 0\r\n    }\r\n    _getGroupRowHeight(groupRows) {\r\n        if (!groupRows) {\r\n            return\r\n        }\r\n        var result = 0;\r\n        for (var i = 0; i < groupRows.length; i++) {\r\n            result += this._getRowHeight(groupRows[i])\r\n        }\r\n        return result\r\n    }\r\n    _calculateRows(appointments) {\r\n        return this.renderingStrategy.calculateRows(appointments, this.option(\"agendaDuration\"), this.option(\"currentDate\"))\r\n    }\r\n    onDataSourceChanged(appointments) {\r\n        super.onDataSourceChanged();\r\n        this._renderView();\r\n        var rows = this._calculateRows(appointments);\r\n        this._recalculateAgenda(rows)\r\n    }\r\n    getAgendaVerticalStepHeight() {\r\n        return this.option(\"rowHeight\")\r\n    }\r\n    getEndViewDate() {\r\n        var currentDate = new Date(this.option(\"currentDate\"));\r\n        var agendaDuration = this.option(\"agendaDuration\");\r\n        currentDate.setHours(this.option(\"endDayHour\"));\r\n        var result = currentDate.setDate(currentDate.getDate() + agendaDuration - 1) - 6e4;\r\n        return new Date(result)\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        return this.getEndViewDate()\r\n    }\r\n    getCellDataByCoordinates() {\r\n        return {\r\n            startDate: null,\r\n            endDate: null\r\n        }\r\n    }\r\n    updateScrollPosition(date) {\r\n        var newDate = this.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var bounds = this.getVisibleBounds();\r\n        var startDateHour = newDate.getHours();\r\n        var startDateMinutes = newDate.getMinutes();\r\n        if (this.needUpdateScrollPosition(startDateHour, startDateMinutes, bounds, newDate)) {\r\n            this.scrollToTime(startDateHour, startDateMinutes, newDate)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(hours, minutes, bounds) {\r\n        var isUpdateNeeded = false;\r\n        if (hours < bounds.top.hours || hours > bounds.bottom.hours) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.top.hours && minutes < bounds.top.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.bottom.hours && minutes > bounds.top.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        return isUpdateNeeded\r\n    }\r\n    renovatedRenderSupported() {\r\n        return false\r\n    }\r\n    _setSelectedCellsByCellData() {}\r\n    _getIntervalDuration() {\r\n        return dateUtils.dateToMilliseconds(\"day\") * this.option(\"intervalCount\")\r\n    }\r\n    getDOMElementsMetaData() {\r\n        return {\r\n            dateTableCellsMeta: [\r\n                [{}]\r\n            ],\r\n            allDayPanelCellsMeta: [{}]\r\n        }\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerAgenda\", SchedulerAgenda);\r\nexport default SchedulerAgenda;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}