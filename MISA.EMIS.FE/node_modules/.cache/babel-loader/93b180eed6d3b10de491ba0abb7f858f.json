{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/utils.timeZone.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../core/utils/date\";\nimport timeZoneDataUtils from \"./timezones/utils.timezones_data\";\nimport DateAdapter from \"./dateAdapter\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar MINUTES_IN_HOUR = 60;\n\nvar createUTCDateWithLocalOffset = date => {\n  if (!date) {\n    return null;\n  }\n\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\n};\n\nvar createDateFromUTCWithLocalOffset = date => {\n  var result = DateAdapter(date);\n  var timezoneOffsetBeforeInMin = result.getTimezoneOffset();\n  result.addTime(result.getTimezoneOffset(\"minute\"));\n  result.subtractMinutes(timezoneOffsetBeforeInMin - result.getTimezoneOffset());\n  return result.source;\n};\n\nvar getTimeZones = function () {\n  var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  var dateInUTC = createUTCDate(date);\n  return timeZoneDataUtils.getDisplayedTimeZones(dateInUTC.getTime());\n};\n\nvar createUTCDate = date => new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes()));\n\nvar getTimezoneOffsetChangeInMinutes = (startDate, endDate, updatedStartDate, updatedEndDate) => getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate);\n\nvar getTimezoneOffsetChangeInMs = (startDate, endDate, updatedStartDate, updatedEndDate) => getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\");\n\nvar getDaylightOffset = (startDate, endDate) => new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset();\n\nvar getDaylightOffsetInMs = (startDate, endDate) => getDaylightOffset(startDate, endDate) * toMs(\"minute\");\n\nvar calculateTimezoneByValue = function (timezone) {\n  var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n\n  if (\"string\" === typeof timezone) {\n    var dateUtc = createUTCDate(date);\n    return timeZoneDataUtils.getTimeZoneOffsetById(timezone, dateUtc.getTime());\n  }\n\n  return timezone;\n};\n\nvar _getDaylightOffsetByTimezone = (startDate, endDate, timeZone) => calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate);\n\nvar getCorrectedDateByDaylightOffsets = (convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) => {\n  var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\n\n  var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\n\n  var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\n  return new Date(date.getTime() - diff * toMs(\"hour\"));\n};\n\nvar correctRecurrenceExceptionByTimezone = function (exception, exceptionByStartDate, timeZone, startDateTimeZone) {\n  var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n  var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\n\n  if (startDateTimeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone);\n  } else if (timeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone);\n  }\n\n  return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"));\n};\n\nvar isTimezoneChangeInDate = date => {\n  var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\n  var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\n  return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0;\n};\n\nvar getDateWithoutTimezoneChange = date => {\n  var clonedDate = new Date(date);\n\n  if (isTimezoneChangeInDate(clonedDate)) {\n    var result = new Date(clonedDate);\n    return new Date(result.setDate(result.getDate() + 1));\n  }\n\n  return clonedDate;\n};\n\nvar isSameAppointmentDates = (startDate, endDate) => {\n  endDate = new Date(endDate.getTime() - 1);\n  return dateUtils.sameDate(startDate, endDate);\n};\n\nvar getClientTimezoneOffset = function () {\n  var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  return 6e4 * date.getTimezoneOffset();\n};\n\nvar isEqualLocalTimeZone = function (timeZoneName) {\n  var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n\n  if (Intl) {\n    var localTimeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n    if (localTimeZoneName === timeZoneName) {\n      return true;\n    }\n  }\n\n  return isEqualLocalTimeZoneByDeclaration(timeZoneName, date);\n};\n\nvar hasDSTInLocalTimeZone = () => {\n  var [startDate, endDate] = getExtremeDates();\n  return startDate.getTimezoneOffset() !== endDate.getTimezoneOffset();\n};\n\nvar isEqualLocalTimeZoneByDeclaration = (timeZoneName, date) => {\n  var year = date.getFullYear();\n\n  var getOffset = date => -date.getTimezoneOffset() / 60;\n\n  var getDateAndMoveHourBack = dateStamp => new Date(dateStamp - 36e5);\n\n  var configTuple = timeZoneDataUtils.getTimeZoneDeclarationTuple(timeZoneName, year);\n  var [summerTime, winterTime] = configTuple;\n  var noDSTInTargetTimeZone = configTuple.length < 2;\n\n  if (noDSTInTargetTimeZone) {\n    var targetTimeZoneOffset = timeZoneDataUtils.getTimeZoneOffsetById(timeZoneName, date);\n    var localTimeZoneOffset = getOffset(date);\n\n    if (targetTimeZoneOffset !== localTimeZoneOffset) {\n      return false;\n    }\n\n    return hasDSTInLocalTimeZone() ? false : true;\n  }\n\n  var localSummerOffset = getOffset(new Date(summerTime.date));\n  var localWinterOffset = getOffset(new Date(winterTime.date));\n\n  if (localSummerOffset !== summerTime.offset) {\n    return false;\n  }\n\n  if (localSummerOffset === getOffset(getDateAndMoveHourBack(summerTime.date))) {\n    return false;\n  }\n\n  if (localWinterOffset !== winterTime.offset) {\n    return false;\n  }\n\n  if (localWinterOffset === getOffset(getDateAndMoveHourBack(winterTime.date))) {\n    return false;\n  }\n\n  return true;\n};\n\nvar getExtremeDates = () => {\n  var nowDate = new Date(Date.now());\n  var startDate = new Date();\n  var endDate = new Date();\n  startDate.setFullYear(nowDate.getFullYear(), 0, 1);\n  endDate.setFullYear(nowDate.getFullYear(), 6, 1);\n  return [startDate, endDate];\n};\n\nvar setOffsetsToDate = (targetDate, offsetsArray) => {\n  var dateCopy = new Date(targetDate);\n  var offsetToAdd = offsetsArray.reduce((result, offset) => result + offset, 0);\n  dateCopy.setMilliseconds(dateCopy.getMilliseconds() + offsetToAdd);\n  return dateCopy;\n};\n\nvar utils = {\n  getDaylightOffset: getDaylightOffset,\n  getDaylightOffsetInMs: getDaylightOffsetInMs,\n  getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\n  getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\n  calculateTimezoneByValue: calculateTimezoneByValue,\n  getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\n  isSameAppointmentDates: isSameAppointmentDates,\n  correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone,\n  getClientTimezoneOffset: getClientTimezoneOffset,\n  createUTCDateWithLocalOffset: createUTCDateWithLocalOffset,\n  createDateFromUTCWithLocalOffset: createDateFromUTCWithLocalOffset,\n  createUTCDate: createUTCDate,\n  isTimezoneChangeInDate: isTimezoneChangeInDate,\n  getDateWithoutTimezoneChange: getDateWithoutTimezoneChange,\n  hasDSTInLocalTimeZone: hasDSTInLocalTimeZone,\n  isEqualLocalTimeZone: isEqualLocalTimeZone,\n  isEqualLocalTimeZoneByDeclaration: isEqualLocalTimeZoneByDeclaration,\n  getTimeZones: getTimeZones,\n  setOffsetsToDate: setOffsetsToDate\n};\nexport default utils;","map":{"version":3,"names":["dateUtils","timeZoneDataUtils","DateAdapter","toMs","dateToMilliseconds","MINUTES_IN_HOUR","createUTCDateWithLocalOffset","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","createDateFromUTCWithLocalOffset","result","timezoneOffsetBeforeInMin","getTimezoneOffset","addTime","subtractMinutes","source","getTimeZones","arguments","length","dateInUTC","createUTCDate","getDisplayedTimeZones","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getTimezoneOffsetChangeInMinutes","startDate","endDate","updatedStartDate","updatedEndDate","getDaylightOffset","getTimezoneOffsetChangeInMs","getDaylightOffsetInMs","calculateTimezoneByValue","timezone","dateUtc","getTimeZoneOffsetById","_getDaylightOffsetByTimezone","timeZone","getCorrectedDateByDaylightOffsets","convertedOriginalStartDate","convertedDate","startDateTimezone","daylightOffsetByCommonTimezone","daylightOffsetByAppointmentTimezone","diff","correctRecurrenceExceptionByTimezone","exception","exceptionByStartDate","startDateTimeZone","isBackConversion","timezoneOffset","isTimezoneChangeInDate","startDayDate","setHours","endDayDate","getDateWithoutTimezoneChange","clonedDate","setDate","isSameAppointmentDates","sameDate","getClientTimezoneOffset","isEqualLocalTimeZone","timeZoneName","Intl","localTimeZoneName","DateTimeFormat","resolvedOptions","isEqualLocalTimeZoneByDeclaration","hasDSTInLocalTimeZone","getExtremeDates","year","getOffset","getDateAndMoveHourBack","dateStamp","configTuple","getTimeZoneDeclarationTuple","summerTime","winterTime","noDSTInTargetTimeZone","targetTimeZoneOffset","localTimeZoneOffset","localSummerOffset","localWinterOffset","offset","nowDate","now","setFullYear","setOffsetsToDate","targetDate","offsetsArray","dateCopy","offsetToAdd","reduce","setMilliseconds","getMilliseconds","utils"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/utils.timeZone.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/utils.timeZone.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../core/utils/date\";\r\nimport timeZoneDataUtils from \"./timezones/utils.timezones_data\";\r\nimport DateAdapter from \"./dateAdapter\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar MINUTES_IN_HOUR = 60;\r\nvar createUTCDateWithLocalOffset = date => {\r\n    if (!date) {\r\n        return null\r\n    }\r\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()))\r\n};\r\nvar createDateFromUTCWithLocalOffset = date => {\r\n    var result = DateAdapter(date);\r\n    var timezoneOffsetBeforeInMin = result.getTimezoneOffset();\r\n    result.addTime(result.getTimezoneOffset(\"minute\"));\r\n    result.subtractMinutes(timezoneOffsetBeforeInMin - result.getTimezoneOffset());\r\n    return result.source\r\n};\r\nvar getTimeZones = function() {\r\n    var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date;\r\n    var dateInUTC = createUTCDate(date);\r\n    return timeZoneDataUtils.getDisplayedTimeZones(dateInUTC.getTime())\r\n};\r\nvar createUTCDate = date => new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes()));\r\nvar getTimezoneOffsetChangeInMinutes = (startDate, endDate, updatedStartDate, updatedEndDate) => getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate);\r\nvar getTimezoneOffsetChangeInMs = (startDate, endDate, updatedStartDate, updatedEndDate) => getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\");\r\nvar getDaylightOffset = (startDate, endDate) => new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset();\r\nvar getDaylightOffsetInMs = (startDate, endDate) => getDaylightOffset(startDate, endDate) * toMs(\"minute\");\r\nvar calculateTimezoneByValue = function(timezone) {\r\n    var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date;\r\n    if (\"string\" === typeof timezone) {\r\n        var dateUtc = createUTCDate(date);\r\n        return timeZoneDataUtils.getTimeZoneOffsetById(timezone, dateUtc.getTime())\r\n    }\r\n    return timezone\r\n};\r\nvar _getDaylightOffsetByTimezone = (startDate, endDate, timeZone) => calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate);\r\nvar getCorrectedDateByDaylightOffsets = (convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) => {\r\n    var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\r\n    var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\r\n    var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\r\n    return new Date(date.getTime() - diff * toMs(\"hour\"))\r\n};\r\nvar correctRecurrenceExceptionByTimezone = function(exception, exceptionByStartDate, timeZone, startDateTimeZone) {\r\n    var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\r\n    var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\r\n    if (startDateTimeZone) {\r\n        timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone)\r\n    } else if (timeZone) {\r\n        timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone)\r\n    }\r\n    return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"))\r\n};\r\nvar isTimezoneChangeInDate = date => {\r\n    var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\r\n    var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\r\n    return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0\r\n};\r\nvar getDateWithoutTimezoneChange = date => {\r\n    var clonedDate = new Date(date);\r\n    if (isTimezoneChangeInDate(clonedDate)) {\r\n        var result = new Date(clonedDate);\r\n        return new Date(result.setDate(result.getDate() + 1))\r\n    }\r\n    return clonedDate\r\n};\r\nvar isSameAppointmentDates = (startDate, endDate) => {\r\n    endDate = new Date(endDate.getTime() - 1);\r\n    return dateUtils.sameDate(startDate, endDate)\r\n};\r\nvar getClientTimezoneOffset = function() {\r\n    var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date;\r\n    return 6e4 * date.getTimezoneOffset()\r\n};\r\nvar isEqualLocalTimeZone = function(timeZoneName) {\r\n    var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date;\r\n    if (Intl) {\r\n        var localTimeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        if (localTimeZoneName === timeZoneName) {\r\n            return true\r\n        }\r\n    }\r\n    return isEqualLocalTimeZoneByDeclaration(timeZoneName, date)\r\n};\r\nvar hasDSTInLocalTimeZone = () => {\r\n    var [startDate, endDate] = getExtremeDates();\r\n    return startDate.getTimezoneOffset() !== endDate.getTimezoneOffset()\r\n};\r\nvar isEqualLocalTimeZoneByDeclaration = (timeZoneName, date) => {\r\n    var year = date.getFullYear();\r\n    var getOffset = date => -date.getTimezoneOffset() / 60;\r\n    var getDateAndMoveHourBack = dateStamp => new Date(dateStamp - 36e5);\r\n    var configTuple = timeZoneDataUtils.getTimeZoneDeclarationTuple(timeZoneName, year);\r\n    var [summerTime, winterTime] = configTuple;\r\n    var noDSTInTargetTimeZone = configTuple.length < 2;\r\n    if (noDSTInTargetTimeZone) {\r\n        var targetTimeZoneOffset = timeZoneDataUtils.getTimeZoneOffsetById(timeZoneName, date);\r\n        var localTimeZoneOffset = getOffset(date);\r\n        if (targetTimeZoneOffset !== localTimeZoneOffset) {\r\n            return false\r\n        }\r\n        return hasDSTInLocalTimeZone() ? false : true\r\n    }\r\n    var localSummerOffset = getOffset(new Date(summerTime.date));\r\n    var localWinterOffset = getOffset(new Date(winterTime.date));\r\n    if (localSummerOffset !== summerTime.offset) {\r\n        return false\r\n    }\r\n    if (localSummerOffset === getOffset(getDateAndMoveHourBack(summerTime.date))) {\r\n        return false\r\n    }\r\n    if (localWinterOffset !== winterTime.offset) {\r\n        return false\r\n    }\r\n    if (localWinterOffset === getOffset(getDateAndMoveHourBack(winterTime.date))) {\r\n        return false\r\n    }\r\n    return true\r\n};\r\nvar getExtremeDates = () => {\r\n    var nowDate = new Date(Date.now());\r\n    var startDate = new Date;\r\n    var endDate = new Date;\r\n    startDate.setFullYear(nowDate.getFullYear(), 0, 1);\r\n    endDate.setFullYear(nowDate.getFullYear(), 6, 1);\r\n    return [startDate, endDate]\r\n};\r\nvar setOffsetsToDate = (targetDate, offsetsArray) => {\r\n    var dateCopy = new Date(targetDate);\r\n    var offsetToAdd = offsetsArray.reduce((result, offset) => result + offset, 0);\r\n    dateCopy.setMilliseconds(dateCopy.getMilliseconds() + offsetToAdd);\r\n    return dateCopy\r\n};\r\nvar utils = {\r\n    getDaylightOffset: getDaylightOffset,\r\n    getDaylightOffsetInMs: getDaylightOffsetInMs,\r\n    getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\r\n    getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\r\n    calculateTimezoneByValue: calculateTimezoneByValue,\r\n    getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\r\n    isSameAppointmentDates: isSameAppointmentDates,\r\n    correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone,\r\n    getClientTimezoneOffset: getClientTimezoneOffset,\r\n    createUTCDateWithLocalOffset: createUTCDateWithLocalOffset,\r\n    createDateFromUTCWithLocalOffset: createDateFromUTCWithLocalOffset,\r\n    createUTCDate: createUTCDate,\r\n    isTimezoneChangeInDate: isTimezoneChangeInDate,\r\n    getDateWithoutTimezoneChange: getDateWithoutTimezoneChange,\r\n    hasDSTInLocalTimeZone: hasDSTInLocalTimeZone,\r\n    isEqualLocalTimeZone: isEqualLocalTimeZone,\r\n    isEqualLocalTimeZoneByDeclaration: isEqualLocalTimeZoneByDeclaration,\r\n    getTimeZones: getTimeZones,\r\n    setOffsetsToDate: setOffsetsToDate\r\n};\r\nexport default utils;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}