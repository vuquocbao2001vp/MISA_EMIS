{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/core/series_family.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isNumeric, isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { each as _each } from \"../../core/utils/iterator\";\nimport { sign } from \"../../core/utils/math\";\nimport { noop as _noop } from \"../../core/utils/common\";\nimport { map as _map, normalizeEnum as _normalizeEnum } from \"./utils\";\nimport dateUtils from \"../../core/utils/date\";\nvar {\n  round: round,\n  abs: abs,\n  pow: pow,\n  sqrt: sqrt\n} = Math;\nvar _min = Math.min;\nvar DEFAULT_BAR_GROUP_PADDING = .3;\n\nfunction validateBarPadding(barPadding) {\n  return barPadding < 0 || barPadding > 1 ? void 0 : barPadding;\n}\n\nfunction validateBarGroupPadding(barGroupPadding) {\n  return barGroupPadding < 0 || barGroupPadding > 1 ? DEFAULT_BAR_GROUP_PADDING : barGroupPadding;\n}\n\nfunction isStackExist(series, arg) {\n  return series.some(function (s) {\n    return !s.getOptions().ignoreEmptyPoints || s.getPointsByArg(arg, true).some(function (point) {\n      return point.hasValue();\n    });\n  });\n}\n\nfunction correctStackCoordinates(series, currentStacks, arg, stack, parameters, barsArea, seriesStackIndexCallback) {\n  series.forEach(function (series) {\n    var stackIndex = seriesStackIndexCallback(currentStacks.indexOf(stack), currentStacks.length);\n    var points = series.getPointsByArg(arg, true);\n    var barPadding = validateBarPadding(series.getOptions().barPadding);\n    var barWidth = series.getOptions().barWidth;\n    var offset = getOffset(stackIndex, parameters);\n    var width = parameters.width;\n    var extraParameters;\n\n    if (-1 === stackIndex) {\n      return;\n    }\n\n    if (isDefined(barPadding) || isDefined(barWidth)) {\n      extraParameters = calculateParams(barsArea, currentStacks.length, 1 - barPadding, barWidth);\n      width = extraParameters.width;\n\n      if (!series.getBarOverlapGroup()) {\n        offset = getOffset(stackIndex, extraParameters);\n      }\n    }\n\n    correctPointCoordinates(points, width, offset);\n  });\n}\n\nfunction getStackName(series) {\n  return series.getStackName() || series.getBarOverlapGroup();\n}\n\nfunction adjustBarSeriesDimensionsCore(series, options, seriesStackIndexCallback) {\n  var _series$, _series$2;\n\n  var commonStacks = [];\n  var allArguments = [];\n  var seriesInStacks = {};\n  var barGroupWidth = options.barGroupWidth;\n  var argumentAxis = null === (_series$ = series[0]) || void 0 === _series$ ? void 0 : _series$.getArgumentAxis();\n  var interval;\n\n  if (null !== (_series$2 = series[0]) && void 0 !== _series$2 && _series$2.useAggregation()) {\n    var _series$3;\n\n    var isDateArgAxis = \"datetime\" === (null === (_series$3 = series[0]) || void 0 === _series$3 ? void 0 : _series$3.argumentType);\n    var tickInterval = argumentAxis.getTickInterval();\n    var aggregationInterval = argumentAxis.getAggregationInterval();\n    tickInterval = isDateArgAxis ? dateUtils.dateToMilliseconds(tickInterval) : tickInterval;\n    aggregationInterval = isDateArgAxis ? dateUtils.dateToMilliseconds(aggregationInterval) : aggregationInterval;\n    interval = aggregationInterval < tickInterval ? aggregationInterval : tickInterval;\n  }\n\n  interval = null === argumentAxis || void 0 === argumentAxis ? void 0 : argumentAxis.getTranslator().getInterval(interval);\n  var barsArea = barGroupWidth ? interval > barGroupWidth ? barGroupWidth : interval : interval * (1 - validateBarGroupPadding(options.barGroupPadding));\n  series.forEach(function (s, i) {\n    var stackName = getStackName(s) || i.toString();\n    var argument;\n\n    for (argument in s.pointsByArgument) {\n      if (-1 === allArguments.indexOf(argument.valueOf())) {\n        allArguments.push(argument.valueOf());\n      }\n    }\n\n    if (-1 === commonStacks.indexOf(stackName)) {\n      commonStacks.push(stackName);\n      seriesInStacks[stackName] = [];\n    }\n\n    seriesInStacks[stackName].push(s);\n  });\n  allArguments.forEach(function (arg) {\n    var currentStacks = commonStacks.reduce((stacks, stack) => {\n      if (isStackExist(seriesInStacks[stack], arg)) {\n        stacks.push(stack);\n      }\n\n      return stacks;\n    }, []);\n    var parameters = calculateParams(barsArea, currentStacks.length);\n    commonStacks.forEach(stack => {\n      correctStackCoordinates(seriesInStacks[stack], currentStacks, arg, stack, parameters, barsArea, seriesStackIndexCallback);\n    });\n  });\n}\n\nfunction calculateParams(barsArea, count, percentWidth, fixedBarWidth) {\n  var spacing;\n  var width;\n\n  if (fixedBarWidth) {\n    width = _min(fixedBarWidth, barsArea / count);\n    spacing = count > 1 ? round((barsArea - round(width) * count) / (count - 1)) : 0;\n  } else if (isDefined(percentWidth)) {\n    width = barsArea * percentWidth / count;\n    spacing = count > 1 ? round((barsArea - barsArea * percentWidth) / (count - 1)) : 0;\n  } else {\n    spacing = round(barsArea / count * .2);\n    width = (barsArea - spacing * (count - 1)) / count;\n  }\n\n  return {\n    width: width > 1 ? round(width) : 1,\n    spacing: spacing,\n    middleIndex: count / 2,\n    rawWidth: width\n  };\n}\n\nfunction getOffset(stackIndex, parameters) {\n  var width = parameters.rawWidth < 1 ? parameters.rawWidth : parameters.width;\n  return (stackIndex - parameters.middleIndex + .5) * width - (parameters.middleIndex - stackIndex - .5) * parameters.spacing;\n}\n\nfunction correctPointCoordinates(points, width, offset) {\n  _each(points, function (_, point) {\n    point.correctCoordinates({\n      width: width,\n      offset: offset\n    });\n  });\n}\n\nfunction getValueType(value) {\n  return value >= 0 ? \"positive\" : \"negative\";\n}\n\nfunction getVisibleSeries(that) {\n  return that.series.filter(function (s) {\n    return s.isVisible();\n  });\n}\n\nfunction getAbsStackSumByArg(stackKeepers, stackName, argument) {\n  var positiveStackValue = (stackKeepers.positive[stackName] || {})[argument] || 0;\n  var negativeStackValue = -(stackKeepers.negative[stackName] || {})[argument] || 0;\n  return positiveStackValue + negativeStackValue;\n}\n\nfunction getStackSumByArg(stackKeepers, stackName, argument) {\n  var positiveStackValue = (stackKeepers.positive[stackName] || {})[argument] || 0;\n  var negativeStackValue = (stackKeepers.negative[stackName] || {})[argument] || 0;\n  return positiveStackValue + negativeStackValue;\n}\n\nfunction getSeriesStackIndexCallback(inverted) {\n  if (!inverted) {\n    return function (index) {\n      return index;\n    };\n  } else {\n    return function (index, stackCount) {\n      return stackCount - index - 1;\n    };\n  }\n}\n\nfunction isInverted(series) {\n  return series[0] && series[0].getArgumentAxis().getTranslator().isInverted();\n}\n\nfunction adjustBarSeriesDimensions() {\n  var series = getVisibleSeries(this);\n  adjustBarSeriesDimensionsCore(series, this._options, getSeriesStackIndexCallback(isInverted(series)));\n}\n\nfunction getFirstValueSign(series) {\n  var points = series.getPoints();\n  var value;\n\n  for (var i = 0; i < points.length; i++) {\n    var point = points[i];\n    value = point.initialValue && point.initialValue.valueOf();\n\n    if (abs(value) > 0) {\n      break;\n    }\n  }\n\n  return sign(value);\n}\n\nfunction adjustStackedSeriesValues() {\n  var negativesAsZeroes = this._options.negativesAsZeroes;\n  var series = getVisibleSeries(this);\n  var stackKeepers = {\n    positive: {},\n    negative: {}\n  };\n  var holesStack = {\n    left: {},\n    right: {}\n  };\n  var lastSeriesInPositiveStack = {};\n  var lastSeriesInNegativeStack = {};\n  series.forEach(function (singleSeries) {\n    var stackName = getStackName(singleSeries);\n    var hole = false;\n    var stack = getFirstValueSign(singleSeries) < 0 ? lastSeriesInNegativeStack : lastSeriesInPositiveStack;\n    singleSeries._prevSeries = stack[stackName];\n    stack[stackName] = singleSeries;\n    singleSeries.holes = extend(true, {}, holesStack);\n    singleSeries.getPoints().forEach(function (point, index, points) {\n      var value = point.initialValue && point.initialValue.valueOf();\n      var argument = point.argument.valueOf();\n      var stacks = value >= 0 ? stackKeepers.positive : stackKeepers.negative;\n      var isNotBarSeries = \"bar\" !== singleSeries.type;\n\n      if (negativesAsZeroes && value < 0) {\n        stacks = stackKeepers.positive;\n        value = 0;\n        point.resetValue();\n      }\n\n      stacks[stackName] = stacks[stackName] || {};\n      var currentStack = stacks[stackName];\n\n      if (currentStack[argument]) {\n        if (isNotBarSeries) {\n          point.correctValue(currentStack[argument]);\n        }\n\n        currentStack[argument] += value;\n      } else {\n        currentStack[argument] = value;\n\n        if (isNotBarSeries) {\n          point.resetCorrection();\n        }\n      }\n\n      if (!point.hasValue()) {\n        var prevPoint = points[index - 1];\n\n        if (!hole && prevPoint && prevPoint.hasValue()) {\n          argument = prevPoint.argument.valueOf();\n          prevPoint._skipSetRightHole = true;\n          holesStack.right[argument] = (holesStack.right[argument] || 0) + (prevPoint.value.valueOf() - (isFinite(prevPoint.minValue) ? prevPoint.minValue.valueOf() : 0));\n        }\n\n        hole = true;\n      } else if (hole) {\n        hole = false;\n        holesStack.left[argument] = (holesStack.left[argument] || 0) + (point.value.valueOf() - (isFinite(point.minValue) ? point.minValue.valueOf() : 0));\n        point._skipSetLeftHole = true;\n      }\n    });\n  });\n  series.forEach(function (singleSeries) {\n    var holes = singleSeries.holes;\n    singleSeries.getPoints().forEach(function (point) {\n      var argument = point.argument.valueOf();\n      point.resetHoles();\n      !point._skipSetLeftHole && point.setHole(holes.left[argument] || holesStack.left[argument] && 0, \"left\");\n      !point._skipSetRightHole && point.setHole(holes.right[argument] || holesStack.right[argument] && 0, \"right\");\n      point._skipSetLeftHole = null;\n      point._skipSetRightHole = null;\n    });\n  });\n  this._stackKeepers = stackKeepers;\n  series.forEach(function (singleSeries) {\n    singleSeries.getPoints().forEach(function (point) {\n      var argument = point.argument.valueOf();\n      var stackName = getStackName(singleSeries);\n      var absTotal = getAbsStackSumByArg(stackKeepers, stackName, argument);\n      var total = getStackSumByArg(stackKeepers, stackName, argument);\n      point.setPercentValue(absTotal, total, holesStack.left[argument], holesStack.right[argument]);\n    });\n  });\n}\n\nfunction updateStackedSeriesValues() {\n  var that = this;\n  var series = getVisibleSeries(that);\n  var stack = that._stackKeepers;\n  var stackKeepers = {\n    positive: {},\n    negative: {}\n  };\n\n  _each(series, function (_, singleSeries) {\n    var minBarSize = singleSeries.getOptions().minBarSize;\n    var valueAxisTranslator = singleSeries.getValueAxis().getTranslator();\n    var minShownBusinessValue = minBarSize && valueAxisTranslator.getMinBarSize(minBarSize);\n    var stackName = singleSeries.getStackName();\n\n    _each(singleSeries.getPoints(), function (index, point) {\n      if (!point.hasValue()) {\n        return;\n      }\n\n      var value = point.initialValue && point.initialValue.valueOf();\n      var argument = point.argument.valueOf();\n\n      if (that.fullStacked) {\n        value = value / getAbsStackSumByArg(stack, stackName, argument) || 0;\n      }\n\n      var updateValue = valueAxisTranslator.checkMinBarSize(value, minShownBusinessValue, point.value);\n      var valueType = getValueType(updateValue);\n      var currentStack = stackKeepers[valueType][stackName] = stackKeepers[valueType][stackName] || {};\n\n      if (currentStack[argument]) {\n        point.minValue = currentStack[argument];\n        currentStack[argument] += updateValue;\n      } else {\n        currentStack[argument] = updateValue;\n      }\n\n      point.value = currentStack[argument];\n    });\n  });\n\n  if (that.fullStacked) {\n    updateFullStackedSeriesValues(series, stackKeepers);\n  }\n}\n\nfunction updateFullStackedSeriesValues(series, stackKeepers) {\n  _each(series, function (_, singleSeries) {\n    var stackName = singleSeries.getStackName ? singleSeries.getStackName() : \"default\";\n\n    _each(singleSeries.getPoints(), function (index, point) {\n      var stackSum = getAbsStackSumByArg(stackKeepers, stackName, point.argument.valueOf());\n\n      if (0 !== stackSum) {\n        point.value = point.value / stackSum;\n\n        if (isNumeric(point.minValue)) {\n          point.minValue = point.minValue / stackSum;\n        }\n      }\n    });\n  });\n}\n\nfunction updateBarSeriesValues() {\n  _each(this.series, function (_, singleSeries) {\n    var minBarSize = singleSeries.getOptions().minBarSize;\n    var valueAxisTranslator = singleSeries.getValueAxis().getTranslator();\n    var minShownBusinessValue = minBarSize && valueAxisTranslator.getMinBarSize(minBarSize);\n\n    if (minShownBusinessValue) {\n      _each(singleSeries.getPoints(), function (index, point) {\n        if (point.hasValue()) {\n          point.value = valueAxisTranslator.checkMinBarSize(point.initialValue, minShownBusinessValue);\n        }\n      });\n    }\n  });\n}\n\nfunction adjustCandlestickSeriesDimensions() {\n  var series = getVisibleSeries(this);\n  adjustBarSeriesDimensionsCore(series, {\n    barGroupPadding: .3\n  }, getSeriesStackIndexCallback(isInverted(series)));\n}\n\nfunction adjustBubbleSeriesDimensions() {\n  var series = getVisibleSeries(this);\n\n  if (!series.length) {\n    return;\n  }\n\n  var options = this._options;\n  var visibleAreaX = series[0].getArgumentAxis().getVisibleArea();\n  var visibleAreaY = series[0].getValueAxis().getVisibleArea();\n\n  var min = _min(visibleAreaX[1] - visibleAreaX[0], visibleAreaY[1] - visibleAreaY[0]);\n\n  var minBubbleArea = pow(options.minBubbleSize, 2);\n  var maxBubbleArea = pow(min * options.maxBubbleSize, 2);\n  var equalBubbleSize = (min * options.maxBubbleSize + options.minBubbleSize) / 2;\n  var minPointSize = 1 / 0;\n  var maxPointSize = -1 / 0;\n  var pointSize;\n  var bubbleArea;\n  var sizeProportion;\n\n  _each(series, function (_, seriesItem) {\n    _each(seriesItem.getPoints(), function (_, point) {\n      maxPointSize = maxPointSize > point.size ? maxPointSize : point.size;\n      minPointSize = minPointSize < point.size ? minPointSize : point.size;\n    });\n  });\n\n  var sizeDispersion = maxPointSize - minPointSize;\n  var areaDispersion = abs(maxBubbleArea - minBubbleArea);\n\n  _each(series, function (_, seriesItem) {\n    _each(seriesItem.getPoints(), function (_, point) {\n      if (maxPointSize === minPointSize) {\n        pointSize = round(equalBubbleSize);\n      } else {\n        sizeProportion = abs(point.size - minPointSize) / sizeDispersion;\n        bubbleArea = areaDispersion * sizeProportion + minBubbleArea;\n        pointSize = round(sqrt(bubbleArea));\n      }\n\n      point.correctCoordinates(pointSize);\n    });\n  });\n}\n\nexport function SeriesFamily(options) {\n  this.type = _normalizeEnum(options.type);\n  this.pane = options.pane;\n  this.series = [];\n  this.updateOptions(options);\n\n  switch (this.type) {\n    case \"bar\":\n      this.adjustSeriesDimensions = adjustBarSeriesDimensions;\n      this.updateSeriesValues = updateBarSeriesValues;\n      this.adjustSeriesValues = adjustStackedSeriesValues;\n      break;\n\n    case \"rangebar\":\n      this.adjustSeriesDimensions = adjustBarSeriesDimensions;\n      break;\n\n    case \"fullstackedbar\":\n      this.fullStacked = true;\n      this.adjustSeriesDimensions = adjustBarSeriesDimensions;\n      this.adjustSeriesValues = adjustStackedSeriesValues;\n      this.updateSeriesValues = updateStackedSeriesValues;\n      break;\n\n    case \"stackedbar\":\n      this.adjustSeriesDimensions = adjustBarSeriesDimensions;\n      this.adjustSeriesValues = adjustStackedSeriesValues;\n      this.updateSeriesValues = updateStackedSeriesValues;\n      break;\n\n    case \"fullstackedarea\":\n    case \"fullstackedline\":\n    case \"fullstackedspline\":\n    case \"fullstackedsplinearea\":\n      this.fullStacked = true;\n      this.adjustSeriesValues = adjustStackedSeriesValues;\n      break;\n\n    case \"stackedarea\":\n    case \"stackedsplinearea\":\n    case \"stackedline\":\n    case \"stackedspline\":\n      this.adjustSeriesValues = adjustStackedSeriesValues;\n      break;\n\n    case \"candlestick\":\n    case \"stock\":\n      this.adjustSeriesDimensions = adjustCandlestickSeriesDimensions;\n      break;\n\n    case \"bubble\":\n      this.adjustSeriesDimensions = adjustBubbleSeriesDimensions;\n  }\n}\nSeriesFamily.prototype = {\n  constructor: SeriesFamily,\n  adjustSeriesDimensions: _noop,\n  adjustSeriesValues: _noop,\n  updateSeriesValues: _noop,\n  updateOptions: function (options) {\n    this._options = options;\n  },\n  dispose: function () {\n    this.series = null;\n  },\n  add: function (series) {\n    var type = this.type;\n    this.series = _map(series, singleSeries => singleSeries.type === type ? singleSeries : null);\n  }\n};","map":{"version":3,"names":["isNumeric","isDefined","extend","each","_each","sign","noop","_noop","map","_map","normalizeEnum","_normalizeEnum","dateUtils","round","abs","pow","sqrt","Math","_min","min","DEFAULT_BAR_GROUP_PADDING","validateBarPadding","barPadding","validateBarGroupPadding","barGroupPadding","isStackExist","series","arg","some","s","getOptions","ignoreEmptyPoints","getPointsByArg","point","hasValue","correctStackCoordinates","currentStacks","stack","parameters","barsArea","seriesStackIndexCallback","forEach","stackIndex","indexOf","length","points","barWidth","offset","getOffset","width","extraParameters","calculateParams","getBarOverlapGroup","correctPointCoordinates","getStackName","adjustBarSeriesDimensionsCore","options","_series$","_series$2","commonStacks","allArguments","seriesInStacks","barGroupWidth","argumentAxis","getArgumentAxis","interval","useAggregation","_series$3","isDateArgAxis","argumentType","tickInterval","getTickInterval","aggregationInterval","getAggregationInterval","dateToMilliseconds","getTranslator","getInterval","i","stackName","toString","argument","pointsByArgument","valueOf","push","reduce","stacks","count","percentWidth","fixedBarWidth","spacing","middleIndex","rawWidth","_","correctCoordinates","getValueType","value","getVisibleSeries","that","filter","isVisible","getAbsStackSumByArg","stackKeepers","positiveStackValue","positive","negativeStackValue","negative","getStackSumByArg","getSeriesStackIndexCallback","inverted","index","stackCount","isInverted","adjustBarSeriesDimensions","_options","getFirstValueSign","getPoints","initialValue","adjustStackedSeriesValues","negativesAsZeroes","holesStack","left","right","lastSeriesInPositiveStack","lastSeriesInNegativeStack","singleSeries","hole","_prevSeries","holes","isNotBarSeries","type","resetValue","currentStack","correctValue","resetCorrection","prevPoint","_skipSetRightHole","isFinite","minValue","_skipSetLeftHole","resetHoles","setHole","_stackKeepers","absTotal","total","setPercentValue","updateStackedSeriesValues","minBarSize","valueAxisTranslator","getValueAxis","minShownBusinessValue","getMinBarSize","fullStacked","updateValue","checkMinBarSize","valueType","updateFullStackedSeriesValues","stackSum","updateBarSeriesValues","adjustCandlestickSeriesDimensions","adjustBubbleSeriesDimensions","visibleAreaX","getVisibleArea","visibleAreaY","minBubbleArea","minBubbleSize","maxBubbleArea","maxBubbleSize","equalBubbleSize","minPointSize","maxPointSize","pointSize","bubbleArea","sizeProportion","seriesItem","size","sizeDispersion","areaDispersion","SeriesFamily","pane","updateOptions","adjustSeriesDimensions","updateSeriesValues","adjustSeriesValues","prototype","constructor","dispose","add"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/viz/core/series_family.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/viz/core/series_family.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isNumeric,\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    each as _each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    sign\r\n} from \"../../core/utils/math\";\r\nimport {\r\n    noop as _noop\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    map as _map,\r\n    normalizeEnum as _normalizeEnum\r\n} from \"./utils\";\r\nimport dateUtils from \"../../core/utils/date\";\r\nvar {\r\n    round: round,\r\n    abs: abs,\r\n    pow: pow,\r\n    sqrt: sqrt\r\n} = Math;\r\nvar _min = Math.min;\r\nvar DEFAULT_BAR_GROUP_PADDING = .3;\r\n\r\nfunction validateBarPadding(barPadding) {\r\n    return barPadding < 0 || barPadding > 1 ? void 0 : barPadding\r\n}\r\n\r\nfunction validateBarGroupPadding(barGroupPadding) {\r\n    return barGroupPadding < 0 || barGroupPadding > 1 ? DEFAULT_BAR_GROUP_PADDING : barGroupPadding\r\n}\r\n\r\nfunction isStackExist(series, arg) {\r\n    return series.some((function(s) {\r\n        return !s.getOptions().ignoreEmptyPoints || s.getPointsByArg(arg, true).some((function(point) {\r\n            return point.hasValue()\r\n        }))\r\n    }))\r\n}\r\n\r\nfunction correctStackCoordinates(series, currentStacks, arg, stack, parameters, barsArea, seriesStackIndexCallback) {\r\n    series.forEach((function(series) {\r\n        var stackIndex = seriesStackIndexCallback(currentStacks.indexOf(stack), currentStacks.length);\r\n        var points = series.getPointsByArg(arg, true);\r\n        var barPadding = validateBarPadding(series.getOptions().barPadding);\r\n        var barWidth = series.getOptions().barWidth;\r\n        var offset = getOffset(stackIndex, parameters);\r\n        var width = parameters.width;\r\n        var extraParameters;\r\n        if (-1 === stackIndex) {\r\n            return\r\n        }\r\n        if (isDefined(barPadding) || isDefined(barWidth)) {\r\n            extraParameters = calculateParams(barsArea, currentStacks.length, 1 - barPadding, barWidth);\r\n            width = extraParameters.width;\r\n            if (!series.getBarOverlapGroup()) {\r\n                offset = getOffset(stackIndex, extraParameters)\r\n            }\r\n        }\r\n        correctPointCoordinates(points, width, offset)\r\n    }))\r\n}\r\n\r\nfunction getStackName(series) {\r\n    return series.getStackName() || series.getBarOverlapGroup()\r\n}\r\n\r\nfunction adjustBarSeriesDimensionsCore(series, options, seriesStackIndexCallback) {\r\n    var _series$, _series$2;\r\n    var commonStacks = [];\r\n    var allArguments = [];\r\n    var seriesInStacks = {};\r\n    var barGroupWidth = options.barGroupWidth;\r\n    var argumentAxis = null === (_series$ = series[0]) || void 0 === _series$ ? void 0 : _series$.getArgumentAxis();\r\n    var interval;\r\n    if (null !== (_series$2 = series[0]) && void 0 !== _series$2 && _series$2.useAggregation()) {\r\n        var _series$3;\r\n        var isDateArgAxis = \"datetime\" === (null === (_series$3 = series[0]) || void 0 === _series$3 ? void 0 : _series$3.argumentType);\r\n        var tickInterval = argumentAxis.getTickInterval();\r\n        var aggregationInterval = argumentAxis.getAggregationInterval();\r\n        tickInterval = isDateArgAxis ? dateUtils.dateToMilliseconds(tickInterval) : tickInterval;\r\n        aggregationInterval = isDateArgAxis ? dateUtils.dateToMilliseconds(aggregationInterval) : aggregationInterval;\r\n        interval = aggregationInterval < tickInterval ? aggregationInterval : tickInterval\r\n    }\r\n    interval = null === argumentAxis || void 0 === argumentAxis ? void 0 : argumentAxis.getTranslator().getInterval(interval);\r\n    var barsArea = barGroupWidth ? interval > barGroupWidth ? barGroupWidth : interval : interval * (1 - validateBarGroupPadding(options.barGroupPadding));\r\n    series.forEach((function(s, i) {\r\n        var stackName = getStackName(s) || i.toString();\r\n        var argument;\r\n        for (argument in s.pointsByArgument) {\r\n            if (-1 === allArguments.indexOf(argument.valueOf())) {\r\n                allArguments.push(argument.valueOf())\r\n            }\r\n        }\r\n        if (-1 === commonStacks.indexOf(stackName)) {\r\n            commonStacks.push(stackName);\r\n            seriesInStacks[stackName] = []\r\n        }\r\n        seriesInStacks[stackName].push(s)\r\n    }));\r\n    allArguments.forEach((function(arg) {\r\n        var currentStacks = commonStacks.reduce((stacks, stack) => {\r\n            if (isStackExist(seriesInStacks[stack], arg)) {\r\n                stacks.push(stack)\r\n            }\r\n            return stacks\r\n        }, []);\r\n        var parameters = calculateParams(barsArea, currentStacks.length);\r\n        commonStacks.forEach(stack => {\r\n            correctStackCoordinates(seriesInStacks[stack], currentStacks, arg, stack, parameters, barsArea, seriesStackIndexCallback)\r\n        })\r\n    }))\r\n}\r\n\r\nfunction calculateParams(barsArea, count, percentWidth, fixedBarWidth) {\r\n    var spacing;\r\n    var width;\r\n    if (fixedBarWidth) {\r\n        width = _min(fixedBarWidth, barsArea / count);\r\n        spacing = count > 1 ? round((barsArea - round(width) * count) / (count - 1)) : 0\r\n    } else if (isDefined(percentWidth)) {\r\n        width = barsArea * percentWidth / count;\r\n        spacing = count > 1 ? round((barsArea - barsArea * percentWidth) / (count - 1)) : 0\r\n    } else {\r\n        spacing = round(barsArea / count * .2);\r\n        width = (barsArea - spacing * (count - 1)) / count\r\n    }\r\n    return {\r\n        width: width > 1 ? round(width) : 1,\r\n        spacing: spacing,\r\n        middleIndex: count / 2,\r\n        rawWidth: width\r\n    }\r\n}\r\n\r\nfunction getOffset(stackIndex, parameters) {\r\n    var width = parameters.rawWidth < 1 ? parameters.rawWidth : parameters.width;\r\n    return (stackIndex - parameters.middleIndex + .5) * width - (parameters.middleIndex - stackIndex - .5) * parameters.spacing\r\n}\r\n\r\nfunction correctPointCoordinates(points, width, offset) {\r\n    _each(points, (function(_, point) {\r\n        point.correctCoordinates({\r\n            width: width,\r\n            offset: offset\r\n        })\r\n    }))\r\n}\r\n\r\nfunction getValueType(value) {\r\n    return value >= 0 ? \"positive\" : \"negative\"\r\n}\r\n\r\nfunction getVisibleSeries(that) {\r\n    return that.series.filter((function(s) {\r\n        return s.isVisible()\r\n    }))\r\n}\r\n\r\nfunction getAbsStackSumByArg(stackKeepers, stackName, argument) {\r\n    var positiveStackValue = (stackKeepers.positive[stackName] || {})[argument] || 0;\r\n    var negativeStackValue = -(stackKeepers.negative[stackName] || {})[argument] || 0;\r\n    return positiveStackValue + negativeStackValue\r\n}\r\n\r\nfunction getStackSumByArg(stackKeepers, stackName, argument) {\r\n    var positiveStackValue = (stackKeepers.positive[stackName] || {})[argument] || 0;\r\n    var negativeStackValue = (stackKeepers.negative[stackName] || {})[argument] || 0;\r\n    return positiveStackValue + negativeStackValue\r\n}\r\n\r\nfunction getSeriesStackIndexCallback(inverted) {\r\n    if (!inverted) {\r\n        return function(index) {\r\n            return index\r\n        }\r\n    } else {\r\n        return function(index, stackCount) {\r\n            return stackCount - index - 1\r\n        }\r\n    }\r\n}\r\n\r\nfunction isInverted(series) {\r\n    return series[0] && series[0].getArgumentAxis().getTranslator().isInverted()\r\n}\r\n\r\nfunction adjustBarSeriesDimensions() {\r\n    var series = getVisibleSeries(this);\r\n    adjustBarSeriesDimensionsCore(series, this._options, getSeriesStackIndexCallback(isInverted(series)))\r\n}\r\n\r\nfunction getFirstValueSign(series) {\r\n    var points = series.getPoints();\r\n    var value;\r\n    for (var i = 0; i < points.length; i++) {\r\n        var point = points[i];\r\n        value = point.initialValue && point.initialValue.valueOf();\r\n        if (abs(value) > 0) {\r\n            break\r\n        }\r\n    }\r\n    return sign(value)\r\n}\r\n\r\nfunction adjustStackedSeriesValues() {\r\n    var negativesAsZeroes = this._options.negativesAsZeroes;\r\n    var series = getVisibleSeries(this);\r\n    var stackKeepers = {\r\n        positive: {},\r\n        negative: {}\r\n    };\r\n    var holesStack = {\r\n        left: {},\r\n        right: {}\r\n    };\r\n    var lastSeriesInPositiveStack = {};\r\n    var lastSeriesInNegativeStack = {};\r\n    series.forEach((function(singleSeries) {\r\n        var stackName = getStackName(singleSeries);\r\n        var hole = false;\r\n        var stack = getFirstValueSign(singleSeries) < 0 ? lastSeriesInNegativeStack : lastSeriesInPositiveStack;\r\n        singleSeries._prevSeries = stack[stackName];\r\n        stack[stackName] = singleSeries;\r\n        singleSeries.holes = extend(true, {}, holesStack);\r\n        singleSeries.getPoints().forEach((function(point, index, points) {\r\n            var value = point.initialValue && point.initialValue.valueOf();\r\n            var argument = point.argument.valueOf();\r\n            var stacks = value >= 0 ? stackKeepers.positive : stackKeepers.negative;\r\n            var isNotBarSeries = \"bar\" !== singleSeries.type;\r\n            if (negativesAsZeroes && value < 0) {\r\n                stacks = stackKeepers.positive;\r\n                value = 0;\r\n                point.resetValue()\r\n            }\r\n            stacks[stackName] = stacks[stackName] || {};\r\n            var currentStack = stacks[stackName];\r\n            if (currentStack[argument]) {\r\n                if (isNotBarSeries) {\r\n                    point.correctValue(currentStack[argument])\r\n                }\r\n                currentStack[argument] += value\r\n            } else {\r\n                currentStack[argument] = value;\r\n                if (isNotBarSeries) {\r\n                    point.resetCorrection()\r\n                }\r\n            }\r\n            if (!point.hasValue()) {\r\n                var prevPoint = points[index - 1];\r\n                if (!hole && prevPoint && prevPoint.hasValue()) {\r\n                    argument = prevPoint.argument.valueOf();\r\n                    prevPoint._skipSetRightHole = true;\r\n                    holesStack.right[argument] = (holesStack.right[argument] || 0) + (prevPoint.value.valueOf() - (isFinite(prevPoint.minValue) ? prevPoint.minValue.valueOf() : 0))\r\n                }\r\n                hole = true\r\n            } else if (hole) {\r\n                hole = false;\r\n                holesStack.left[argument] = (holesStack.left[argument] || 0) + (point.value.valueOf() - (isFinite(point.minValue) ? point.minValue.valueOf() : 0));\r\n                point._skipSetLeftHole = true\r\n            }\r\n        }))\r\n    }));\r\n    series.forEach((function(singleSeries) {\r\n        var holes = singleSeries.holes;\r\n        singleSeries.getPoints().forEach((function(point) {\r\n            var argument = point.argument.valueOf();\r\n            point.resetHoles();\r\n            !point._skipSetLeftHole && point.setHole(holes.left[argument] || holesStack.left[argument] && 0, \"left\");\r\n            !point._skipSetRightHole && point.setHole(holes.right[argument] || holesStack.right[argument] && 0, \"right\");\r\n            point._skipSetLeftHole = null;\r\n            point._skipSetRightHole = null\r\n        }))\r\n    }));\r\n    this._stackKeepers = stackKeepers;\r\n    series.forEach((function(singleSeries) {\r\n        singleSeries.getPoints().forEach((function(point) {\r\n            var argument = point.argument.valueOf();\r\n            var stackName = getStackName(singleSeries);\r\n            var absTotal = getAbsStackSumByArg(stackKeepers, stackName, argument);\r\n            var total = getStackSumByArg(stackKeepers, stackName, argument);\r\n            point.setPercentValue(absTotal, total, holesStack.left[argument], holesStack.right[argument])\r\n        }))\r\n    }))\r\n}\r\n\r\nfunction updateStackedSeriesValues() {\r\n    var that = this;\r\n    var series = getVisibleSeries(that);\r\n    var stack = that._stackKeepers;\r\n    var stackKeepers = {\r\n        positive: {},\r\n        negative: {}\r\n    };\r\n    _each(series, (function(_, singleSeries) {\r\n        var minBarSize = singleSeries.getOptions().minBarSize;\r\n        var valueAxisTranslator = singleSeries.getValueAxis().getTranslator();\r\n        var minShownBusinessValue = minBarSize && valueAxisTranslator.getMinBarSize(minBarSize);\r\n        var stackName = singleSeries.getStackName();\r\n        _each(singleSeries.getPoints(), (function(index, point) {\r\n            if (!point.hasValue()) {\r\n                return\r\n            }\r\n            var value = point.initialValue && point.initialValue.valueOf();\r\n            var argument = point.argument.valueOf();\r\n            if (that.fullStacked) {\r\n                value = value / getAbsStackSumByArg(stack, stackName, argument) || 0\r\n            }\r\n            var updateValue = valueAxisTranslator.checkMinBarSize(value, minShownBusinessValue, point.value);\r\n            var valueType = getValueType(updateValue);\r\n            var currentStack = stackKeepers[valueType][stackName] = stackKeepers[valueType][stackName] || {};\r\n            if (currentStack[argument]) {\r\n                point.minValue = currentStack[argument];\r\n                currentStack[argument] += updateValue\r\n            } else {\r\n                currentStack[argument] = updateValue\r\n            }\r\n            point.value = currentStack[argument]\r\n        }))\r\n    }));\r\n    if (that.fullStacked) {\r\n        updateFullStackedSeriesValues(series, stackKeepers)\r\n    }\r\n}\r\n\r\nfunction updateFullStackedSeriesValues(series, stackKeepers) {\r\n    _each(series, (function(_, singleSeries) {\r\n        var stackName = singleSeries.getStackName ? singleSeries.getStackName() : \"default\";\r\n        _each(singleSeries.getPoints(), (function(index, point) {\r\n            var stackSum = getAbsStackSumByArg(stackKeepers, stackName, point.argument.valueOf());\r\n            if (0 !== stackSum) {\r\n                point.value = point.value / stackSum;\r\n                if (isNumeric(point.minValue)) {\r\n                    point.minValue = point.minValue / stackSum\r\n                }\r\n            }\r\n        }))\r\n    }))\r\n}\r\n\r\nfunction updateBarSeriesValues() {\r\n    _each(this.series, (function(_, singleSeries) {\r\n        var minBarSize = singleSeries.getOptions().minBarSize;\r\n        var valueAxisTranslator = singleSeries.getValueAxis().getTranslator();\r\n        var minShownBusinessValue = minBarSize && valueAxisTranslator.getMinBarSize(minBarSize);\r\n        if (minShownBusinessValue) {\r\n            _each(singleSeries.getPoints(), (function(index, point) {\r\n                if (point.hasValue()) {\r\n                    point.value = valueAxisTranslator.checkMinBarSize(point.initialValue, minShownBusinessValue)\r\n                }\r\n            }))\r\n        }\r\n    }))\r\n}\r\n\r\nfunction adjustCandlestickSeriesDimensions() {\r\n    var series = getVisibleSeries(this);\r\n    adjustBarSeriesDimensionsCore(series, {\r\n        barGroupPadding: .3\r\n    }, getSeriesStackIndexCallback(isInverted(series)))\r\n}\r\n\r\nfunction adjustBubbleSeriesDimensions() {\r\n    var series = getVisibleSeries(this);\r\n    if (!series.length) {\r\n        return\r\n    }\r\n    var options = this._options;\r\n    var visibleAreaX = series[0].getArgumentAxis().getVisibleArea();\r\n    var visibleAreaY = series[0].getValueAxis().getVisibleArea();\r\n    var min = _min(visibleAreaX[1] - visibleAreaX[0], visibleAreaY[1] - visibleAreaY[0]);\r\n    var minBubbleArea = pow(options.minBubbleSize, 2);\r\n    var maxBubbleArea = pow(min * options.maxBubbleSize, 2);\r\n    var equalBubbleSize = (min * options.maxBubbleSize + options.minBubbleSize) / 2;\r\n    var minPointSize = 1 / 0;\r\n    var maxPointSize = -1 / 0;\r\n    var pointSize;\r\n    var bubbleArea;\r\n    var sizeProportion;\r\n    _each(series, (function(_, seriesItem) {\r\n        _each(seriesItem.getPoints(), (function(_, point) {\r\n            maxPointSize = maxPointSize > point.size ? maxPointSize : point.size;\r\n            minPointSize = minPointSize < point.size ? minPointSize : point.size\r\n        }))\r\n    }));\r\n    var sizeDispersion = maxPointSize - minPointSize;\r\n    var areaDispersion = abs(maxBubbleArea - minBubbleArea);\r\n    _each(series, (function(_, seriesItem) {\r\n        _each(seriesItem.getPoints(), (function(_, point) {\r\n            if (maxPointSize === minPointSize) {\r\n                pointSize = round(equalBubbleSize)\r\n            } else {\r\n                sizeProportion = abs(point.size - minPointSize) / sizeDispersion;\r\n                bubbleArea = areaDispersion * sizeProportion + minBubbleArea;\r\n                pointSize = round(sqrt(bubbleArea))\r\n            }\r\n            point.correctCoordinates(pointSize)\r\n        }))\r\n    }))\r\n}\r\nexport function SeriesFamily(options) {\r\n    this.type = _normalizeEnum(options.type);\r\n    this.pane = options.pane;\r\n    this.series = [];\r\n    this.updateOptions(options);\r\n    switch (this.type) {\r\n        case \"bar\":\r\n            this.adjustSeriesDimensions = adjustBarSeriesDimensions;\r\n            this.updateSeriesValues = updateBarSeriesValues;\r\n            this.adjustSeriesValues = adjustStackedSeriesValues;\r\n            break;\r\n        case \"rangebar\":\r\n            this.adjustSeriesDimensions = adjustBarSeriesDimensions;\r\n            break;\r\n        case \"fullstackedbar\":\r\n            this.fullStacked = true;\r\n            this.adjustSeriesDimensions = adjustBarSeriesDimensions;\r\n            this.adjustSeriesValues = adjustStackedSeriesValues;\r\n            this.updateSeriesValues = updateStackedSeriesValues;\r\n            break;\r\n        case \"stackedbar\":\r\n            this.adjustSeriesDimensions = adjustBarSeriesDimensions;\r\n            this.adjustSeriesValues = adjustStackedSeriesValues;\r\n            this.updateSeriesValues = updateStackedSeriesValues;\r\n            break;\r\n        case \"fullstackedarea\":\r\n        case \"fullstackedline\":\r\n        case \"fullstackedspline\":\r\n        case \"fullstackedsplinearea\":\r\n            this.fullStacked = true;\r\n            this.adjustSeriesValues = adjustStackedSeriesValues;\r\n            break;\r\n        case \"stackedarea\":\r\n        case \"stackedsplinearea\":\r\n        case \"stackedline\":\r\n        case \"stackedspline\":\r\n            this.adjustSeriesValues = adjustStackedSeriesValues;\r\n            break;\r\n        case \"candlestick\":\r\n        case \"stock\":\r\n            this.adjustSeriesDimensions = adjustCandlestickSeriesDimensions;\r\n            break;\r\n        case \"bubble\":\r\n            this.adjustSeriesDimensions = adjustBubbleSeriesDimensions\r\n    }\r\n}\r\nSeriesFamily.prototype = {\r\n    constructor: SeriesFamily,\r\n    adjustSeriesDimensions: _noop,\r\n    adjustSeriesValues: _noop,\r\n    updateSeriesValues: _noop,\r\n    updateOptions: function(options) {\r\n        this._options = options\r\n    },\r\n    dispose: function() {\r\n        this.series = null\r\n    },\r\n    add: function(series) {\r\n        var type = this.type;\r\n        this.series = _map(series, singleSeries => singleSeries.type === type ? singleSeries : null)\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}