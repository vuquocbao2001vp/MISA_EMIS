{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { getRecurrenceProcessor } from \"../../recurrence\";\nimport { wrapToArray } from \"../../../../core/utils/array\";\nimport { map, each } from \"../../../../core/utils/iterator\";\nimport { isFunction, isDefined } from \"../../../../core/utils/type\";\nimport query from \"../../../../data/query\";\nimport { createAppointmentAdapter } from \"../../appointmentAdapter\";\nimport { hasResourceValue } from \"../../../../renovation/ui/scheduler/resources/hasResourceValue\";\nimport { isDateAndTimeView as calculateIsDateAndTimeView, isTimelineView } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getResourcesDataByGroups } from \"../../resources/utils\";\nimport { compareDateWithStartDayHour, compareDateWithEndDayHour, getAppointmentTakesSeveralDays, _appointmentPartInInterval, getRecurrenceException } from \"./utils\";\nimport getDatesWithoutTime from \"../../../../renovation/ui/scheduler/utils/filtering/getDatesWithoutTime\";\nimport { getAppointmentTakesAllDay } from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\nexport class AppointmentFilterBaseStrategy {\n  constructor(options) {\n    this.options = options;\n    this.dataAccessors = this.options.dataAccessors;\n\n    this._init();\n  }\n\n  get strategyName() {\n    return FilterStrategies.standard;\n  }\n\n  get timeZoneCalculator() {\n    return this.options.timeZoneCalculator;\n  }\n\n  get viewStartDayHour() {\n    return this.options.startDayHour;\n  }\n\n  get viewEndDayHour() {\n    return this.options.endDayHour;\n  }\n\n  get timezone() {\n    return this.options.timezone;\n  }\n\n  get firstDayOfWeek() {\n    return this.options.firstDayOfWeek;\n  }\n\n  get showAllDayPanel() {\n    return this.options.showAllDayPanel;\n  }\n\n  get loadedResources() {\n    return this._resolveOption(\"loadedResources\");\n  }\n\n  get supportAllDayRow() {\n    return this._resolveOption(\"supportAllDayRow\");\n  }\n\n  get viewType() {\n    return this._resolveOption(\"viewType\");\n  }\n\n  get viewDirection() {\n    return this._resolveOption(\"viewDirection\");\n  }\n\n  get dateRange() {\n    return this._resolveOption(\"dateRange\");\n  }\n\n  get groupCount() {\n    return this._resolveOption(\"groupCount\");\n  }\n\n  get viewDataProvider() {\n    return this._resolveOption(\"viewDataProvider\");\n  }\n\n  get allDayPanelMode() {\n    return this._resolveOption(\"allDayPanelMode\");\n  }\n\n  _resolveOption(name) {\n    var result = this.options[name];\n    return \"function\" === typeof result ? result() : result;\n  }\n\n  _init() {\n    this.setDataAccessors(this.dataAccessors);\n  }\n\n  filter(preparedItems) {\n    var dateRange = this.dateRange;\n    var allDay;\n\n    if (!this.showAllDayPanel && this.supportAllDayRow) {\n      allDay = false;\n    }\n\n    return this.filterLoadedAppointments({\n      startDayHour: this.viewStartDayHour,\n      endDayHour: this.viewEndDayHour,\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour,\n      min: dateRange[0],\n      max: dateRange[1],\n      resources: this.loadedResources,\n      allDay: allDay,\n      supportMultiDayAppointments: isTimelineView(this.viewType),\n      firstDayOfWeek: this.firstDayOfWeek\n    }, preparedItems);\n  }\n\n  hasAllDayAppointments(filteredItems, preparedItems) {\n    var adapters = filteredItems.map(item => createAppointmentAdapter(item, this.dataAccessors, this.timeZoneCalculator));\n    var result = false;\n    each(adapters, (_, item) => {\n      if (getAppointmentTakesAllDay(item, this.viewStartDayHour, this.viewEndDayHour, this.allDayPanelMode)) {\n        result = true;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  setDataAccessors(dataAccessors) {\n    this.dataAccessors = dataAccessors;\n  }\n\n  _createAllDayAppointmentFilter(filterOptions) {\n    var {\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour\n    } = filterOptions;\n    return [[appointment => getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode)]];\n  }\n\n  _createCombinedFilter(filterOptions) {\n    var min = new Date(filterOptions.min);\n    var max = new Date(filterOptions.max);\n    var {\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour,\n      resources: resources,\n      firstDayOfWeek: firstDayOfWeek,\n      checkIntersectViewport: checkIntersectViewport,\n      supportMultiDayAppointments: supportMultiDayAppointments\n    } = filterOptions;\n    var [trimMin, trimMax] = getDatesWithoutTime(min, max);\n    var useRecurrence = isDefined(this.dataAccessors.getter.recurrenceRule);\n    return [[appointment => {\n      var _appointment$visible;\n\n      var appointmentVisible = null !== (_appointment$visible = appointment.visible) && void 0 !== _appointment$visible ? _appointment$visible : true;\n\n      if (!appointmentVisible) {\n        return false;\n      }\n\n      var {\n        startDate: startDate,\n        endDate: endDate,\n        hasRecurrenceRule: hasRecurrenceRule\n      } = appointment;\n\n      if (!hasRecurrenceRule) {\n        if (!(endDate >= trimMin && startDate < trimMax || dateUtils.sameDate(endDate, trimMin) && dateUtils.sameDate(startDate, trimMin))) {\n          return false;\n        }\n      }\n\n      var appointmentTakesAllDay = getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode);\n      var appointmentTakesSeveralDays = getAppointmentTakesSeveralDays(appointment);\n      var isAllDay = appointment.allDay;\n      var isLongAppointment = appointmentTakesSeveralDays || appointmentTakesAllDay;\n\n      if (null !== resources && void 0 !== resources && resources.length && !this._filterAppointmentByResources(appointment.rawAppointment, resources)) {\n        return false;\n      }\n\n      if (appointmentTakesAllDay && false === filterOptions.allDay) {\n        return false;\n      }\n\n      if (hasRecurrenceRule) {\n        var recurrenceException = getRecurrenceException(appointment, this.timeZoneCalculator, this.timezone);\n\n        if (!this._filterAppointmentByRRule(_extends({}, appointment, {\n          recurrenceException: recurrenceException,\n          allDay: appointmentTakesAllDay\n        }), min, max, startDayHour, endDayHour, firstDayOfWeek)) {\n          return false;\n        }\n      }\n\n      if (!isAllDay && supportMultiDayAppointments && isLongAppointment) {\n        if (endDate < min && (!useRecurrence || useRecurrence && !hasRecurrenceRule)) {\n          return false;\n        }\n      }\n\n      if (isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\n        if (!compareDateWithStartDayHour(startDate, endDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)) {\n          return false;\n        }\n      }\n\n      if (isDefined(endDayHour)) {\n        if (!compareDateWithEndDayHour({\n          startDate: startDate,\n          endDate: endDate,\n          startDayHour: startDayHour,\n          endDayHour: endDayHour,\n          viewStartDayHour: viewStartDayHour,\n          viewEndDayHour: viewEndDayHour,\n          allDay: appointmentTakesAllDay,\n          severalDays: appointmentTakesSeveralDays,\n          min: min,\n          max: max,\n          checkIntersectViewport: checkIntersectViewport\n        })) {\n          return false;\n        }\n      }\n\n      if (!isAllDay && (!isLongAppointment || supportMultiDayAppointments)) {\n        if (endDate < min && useRecurrence && !hasRecurrenceRule) {\n          return false;\n        }\n      }\n\n      return true;\n    }]];\n  }\n\n  _createAppointmentFilter(filterOptions) {\n    return this._createCombinedFilter(filterOptions);\n  }\n\n  _filterAppointmentByResources(appointment, resources) {\n    var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\n      var resourceGetter = this.dataAccessors.resources.getter[resourceName];\n      var resource;\n\n      if (isFunction(resourceGetter)) {\n        resource = resourceGetter(appointment);\n      }\n\n      var appointmentResourceValues = wrapToArray(resource);\n      var resourceData = map(resources[resourceIndex].items, _ref => {\n        var {\n          id: id\n        } = _ref;\n        return id;\n      });\n\n      for (var i = 0; i < appointmentResourceValues.length; i++) {\n        if (hasResourceValue(resourceData, appointmentResourceValues[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var result = false;\n\n    for (var i = 0; i < resources.length; i++) {\n      var resourceName = resources[i].name;\n      result = checkAppointmentResourceValues(resourceName, i);\n\n      if (!result) {\n        return false;\n      }\n    }\n\n    return result;\n  }\n\n  _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\n    var recurrenceRule = appointment.recurrenceRule;\n    var recurrenceException = appointment.recurrenceException;\n    var allDay = appointment.allDay;\n    var result = true;\n    var appointmentStartDate = appointment.startDate;\n    var appointmentEndDate = appointment.endDate;\n    var recurrenceProcessor = getRecurrenceProcessor();\n\n    if (allDay || _appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\n      var [trimMin, trimMax] = getDatesWithoutTime(min, max);\n      min = trimMin;\n      max = new Date(trimMax.getTime() - toMs(\"minute\"));\n    }\n\n    if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = appointmentEndDate > min && appointmentStartDate <= max;\n    }\n\n    if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = recurrenceProcessor.hasRecurrence({\n        rule: recurrenceRule,\n        exception: recurrenceException,\n        start: appointmentStartDate,\n        end: appointmentEndDate,\n        min: min,\n        max: max,\n        firstDayOfWeek: firstDayOfWeek,\n        appointmentTimezoneOffset: this.timeZoneCalculator.getOriginStartDateOffsetInMs(appointmentStartDate, appointment.startDateTimeZone, false)\n      });\n    }\n\n    return result;\n  }\n\n  filterLoadedAppointments(filterOptions, preparedItems) {\n    var filteredItems = this.filterPreparedItems(filterOptions, preparedItems);\n    return filteredItems.map(_ref2 => {\n      var {\n        rawAppointment: rawAppointment\n      } = _ref2;\n      return rawAppointment;\n    });\n  }\n\n  filterPreparedItems(filterOptions, preparedItems) {\n    var combinedFilter = this._createAppointmentFilter(filterOptions);\n\n    return query(preparedItems).filter(combinedFilter).toArray();\n  }\n\n  filterAllDayAppointments(filterOptions, preparedItems) {\n    var combinedFilter = this._createAllDayAppointmentFilter(filterOptions);\n\n    return query(preparedItems).filter(combinedFilter).toArray().map(_ref3 => {\n      var {\n        rawAppointment: rawAppointment\n      } = _ref3;\n      return rawAppointment;\n    });\n  }\n\n}\nexport class AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\n  get strategyName() {\n    return FilterStrategies.virtual;\n  }\n\n  get resources() {\n    return this.options.resources;\n  }\n\n  filter(preparedItems) {\n    var hourMs = toMs(\"hour\");\n    var isCalculateStartAndEndDayHour = calculateIsDateAndTimeView(this.viewType);\n    var checkIntersectViewport = isCalculateStartAndEndDayHour && \"horizontal\" === this.viewDirection;\n    var isAllDayWorkspace = !this.supportAllDayRow;\n    var showAllDayAppointments = this.showAllDayPanel || isAllDayWorkspace;\n    var endViewDate = this.viewDataProvider.getLastViewDateByEndDayHour(this.viewEndDayHour);\n    var filterOptions = [];\n    var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\n    groupsInfo.forEach(item => {\n      var groupIndex = item.groupIndex;\n      var groupStartDate = item.startDate;\n      var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\n      var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\n      var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / hourMs : this.viewEndDayHour;\n\n      var resources = this._getPrerenderFilterResources(groupIndex);\n\n      var hasAllDayPanel = this.viewDataProvider.hasGroupAllDayPanel(groupIndex);\n      var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && hasAllDayPanel;\n      filterOptions.push({\n        isVirtualScrolling: true,\n        startDayHour: startDayHour,\n        endDayHour: endDayHour,\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour,\n        min: groupStartDate,\n        max: groupEndDate,\n        supportMultiDayAppointments: isTimelineView(this.viewType),\n        allDay: supportAllDayAppointment,\n        resources: resources,\n        firstDayOfWeek: this.firstDayOfWeek,\n        checkIntersectViewport: checkIntersectViewport\n      });\n    });\n    return this.filterLoadedAppointments({\n      filterOptions: filterOptions,\n      groupCount: this.groupCount\n    }, preparedItems);\n  }\n\n  filterPreparedItems(_ref4, preparedItems) {\n    var {\n      filterOptions: filterOptions,\n      groupCount: groupCount\n    } = _ref4;\n    var combinedFilters = [];\n    var itemsToFilter = preparedItems;\n    var needPreFilter = groupCount > 0;\n\n    if (needPreFilter) {\n      itemsToFilter = itemsToFilter.filter(_ref5 => {\n        var {\n          rawAppointment: rawAppointment\n        } = _ref5;\n\n        for (var i = 0; i < filterOptions.length; ++i) {\n          var {\n            resources: resources\n          } = filterOptions[i];\n\n          if (this._filterAppointmentByResources(rawAppointment, resources)) {\n            return true;\n          }\n        }\n      });\n    }\n\n    filterOptions.forEach(option => {\n      combinedFilters.length && combinedFilters.push(\"or\");\n\n      var filter = this._createAppointmentFilter(option);\n\n      combinedFilters.push(filter);\n    });\n    return query(itemsToFilter).filter(combinedFilters).toArray();\n  }\n\n  hasAllDayAppointments(adapters, preparedItems) {\n    return this.filterAllDayAppointments({\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour\n    }, preparedItems).length > 0;\n  }\n\n  _getPrerenderFilterResources(groupIndex) {\n    var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\n    return getResourcesDataByGroups(this.loadedResources, this.resources, [cellGroup]);\n  }\n\n}","map":{"version":3,"names":["_extends","dateUtils","getRecurrenceProcessor","wrapToArray","map","each","isFunction","isDefined","query","createAppointmentAdapter","hasResourceValue","isDateAndTimeView","calculateIsDateAndTimeView","isTimelineView","getResourcesDataByGroups","compareDateWithStartDayHour","compareDateWithEndDayHour","getAppointmentTakesSeveralDays","_appointmentPartInInterval","getRecurrenceException","getDatesWithoutTime","getAppointmentTakesAllDay","toMs","dateToMilliseconds","FilterStrategies","virtual","standard","AppointmentFilterBaseStrategy","constructor","options","dataAccessors","_init","strategyName","timeZoneCalculator","viewStartDayHour","startDayHour","viewEndDayHour","endDayHour","timezone","firstDayOfWeek","showAllDayPanel","loadedResources","_resolveOption","supportAllDayRow","viewType","viewDirection","dateRange","groupCount","viewDataProvider","allDayPanelMode","name","result","setDataAccessors","filter","preparedItems","allDay","filterLoadedAppointments","min","max","resources","supportMultiDayAppointments","hasAllDayAppointments","filteredItems","adapters","item","_","_createAllDayAppointmentFilter","filterOptions","appointment","_createCombinedFilter","Date","checkIntersectViewport","trimMin","trimMax","useRecurrence","getter","recurrenceRule","_appointment$visible","appointmentVisible","visible","startDate","endDate","hasRecurrenceRule","sameDate","appointmentTakesAllDay","appointmentTakesSeveralDays","isAllDay","isLongAppointment","length","_filterAppointmentByResources","rawAppointment","recurrenceException","_filterAppointmentByRRule","isVirtualScrolling","severalDays","_createAppointmentFilter","checkAppointmentResourceValues","resourceName","resourceIndex","resourceGetter","resource","appointmentResourceValues","resourceData","items","_ref","id","i","appointmentStartDate","appointmentEndDate","recurrenceProcessor","getTime","isValidRecurrenceRule","hasRecurrence","rule","exception","start","end","appointmentTimezoneOffset","getOriginStartDateOffsetInMs","startDateTimeZone","filterPreparedItems","_ref2","combinedFilter","toArray","filterAllDayAppointments","_ref3","AppointmentFilterVirtualStrategy","hourMs","isCalculateStartAndEndDayHour","isAllDayWorkspace","showAllDayAppointments","endViewDate","getLastViewDateByEndDayHour","groupsInfo","getCompletedGroupsInfo","forEach","groupIndex","groupStartDate","groupEndDate","Math","getHours","getMinutes","_getPrerenderFilterResources","hasAllDayPanel","hasGroupAllDayPanel","supportAllDayAppointment","push","_ref4","combinedFilters","itemsToFilter","needPreFilter","_ref5","option","cellGroup","getCellsGroup"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    getRecurrenceProcessor\r\n} from \"../../recurrence\";\r\nimport {\r\n    wrapToArray\r\n} from \"../../../../core/utils/array\";\r\nimport {\r\n    map,\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isFunction,\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport query from \"../../../../data/query\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../appointmentAdapter\";\r\nimport {\r\n    hasResourceValue\r\n} from \"../../../../renovation/ui/scheduler/resources/hasResourceValue\";\r\nimport {\r\n    isDateAndTimeView as calculateIsDateAndTimeView,\r\n    isTimelineView\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    getResourcesDataByGroups\r\n} from \"../../resources/utils\";\r\nimport {\r\n    compareDateWithStartDayHour,\r\n    compareDateWithEndDayHour,\r\n    getAppointmentTakesSeveralDays,\r\n    _appointmentPartInInterval,\r\n    getRecurrenceException\r\n} from \"./utils\";\r\nimport getDatesWithoutTime from \"../../../../renovation/ui/scheduler/utils/filtering/getDatesWithoutTime\";\r\nimport {\r\n    getAppointmentTakesAllDay\r\n} from \"../../../../renovation/ui/scheduler/appointment/utils/getAppointmentTakesAllDay\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar FilterStrategies = {\r\n    virtual: \"virtual\",\r\n    standard: \"standard\"\r\n};\r\nexport class AppointmentFilterBaseStrategy {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.dataAccessors = this.options.dataAccessors;\r\n        this._init()\r\n    }\r\n    get strategyName() {\r\n        return FilterStrategies.standard\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.options.timeZoneCalculator\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.options.startDayHour\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.options.endDayHour\r\n    }\r\n    get timezone() {\r\n        return this.options.timezone\r\n    }\r\n    get firstDayOfWeek() {\r\n        return this.options.firstDayOfWeek\r\n    }\r\n    get showAllDayPanel() {\r\n        return this.options.showAllDayPanel\r\n    }\r\n    get loadedResources() {\r\n        return this._resolveOption(\"loadedResources\")\r\n    }\r\n    get supportAllDayRow() {\r\n        return this._resolveOption(\"supportAllDayRow\")\r\n    }\r\n    get viewType() {\r\n        return this._resolveOption(\"viewType\")\r\n    }\r\n    get viewDirection() {\r\n        return this._resolveOption(\"viewDirection\")\r\n    }\r\n    get dateRange() {\r\n        return this._resolveOption(\"dateRange\")\r\n    }\r\n    get groupCount() {\r\n        return this._resolveOption(\"groupCount\")\r\n    }\r\n    get viewDataProvider() {\r\n        return this._resolveOption(\"viewDataProvider\")\r\n    }\r\n    get allDayPanelMode() {\r\n        return this._resolveOption(\"allDayPanelMode\")\r\n    }\r\n    _resolveOption(name) {\r\n        var result = this.options[name];\r\n        return \"function\" === typeof result ? result() : result\r\n    }\r\n    _init() {\r\n        this.setDataAccessors(this.dataAccessors)\r\n    }\r\n    filter(preparedItems) {\r\n        var dateRange = this.dateRange;\r\n        var allDay;\r\n        if (!this.showAllDayPanel && this.supportAllDayRow) {\r\n            allDay = false\r\n        }\r\n        return this.filterLoadedAppointments({\r\n            startDayHour: this.viewStartDayHour,\r\n            endDayHour: this.viewEndDayHour,\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour,\r\n            min: dateRange[0],\r\n            max: dateRange[1],\r\n            resources: this.loadedResources,\r\n            allDay: allDay,\r\n            supportMultiDayAppointments: isTimelineView(this.viewType),\r\n            firstDayOfWeek: this.firstDayOfWeek\r\n        }, preparedItems)\r\n    }\r\n    hasAllDayAppointments(filteredItems, preparedItems) {\r\n        var adapters = filteredItems.map(item => createAppointmentAdapter(item, this.dataAccessors, this.timeZoneCalculator));\r\n        var result = false;\r\n        each(adapters, (_, item) => {\r\n            if (getAppointmentTakesAllDay(item, this.viewStartDayHour, this.viewEndDayHour, this.allDayPanelMode)) {\r\n                result = true;\r\n                return false\r\n            }\r\n        });\r\n        return result\r\n    }\r\n    setDataAccessors(dataAccessors) {\r\n        this.dataAccessors = dataAccessors\r\n    }\r\n    _createAllDayAppointmentFilter(filterOptions) {\r\n        var {\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour\r\n        } = filterOptions;\r\n        return [\r\n            [appointment => getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode)]\r\n        ]\r\n    }\r\n    _createCombinedFilter(filterOptions) {\r\n        var min = new Date(filterOptions.min);\r\n        var max = new Date(filterOptions.max);\r\n        var {\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour,\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour,\r\n            resources: resources,\r\n            firstDayOfWeek: firstDayOfWeek,\r\n            checkIntersectViewport: checkIntersectViewport,\r\n            supportMultiDayAppointments: supportMultiDayAppointments\r\n        } = filterOptions;\r\n        var [trimMin, trimMax] = getDatesWithoutTime(min, max);\r\n        var useRecurrence = isDefined(this.dataAccessors.getter.recurrenceRule);\r\n        return [\r\n            [appointment => {\r\n                var _appointment$visible;\r\n                var appointmentVisible = null !== (_appointment$visible = appointment.visible) && void 0 !== _appointment$visible ? _appointment$visible : true;\r\n                if (!appointmentVisible) {\r\n                    return false\r\n                }\r\n                var {\r\n                    startDate: startDate,\r\n                    endDate: endDate,\r\n                    hasRecurrenceRule: hasRecurrenceRule\r\n                } = appointment;\r\n                if (!hasRecurrenceRule) {\r\n                    if (!(endDate >= trimMin && startDate < trimMax || dateUtils.sameDate(endDate, trimMin) && dateUtils.sameDate(startDate, trimMin))) {\r\n                        return false\r\n                    }\r\n                }\r\n                var appointmentTakesAllDay = getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour, this.allDayPanelMode);\r\n                var appointmentTakesSeveralDays = getAppointmentTakesSeveralDays(appointment);\r\n                var isAllDay = appointment.allDay;\r\n                var isLongAppointment = appointmentTakesSeveralDays || appointmentTakesAllDay;\r\n                if (null !== resources && void 0 !== resources && resources.length && !this._filterAppointmentByResources(appointment.rawAppointment, resources)) {\r\n                    return false\r\n                }\r\n                if (appointmentTakesAllDay && false === filterOptions.allDay) {\r\n                    return false\r\n                }\r\n                if (hasRecurrenceRule) {\r\n                    var recurrenceException = getRecurrenceException(appointment, this.timeZoneCalculator, this.timezone);\r\n                    if (!this._filterAppointmentByRRule(_extends({}, appointment, {\r\n                            recurrenceException: recurrenceException,\r\n                            allDay: appointmentTakesAllDay\r\n                        }), min, max, startDayHour, endDayHour, firstDayOfWeek)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (!isAllDay && supportMultiDayAppointments && isLongAppointment) {\r\n                    if (endDate < min && (!useRecurrence || useRecurrence && !hasRecurrenceRule)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\r\n                    if (!compareDateWithStartDayHour(startDate, endDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (isDefined(endDayHour)) {\r\n                    if (!compareDateWithEndDayHour({\r\n                            startDate: startDate,\r\n                            endDate: endDate,\r\n                            startDayHour: startDayHour,\r\n                            endDayHour: endDayHour,\r\n                            viewStartDayHour: viewStartDayHour,\r\n                            viewEndDayHour: viewEndDayHour,\r\n                            allDay: appointmentTakesAllDay,\r\n                            severalDays: appointmentTakesSeveralDays,\r\n                            min: min,\r\n                            max: max,\r\n                            checkIntersectViewport: checkIntersectViewport\r\n                        })) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (!isAllDay && (!isLongAppointment || supportMultiDayAppointments)) {\r\n                    if (endDate < min && useRecurrence && !hasRecurrenceRule) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }]\r\n        ]\r\n    }\r\n    _createAppointmentFilter(filterOptions) {\r\n        return this._createCombinedFilter(filterOptions)\r\n    }\r\n    _filterAppointmentByResources(appointment, resources) {\r\n        var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\r\n            var resourceGetter = this.dataAccessors.resources.getter[resourceName];\r\n            var resource;\r\n            if (isFunction(resourceGetter)) {\r\n                resource = resourceGetter(appointment)\r\n            }\r\n            var appointmentResourceValues = wrapToArray(resource);\r\n            var resourceData = map(resources[resourceIndex].items, _ref => {\r\n                var {\r\n                    id: id\r\n                } = _ref;\r\n                return id\r\n            });\r\n            for (var i = 0; i < appointmentResourceValues.length; i++) {\r\n                if (hasResourceValue(resourceData, appointmentResourceValues[i])) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        };\r\n        var result = false;\r\n        for (var i = 0; i < resources.length; i++) {\r\n            var resourceName = resources[i].name;\r\n            result = checkAppointmentResourceValues(resourceName, i);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\r\n        var recurrenceRule = appointment.recurrenceRule;\r\n        var recurrenceException = appointment.recurrenceException;\r\n        var allDay = appointment.allDay;\r\n        var result = true;\r\n        var appointmentStartDate = appointment.startDate;\r\n        var appointmentEndDate = appointment.endDate;\r\n        var recurrenceProcessor = getRecurrenceProcessor();\r\n        if (allDay || _appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\r\n            var [trimMin, trimMax] = getDatesWithoutTime(min, max);\r\n            min = trimMin;\r\n            max = new Date(trimMax.getTime() - toMs(\"minute\"))\r\n        }\r\n        if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = appointmentEndDate > min && appointmentStartDate <= max\r\n        }\r\n        if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = recurrenceProcessor.hasRecurrence({\r\n                rule: recurrenceRule,\r\n                exception: recurrenceException,\r\n                start: appointmentStartDate,\r\n                end: appointmentEndDate,\r\n                min: min,\r\n                max: max,\r\n                firstDayOfWeek: firstDayOfWeek,\r\n                appointmentTimezoneOffset: this.timeZoneCalculator.getOriginStartDateOffsetInMs(appointmentStartDate, appointment.startDateTimeZone, false)\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    filterLoadedAppointments(filterOptions, preparedItems) {\r\n        var filteredItems = this.filterPreparedItems(filterOptions, preparedItems);\r\n        return filteredItems.map(_ref2 => {\r\n            var {\r\n                rawAppointment: rawAppointment\r\n            } = _ref2;\r\n            return rawAppointment\r\n        })\r\n    }\r\n    filterPreparedItems(filterOptions, preparedItems) {\r\n        var combinedFilter = this._createAppointmentFilter(filterOptions);\r\n        return query(preparedItems).filter(combinedFilter).toArray()\r\n    }\r\n    filterAllDayAppointments(filterOptions, preparedItems) {\r\n        var combinedFilter = this._createAllDayAppointmentFilter(filterOptions);\r\n        return query(preparedItems).filter(combinedFilter).toArray().map(_ref3 => {\r\n            var {\r\n                rawAppointment: rawAppointment\r\n            } = _ref3;\r\n            return rawAppointment\r\n        })\r\n    }\r\n}\r\nexport class AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\r\n    get strategyName() {\r\n        return FilterStrategies.virtual\r\n    }\r\n    get resources() {\r\n        return this.options.resources\r\n    }\r\n    filter(preparedItems) {\r\n        var hourMs = toMs(\"hour\");\r\n        var isCalculateStartAndEndDayHour = calculateIsDateAndTimeView(this.viewType);\r\n        var checkIntersectViewport = isCalculateStartAndEndDayHour && \"horizontal\" === this.viewDirection;\r\n        var isAllDayWorkspace = !this.supportAllDayRow;\r\n        var showAllDayAppointments = this.showAllDayPanel || isAllDayWorkspace;\r\n        var endViewDate = this.viewDataProvider.getLastViewDateByEndDayHour(this.viewEndDayHour);\r\n        var filterOptions = [];\r\n        var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\r\n        groupsInfo.forEach(item => {\r\n            var groupIndex = item.groupIndex;\r\n            var groupStartDate = item.startDate;\r\n            var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\r\n            var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\r\n            var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / hourMs : this.viewEndDayHour;\r\n            var resources = this._getPrerenderFilterResources(groupIndex);\r\n            var hasAllDayPanel = this.viewDataProvider.hasGroupAllDayPanel(groupIndex);\r\n            var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && hasAllDayPanel;\r\n            filterOptions.push({\r\n                isVirtualScrolling: true,\r\n                startDayHour: startDayHour,\r\n                endDayHour: endDayHour,\r\n                viewStartDayHour: this.viewStartDayHour,\r\n                viewEndDayHour: this.viewEndDayHour,\r\n                min: groupStartDate,\r\n                max: groupEndDate,\r\n                supportMultiDayAppointments: isTimelineView(this.viewType),\r\n                allDay: supportAllDayAppointment,\r\n                resources: resources,\r\n                firstDayOfWeek: this.firstDayOfWeek,\r\n                checkIntersectViewport: checkIntersectViewport\r\n            })\r\n        });\r\n        return this.filterLoadedAppointments({\r\n            filterOptions: filterOptions,\r\n            groupCount: this.groupCount\r\n        }, preparedItems)\r\n    }\r\n    filterPreparedItems(_ref4, preparedItems) {\r\n        var {\r\n            filterOptions: filterOptions,\r\n            groupCount: groupCount\r\n        } = _ref4;\r\n        var combinedFilters = [];\r\n        var itemsToFilter = preparedItems;\r\n        var needPreFilter = groupCount > 0;\r\n        if (needPreFilter) {\r\n            itemsToFilter = itemsToFilter.filter(_ref5 => {\r\n                var {\r\n                    rawAppointment: rawAppointment\r\n                } = _ref5;\r\n                for (var i = 0; i < filterOptions.length; ++i) {\r\n                    var {\r\n                        resources: resources\r\n                    } = filterOptions[i];\r\n                    if (this._filterAppointmentByResources(rawAppointment, resources)) {\r\n                        return true\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        filterOptions.forEach(option => {\r\n            combinedFilters.length && combinedFilters.push(\"or\");\r\n            var filter = this._createAppointmentFilter(option);\r\n            combinedFilters.push(filter)\r\n        });\r\n        return query(itemsToFilter).filter(combinedFilters).toArray()\r\n    }\r\n    hasAllDayAppointments(adapters, preparedItems) {\r\n        return this.filterAllDayAppointments({\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour\r\n        }, preparedItems).length > 0\r\n    }\r\n    _getPrerenderFilterResources(groupIndex) {\r\n        var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\r\n        return getResourcesDataByGroups(this.loadedResources, this.resources, [cellGroup])\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}