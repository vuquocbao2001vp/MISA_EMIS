{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\n/**\r\n * DevExtreme (esm/localization/number.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dependencyInjector from \"../core/utils/dependency_injector\";\nimport { escapeRegExp } from \"../core/utils/common\";\nimport { each } from \"../core/utils/iterator\";\nimport { isPlainObject } from \"../core/utils/type\";\nimport { getFormatter } from \"./ldml/number\";\nimport config from \"../core/config\";\nimport errors from \"../core/errors\";\nimport { toFixed } from \"./utils\";\nimport currencyLocalization from \"./currency\";\nimport intlNumberLocalization from \"./intl/number\";\nvar hasIntl = \"undefined\" !== typeof Intl;\nvar MAX_LARGE_NUMBER_POWER = 4;\nvar DECIMAL_BASE = 10;\nvar NUMERIC_FORMATS = [\"currency\", \"fixedpoint\", \"exponential\", \"percent\", \"decimal\"];\nvar LargeNumberFormatPostfixes = {\n  1: \"K\",\n  2: \"M\",\n  3: \"B\",\n  4: \"T\"\n};\nvar LargeNumberFormatPowers = {\n  largenumber: \"auto\",\n  thousands: 1,\n  millions: 2,\n  billions: 3,\n  trillions: 4\n};\nvar numberLocalization = dependencyInjector({\n  engine: function () {\n    return \"base\";\n  },\n  numericFormats: NUMERIC_FORMATS,\n  defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,\n  _parseNumberFormatString: function (formatType) {\n    var formatObject = {};\n\n    if (!formatType || \"string\" !== typeof formatType) {\n      return;\n    }\n\n    var formatList = formatType.toLowerCase().split(\" \");\n    each(formatList, (index, value) => {\n      if (NUMERIC_FORMATS.includes(value)) {\n        formatObject.formatType = value;\n      } else if (value in LargeNumberFormatPowers) {\n        formatObject.power = LargeNumberFormatPowers[value];\n      }\n    });\n\n    if (formatObject.power && !formatObject.formatType) {\n      formatObject.formatType = \"fixedpoint\";\n    }\n\n    if (formatObject.formatType) {\n      return formatObject;\n    }\n  },\n  _calculateNumberPower: function (value, base, minPower, maxPower) {\n    var number = Math.abs(value);\n    var power = 0;\n\n    if (number > 1) {\n      while (number && number >= base && (void 0 === maxPower || power < maxPower)) {\n        power++;\n        number /= base;\n      }\n    } else if (number > 0 && number < 1) {\n      while (number < 1 && (void 0 === minPower || power > minPower)) {\n        power--;\n        number *= base;\n      }\n    }\n\n    return power;\n  },\n  _getNumberByPower: function (number, power, base) {\n    var result = number;\n\n    while (power > 0) {\n      result /= base;\n      power--;\n    }\n\n    while (power < 0) {\n      result *= base;\n      power++;\n    }\n\n    return result;\n  },\n  _formatNumber: function (value, formatObject, formatConfig) {\n    if (\"auto\" === formatObject.power) {\n      formatObject.power = this._calculateNumberPower(value, 1e3, 0, MAX_LARGE_NUMBER_POWER);\n    }\n\n    if (formatObject.power) {\n      value = this._getNumberByPower(value, formatObject.power, 1e3);\n    }\n\n    var powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || \"\";\n\n    var result = this._formatNumberCore(value, formatObject.formatType, formatConfig);\n\n    result = result.replace(/(\\d|.$)(\\D*)$/, \"$1\" + powerPostfix + \"$2\");\n    return result;\n  },\n  _formatNumberExponential: function (value, formatConfig) {\n    var power = this._calculateNumberPower(value, DECIMAL_BASE);\n\n    var number = this._getNumberByPower(value, power, DECIMAL_BASE);\n\n    if (void 0 === formatConfig.precision) {\n      formatConfig.precision = 1;\n    }\n\n    if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {\n      power++;\n      number /= DECIMAL_BASE;\n    }\n\n    var powString = (power >= 0 ? \"+\" : \"\") + power.toString();\n    return this._formatNumberCore(number, \"fixedpoint\", formatConfig) + \"E\" + powString;\n  },\n  _addZeroes: function (value, precision) {\n    var multiplier = Math.pow(10, precision);\n    var sign = value < 0 ? \"-\" : \"\";\n    value = (Math.abs(value) * multiplier >>> 0) / multiplier;\n    var result = value.toString();\n\n    while (result.length < precision) {\n      result = \"0\" + result;\n    }\n\n    return sign + result;\n  },\n  _addGroupSeparators: function (value) {\n    var parts = value.toString().split(\".\");\n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, config().thousandsSeparator) + (parts[1] ? config().decimalSeparator + parts[1] : \"\");\n  },\n  _formatNumberCore: function (value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this._formatNumberExponential(value, formatConfig);\n    }\n\n    if (\"decimal\" !== format && null !== formatConfig.precision) {\n      formatConfig.precision = formatConfig.precision || 0;\n    }\n\n    if (\"percent\" === format) {\n      value *= 100;\n    }\n\n    if (void 0 !== formatConfig.precision) {\n      if (\"decimal\" === format) {\n        value = this._addZeroes(value, formatConfig.precision);\n      } else {\n        value = null === formatConfig.precision ? value.toPrecision() : toFixed(value, formatConfig.precision);\n      }\n    }\n\n    if (\"decimal\" !== format) {\n      value = this._addGroupSeparators(value);\n    } else {\n      value = value.toString().replace(\".\", config().decimalSeparator);\n    }\n\n    if (\"percent\" === format) {\n      value += \"%\";\n    }\n\n    return value;\n  },\n  _normalizeFormat: function (format) {\n    if (!format) {\n      return {};\n    }\n\n    if (\"function\" === typeof format) {\n      return format;\n    }\n\n    if (!isPlainObject(format)) {\n      format = {\n        type: format\n      };\n    }\n\n    return format;\n  },\n  _getSeparators: function () {\n    return {\n      decimalSeparator: this.getDecimalSeparator(),\n      thousandsSeparator: this.getThousandsSeparator()\n    };\n  },\n  getThousandsSeparator: function () {\n    return this.format(1e4, \"fixedPoint\")[2];\n  },\n  getDecimalSeparator: function () {\n    return this.format(1.2, {\n      type: \"fixedPoint\",\n      precision: 1\n    })[1];\n  },\n  convertDigits: function (value, toStandard) {\n    var digits = this.format(90, \"decimal\");\n\n    if (\"string\" !== typeof value || \"0\" === digits[1]) {\n      return value;\n    }\n\n    var fromFirstDigit = toStandard ? digits[1] : \"0\";\n    var toFirstDigit = toStandard ? \"0\" : digits[1];\n    var fromLastDigit = toStandard ? digits[0] : \"9\";\n    var regExp = new RegExp(\"[\" + fromFirstDigit + \"-\" + fromLastDigit + \"]\", \"g\");\n    return value.replace(regExp, char => String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0))));\n  },\n  getNegativeEtalonRegExp: function (format) {\n    var separators = this._getSeparators();\n\n    var digitalRegExp = new RegExp(\"[0-9\" + escapeRegExp(separators.decimalSeparator + separators.thousandsSeparator) + \"]+\", \"g\");\n    var negativeEtalon = this.format(-1, format).replace(digitalRegExp, \"1\");\n    [\"\\\\\", \"(\", \")\", \"[\", \"]\", \"*\", \"+\", \"$\", \"^\", \"?\", \"|\", \"{\", \"}\"].forEach(char => {\n      negativeEtalon = negativeEtalon.replace(new RegExp(\"\\\\\".concat(char), \"g\"), \"\\\\\".concat(char));\n    });\n    negativeEtalon = negativeEtalon.replace(/ /g, \"\\\\s\");\n    negativeEtalon = negativeEtalon.replace(/1/g, \".*\");\n    return new RegExp(negativeEtalon, \"g\");\n  },\n  getSign: function (text, format) {\n    if (!format) {\n      if (\"-\" === text.replace(/[^0-9-]/g, \"\").charAt(0)) {\n        return -1;\n      }\n\n      return 1;\n    }\n\n    var negativeEtalon = this.getNegativeEtalonRegExp(format);\n    return text.match(negativeEtalon) ? -1 : 1;\n  },\n  format: function (value, _format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n\n    if (\"number\" === typeof _format) {\n      return value;\n    }\n\n    _format = _format && _format.formatter || _format;\n\n    if (\"function\" === typeof _format) {\n      return _format(value);\n    }\n\n    _format = this._normalizeFormat(_format);\n\n    if (!_format.type) {\n      _format.type = \"decimal\";\n    }\n\n    var numberConfig = this._parseNumberFormatString(_format.type);\n\n    if (!numberConfig) {\n      var formatterConfig = this._getSeparators();\n\n      formatterConfig.unlimitedIntegerDigits = _format.unlimitedIntegerDigits;\n      return this.convertDigits(getFormatter(_format.type, formatterConfig)(value));\n    }\n\n    return this._formatNumber(value, numberConfig, _format);\n  },\n  parse: function (text, format) {\n    if (!text) {\n      return;\n    }\n\n    if (format && format.parser) {\n      return format.parser(text);\n    }\n\n    text = this.convertDigits(text, true);\n\n    if (format && \"string\" !== typeof format) {\n      errors.log(\"W0011\");\n    }\n\n    var decimalSeparator = this.getDecimalSeparator();\n    var regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\n    var cleanedText = text.replace(regExp, \"\").replace(decimalSeparator, \".\").replace(/\\.$/g, \"\");\n\n    if (\".\" === cleanedText || \"\" === cleanedText) {\n      return null;\n    }\n\n    if (this._calcSignificantDigits(cleanedText) > 15) {\n      return NaN;\n    }\n\n    var parsed = +cleanedText * this.getSign(text, format);\n    format = this._normalizeFormat(format);\n\n    var formatConfig = this._parseNumberFormatString(format.type);\n\n    var power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;\n\n    if (power) {\n      if (\"auto\" === power) {\n        var match = text.match(/\\d(K|M|B|T)/);\n\n        if (match) {\n          power = Object.keys(LargeNumberFormatPostfixes).find(power => LargeNumberFormatPostfixes[power] === match[1]);\n        }\n      }\n\n      parsed *= Math.pow(10, 3 * power);\n    }\n\n    if (\"percent\" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {\n      parsed /= 100;\n    }\n\n    return parsed;\n  },\n  _calcSignificantDigits: function (text) {\n    var [integer, fractional] = text.split(\".\");\n\n    var calcDigitsAfterLeadingZeros = digits => {\n      var index = -1;\n\n      for (var i = 0; i < digits.length; i++) {\n        if (\"0\" !== digits[i]) {\n          index = i;\n          break;\n        }\n      }\n\n      return index > -1 ? digits.length - index : 0;\n    };\n\n    var result = 0;\n\n    if (integer) {\n      result += calcDigitsAfterLeadingZeros(integer.split(\"\"));\n    }\n\n    if (fractional) {\n      result += calcDigitsAfterLeadingZeros(fractional.split(\"\").reverse());\n    }\n\n    return result;\n  }\n});\nnumberLocalization.inject(currencyLocalization);\n\nif (hasIntl) {\n  numberLocalization.inject(intlNumberLocalization);\n}\n\nexport default numberLocalization;","map":{"version":3,"names":["dependencyInjector","escapeRegExp","each","isPlainObject","getFormatter","config","errors","toFixed","currencyLocalization","intlNumberLocalization","hasIntl","Intl","MAX_LARGE_NUMBER_POWER","DECIMAL_BASE","NUMERIC_FORMATS","LargeNumberFormatPostfixes","LargeNumberFormatPowers","largenumber","thousands","millions","billions","trillions","numberLocalization","engine","numericFormats","defaultLargeNumberFormatPostfixes","_parseNumberFormatString","formatType","formatObject","formatList","toLowerCase","split","index","value","includes","power","_calculateNumberPower","base","minPower","maxPower","number","Math","abs","_getNumberByPower","result","_formatNumber","formatConfig","powerPostfix","_formatNumberCore","replace","_formatNumberExponential","precision","powString","toString","_addZeroes","multiplier","pow","sign","length","_addGroupSeparators","parts","thousandsSeparator","decimalSeparator","format","toPrecision","_normalizeFormat","type","_getSeparators","getDecimalSeparator","getThousandsSeparator","convertDigits","toStandard","digits","fromFirstDigit","toFirstDigit","fromLastDigit","regExp","RegExp","char","String","fromCharCode","charCodeAt","getNegativeEtalonRegExp","separators","digitalRegExp","negativeEtalon","forEach","concat","getSign","text","charAt","match","_format","formatter","numberConfig","formatterConfig","unlimitedIntegerDigits","parse","parser","log","cleanedText","_calcSignificantDigits","NaN","parsed","Object","keys","find","integer","fractional","calcDigitsAfterLeadingZeros","i","reverse","inject"],"sources":["E:/MisaProject/MISA_EMIS/MISA.EMIS.FE/node_modules/devextreme/esm/localization/number.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/localization/number.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dependencyInjector from \"../core/utils/dependency_injector\";\r\nimport {\r\n    escapeRegExp\r\n} from \"../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../core/utils/iterator\";\r\nimport {\r\n    isPlainObject\r\n} from \"../core/utils/type\";\r\nimport {\r\n    getFormatter\r\n} from \"./ldml/number\";\r\nimport config from \"../core/config\";\r\nimport errors from \"../core/errors\";\r\nimport {\r\n    toFixed\r\n} from \"./utils\";\r\nimport currencyLocalization from \"./currency\";\r\nimport intlNumberLocalization from \"./intl/number\";\r\nvar hasIntl = \"undefined\" !== typeof Intl;\r\nvar MAX_LARGE_NUMBER_POWER = 4;\r\nvar DECIMAL_BASE = 10;\r\nvar NUMERIC_FORMATS = [\"currency\", \"fixedpoint\", \"exponential\", \"percent\", \"decimal\"];\r\nvar LargeNumberFormatPostfixes = {\r\n    1: \"K\",\r\n    2: \"M\",\r\n    3: \"B\",\r\n    4: \"T\"\r\n};\r\nvar LargeNumberFormatPowers = {\r\n    largenumber: \"auto\",\r\n    thousands: 1,\r\n    millions: 2,\r\n    billions: 3,\r\n    trillions: 4\r\n};\r\nvar numberLocalization = dependencyInjector({\r\n    engine: function() {\r\n        return \"base\"\r\n    },\r\n    numericFormats: NUMERIC_FORMATS,\r\n    defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,\r\n    _parseNumberFormatString: function(formatType) {\r\n        var formatObject = {};\r\n        if (!formatType || \"string\" !== typeof formatType) {\r\n            return\r\n        }\r\n        var formatList = formatType.toLowerCase().split(\" \");\r\n        each(formatList, (index, value) => {\r\n            if (NUMERIC_FORMATS.includes(value)) {\r\n                formatObject.formatType = value\r\n            } else if (value in LargeNumberFormatPowers) {\r\n                formatObject.power = LargeNumberFormatPowers[value]\r\n            }\r\n        });\r\n        if (formatObject.power && !formatObject.formatType) {\r\n            formatObject.formatType = \"fixedpoint\"\r\n        }\r\n        if (formatObject.formatType) {\r\n            return formatObject\r\n        }\r\n    },\r\n    _calculateNumberPower: function(value, base, minPower, maxPower) {\r\n        var number = Math.abs(value);\r\n        var power = 0;\r\n        if (number > 1) {\r\n            while (number && number >= base && (void 0 === maxPower || power < maxPower)) {\r\n                power++;\r\n                number /= base\r\n            }\r\n        } else if (number > 0 && number < 1) {\r\n            while (number < 1 && (void 0 === minPower || power > minPower)) {\r\n                power--;\r\n                number *= base\r\n            }\r\n        }\r\n        return power\r\n    },\r\n    _getNumberByPower: function(number, power, base) {\r\n        var result = number;\r\n        while (power > 0) {\r\n            result /= base;\r\n            power--\r\n        }\r\n        while (power < 0) {\r\n            result *= base;\r\n            power++\r\n        }\r\n        return result\r\n    },\r\n    _formatNumber: function(value, formatObject, formatConfig) {\r\n        if (\"auto\" === formatObject.power) {\r\n            formatObject.power = this._calculateNumberPower(value, 1e3, 0, MAX_LARGE_NUMBER_POWER)\r\n        }\r\n        if (formatObject.power) {\r\n            value = this._getNumberByPower(value, formatObject.power, 1e3)\r\n        }\r\n        var powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || \"\";\r\n        var result = this._formatNumberCore(value, formatObject.formatType, formatConfig);\r\n        result = result.replace(/(\\d|.$)(\\D*)$/, \"$1\" + powerPostfix + \"$2\");\r\n        return result\r\n    },\r\n    _formatNumberExponential: function(value, formatConfig) {\r\n        var power = this._calculateNumberPower(value, DECIMAL_BASE);\r\n        var number = this._getNumberByPower(value, power, DECIMAL_BASE);\r\n        if (void 0 === formatConfig.precision) {\r\n            formatConfig.precision = 1\r\n        }\r\n        if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {\r\n            power++;\r\n            number /= DECIMAL_BASE\r\n        }\r\n        var powString = (power >= 0 ? \"+\" : \"\") + power.toString();\r\n        return this._formatNumberCore(number, \"fixedpoint\", formatConfig) + \"E\" + powString\r\n    },\r\n    _addZeroes: function(value, precision) {\r\n        var multiplier = Math.pow(10, precision);\r\n        var sign = value < 0 ? \"-\" : \"\";\r\n        value = (Math.abs(value) * multiplier >>> 0) / multiplier;\r\n        var result = value.toString();\r\n        while (result.length < precision) {\r\n            result = \"0\" + result\r\n        }\r\n        return sign + result\r\n    },\r\n    _addGroupSeparators: function(value) {\r\n        var parts = value.toString().split(\".\");\r\n        return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, config().thousandsSeparator) + (parts[1] ? config().decimalSeparator + parts[1] : \"\")\r\n    },\r\n    _formatNumberCore: function(value, format, formatConfig) {\r\n        if (\"exponential\" === format) {\r\n            return this._formatNumberExponential(value, formatConfig)\r\n        }\r\n        if (\"decimal\" !== format && null !== formatConfig.precision) {\r\n            formatConfig.precision = formatConfig.precision || 0\r\n        }\r\n        if (\"percent\" === format) {\r\n            value *= 100\r\n        }\r\n        if (void 0 !== formatConfig.precision) {\r\n            if (\"decimal\" === format) {\r\n                value = this._addZeroes(value, formatConfig.precision)\r\n            } else {\r\n                value = null === formatConfig.precision ? value.toPrecision() : toFixed(value, formatConfig.precision)\r\n            }\r\n        }\r\n        if (\"decimal\" !== format) {\r\n            value = this._addGroupSeparators(value)\r\n        } else {\r\n            value = value.toString().replace(\".\", config().decimalSeparator)\r\n        }\r\n        if (\"percent\" === format) {\r\n            value += \"%\"\r\n        }\r\n        return value\r\n    },\r\n    _normalizeFormat: function(format) {\r\n        if (!format) {\r\n            return {}\r\n        }\r\n        if (\"function\" === typeof format) {\r\n            return format\r\n        }\r\n        if (!isPlainObject(format)) {\r\n            format = {\r\n                type: format\r\n            }\r\n        }\r\n        return format\r\n    },\r\n    _getSeparators: function() {\r\n        return {\r\n            decimalSeparator: this.getDecimalSeparator(),\r\n            thousandsSeparator: this.getThousandsSeparator()\r\n        }\r\n    },\r\n    getThousandsSeparator: function() {\r\n        return this.format(1e4, \"fixedPoint\")[2]\r\n    },\r\n    getDecimalSeparator: function() {\r\n        return this.format(1.2, {\r\n            type: \"fixedPoint\",\r\n            precision: 1\r\n        })[1]\r\n    },\r\n    convertDigits: function(value, toStandard) {\r\n        var digits = this.format(90, \"decimal\");\r\n        if (\"string\" !== typeof value || \"0\" === digits[1]) {\r\n            return value\r\n        }\r\n        var fromFirstDigit = toStandard ? digits[1] : \"0\";\r\n        var toFirstDigit = toStandard ? \"0\" : digits[1];\r\n        var fromLastDigit = toStandard ? digits[0] : \"9\";\r\n        var regExp = new RegExp(\"[\" + fromFirstDigit + \"-\" + fromLastDigit + \"]\", \"g\");\r\n        return value.replace(regExp, char => String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0))))\r\n    },\r\n    getNegativeEtalonRegExp: function(format) {\r\n        var separators = this._getSeparators();\r\n        var digitalRegExp = new RegExp(\"[0-9\" + escapeRegExp(separators.decimalSeparator + separators.thousandsSeparator) + \"]+\", \"g\");\r\n        var negativeEtalon = this.format(-1, format).replace(digitalRegExp, \"1\");\r\n        [\"\\\\\", \"(\", \")\", \"[\", \"]\", \"*\", \"+\", \"$\", \"^\", \"?\", \"|\", \"{\", \"}\"].forEach(char => {\r\n            negativeEtalon = negativeEtalon.replace(new RegExp(\"\\\\\".concat(char), \"g\"), \"\\\\\".concat(char))\r\n        });\r\n        negativeEtalon = negativeEtalon.replace(/ /g, \"\\\\s\");\r\n        negativeEtalon = negativeEtalon.replace(/1/g, \".*\");\r\n        return new RegExp(negativeEtalon, \"g\")\r\n    },\r\n    getSign: function(text, format) {\r\n        if (!format) {\r\n            if (\"-\" === text.replace(/[^0-9-]/g, \"\").charAt(0)) {\r\n                return -1\r\n            }\r\n            return 1\r\n        }\r\n        var negativeEtalon = this.getNegativeEtalonRegExp(format);\r\n        return text.match(negativeEtalon) ? -1 : 1\r\n    },\r\n    format: function(value, _format) {\r\n        if (\"number\" !== typeof value) {\r\n            return value\r\n        }\r\n        if (\"number\" === typeof _format) {\r\n            return value\r\n        }\r\n        _format = _format && _format.formatter || _format;\r\n        if (\"function\" === typeof _format) {\r\n            return _format(value)\r\n        }\r\n        _format = this._normalizeFormat(_format);\r\n        if (!_format.type) {\r\n            _format.type = \"decimal\"\r\n        }\r\n        var numberConfig = this._parseNumberFormatString(_format.type);\r\n        if (!numberConfig) {\r\n            var formatterConfig = this._getSeparators();\r\n            formatterConfig.unlimitedIntegerDigits = _format.unlimitedIntegerDigits;\r\n            return this.convertDigits(getFormatter(_format.type, formatterConfig)(value))\r\n        }\r\n        return this._formatNumber(value, numberConfig, _format)\r\n    },\r\n    parse: function(text, format) {\r\n        if (!text) {\r\n            return\r\n        }\r\n        if (format && format.parser) {\r\n            return format.parser(text)\r\n        }\r\n        text = this.convertDigits(text, true);\r\n        if (format && \"string\" !== typeof format) {\r\n            errors.log(\"W0011\")\r\n        }\r\n        var decimalSeparator = this.getDecimalSeparator();\r\n        var regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\");\r\n        var cleanedText = text.replace(regExp, \"\").replace(decimalSeparator, \".\").replace(/\\.$/g, \"\");\r\n        if (\".\" === cleanedText || \"\" === cleanedText) {\r\n            return null\r\n        }\r\n        if (this._calcSignificantDigits(cleanedText) > 15) {\r\n            return NaN\r\n        }\r\n        var parsed = +cleanedText * this.getSign(text, format);\r\n        format = this._normalizeFormat(format);\r\n        var formatConfig = this._parseNumberFormatString(format.type);\r\n        var power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;\r\n        if (power) {\r\n            if (\"auto\" === power) {\r\n                var match = text.match(/\\d(K|M|B|T)/);\r\n                if (match) {\r\n                    power = Object.keys(LargeNumberFormatPostfixes).find(power => LargeNumberFormatPostfixes[power] === match[1])\r\n                }\r\n            }\r\n            parsed *= Math.pow(10, 3 * power)\r\n        }\r\n        if (\"percent\" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {\r\n            parsed /= 100\r\n        }\r\n        return parsed\r\n    },\r\n    _calcSignificantDigits: function(text) {\r\n        var [integer, fractional] = text.split(\".\");\r\n        var calcDigitsAfterLeadingZeros = digits => {\r\n            var index = -1;\r\n            for (var i = 0; i < digits.length; i++) {\r\n                if (\"0\" !== digits[i]) {\r\n                    index = i;\r\n                    break\r\n                }\r\n            }\r\n            return index > -1 ? digits.length - index : 0\r\n        };\r\n        var result = 0;\r\n        if (integer) {\r\n            result += calcDigitsAfterLeadingZeros(integer.split(\"\"))\r\n        }\r\n        if (fractional) {\r\n            result += calcDigitsAfterLeadingZeros(fractional.split(\"\").reverse())\r\n        }\r\n        return result\r\n    }\r\n});\r\nnumberLocalization.inject(currencyLocalization);\r\nif (hasIntl) {\r\n    numberLocalization.inject(intlNumberLocalization)\r\n}\r\nexport default numberLocalization;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}