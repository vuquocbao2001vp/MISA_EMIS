{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\n/**\r\n * DevExtreme (esm/ui/pivot_grid/xmla_store/xmla_store.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../../core/renderer\";\nimport { getWindow } from \"../../../core/utils/window\";\nimport Class from \"../../../core/class\";\nimport { format as stringFormat } from \"../../../core/utils/string\";\nimport { errors } from \"../../../data/errors\";\nimport { noop } from \"../../../core/utils/common\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { isFunction, isNumeric, isDefined, isString } from \"../../../core/utils/type\";\nimport { map, each } from \"../../../core/utils/iterator\";\nimport { sendRequest, getExpandedLevel, storeDrillDownMixin, foreachTree } from \"../ui.pivot_grid.utils\";\nimport { when, Deferred } from \"../../../core/utils/deferred\";\nimport { getLanguageId } from \"../../../localization/language_codes\";\nvar window = getWindow();\nexport var XmlaStore = Class.inherit(function () {\n  var discover = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><RequestType>{2}</RequestType><Restrictions><RestrictionList><CATALOG_NAME>{0}</CATALOG_NAME><CUBE_NAME>{1}</CUBE_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>{0}</Catalog>{3}</PropertyList></Properties></Discover></Body></Envelope>';\n  var mdx = \"SELECT {2} FROM {0} {1} CELL PROPERTIES VALUE, FORMAT_STRING, LANGUAGE, BACK_COLOR, FORE_COLOR, FONT_FLAGS\";\n\n  function execXMLA(requestOptions, data) {\n    var deferred = new Deferred();\n    var beforeSend = requestOptions.beforeSend;\n    var ajaxSettings = {\n      url: requestOptions.url,\n      dataType: \"text\",\n      data: data,\n      headers: {\n        \"Content-Type\": \"text/xml\"\n      },\n      xhrFields: {},\n      method: \"POST\"\n    };\n\n    if (isFunction(beforeSend)) {\n      beforeSend(ajaxSettings);\n    }\n\n    sendRequest(ajaxSettings).fail(function () {\n      deferred.reject(arguments);\n    }).done(function (text) {\n      var parser = new window.DOMParser();\n      var xml;\n\n      try {\n        try {\n          xml = parser.parseFromString(text, \"text/xml\");\n        } catch (e) {\n          xml = void 0;\n        }\n\n        if (!xml || xml.getElementsByTagName(\"parsererror\").length || 0 === xml.childNodes.length) {\n          throw new errors.Error(\"E4023\", text);\n        }\n      } catch (e) {\n        deferred.reject({\n          statusText: e.message,\n          stack: e.stack,\n          responseText: text\n        });\n      }\n\n      deferred.resolve(xml);\n    });\n    return deferred;\n  }\n\n  function getLocaleIdProperty() {\n    var languageId = getLanguageId();\n\n    if (void 0 !== languageId) {\n      return stringFormat(\"<LocaleIdentifier>{0}</LocaleIdentifier>\", languageId);\n    }\n\n    return \"\";\n  }\n\n  function getAllMember(dimension) {\n    return (dimension.hierarchyName || dimension.dataField) + \".[All]\";\n  }\n\n  function getAllMembers(field) {\n    var result = field.dataField + \".allMembers\";\n    var searchValue = field.searchValue;\n\n    if (searchValue) {\n      searchValue = searchValue.replace(/'/g, \"''\");\n      result = \"Filter(\" + result + \", instr(\" + field.dataField + \".currentmember.member_caption,'\" + searchValue + \"') > 0)\";\n    }\n\n    return result;\n  }\n\n  function crossJoinElements(elements) {\n    var elementsString = elements.join(\",\");\n    return elements.length > 1 ? stringFormat(\"CrossJoin({0})\", elementsString) : elementsString;\n  }\n\n  function generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName, take) {\n    var crossJoinArgs = [];\n    var dimensions = options[axisName];\n    var fields = [];\n    var arg;\n    var prevDimension;\n    var member;\n\n    for (var i = expandIndex; i <= expandLevel; i++) {\n      var field = dimensions[i];\n      var dataField = field.dataField;\n      var prevHierarchyName = dimensions[i - 1] && dimensions[i - 1].hierarchyName;\n      var hierarchyName = field.hierarchyName;\n      var isLastDimensionInGroup = !hierarchyName || !dimensions[i + 1] || dimensions[i + 1].hierarchyName !== hierarchyName;\n      var expandAllIndex = path.length + expandAllCount + expandIndex;\n      arg = null;\n      fields.push(field);\n\n      if (i < path.length) {\n        if (isLastDimensionInGroup) {\n          arg = \"(\" + dataField + \".\" + preparePathValue(path[i], dataField) + \")\";\n        }\n      } else if (i <= expandAllIndex) {\n        if (0 === i && 0 === expandAllCount) {\n          var allMember = getAllMember(dimensions[expandIndex]);\n\n          if (!hierarchyName) {\n            arg = getAllMembers(dimensions[expandIndex]);\n          } else {\n            arg = allMember + \",\" + dimensions[expandIndex].dataField;\n          }\n        } else if (hierarchyName) {\n          member = preparePathValue(slicePath[slicePath.length - 1]);\n\n          if (isLastDimensionInGroup || i === expandAllIndex) {\n            if (prevHierarchyName === hierarchyName) {\n              if (slicePath.length) {\n                prevDimension = dimensions[slicePath.length - 1];\n              }\n\n              if (!prevDimension || prevDimension.hierarchyName !== hierarchyName) {\n                prevDimension = dimensions[i - 1];\n                member = \"\";\n              }\n\n              arg = (level = prevDimension.dataField, levelMember = member, nextLevel = dataField, memberExpression = void 0, memberExpression = levelMember ? levelMember : level, \"Descendants({\" + memberExpression + \"}, \" + nextLevel + \", SELF_AND_BEFORE)\");\n            } else {\n              arg = getAllMembers(field);\n            }\n          }\n        } else {\n          arg = getAllMembers(field);\n        }\n      } else {\n        var isFirstDimensionInGroup = !hierarchyName || prevHierarchyName !== hierarchyName;\n\n        if (isFirstDimensionInGroup) {\n          arg = \"(\" + getAllMember(field) + \")\";\n        }\n      }\n\n      if (arg) {\n        arg = stringFormat(\"{{0}}\", arg);\n\n        if (take) {\n          var sortBy = (field.hierarchyName || field.dataField) + (\"displayText\" === field.sortBy ? \".MEMBER_CAPTION\" : \".MEMBER_VALUE\");\n          arg = stringFormat(\"Order({0}, {1}, {2})\", arg, sortBy, \"desc\" === field.sortOrder ? \"DESC\" : \"ASC\");\n        }\n\n        crossJoinArgs.push(arg);\n      }\n    }\n\n    var level, levelMember, nextLevel, memberExpression;\n    return crossJoinElements(crossJoinArgs);\n  }\n\n  function fillCrossJoins(crossJoins, path, expandLevel, expandIndex, slicePath, options, axisName, cellsString, take, totalsOnly) {\n    var expandAllCount = -1;\n    var dimensions = options[axisName];\n    var dimensionIndex;\n\n    do {\n      expandAllCount++;\n      dimensionIndex = path.length + expandAllCount + expandIndex;\n      var crossJoin = generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName, take);\n\n      if (!take && !totalsOnly) {\n        crossJoin = stringFormat(\"NonEmpty({0}, {1})\", crossJoin, cellsString);\n      }\n\n      crossJoins.push(crossJoin);\n    } while (dimensions[dimensionIndex] && dimensions[dimensionIndex + 1] && dimensions[dimensionIndex].expanded);\n  }\n\n  function declare(expression, withArray, name, type) {\n    name = name || \"[DX_Set_\" + withArray.length + \"]\";\n    type = type || \"set\";\n    withArray.push(stringFormat(\"{0} {1} as {2}\", type, name, expression));\n    return name;\n  }\n\n  function generateAxisMdx(options, axisName, cells, withArray, parseOptions) {\n    var dimensions = options[axisName];\n    var crossJoins = [];\n    var path = [];\n    var expandedPaths = [];\n    var expandIndex = 0;\n    var expandLevel = 0;\n    var result = [];\n    var cellsString = stringFormat(\"{{0}}\", cells.join(\",\"));\n\n    if (dimensions && dimensions.length) {\n      if (options.headerName === axisName) {\n        path = options.path;\n        expandIndex = path.length;\n      } else if (options.headerName && options.oppositePath) {\n        path = options.oppositePath;\n        expandIndex = path.length;\n      } else {\n        expandedPaths = (\"columns\" === axisName ? options.columnExpandedPaths : options.rowExpandedPaths) || expandedPaths;\n      }\n\n      expandLevel = getExpandedLevel(options, axisName);\n      fillCrossJoins(crossJoins, [], expandLevel, expandIndex, path, options, axisName, cellsString, \"rows\" === axisName ? options.rowTake : options.columnTake, options.totalsOnly);\n      each(expandedPaths, function (_, expandedPath) {\n        fillCrossJoins(crossJoins, expandedPath, expandLevel, expandIndex, expandedPath, options, axisName, cellsString);\n      });\n\n      for (var i = expandLevel; i >= path.length; i--) {\n        if (dimensions[i].hierarchyName) {\n          parseOptions.visibleLevels[dimensions[i].hierarchyName] = parseOptions.visibleLevels[dimensions[i].hierarchyName] || [];\n          parseOptions.visibleLevels[dimensions[i].hierarchyName].push(dimensions[i].dataField);\n        }\n      }\n    }\n\n    if (crossJoins.length) {\n      var expression = (elements = crossJoins, elementsString = elements.join(\",\"), elements.length > 1 ? \"Union(\" + elementsString + \")\" : elementsString);\n\n      if (\"rows\" === axisName && options.rowTake) {\n        expression = stringFormat(\"Subset({0}, {1}, {2})\", expression, options.rowSkip > 0 ? options.rowSkip + 1 : 0, options.rowSkip > 0 ? options.rowTake : options.rowTake + 1);\n      }\n\n      if (\"columns\" === axisName && options.columnTake) {\n        expression = stringFormat(\"Subset({0}, {1}, {2})\", expression, options.columnSkip > 0 ? options.columnSkip + 1 : 0, options.columnSkip > 0 ? options.columnTake : options.columnTake + 1);\n      }\n\n      var axisSet = \"[DX_\".concat(axisName, \"]\");\n      result.push(declare(expression, withArray, axisSet));\n\n      if (options.totalsOnly) {\n        result.push(declare(\"COUNT(\".concat(axisSet, \")\"), withArray, \"[DX_\".concat(axisName, \"_count]\"), \"member\"));\n      }\n    }\n\n    var elements, elementsString;\n\n    if (\"columns\" === axisName && cells.length && !options.skipValues) {\n      result.push(cellsString);\n    }\n\n    return stringFormat(\"{0} DIMENSION PROPERTIES PARENT_UNIQUE_NAME,HIERARCHY_UNIQUE_NAME, MEMBER_VALUE ON {1}\", crossJoinElements(result), axisName);\n  }\n\n  function generateAxisFieldsFilter(fields) {\n    var filterMembers = [];\n    each(fields, function (_, field) {\n      var dataField = field.dataField;\n      var filterExpression = [];\n      var filterValues = field.filterValues || [];\n      var filterStringExpression;\n\n      if (field.hierarchyName && isNumeric(field.groupIndex)) {\n        return;\n      }\n\n      each(filterValues, function (_, filterValue) {\n        var filterMdx = dataField + \".\" + preparePathValue(Array.isArray(filterValue) ? filterValue[filterValue.length - 1] : filterValue, dataField);\n\n        if (\"exclude\" === field.filterType) {\n          filterExpression.push(filterMdx + \".parent\");\n          filterMdx = \"Descendants(\" + filterMdx + \")\";\n        }\n\n        filterExpression.push(filterMdx);\n      });\n\n      if (filterValues.length) {\n        filterStringExpression = stringFormat(\"{{0}}\", filterExpression.join(\",\"));\n\n        if (\"exclude\" === field.filterType) {\n          filterStringExpression = \"Except(\" + getAllMembers(field) + \",\" + filterStringExpression + \")\";\n        }\n\n        filterMembers.push(filterStringExpression);\n      }\n    });\n    return filterMembers.length ? crossJoinElements(filterMembers) : \"\";\n  }\n\n  function generateFrom(columnsFilter, rowsFilter, filter, cubeName) {\n    var from = \"[\" + cubeName + \"]\";\n    each([columnsFilter, rowsFilter, filter], function (_, filter) {\n      if (filter) {\n        from = stringFormat(\"(SELECT {0} FROM {1})\", filter + \"on 0\", from);\n      }\n    });\n    return from;\n  }\n\n  function generateMdxCore(axisStrings, withArray, columns, rows, filters, slice, cubeName) {\n    var options = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : {};\n    var mdxString = \"\";\n    var withString = (withArray.length ? \"with \" + withArray.join(\" \") : \"\") + \" \";\n\n    if (axisStrings.length) {\n      var select;\n\n      if (options.totalsOnly) {\n        var countMembers = [];\n\n        if (rows.length) {\n          countMembers.push(\"[DX_rows_count]\");\n        }\n\n        if (columns.length) {\n          countMembers.push(\"[DX_columns_count]\");\n        }\n\n        select = \"{\".concat(countMembers.join(\",\"), \"} on columns\");\n      } else {\n        select = axisStrings.join(\",\");\n      }\n\n      mdxString = withString + stringFormat(mdx, generateFrom(generateAxisFieldsFilter(columns), generateAxisFieldsFilter(rows), generateAxisFieldsFilter(filters || []), cubeName), slice.length ? stringFormat(\"WHERE ({0})\", slice.join(\",\")) : \"\", select);\n    }\n\n    return mdxString;\n  }\n\n  function prepareDataFields(withArray, valueFields) {\n    return map(valueFields, function (cell) {\n      if (isString(cell.expression)) {\n        declare(cell.expression, withArray, cell.dataField, \"member\");\n      }\n\n      return cell.dataField;\n    });\n  }\n\n  function addSlices(slices, options, headerName, path) {\n    each(path, function (index, value) {\n      var dimension = options[headerName][index];\n\n      if (!dimension.hierarchyName || dimension.hierarchyName !== options[headerName][index + 1].hierarchyName) {\n        slices.push(dimension.dataField + \".\" + preparePathValue(value, dimension.dataField));\n      }\n    });\n  }\n\n  function generateMDX(options, cubeName, parseOptions) {\n    var columns = options.columns || [];\n    var rows = options.rows || [];\n    var values = options.values && options.values.length ? options.values : [{\n      dataField: \"[Measures]\"\n    }];\n    var slice = [];\n    var withArray = [];\n    var axisStrings = [];\n    var dataFields = prepareDataFields(withArray, values);\n    parseOptions.measureCount = options.skipValues ? 1 : values.length;\n    parseOptions.visibleLevels = {};\n\n    if (options.headerName && options.path) {\n      addSlices(slice, options, options.headerName, options.path);\n    }\n\n    if (options.headerName && options.oppositePath) {\n      addSlices(slice, options, \"rows\" === options.headerName ? \"columns\" : \"rows\", options.oppositePath);\n    }\n\n    if (columns.length || dataFields.length) {\n      axisStrings.push(generateAxisMdx(options, \"columns\", dataFields, withArray, parseOptions));\n    }\n\n    if (rows.length) {\n      axisStrings.push(generateAxisMdx(options, \"rows\", dataFields, withArray, parseOptions));\n    }\n\n    return generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName, options);\n  }\n\n  function createDrillDownAxisSlice(slice, fields, path) {\n    each(path, function (index, value) {\n      var field = fields[index];\n\n      if (field.hierarchyName && (fields[index + 1] || {}).hierarchyName === field.hierarchyName) {\n        return;\n      }\n\n      slice.push(field.dataField + \".\" + preparePathValue(value, field.dataField));\n    });\n  }\n\n  function getNumber(str) {\n    return parseInt(str, 10);\n  }\n\n  function getFirstChildText(node, childTagName) {\n    return getNodeText(function (node, tagName) {\n      return (node.getElementsByTagName(tagName) || [])[0];\n    }(node, childTagName));\n  }\n\n  function getNodeText(node) {\n    return node && (node.textContent || node.text || node.innerHTML) || \"\";\n  }\n\n  function parseCells(xml, axes, measureCount) {\n    var cells = [];\n    var cell = [];\n    var index = 0;\n    var cellsOriginal = [];\n    var cellElements = xml.getElementsByTagName(\"Cell\");\n    var errorDictionary = {};\n\n    for (var i = 0; i < cellElements.length; i++) {\n      var xmlCell = cellElements[i];\n      var valueElement = xmlCell.getElementsByTagName(\"Value\")[0];\n      var errorElements = valueElement && valueElement.getElementsByTagName(\"Error\") || [];\n      var text = 0 === errorElements.length ? getNodeText(valueElement) : \"#N/A\";\n      var value = parseFloat(text);\n\n      var _isNumeric = text - value + 1 > 0;\n\n      var cellOrdinal = getNumber(xmlCell.getAttribute(\"CellOrdinal\"));\n\n      if (errorElements.length) {\n        errorDictionary[getNodeText(errorElements[0].getElementsByTagName(\"ErrorCode\")[0])] = getNodeText(errorElements[0].getElementsByTagName(\"Description\")[0]);\n      }\n\n      cellsOriginal[cellOrdinal] = {\n        value: _isNumeric ? value : text || null\n      };\n    }\n\n    each(axes[1], function () {\n      var row = [];\n      cells.push(row);\n      each(axes[0], function () {\n        var measureIndex = index % measureCount;\n\n        if (0 === measureIndex) {\n          cell = [];\n          row.push(cell);\n        }\n\n        cell.push(cellsOriginal[index] ? cellsOriginal[index].value : null);\n        index++;\n      });\n    });\n    Object.keys(errorDictionary).forEach(function (key) {\n      errors.log(\"W4002\", errorDictionary[key]);\n    });\n    return cells;\n  }\n\n  function preparePathValue(pathValue, dataField) {\n    if (pathValue) {\n      pathValue = isString(pathValue) && -1 !== pathValue.indexOf(\"&\") ? pathValue : \"[\" + pathValue + \"]\";\n\n      if (dataField && 0 === pathValue.indexOf(dataField + \".\")) {\n        pathValue = pathValue.slice(dataField.length + 1, pathValue.length);\n      }\n    }\n\n    return pathValue;\n  }\n\n  function getItem(hash, name, member, index) {\n    var item = hash[name];\n\n    if (!item) {\n      item = {};\n      hash[name] = item;\n    }\n\n    if (!isDefined(item.value) && member) {\n      item.text = member.caption;\n      item.value = member.value;\n      item.key = name ? name : \"\";\n      item.levelName = member.levelName;\n      item.hierarchyName = member.hierarchyName;\n      item.parentName = member.parentName;\n      item.index = index;\n      item.level = member.level;\n    }\n\n    return item;\n  }\n\n  function getVisibleChildren(item, visibleLevels) {\n    var result = [];\n    var children = item.children && (item.children.length ? item.children : Object.keys(item.children.grandTotalHash || {}).reduce((result, name) => result.concat(item.children.grandTotalHash[name].children), []));\n    var firstChild = children && children[0];\n\n    if (firstChild && (visibleLevels[firstChild.hierarchyName] && visibleLevels[firstChild.hierarchyName].includes(firstChild.levelName) || !visibleLevels[firstChild.hierarchyName] || 0 === firstChild.level)) {\n      var newChildren = children.filter(child => child.hierarchyName === firstChild.hierarchyName);\n      newChildren.grandTotalHash = children.grandTotalHash;\n      return newChildren;\n    } else if (firstChild) {\n      for (var i = 0; i < children.length; i++) {\n        if (children[i].hierarchyName === firstChild.hierarchyName) {\n          result.push.apply(result, getVisibleChildren(children[i], visibleLevels));\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function fillDataSourceAxes(dataSourceAxis, axisTuples, measureCount, visibleLevels) {\n    var result = [];\n    each(axisTuples, function (tupleIndex, members) {\n      var parentItem = {\n        children: result\n      };\n      var dataIndex = isDefined(measureCount) ? Math.floor(tupleIndex / measureCount) : tupleIndex;\n      each(members, function (_, member) {\n        parentItem = function (dataIndex, member, parentItem) {\n          var children = parentItem.children = parentItem.children || [];\n          var hash = children.hash = children.hash || {};\n          var grandTotalHash = children.grandTotalHash = children.grandTotalHash || {};\n\n          if (member.parentName) {\n            parentItem = getItem(hash, member.parentName);\n            children = parentItem.children = parentItem.children || [];\n          }\n\n          var currentItem = getItem(hash, member.name, member, dataIndex);\n\n          if (member.hasValue && !currentItem.added) {\n            currentItem.index = dataIndex;\n            currentItem.added = true;\n            children.push(currentItem);\n          }\n\n          if ((!parentItem.value || !parentItem.parentName) && member.parentName) {\n            grandTotalHash[member.parentName] = parentItem;\n          } else if (grandTotalHash[parentItem.name]) {\n            delete grandTotalHash[member.parentName];\n          }\n\n          return currentItem;\n        }(dataIndex, member, parentItem);\n      });\n    });\n    var parentItem = {\n      children: result\n    };\n    parentItem.children = getVisibleChildren(parentItem, visibleLevels);\n\n    var grandTotalIndex = function (parentItem, visibleLevels) {\n      var grandTotalIndex;\n\n      if (1 === parentItem.children.length && \"\" === parentItem.children[0].parentName) {\n        grandTotalIndex = parentItem.children[0].index;\n        var grandTotalHash = parentItem.children.grandTotalHash;\n        parentItem.children = parentItem.children[0].children || [];\n        parentItem.children.grandTotalHash = grandTotalHash;\n        parentItem.children = getVisibleChildren(parentItem, visibleLevels);\n      } else if (0 === parentItem.children.length) {\n        grandTotalIndex = 0;\n      }\n\n      return grandTotalIndex;\n    }(parentItem, visibleLevels);\n\n    foreachTree(parentItem.children, function (items) {\n      var item = items[0];\n      var children = getVisibleChildren(item, visibleLevels);\n\n      if (children.length) {\n        item.children = children;\n      } else {\n        delete item.children;\n      }\n\n      delete item.levelName;\n      delete item.hierarchyName;\n      delete item.added;\n      delete item.parentName;\n      delete item.level;\n    }, true);\n    each(parentItem.children || [], function (_, e) {\n      dataSourceAxis.push(e);\n    });\n    return grandTotalIndex;\n  }\n\n  function checkError(xml) {\n    var faultElementNS = xml.getElementsByTagName(\"soap:Fault\");\n    var faultElement = xml.getElementsByTagName(\"Fault\");\n    var errorElement = $([].slice.call(faultElement.length ? faultElement : faultElementNS)).find(\"Error\");\n\n    if (errorElement.length) {\n      var description = errorElement.attr(\"Description\");\n      var error = new errors.Error(\"E4000\", description);\n      errors.log(\"E4000\", description);\n      return error;\n    }\n\n    return null;\n  }\n\n  function parseResult(xml, parseOptions) {\n    var dataSource = {\n      columns: [],\n      rows: []\n    };\n    var measureCount = parseOptions.measureCount;\n\n    var axes = function (xml, skipValues) {\n      var axes = [];\n      each(xml.getElementsByTagName(\"Axis\"), function (_, axisElement) {\n        var name = axisElement.getAttribute(\"name\");\n        var axis = [];\n        var index = 0;\n\n        if (0 === name.indexOf(\"Axis\") && isNumeric(getNumber(name.substr(4)))) {\n          axes.push(axis);\n          each(axisElement.getElementsByTagName(\"Tuple\"), function (_, tupleElement) {\n            var tupleMembers = tupleElement.childNodes;\n            var levelSum = 0;\n            var members = [];\n            var membersCount = skipValues ? tupleMembers.length : tupleMembers.length - 1;\n            var isAxisWithMeasure = 1 === axes.length;\n\n            if (isAxisWithMeasure) {\n              membersCount--;\n            }\n\n            axis.push(members);\n\n            for (var i = membersCount; i >= 0; i--) {\n              var tuple = tupleMembers[i];\n              var level = getNumber(getFirstChildText(tuple, \"LNum\"));\n              members[i] = {\n                caption: getFirstChildText(tuple, \"Caption\"),\n                value: (valueText = getFirstChildText(tuple, \"MEMBER_VALUE\"), isNumeric(valueText) ? parseFloat(valueText) : valueText),\n                level: level,\n                index: index++,\n                hasValue: !levelSum && (!!level || 0 === i),\n                name: getFirstChildText(tuple, \"UName\"),\n                hierarchyName: tupleMembers[i].getAttribute(\"Hierarchy\"),\n                parentName: getFirstChildText(tuple, \"PARENT_UNIQUE_NAME\"),\n                levelName: getFirstChildText(tuple, \"LName\")\n              };\n              levelSum += level;\n            }\n\n            var valueText;\n          });\n        }\n      });\n\n      while (axes.length < 2) {\n        axes.push([[{\n          level: 0\n        }]]);\n      }\n\n      return axes;\n    }(xml, parseOptions.skipValues);\n\n    dataSource.grandTotalColumnIndex = fillDataSourceAxes(dataSource.columns, axes[0], measureCount, parseOptions.visibleLevels);\n    dataSource.grandTotalRowIndex = fillDataSourceAxes(dataSource.rows, axes[1], void 0, parseOptions.visibleLevels);\n    dataSource.values = parseCells(xml, axes, measureCount);\n    return dataSource;\n  }\n\n  function parseDiscoverRowSet(xml, schema, dimensions, translatedDisplayFolders) {\n    var result = [];\n    var isMeasure = \"MEASURE\" === schema;\n    var displayFolderField = isMeasure ? \"MEASUREGROUP_NAME\" : schema + \"_DISPLAY_FOLDER\";\n    each(xml.getElementsByTagName(\"row\"), function (_, row) {\n      var hierarchyName = \"LEVEL\" === schema ? getFirstChildText(row, \"HIERARCHY_UNIQUE_NAME\") : void 0;\n      var levelNumber = getFirstChildText(row, \"LEVEL_NUMBER\");\n      var displayFolder = getFirstChildText(row, displayFolderField);\n\n      if (isMeasure) {\n        displayFolder = translatedDisplayFolders[displayFolder] || displayFolder;\n      }\n\n      if ((\"0\" !== levelNumber || \"true\" !== getFirstChildText(row, schema + \"_IS_VISIBLE\")) && \"2\" !== getFirstChildText(row, \"DIMENSION_TYPE\")) {\n        var dimension = isMeasure ? \"DX_MEASURES\" : getFirstChildText(row, \"DIMENSION_UNIQUE_NAME\");\n        var dataField = getFirstChildText(row, schema + \"_UNIQUE_NAME\");\n        result.push({\n          dimension: dimensions.names[dimension] || dimension,\n          groupIndex: levelNumber ? getNumber(levelNumber) - 1 : void 0,\n          dataField: dataField,\n          caption: getFirstChildText(row, schema + \"_CAPTION\"),\n          hierarchyName: hierarchyName,\n          groupName: hierarchyName,\n          displayFolder: displayFolder,\n          isMeasure: isMeasure,\n          isDefault: !!dimensions.defaultHierarchies[dataField]\n        });\n      }\n    });\n    return result;\n  }\n\n  function parseStringWithUnicodeSymbols(str) {\n    str = str.replace(/_x(....)_/g, function (whole, group1) {\n      return String.fromCharCode(parseInt(group1, 16));\n    });\n    var stringArray = str.match(/\\[.+?\\]/gi);\n\n    if (stringArray && stringArray.length) {\n      str = stringArray[stringArray.length - 1];\n    }\n\n    return str.replace(/\\[/gi, \"\").replace(/\\]/gi, \"\").replace(/\\$/gi, \"\").replace(/\\./gi, \" \");\n  }\n\n  function sendQuery(storeOptions, mdxString) {\n    mdxString = $(\"<div>\").text(mdxString).html();\n    return execXMLA(storeOptions, stringFormat('<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>{0}</Statement></Command><Properties><PropertyList><Catalog>{1}</Catalog><ShowHiddenCubes>True</ShowHiddenCubes><SspropInitAppName>Microsoft SQL Server Management Studio</SspropInitAppName><Timeout>3600</Timeout>{2}</PropertyList></Properties></Execute></Body></Envelope>', mdxString, storeOptions.catalog, getLocaleIdProperty()));\n  }\n\n  return {\n    ctor: function (options) {\n      this._options = options;\n    },\n    getFields: function () {\n      var options = this._options;\n      var catalog = options.catalog;\n      var cube = options.cube;\n      var localeIdProperty = getLocaleIdProperty();\n      var dimensionsRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_DIMENSIONS\", localeIdProperty));\n      var measuresRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_MEASURES\", localeIdProperty));\n      var hierarchiesRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_HIERARCHIES\", localeIdProperty));\n      var levelsRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_LEVELS\", localeIdProperty));\n      var result = new Deferred();\n      when(dimensionsRequest, measuresRequest, hierarchiesRequest, levelsRequest).then(function (dimensionsResponse, measuresResponse, hierarchiesResponse, levelsResponse) {\n        execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_MEASUREGROUPS\", localeIdProperty)).done(function (measureGroupsResponse) {\n          var dimensions = function (xml) {\n            var result = {\n              names: {},\n              defaultHierarchies: {}\n            };\n            each($(xml).find(\"row\"), function () {\n              var $row = $(this);\n              var type = $row.children(\"DIMENSION_TYPE\").text();\n              var dimensionName = \"2\" === type ? \"DX_MEASURES\" : $row.children(\"DIMENSION_UNIQUE_NAME\").text();\n              result.names[dimensionName] = $row.children(\"DIMENSION_CAPTION\").text();\n              result.defaultHierarchies[$row.children(\"DEFAULT_HIERARCHY\").text()] = true;\n            });\n            return result;\n          }(dimensionsResponse);\n\n          var hierarchies = parseDiscoverRowSet(hierarchiesResponse, \"HIERARCHY\", dimensions);\n          var levels = parseDiscoverRowSet(levelsResponse, \"LEVEL\", dimensions);\n\n          var measureGroups = function (xml) {\n            var measureGroups = {};\n            each(xml.getElementsByTagName(\"row\"), function (_, row) {\n              measureGroups[getFirstChildText(row, \"MEASUREGROUP_NAME\")] = getFirstChildText(row, \"MEASUREGROUP_CAPTION\");\n            });\n            return measureGroups;\n          }(measureGroupsResponse);\n\n          var fields = parseDiscoverRowSet(measuresResponse, \"MEASURE\", dimensions, measureGroups).concat(hierarchies);\n          var levelsByHierarchy = {};\n          each(levels, function (_, level) {\n            levelsByHierarchy[level.hierarchyName] = levelsByHierarchy[level.hierarchyName] || [];\n            levelsByHierarchy[level.hierarchyName].push(level);\n          });\n          each(hierarchies, function (_, hierarchy) {\n            if (levelsByHierarchy[hierarchy.dataField] && levelsByHierarchy[hierarchy.dataField].length > 1) {\n              hierarchy.groupName = hierarchy.hierarchyName = hierarchy.dataField;\n              fields.push.apply(fields, levelsByHierarchy[hierarchy.hierarchyName]);\n            }\n          });\n          result.resolve(fields);\n        }).fail(result.reject);\n      }).fail(result.reject);\n      return result;\n    },\n    load: function (options) {\n      var result = new Deferred();\n      var storeOptions = this._options;\n      var parseOptions = {\n        skipValues: options.skipValues\n      };\n      var mdxString = generateMDX(options, storeOptions.cube, parseOptions);\n      var rowCountMdx;\n\n      if (options.rowSkip || options.rowTake || options.columnTake || options.columnSkip) {\n        rowCountMdx = generateMDX(extend({}, options, {\n          totalsOnly: true,\n          rowSkip: null,\n          rowTake: null,\n          columnSkip: null,\n          columnTake: null\n        }), storeOptions.cube, {});\n      }\n\n      var load = () => {\n        if (mdxString) {\n          when(sendQuery(storeOptions, mdxString), rowCountMdx && sendQuery(storeOptions, rowCountMdx)).done(function (executeXml, rowCountXml) {\n            var error = checkError(executeXml) || rowCountXml && checkError(rowCountXml);\n\n            if (!error) {\n              var response = parseResult(executeXml, parseOptions);\n\n              if (rowCountXml) {\n                !function (data, options, totalCountXml) {\n                  var axes = [];\n                  var columnOptions = options.columns || [];\n                  var rowOptions = options.rows || [];\n\n                  if (columnOptions.length) {\n                    axes.push({});\n                  }\n\n                  if (rowOptions.length) {\n                    axes.push({});\n                  }\n\n                  var cells = parseCells(totalCountXml, [[{}], [{}, {}]], 1);\n\n                  if (!columnOptions.length && rowOptions.length) {\n                    data.rowCount = Math.max(cells[0][0][0] - 1, 0);\n                  }\n\n                  if (!rowOptions.length && columnOptions.length) {\n                    data.columnCount = Math.max(cells[0][0][0] - 1, 0);\n                  }\n\n                  if (rowOptions.length && columnOptions.length) {\n                    data.rowCount = Math.max(cells[0][0][0] - 1, 0);\n                    data.columnCount = Math.max(cells[1][0][0] - 1, 0);\n                  }\n\n                  if (void 0 !== data.rowCount && options.rowTake) {\n                    data.rows = [...Array(options.rowSkip)].concat(data.rows);\n                    data.rows.length = data.rowCount;\n\n                    for (var i = 0; i < data.rows.length; i++) {\n                      data.rows[i] = data.rows[i] || {};\n                    }\n                  }\n\n                  if (void 0 !== data.columnCount && options.columnTake) {\n                    data.columns = [...Array(options.columnSkip)].concat(data.columns);\n                    data.columns.length = data.columnCount;\n\n                    for (var _i = 0; _i < data.columns.length; _i++) {\n                      data.columns[_i] = data.columns[_i] || {};\n                    }\n                  }\n                }(response, options, rowCountXml);\n              }\n\n              result.resolve(response);\n            } else {\n              result.reject(error);\n            }\n          }).fail(result.reject);\n        } else {\n          result.resolve({\n            columns: [],\n            rows: [],\n            values: [],\n            grandTotalColumnIndex: 0,\n            grandTotalRowIndex: 0\n          });\n        }\n      };\n\n      if (options.delay) {\n        setTimeout(load, options.delay);\n      } else {\n        load();\n      }\n\n      return result;\n    },\n    supportPaging: function () {\n      return true;\n    },\n    getDrillDownItems: function (options, params) {\n      var result = new Deferred();\n      var storeOptions = this._options;\n\n      var mdxString = function (options, cubeName, params) {\n        var columns = options.columns || [];\n        var rows = options.rows || [];\n        var values = options.values && options.values.length ? options.values : [{\n          dataField: \"[Measures]\"\n        }];\n        var slice = [];\n        var withArray = [];\n        var axisStrings = [];\n        var dataFields = prepareDataFields(withArray, values);\n        var maxRowCount = params.maxRowCount;\n        var customColumns = params.customColumns || [];\n        var customColumnsString = customColumns.length > 0 ? \" return \" + customColumns.join(\",\") : \"\";\n        createDrillDownAxisSlice(slice, columns, params.columnPath || []);\n        createDrillDownAxisSlice(slice, rows, params.rowPath || []);\n\n        if (columns.length || dataFields.length) {\n          axisStrings.push([(dataFields[params.dataIndex] || dataFields[0]) + \" on 0\"]);\n        }\n\n        var coreMDX = generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName);\n        return coreMDX ? \"drillthrough\" + (maxRowCount > 0 ? \" maxrows \" + maxRowCount : \"\") + coreMDX + customColumnsString : coreMDX;\n      }(options, storeOptions.cube, params);\n\n      if (mdxString) {\n        when(sendQuery(storeOptions, mdxString)).done(function (executeXml) {\n          var error = checkError(executeXml);\n\n          if (!error) {\n            result.resolve(function (xml) {\n              var rows = xml.getElementsByTagName(\"row\");\n              var result = [];\n              var columnNames = {};\n\n              for (var i = 0; i < rows.length; i++) {\n                var children = rows[i].childNodes;\n                var item = {};\n\n                for (var j = 0; j < children.length; j++) {\n                  var tagName = children[j].tagName;\n                  var name = columnNames[tagName] = columnNames[tagName] || parseStringWithUnicodeSymbols(tagName);\n                  item[name] = getNodeText(children[j]);\n                }\n\n                result.push(item);\n              }\n\n              return result;\n            }(executeXml));\n          } else {\n            result.reject(error);\n          }\n        }).fail(result.reject);\n      } else {\n        result.resolve([]);\n      }\n\n      return result;\n    },\n    key: noop,\n    filter: noop\n  };\n}()).include(storeDrillDownMixin);","map":{"version":3,"names":["$","getWindow","Class","format","stringFormat","errors","noop","extend","isFunction","isNumeric","isDefined","isString","map","each","sendRequest","getExpandedLevel","storeDrillDownMixin","foreachTree","when","Deferred","getLanguageId","window","XmlaStore","inherit","discover","mdx","execXMLA","requestOptions","data","deferred","beforeSend","ajaxSettings","url","dataType","headers","xhrFields","method","fail","reject","arguments","done","text","parser","DOMParser","xml","parseFromString","e","getElementsByTagName","length","childNodes","Error","statusText","message","stack","responseText","resolve","getLocaleIdProperty","languageId","getAllMember","dimension","hierarchyName","dataField","getAllMembers","field","result","searchValue","replace","crossJoinElements","elements","elementsString","join","generateCrossJoin","path","expandLevel","expandAllCount","expandIndex","slicePath","options","axisName","take","crossJoinArgs","dimensions","fields","arg","prevDimension","member","i","prevHierarchyName","isLastDimensionInGroup","expandAllIndex","push","preparePathValue","allMember","level","levelMember","nextLevel","memberExpression","isFirstDimensionInGroup","sortBy","sortOrder","fillCrossJoins","crossJoins","cellsString","totalsOnly","dimensionIndex","crossJoin","expanded","declare","expression","withArray","name","type","generateAxisMdx","cells","parseOptions","expandedPaths","headerName","oppositePath","columnExpandedPaths","rowExpandedPaths","rowTake","columnTake","_","expandedPath","visibleLevels","rowSkip","columnSkip","axisSet","concat","skipValues","generateAxisFieldsFilter","filterMembers","filterExpression","filterValues","filterStringExpression","groupIndex","filterValue","filterMdx","Array","isArray","filterType","generateFrom","columnsFilter","rowsFilter","filter","cubeName","from","generateMdxCore","axisStrings","columns","rows","filters","slice","mdxString","withString","select","countMembers","prepareDataFields","valueFields","cell","addSlices","slices","index","value","generateMDX","values","dataFields","measureCount","createDrillDownAxisSlice","getNumber","str","parseInt","getFirstChildText","node","childTagName","getNodeText","tagName","textContent","innerHTML","parseCells","axes","cellsOriginal","cellElements","errorDictionary","xmlCell","valueElement","errorElements","parseFloat","_isNumeric","cellOrdinal","getAttribute","row","measureIndex","Object","keys","forEach","key","log","pathValue","indexOf","getItem","hash","item","caption","levelName","parentName","getVisibleChildren","children","grandTotalHash","reduce","firstChild","includes","newChildren","child","apply","fillDataSourceAxes","dataSourceAxis","axisTuples","tupleIndex","members","parentItem","dataIndex","Math","floor","currentItem","hasValue","added","grandTotalIndex","items","checkError","faultElementNS","faultElement","errorElement","call","find","description","attr","error","parseResult","dataSource","axisElement","axis","substr","tupleElement","tupleMembers","levelSum","membersCount","isAxisWithMeasure","tuple","valueText","grandTotalColumnIndex","grandTotalRowIndex","parseDiscoverRowSet","schema","translatedDisplayFolders","isMeasure","displayFolderField","levelNumber","displayFolder","names","groupName","isDefault","defaultHierarchies","parseStringWithUnicodeSymbols","whole","group1","String","fromCharCode","stringArray","match","sendQuery","storeOptions","html","catalog","ctor","_options","getFields","cube","localeIdProperty","dimensionsRequest","measuresRequest","hierarchiesRequest","levelsRequest","then","dimensionsResponse","measuresResponse","hierarchiesResponse","levelsResponse","measureGroupsResponse","$row","dimensionName","hierarchies","levels","measureGroups","levelsByHierarchy","hierarchy","load","rowCountMdx","executeXml","rowCountXml","response","totalCountXml","columnOptions","rowOptions","rowCount","max","columnCount","_i","delay","setTimeout","supportPaging","getDrillDownItems","params","maxRowCount","customColumns","customColumnsString","columnPath","rowPath","coreMDX","columnNames","j","include"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/pivot_grid/xmla_store/xmla_store.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/pivot_grid/xmla_store/xmla_store.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    getWindow\r\n} from \"../../../core/utils/window\";\r\nimport Class from \"../../../core/class\";\r\nimport {\r\n    format as stringFormat\r\n} from \"../../../core/utils/string\";\r\nimport {\r\n    errors\r\n} from \"../../../data/errors\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    isFunction,\r\n    isNumeric,\r\n    isDefined,\r\n    isString\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    map,\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    sendRequest,\r\n    getExpandedLevel,\r\n    storeDrillDownMixin,\r\n    foreachTree\r\n} from \"../ui.pivot_grid.utils\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../../core/utils/deferred\";\r\nimport {\r\n    getLanguageId\r\n} from \"../../../localization/language_codes\";\r\nvar window = getWindow();\r\nexport var XmlaStore = Class.inherit(function() {\r\n    var discover = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><RequestType>{2}</RequestType><Restrictions><RestrictionList><CATALOG_NAME>{0}</CATALOG_NAME><CUBE_NAME>{1}</CUBE_NAME></RestrictionList></Restrictions><Properties><PropertyList><Catalog>{0}</Catalog>{3}</PropertyList></Properties></Discover></Body></Envelope>';\r\n    var mdx = \"SELECT {2} FROM {0} {1} CELL PROPERTIES VALUE, FORMAT_STRING, LANGUAGE, BACK_COLOR, FORE_COLOR, FONT_FLAGS\";\r\n\r\n    function execXMLA(requestOptions, data) {\r\n        var deferred = new Deferred;\r\n        var beforeSend = requestOptions.beforeSend;\r\n        var ajaxSettings = {\r\n            url: requestOptions.url,\r\n            dataType: \"text\",\r\n            data: data,\r\n            headers: {\r\n                \"Content-Type\": \"text/xml\"\r\n            },\r\n            xhrFields: {},\r\n            method: \"POST\"\r\n        };\r\n        if (isFunction(beforeSend)) {\r\n            beforeSend(ajaxSettings)\r\n        }\r\n        sendRequest(ajaxSettings).fail((function() {\r\n            deferred.reject(arguments)\r\n        })).done((function(text) {\r\n            var parser = new window.DOMParser;\r\n            var xml;\r\n            try {\r\n                try {\r\n                    xml = parser.parseFromString(text, \"text/xml\")\r\n                } catch (e) {\r\n                    xml = void 0\r\n                }\r\n                if (!xml || xml.getElementsByTagName(\"parsererror\").length || 0 === xml.childNodes.length) {\r\n                    throw new errors.Error(\"E4023\", text)\r\n                }\r\n            } catch (e) {\r\n                deferred.reject({\r\n                    statusText: e.message,\r\n                    stack: e.stack,\r\n                    responseText: text\r\n                })\r\n            }\r\n            deferred.resolve(xml)\r\n        }));\r\n        return deferred\r\n    }\r\n\r\n    function getLocaleIdProperty() {\r\n        var languageId = getLanguageId();\r\n        if (void 0 !== languageId) {\r\n            return stringFormat(\"<LocaleIdentifier>{0}</LocaleIdentifier>\", languageId)\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    function getAllMember(dimension) {\r\n        return (dimension.hierarchyName || dimension.dataField) + \".[All]\"\r\n    }\r\n\r\n    function getAllMembers(field) {\r\n        var result = field.dataField + \".allMembers\";\r\n        var searchValue = field.searchValue;\r\n        if (searchValue) {\r\n            searchValue = searchValue.replace(/'/g, \"''\");\r\n            result = \"Filter(\" + result + \", instr(\" + field.dataField + \".currentmember.member_caption,'\" + searchValue + \"') > 0)\"\r\n        }\r\n        return result\r\n    }\r\n\r\n    function crossJoinElements(elements) {\r\n        var elementsString = elements.join(\",\");\r\n        return elements.length > 1 ? stringFormat(\"CrossJoin({0})\", elementsString) : elementsString\r\n    }\r\n\r\n    function generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName, take) {\r\n        var crossJoinArgs = [];\r\n        var dimensions = options[axisName];\r\n        var fields = [];\r\n        var arg;\r\n        var prevDimension;\r\n        var member;\r\n        for (var i = expandIndex; i <= expandLevel; i++) {\r\n            var field = dimensions[i];\r\n            var dataField = field.dataField;\r\n            var prevHierarchyName = dimensions[i - 1] && dimensions[i - 1].hierarchyName;\r\n            var hierarchyName = field.hierarchyName;\r\n            var isLastDimensionInGroup = !hierarchyName || !dimensions[i + 1] || dimensions[i + 1].hierarchyName !== hierarchyName;\r\n            var expandAllIndex = path.length + expandAllCount + expandIndex;\r\n            arg = null;\r\n            fields.push(field);\r\n            if (i < path.length) {\r\n                if (isLastDimensionInGroup) {\r\n                    arg = \"(\" + dataField + \".\" + preparePathValue(path[i], dataField) + \")\"\r\n                }\r\n            } else if (i <= expandAllIndex) {\r\n                if (0 === i && 0 === expandAllCount) {\r\n                    var allMember = getAllMember(dimensions[expandIndex]);\r\n                    if (!hierarchyName) {\r\n                        arg = getAllMembers(dimensions[expandIndex])\r\n                    } else {\r\n                        arg = allMember + \",\" + dimensions[expandIndex].dataField\r\n                    }\r\n                } else if (hierarchyName) {\r\n                    member = preparePathValue(slicePath[slicePath.length - 1]);\r\n                    if (isLastDimensionInGroup || i === expandAllIndex) {\r\n                        if (prevHierarchyName === hierarchyName) {\r\n                            if (slicePath.length) {\r\n                                prevDimension = dimensions[slicePath.length - 1]\r\n                            }\r\n                            if (!prevDimension || prevDimension.hierarchyName !== hierarchyName) {\r\n                                prevDimension = dimensions[i - 1];\r\n                                member = \"\"\r\n                            }\r\n                            arg = (level = prevDimension.dataField, levelMember = member, nextLevel = dataField, memberExpression = void 0, memberExpression = levelMember ? levelMember : level, \"Descendants({\" + memberExpression + \"}, \" + nextLevel + \", SELF_AND_BEFORE)\")\r\n                        } else {\r\n                            arg = getAllMembers(field)\r\n                        }\r\n                    }\r\n                } else {\r\n                    arg = getAllMembers(field)\r\n                }\r\n            } else {\r\n                var isFirstDimensionInGroup = !hierarchyName || prevHierarchyName !== hierarchyName;\r\n                if (isFirstDimensionInGroup) {\r\n                    arg = \"(\" + getAllMember(field) + \")\"\r\n                }\r\n            }\r\n            if (arg) {\r\n                arg = stringFormat(\"{{0}}\", arg);\r\n                if (take) {\r\n                    var sortBy = (field.hierarchyName || field.dataField) + (\"displayText\" === field.sortBy ? \".MEMBER_CAPTION\" : \".MEMBER_VALUE\");\r\n                    arg = stringFormat(\"Order({0}, {1}, {2})\", arg, sortBy, \"desc\" === field.sortOrder ? \"DESC\" : \"ASC\")\r\n                }\r\n                crossJoinArgs.push(arg)\r\n            }\r\n        }\r\n        var level, levelMember, nextLevel, memberExpression;\r\n        return crossJoinElements(crossJoinArgs)\r\n    }\r\n\r\n    function fillCrossJoins(crossJoins, path, expandLevel, expandIndex, slicePath, options, axisName, cellsString, take, totalsOnly) {\r\n        var expandAllCount = -1;\r\n        var dimensions = options[axisName];\r\n        var dimensionIndex;\r\n        do {\r\n            expandAllCount++;\r\n            dimensionIndex = path.length + expandAllCount + expandIndex;\r\n            var crossJoin = generateCrossJoin(path, expandLevel, expandAllCount, expandIndex, slicePath, options, axisName, take);\r\n            if (!take && !totalsOnly) {\r\n                crossJoin = stringFormat(\"NonEmpty({0}, {1})\", crossJoin, cellsString)\r\n            }\r\n            crossJoins.push(crossJoin)\r\n        } while (dimensions[dimensionIndex] && dimensions[dimensionIndex + 1] && dimensions[dimensionIndex].expanded)\r\n    }\r\n\r\n    function declare(expression, withArray, name, type) {\r\n        name = name || \"[DX_Set_\" + withArray.length + \"]\";\r\n        type = type || \"set\";\r\n        withArray.push(stringFormat(\"{0} {1} as {2}\", type, name, expression));\r\n        return name\r\n    }\r\n\r\n    function generateAxisMdx(options, axisName, cells, withArray, parseOptions) {\r\n        var dimensions = options[axisName];\r\n        var crossJoins = [];\r\n        var path = [];\r\n        var expandedPaths = [];\r\n        var expandIndex = 0;\r\n        var expandLevel = 0;\r\n        var result = [];\r\n        var cellsString = stringFormat(\"{{0}}\", cells.join(\",\"));\r\n        if (dimensions && dimensions.length) {\r\n            if (options.headerName === axisName) {\r\n                path = options.path;\r\n                expandIndex = path.length\r\n            } else if (options.headerName && options.oppositePath) {\r\n                path = options.oppositePath;\r\n                expandIndex = path.length\r\n            } else {\r\n                expandedPaths = (\"columns\" === axisName ? options.columnExpandedPaths : options.rowExpandedPaths) || expandedPaths\r\n            }\r\n            expandLevel = getExpandedLevel(options, axisName);\r\n            fillCrossJoins(crossJoins, [], expandLevel, expandIndex, path, options, axisName, cellsString, \"rows\" === axisName ? options.rowTake : options.columnTake, options.totalsOnly);\r\n            each(expandedPaths, (function(_, expandedPath) {\r\n                fillCrossJoins(crossJoins, expandedPath, expandLevel, expandIndex, expandedPath, options, axisName, cellsString)\r\n            }));\r\n            for (var i = expandLevel; i >= path.length; i--) {\r\n                if (dimensions[i].hierarchyName) {\r\n                    parseOptions.visibleLevels[dimensions[i].hierarchyName] = parseOptions.visibleLevels[dimensions[i].hierarchyName] || [];\r\n                    parseOptions.visibleLevels[dimensions[i].hierarchyName].push(dimensions[i].dataField)\r\n                }\r\n            }\r\n        }\r\n        if (crossJoins.length) {\r\n            var expression = (elements = crossJoins, elementsString = elements.join(\",\"), elements.length > 1 ? \"Union(\" + elementsString + \")\" : elementsString);\r\n            if (\"rows\" === axisName && options.rowTake) {\r\n                expression = stringFormat(\"Subset({0}, {1}, {2})\", expression, options.rowSkip > 0 ? options.rowSkip + 1 : 0, options.rowSkip > 0 ? options.rowTake : options.rowTake + 1)\r\n            }\r\n            if (\"columns\" === axisName && options.columnTake) {\r\n                expression = stringFormat(\"Subset({0}, {1}, {2})\", expression, options.columnSkip > 0 ? options.columnSkip + 1 : 0, options.columnSkip > 0 ? options.columnTake : options.columnTake + 1)\r\n            }\r\n            var axisSet = \"[DX_\".concat(axisName, \"]\");\r\n            result.push(declare(expression, withArray, axisSet));\r\n            if (options.totalsOnly) {\r\n                result.push(declare(\"COUNT(\".concat(axisSet, \")\"), withArray, \"[DX_\".concat(axisName, \"_count]\"), \"member\"))\r\n            }\r\n        }\r\n        var elements, elementsString;\r\n        if (\"columns\" === axisName && cells.length && !options.skipValues) {\r\n            result.push(cellsString)\r\n        }\r\n        return stringFormat(\"{0} DIMENSION PROPERTIES PARENT_UNIQUE_NAME,HIERARCHY_UNIQUE_NAME, MEMBER_VALUE ON {1}\", crossJoinElements(result), axisName)\r\n    }\r\n\r\n    function generateAxisFieldsFilter(fields) {\r\n        var filterMembers = [];\r\n        each(fields, (function(_, field) {\r\n            var dataField = field.dataField;\r\n            var filterExpression = [];\r\n            var filterValues = field.filterValues || [];\r\n            var filterStringExpression;\r\n            if (field.hierarchyName && isNumeric(field.groupIndex)) {\r\n                return\r\n            }\r\n            each(filterValues, (function(_, filterValue) {\r\n                var filterMdx = dataField + \".\" + preparePathValue(Array.isArray(filterValue) ? filterValue[filterValue.length - 1] : filterValue, dataField);\r\n                if (\"exclude\" === field.filterType) {\r\n                    filterExpression.push(filterMdx + \".parent\");\r\n                    filterMdx = \"Descendants(\" + filterMdx + \")\"\r\n                }\r\n                filterExpression.push(filterMdx)\r\n            }));\r\n            if (filterValues.length) {\r\n                filterStringExpression = stringFormat(\"{{0}}\", filterExpression.join(\",\"));\r\n                if (\"exclude\" === field.filterType) {\r\n                    filterStringExpression = \"Except(\" + getAllMembers(field) + \",\" + filterStringExpression + \")\"\r\n                }\r\n                filterMembers.push(filterStringExpression)\r\n            }\r\n        }));\r\n        return filterMembers.length ? crossJoinElements(filterMembers) : \"\"\r\n    }\r\n\r\n    function generateFrom(columnsFilter, rowsFilter, filter, cubeName) {\r\n        var from = \"[\" + cubeName + \"]\";\r\n        each([columnsFilter, rowsFilter, filter], (function(_, filter) {\r\n            if (filter) {\r\n                from = stringFormat(\"(SELECT {0} FROM {1})\", filter + \"on 0\", from)\r\n            }\r\n        }));\r\n        return from\r\n    }\r\n\r\n    function generateMdxCore(axisStrings, withArray, columns, rows, filters, slice, cubeName) {\r\n        var options = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : {};\r\n        var mdxString = \"\";\r\n        var withString = (withArray.length ? \"with \" + withArray.join(\" \") : \"\") + \" \";\r\n        if (axisStrings.length) {\r\n            var select;\r\n            if (options.totalsOnly) {\r\n                var countMembers = [];\r\n                if (rows.length) {\r\n                    countMembers.push(\"[DX_rows_count]\")\r\n                }\r\n                if (columns.length) {\r\n                    countMembers.push(\"[DX_columns_count]\")\r\n                }\r\n                select = \"{\".concat(countMembers.join(\",\"), \"} on columns\")\r\n            } else {\r\n                select = axisStrings.join(\",\")\r\n            }\r\n            mdxString = withString + stringFormat(mdx, generateFrom(generateAxisFieldsFilter(columns), generateAxisFieldsFilter(rows), generateAxisFieldsFilter(filters || []), cubeName), slice.length ? stringFormat(\"WHERE ({0})\", slice.join(\",\")) : \"\", select)\r\n        }\r\n        return mdxString\r\n    }\r\n\r\n    function prepareDataFields(withArray, valueFields) {\r\n        return map(valueFields, (function(cell) {\r\n            if (isString(cell.expression)) {\r\n                declare(cell.expression, withArray, cell.dataField, \"member\")\r\n            }\r\n            return cell.dataField\r\n        }))\r\n    }\r\n\r\n    function addSlices(slices, options, headerName, path) {\r\n        each(path, (function(index, value) {\r\n            var dimension = options[headerName][index];\r\n            if (!dimension.hierarchyName || dimension.hierarchyName !== options[headerName][index + 1].hierarchyName) {\r\n                slices.push(dimension.dataField + \".\" + preparePathValue(value, dimension.dataField))\r\n            }\r\n        }))\r\n    }\r\n\r\n    function generateMDX(options, cubeName, parseOptions) {\r\n        var columns = options.columns || [];\r\n        var rows = options.rows || [];\r\n        var values = options.values && options.values.length ? options.values : [{\r\n            dataField: \"[Measures]\"\r\n        }];\r\n        var slice = [];\r\n        var withArray = [];\r\n        var axisStrings = [];\r\n        var dataFields = prepareDataFields(withArray, values);\r\n        parseOptions.measureCount = options.skipValues ? 1 : values.length;\r\n        parseOptions.visibleLevels = {};\r\n        if (options.headerName && options.path) {\r\n            addSlices(slice, options, options.headerName, options.path)\r\n        }\r\n        if (options.headerName && options.oppositePath) {\r\n            addSlices(slice, options, \"rows\" === options.headerName ? \"columns\" : \"rows\", options.oppositePath)\r\n        }\r\n        if (columns.length || dataFields.length) {\r\n            axisStrings.push(generateAxisMdx(options, \"columns\", dataFields, withArray, parseOptions))\r\n        }\r\n        if (rows.length) {\r\n            axisStrings.push(generateAxisMdx(options, \"rows\", dataFields, withArray, parseOptions))\r\n        }\r\n        return generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName, options)\r\n    }\r\n\r\n    function createDrillDownAxisSlice(slice, fields, path) {\r\n        each(path, (function(index, value) {\r\n            var field = fields[index];\r\n            if (field.hierarchyName && (fields[index + 1] || {}).hierarchyName === field.hierarchyName) {\r\n                return\r\n            }\r\n            slice.push(field.dataField + \".\" + preparePathValue(value, field.dataField))\r\n        }))\r\n    }\r\n\r\n    function getNumber(str) {\r\n        return parseInt(str, 10)\r\n    }\r\n\r\n    function getFirstChildText(node, childTagName) {\r\n        return getNodeText(function(node, tagName) {\r\n            return (node.getElementsByTagName(tagName) || [])[0]\r\n        }(node, childTagName))\r\n    }\r\n\r\n    function getNodeText(node) {\r\n        return node && (node.textContent || node.text || node.innerHTML) || \"\"\r\n    }\r\n\r\n    function parseCells(xml, axes, measureCount) {\r\n        var cells = [];\r\n        var cell = [];\r\n        var index = 0;\r\n        var cellsOriginal = [];\r\n        var cellElements = xml.getElementsByTagName(\"Cell\");\r\n        var errorDictionary = {};\r\n        for (var i = 0; i < cellElements.length; i++) {\r\n            var xmlCell = cellElements[i];\r\n            var valueElement = xmlCell.getElementsByTagName(\"Value\")[0];\r\n            var errorElements = valueElement && valueElement.getElementsByTagName(\"Error\") || [];\r\n            var text = 0 === errorElements.length ? getNodeText(valueElement) : \"#N/A\";\r\n            var value = parseFloat(text);\r\n            var _isNumeric = text - value + 1 > 0;\r\n            var cellOrdinal = getNumber(xmlCell.getAttribute(\"CellOrdinal\"));\r\n            if (errorElements.length) {\r\n                errorDictionary[getNodeText(errorElements[0].getElementsByTagName(\"ErrorCode\")[0])] = getNodeText(errorElements[0].getElementsByTagName(\"Description\")[0])\r\n            }\r\n            cellsOriginal[cellOrdinal] = {\r\n                value: _isNumeric ? value : text || null\r\n            }\r\n        }\r\n        each(axes[1], (function() {\r\n            var row = [];\r\n            cells.push(row);\r\n            each(axes[0], (function() {\r\n                var measureIndex = index % measureCount;\r\n                if (0 === measureIndex) {\r\n                    cell = [];\r\n                    row.push(cell)\r\n                }\r\n                cell.push(cellsOriginal[index] ? cellsOriginal[index].value : null);\r\n                index++\r\n            }))\r\n        }));\r\n        Object.keys(errorDictionary).forEach((function(key) {\r\n            errors.log(\"W4002\", errorDictionary[key])\r\n        }));\r\n        return cells\r\n    }\r\n\r\n    function preparePathValue(pathValue, dataField) {\r\n        if (pathValue) {\r\n            pathValue = isString(pathValue) && -1 !== pathValue.indexOf(\"&\") ? pathValue : \"[\" + pathValue + \"]\";\r\n            if (dataField && 0 === pathValue.indexOf(dataField + \".\")) {\r\n                pathValue = pathValue.slice(dataField.length + 1, pathValue.length)\r\n            }\r\n        }\r\n        return pathValue\r\n    }\r\n\r\n    function getItem(hash, name, member, index) {\r\n        var item = hash[name];\r\n        if (!item) {\r\n            item = {};\r\n            hash[name] = item\r\n        }\r\n        if (!isDefined(item.value) && member) {\r\n            item.text = member.caption;\r\n            item.value = member.value;\r\n            item.key = name ? name : \"\";\r\n            item.levelName = member.levelName;\r\n            item.hierarchyName = member.hierarchyName;\r\n            item.parentName = member.parentName;\r\n            item.index = index;\r\n            item.level = member.level\r\n        }\r\n        return item\r\n    }\r\n\r\n    function getVisibleChildren(item, visibleLevels) {\r\n        var result = [];\r\n        var children = item.children && (item.children.length ? item.children : Object.keys(item.children.grandTotalHash || {}).reduce((result, name) => result.concat(item.children.grandTotalHash[name].children), []));\r\n        var firstChild = children && children[0];\r\n        if (firstChild && (visibleLevels[firstChild.hierarchyName] && visibleLevels[firstChild.hierarchyName].includes(firstChild.levelName) || !visibleLevels[firstChild.hierarchyName] || 0 === firstChild.level)) {\r\n            var newChildren = children.filter(child => child.hierarchyName === firstChild.hierarchyName);\r\n            newChildren.grandTotalHash = children.grandTotalHash;\r\n            return newChildren\r\n        } else if (firstChild) {\r\n            for (var i = 0; i < children.length; i++) {\r\n                if (children[i].hierarchyName === firstChild.hierarchyName) {\r\n                    result.push.apply(result, getVisibleChildren(children[i], visibleLevels))\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    function fillDataSourceAxes(dataSourceAxis, axisTuples, measureCount, visibleLevels) {\r\n        var result = [];\r\n        each(axisTuples, (function(tupleIndex, members) {\r\n            var parentItem = {\r\n                children: result\r\n            };\r\n            var dataIndex = isDefined(measureCount) ? Math.floor(tupleIndex / measureCount) : tupleIndex;\r\n            each(members, (function(_, member) {\r\n                parentItem = function(dataIndex, member, parentItem) {\r\n                    var children = parentItem.children = parentItem.children || [];\r\n                    var hash = children.hash = children.hash || {};\r\n                    var grandTotalHash = children.grandTotalHash = children.grandTotalHash || {};\r\n                    if (member.parentName) {\r\n                        parentItem = getItem(hash, member.parentName);\r\n                        children = parentItem.children = parentItem.children || []\r\n                    }\r\n                    var currentItem = getItem(hash, member.name, member, dataIndex);\r\n                    if (member.hasValue && !currentItem.added) {\r\n                        currentItem.index = dataIndex;\r\n                        currentItem.added = true;\r\n                        children.push(currentItem)\r\n                    }\r\n                    if ((!parentItem.value || !parentItem.parentName) && member.parentName) {\r\n                        grandTotalHash[member.parentName] = parentItem\r\n                    } else if (grandTotalHash[parentItem.name]) {\r\n                        delete grandTotalHash[member.parentName]\r\n                    }\r\n                    return currentItem\r\n                }(dataIndex, member, parentItem)\r\n            }))\r\n        }));\r\n        var parentItem = {\r\n            children: result\r\n        };\r\n        parentItem.children = getVisibleChildren(parentItem, visibleLevels);\r\n        var grandTotalIndex = function(parentItem, visibleLevels) {\r\n            var grandTotalIndex;\r\n            if (1 === parentItem.children.length && \"\" === parentItem.children[0].parentName) {\r\n                grandTotalIndex = parentItem.children[0].index;\r\n                var grandTotalHash = parentItem.children.grandTotalHash;\r\n                parentItem.children = parentItem.children[0].children || [];\r\n                parentItem.children.grandTotalHash = grandTotalHash;\r\n                parentItem.children = getVisibleChildren(parentItem, visibleLevels)\r\n            } else if (0 === parentItem.children.length) {\r\n                grandTotalIndex = 0\r\n            }\r\n            return grandTotalIndex\r\n        }(parentItem, visibleLevels);\r\n        foreachTree(parentItem.children, (function(items) {\r\n            var item = items[0];\r\n            var children = getVisibleChildren(item, visibleLevels);\r\n            if (children.length) {\r\n                item.children = children\r\n            } else {\r\n                delete item.children\r\n            }\r\n            delete item.levelName;\r\n            delete item.hierarchyName;\r\n            delete item.added;\r\n            delete item.parentName;\r\n            delete item.level\r\n        }), true);\r\n        each(parentItem.children || [], (function(_, e) {\r\n            dataSourceAxis.push(e)\r\n        }));\r\n        return grandTotalIndex\r\n    }\r\n\r\n    function checkError(xml) {\r\n        var faultElementNS = xml.getElementsByTagName(\"soap:Fault\");\r\n        var faultElement = xml.getElementsByTagName(\"Fault\");\r\n        var errorElement = $([].slice.call(faultElement.length ? faultElement : faultElementNS)).find(\"Error\");\r\n        if (errorElement.length) {\r\n            var description = errorElement.attr(\"Description\");\r\n            var error = new errors.Error(\"E4000\", description);\r\n            errors.log(\"E4000\", description);\r\n            return error\r\n        }\r\n        return null\r\n    }\r\n\r\n    function parseResult(xml, parseOptions) {\r\n        var dataSource = {\r\n            columns: [],\r\n            rows: []\r\n        };\r\n        var measureCount = parseOptions.measureCount;\r\n        var axes = function(xml, skipValues) {\r\n            var axes = [];\r\n            each(xml.getElementsByTagName(\"Axis\"), (function(_, axisElement) {\r\n                var name = axisElement.getAttribute(\"name\");\r\n                var axis = [];\r\n                var index = 0;\r\n                if (0 === name.indexOf(\"Axis\") && isNumeric(getNumber(name.substr(4)))) {\r\n                    axes.push(axis);\r\n                    each(axisElement.getElementsByTagName(\"Tuple\"), (function(_, tupleElement) {\r\n                        var tupleMembers = tupleElement.childNodes;\r\n                        var levelSum = 0;\r\n                        var members = [];\r\n                        var membersCount = skipValues ? tupleMembers.length : tupleMembers.length - 1;\r\n                        var isAxisWithMeasure = 1 === axes.length;\r\n                        if (isAxisWithMeasure) {\r\n                            membersCount--\r\n                        }\r\n                        axis.push(members);\r\n                        for (var i = membersCount; i >= 0; i--) {\r\n                            var tuple = tupleMembers[i];\r\n                            var level = getNumber(getFirstChildText(tuple, \"LNum\"));\r\n                            members[i] = {\r\n                                caption: getFirstChildText(tuple, \"Caption\"),\r\n                                value: (valueText = getFirstChildText(tuple, \"MEMBER_VALUE\"), isNumeric(valueText) ? parseFloat(valueText) : valueText),\r\n                                level: level,\r\n                                index: index++,\r\n                                hasValue: !levelSum && (!!level || 0 === i),\r\n                                name: getFirstChildText(tuple, \"UName\"),\r\n                                hierarchyName: tupleMembers[i].getAttribute(\"Hierarchy\"),\r\n                                parentName: getFirstChildText(tuple, \"PARENT_UNIQUE_NAME\"),\r\n                                levelName: getFirstChildText(tuple, \"LName\")\r\n                            };\r\n                            levelSum += level\r\n                        }\r\n                        var valueText\r\n                    }))\r\n                }\r\n            }));\r\n            while (axes.length < 2) {\r\n                axes.push([\r\n                    [{\r\n                        level: 0\r\n                    }]\r\n                ])\r\n            }\r\n            return axes\r\n        }(xml, parseOptions.skipValues);\r\n        dataSource.grandTotalColumnIndex = fillDataSourceAxes(dataSource.columns, axes[0], measureCount, parseOptions.visibleLevels);\r\n        dataSource.grandTotalRowIndex = fillDataSourceAxes(dataSource.rows, axes[1], void 0, parseOptions.visibleLevels);\r\n        dataSource.values = parseCells(xml, axes, measureCount);\r\n        return dataSource\r\n    }\r\n\r\n    function parseDiscoverRowSet(xml, schema, dimensions, translatedDisplayFolders) {\r\n        var result = [];\r\n        var isMeasure = \"MEASURE\" === schema;\r\n        var displayFolderField = isMeasure ? \"MEASUREGROUP_NAME\" : schema + \"_DISPLAY_FOLDER\";\r\n        each(xml.getElementsByTagName(\"row\"), (function(_, row) {\r\n            var hierarchyName = \"LEVEL\" === schema ? getFirstChildText(row, \"HIERARCHY_UNIQUE_NAME\") : void 0;\r\n            var levelNumber = getFirstChildText(row, \"LEVEL_NUMBER\");\r\n            var displayFolder = getFirstChildText(row, displayFolderField);\r\n            if (isMeasure) {\r\n                displayFolder = translatedDisplayFolders[displayFolder] || displayFolder\r\n            }\r\n            if ((\"0\" !== levelNumber || \"true\" !== getFirstChildText(row, schema + \"_IS_VISIBLE\")) && \"2\" !== getFirstChildText(row, \"DIMENSION_TYPE\")) {\r\n                var dimension = isMeasure ? \"DX_MEASURES\" : getFirstChildText(row, \"DIMENSION_UNIQUE_NAME\");\r\n                var dataField = getFirstChildText(row, schema + \"_UNIQUE_NAME\");\r\n                result.push({\r\n                    dimension: dimensions.names[dimension] || dimension,\r\n                    groupIndex: levelNumber ? getNumber(levelNumber) - 1 : void 0,\r\n                    dataField: dataField,\r\n                    caption: getFirstChildText(row, schema + \"_CAPTION\"),\r\n                    hierarchyName: hierarchyName,\r\n                    groupName: hierarchyName,\r\n                    displayFolder: displayFolder,\r\n                    isMeasure: isMeasure,\r\n                    isDefault: !!dimensions.defaultHierarchies[dataField]\r\n                })\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n\r\n    function parseStringWithUnicodeSymbols(str) {\r\n        str = str.replace(/_x(....)_/g, (function(whole, group1) {\r\n            return String.fromCharCode(parseInt(group1, 16))\r\n        }));\r\n        var stringArray = str.match(/\\[.+?\\]/gi);\r\n        if (stringArray && stringArray.length) {\r\n            str = stringArray[stringArray.length - 1]\r\n        }\r\n        return str.replace(/\\[/gi, \"\").replace(/\\]/gi, \"\").replace(/\\$/gi, \"\").replace(/\\./gi, \" \")\r\n    }\r\n\r\n    function sendQuery(storeOptions, mdxString) {\r\n        mdxString = $(\"<div>\").text(mdxString).html();\r\n        return execXMLA(storeOptions, stringFormat('<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>{0}</Statement></Command><Properties><PropertyList><Catalog>{1}</Catalog><ShowHiddenCubes>True</ShowHiddenCubes><SspropInitAppName>Microsoft SQL Server Management Studio</SspropInitAppName><Timeout>3600</Timeout>{2}</PropertyList></Properties></Execute></Body></Envelope>', mdxString, storeOptions.catalog, getLocaleIdProperty()))\r\n    }\r\n    return {\r\n        ctor: function(options) {\r\n            this._options = options\r\n        },\r\n        getFields: function() {\r\n            var options = this._options;\r\n            var catalog = options.catalog;\r\n            var cube = options.cube;\r\n            var localeIdProperty = getLocaleIdProperty();\r\n            var dimensionsRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_DIMENSIONS\", localeIdProperty));\r\n            var measuresRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_MEASURES\", localeIdProperty));\r\n            var hierarchiesRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_HIERARCHIES\", localeIdProperty));\r\n            var levelsRequest = execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_LEVELS\", localeIdProperty));\r\n            var result = new Deferred;\r\n            when(dimensionsRequest, measuresRequest, hierarchiesRequest, levelsRequest).then((function(dimensionsResponse, measuresResponse, hierarchiesResponse, levelsResponse) {\r\n                execXMLA(options, stringFormat(discover, catalog, cube, \"MDSCHEMA_MEASUREGROUPS\", localeIdProperty)).done((function(measureGroupsResponse) {\r\n                    var dimensions = function(xml) {\r\n                        var result = {\r\n                            names: {},\r\n                            defaultHierarchies: {}\r\n                        };\r\n                        each($(xml).find(\"row\"), (function() {\r\n                            var $row = $(this);\r\n                            var type = $row.children(\"DIMENSION_TYPE\").text();\r\n                            var dimensionName = \"2\" === type ? \"DX_MEASURES\" : $row.children(\"DIMENSION_UNIQUE_NAME\").text();\r\n                            result.names[dimensionName] = $row.children(\"DIMENSION_CAPTION\").text();\r\n                            result.defaultHierarchies[$row.children(\"DEFAULT_HIERARCHY\").text()] = true\r\n                        }));\r\n                        return result\r\n                    }(dimensionsResponse);\r\n                    var hierarchies = parseDiscoverRowSet(hierarchiesResponse, \"HIERARCHY\", dimensions);\r\n                    var levels = parseDiscoverRowSet(levelsResponse, \"LEVEL\", dimensions);\r\n                    var measureGroups = function(xml) {\r\n                        var measureGroups = {};\r\n                        each(xml.getElementsByTagName(\"row\"), (function(_, row) {\r\n                            measureGroups[getFirstChildText(row, \"MEASUREGROUP_NAME\")] = getFirstChildText(row, \"MEASUREGROUP_CAPTION\")\r\n                        }));\r\n                        return measureGroups\r\n                    }(measureGroupsResponse);\r\n                    var fields = parseDiscoverRowSet(measuresResponse, \"MEASURE\", dimensions, measureGroups).concat(hierarchies);\r\n                    var levelsByHierarchy = {};\r\n                    each(levels, (function(_, level) {\r\n                        levelsByHierarchy[level.hierarchyName] = levelsByHierarchy[level.hierarchyName] || [];\r\n                        levelsByHierarchy[level.hierarchyName].push(level)\r\n                    }));\r\n                    each(hierarchies, (function(_, hierarchy) {\r\n                        if (levelsByHierarchy[hierarchy.dataField] && levelsByHierarchy[hierarchy.dataField].length > 1) {\r\n                            hierarchy.groupName = hierarchy.hierarchyName = hierarchy.dataField;\r\n                            fields.push.apply(fields, levelsByHierarchy[hierarchy.hierarchyName])\r\n                        }\r\n                    }));\r\n                    result.resolve(fields)\r\n                })).fail(result.reject)\r\n            })).fail(result.reject);\r\n            return result\r\n        },\r\n        load: function(options) {\r\n            var result = new Deferred;\r\n            var storeOptions = this._options;\r\n            var parseOptions = {\r\n                skipValues: options.skipValues\r\n            };\r\n            var mdxString = generateMDX(options, storeOptions.cube, parseOptions);\r\n            var rowCountMdx;\r\n            if (options.rowSkip || options.rowTake || options.columnTake || options.columnSkip) {\r\n                rowCountMdx = generateMDX(extend({}, options, {\r\n                    totalsOnly: true,\r\n                    rowSkip: null,\r\n                    rowTake: null,\r\n                    columnSkip: null,\r\n                    columnTake: null\r\n                }), storeOptions.cube, {})\r\n            }\r\n            var load = () => {\r\n                if (mdxString) {\r\n                    when(sendQuery(storeOptions, mdxString), rowCountMdx && sendQuery(storeOptions, rowCountMdx)).done((function(executeXml, rowCountXml) {\r\n                        var error = checkError(executeXml) || rowCountXml && checkError(rowCountXml);\r\n                        if (!error) {\r\n                            var response = parseResult(executeXml, parseOptions);\r\n                            if (rowCountXml) {\r\n                                ! function(data, options, totalCountXml) {\r\n                                    var axes = [];\r\n                                    var columnOptions = options.columns || [];\r\n                                    var rowOptions = options.rows || [];\r\n                                    if (columnOptions.length) {\r\n                                        axes.push({})\r\n                                    }\r\n                                    if (rowOptions.length) {\r\n                                        axes.push({})\r\n                                    }\r\n                                    var cells = parseCells(totalCountXml, [\r\n                                        [{}],\r\n                                        [{}, {}]\r\n                                    ], 1);\r\n                                    if (!columnOptions.length && rowOptions.length) {\r\n                                        data.rowCount = Math.max(cells[0][0][0] - 1, 0)\r\n                                    }\r\n                                    if (!rowOptions.length && columnOptions.length) {\r\n                                        data.columnCount = Math.max(cells[0][0][0] - 1, 0)\r\n                                    }\r\n                                    if (rowOptions.length && columnOptions.length) {\r\n                                        data.rowCount = Math.max(cells[0][0][0] - 1, 0);\r\n                                        data.columnCount = Math.max(cells[1][0][0] - 1, 0)\r\n                                    }\r\n                                    if (void 0 !== data.rowCount && options.rowTake) {\r\n                                        data.rows = [...Array(options.rowSkip)].concat(data.rows);\r\n                                        data.rows.length = data.rowCount;\r\n                                        for (var i = 0; i < data.rows.length; i++) {\r\n                                            data.rows[i] = data.rows[i] || {}\r\n                                        }\r\n                                    }\r\n                                    if (void 0 !== data.columnCount && options.columnTake) {\r\n                                        data.columns = [...Array(options.columnSkip)].concat(data.columns);\r\n                                        data.columns.length = data.columnCount;\r\n                                        for (var _i = 0; _i < data.columns.length; _i++) {\r\n                                            data.columns[_i] = data.columns[_i] || {}\r\n                                        }\r\n                                    }\r\n                                }(response, options, rowCountXml)\r\n                            }\r\n                            result.resolve(response)\r\n                        } else {\r\n                            result.reject(error)\r\n                        }\r\n                    })).fail(result.reject)\r\n                } else {\r\n                    result.resolve({\r\n                        columns: [],\r\n                        rows: [],\r\n                        values: [],\r\n                        grandTotalColumnIndex: 0,\r\n                        grandTotalRowIndex: 0\r\n                    })\r\n                }\r\n            };\r\n            if (options.delay) {\r\n                setTimeout(load, options.delay)\r\n            } else {\r\n                load()\r\n            }\r\n            return result\r\n        },\r\n        supportPaging: function() {\r\n            return true\r\n        },\r\n        getDrillDownItems: function(options, params) {\r\n            var result = new Deferred;\r\n            var storeOptions = this._options;\r\n            var mdxString = function(options, cubeName, params) {\r\n                var columns = options.columns || [];\r\n                var rows = options.rows || [];\r\n                var values = options.values && options.values.length ? options.values : [{\r\n                    dataField: \"[Measures]\"\r\n                }];\r\n                var slice = [];\r\n                var withArray = [];\r\n                var axisStrings = [];\r\n                var dataFields = prepareDataFields(withArray, values);\r\n                var maxRowCount = params.maxRowCount;\r\n                var customColumns = params.customColumns || [];\r\n                var customColumnsString = customColumns.length > 0 ? \" return \" + customColumns.join(\",\") : \"\";\r\n                createDrillDownAxisSlice(slice, columns, params.columnPath || []);\r\n                createDrillDownAxisSlice(slice, rows, params.rowPath || []);\r\n                if (columns.length || dataFields.length) {\r\n                    axisStrings.push([(dataFields[params.dataIndex] || dataFields[0]) + \" on 0\"])\r\n                }\r\n                var coreMDX = generateMdxCore(axisStrings, withArray, columns, rows, options.filters, slice, cubeName);\r\n                return coreMDX ? \"drillthrough\" + (maxRowCount > 0 ? \" maxrows \" + maxRowCount : \"\") + coreMDX + customColumnsString : coreMDX\r\n            }(options, storeOptions.cube, params);\r\n            if (mdxString) {\r\n                when(sendQuery(storeOptions, mdxString)).done((function(executeXml) {\r\n                    var error = checkError(executeXml);\r\n                    if (!error) {\r\n                        result.resolve(function(xml) {\r\n                            var rows = xml.getElementsByTagName(\"row\");\r\n                            var result = [];\r\n                            var columnNames = {};\r\n                            for (var i = 0; i < rows.length; i++) {\r\n                                var children = rows[i].childNodes;\r\n                                var item = {};\r\n                                for (var j = 0; j < children.length; j++) {\r\n                                    var tagName = children[j].tagName;\r\n                                    var name = columnNames[tagName] = columnNames[tagName] || parseStringWithUnicodeSymbols(tagName);\r\n                                    item[name] = getNodeText(children[j])\r\n                                }\r\n                                result.push(item)\r\n                            }\r\n                            return result\r\n                        }(executeXml))\r\n                    } else {\r\n                        result.reject(error)\r\n                    }\r\n                })).fail(result.reject)\r\n            } else {\r\n                result.resolve([])\r\n            }\r\n            return result\r\n        },\r\n        key: noop,\r\n        filter: noop\r\n    }\r\n}()).include(storeDrillDownMixin);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}