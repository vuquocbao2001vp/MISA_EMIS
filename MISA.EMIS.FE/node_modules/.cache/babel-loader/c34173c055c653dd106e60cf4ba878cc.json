{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/time_panel_data_generator.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"allDay\", \"startDate\", \"endDate\", \"groups\", \"groupIndex\", \"isFirstGroupCell\", \"isLastGroupCell\", \"index\"];\nimport { getIsGroupedAllDayPanel, getKeyByGroup } from \"../../../../renovation/ui/scheduler/workspaces/utils\";\nimport { getDisplayedRowCount } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getTimePanelCellText } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/week\";\nexport class TimePanelDataGenerator {\n  constructor(viewDataGenerator) {\n    this._viewDataGenerator = viewDataGenerator;\n  }\n\n  getCompleteTimePanelMap(options, completeViewDataMap) {\n    var {\n      startViewDate: startViewDate,\n      cellDuration: cellDuration,\n      startDayHour: startDayHour,\n      isVerticalGrouping: isVerticalGrouping,\n      intervalCount: intervalCount,\n      currentDate: currentDate,\n      viewType: viewType,\n      hoursInterval: hoursInterval,\n      endDayHour: endDayHour\n    } = options;\n\n    var rowCountInGroup = this._viewDataGenerator.getRowCount({\n      intervalCount: intervalCount,\n      currentDate: currentDate,\n      viewType: viewType,\n      hoursInterval: hoursInterval,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour\n    });\n\n    var cellCountInGroupRow = this._viewDataGenerator.getCellCount({\n      intervalCount: intervalCount,\n      currentDate: currentDate,\n      viewType: viewType,\n      hoursInterval: hoursInterval,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour\n    });\n\n    var allDayRowsCount = 0;\n    return completeViewDataMap.map((row, index) => {\n      var _row$ = row[0],\n          {\n        allDay: allDay,\n        startDate: startDate,\n        groups: groups,\n        groupIndex: groupIndex,\n        isFirstGroupCell: isFirstGroupCell,\n        isLastGroupCell: isLastGroupCell,\n        index: cellIndex\n      } = _row$,\n          restCellProps = _objectWithoutPropertiesLoose(_row$, _excluded);\n\n      if (allDay) {\n        allDayRowsCount += 1;\n      }\n\n      var timeIndex = (index - allDayRowsCount) % rowCountInGroup;\n      return _extends({}, restCellProps, {\n        startDate: startDate,\n        allDay: allDay,\n        text: getTimePanelCellText(timeIndex, startDate, startViewDate, cellDuration, startDayHour),\n        groups: isVerticalGrouping ? groups : void 0,\n        groupIndex: isVerticalGrouping ? groupIndex : void 0,\n        isFirstGroupCell: isVerticalGrouping && isFirstGroupCell,\n        isLastGroupCell: isVerticalGrouping && isLastGroupCell,\n        index: Math.floor(cellIndex / cellCountInGroupRow)\n      });\n    });\n  }\n\n  generateTimePanelData(completeTimePanelMap, options) {\n    var {\n      startRowIndex: startRowIndex,\n      rowCount: rowCount,\n      topVirtualRowHeight: topVirtualRowHeight,\n      bottomVirtualRowHeight: bottomVirtualRowHeight,\n      isGroupedAllDayPanel: isGroupedAllDayPanel,\n      isVerticalGrouping: isVerticalGrouping,\n      isAllDayPanelVisible: isAllDayPanelVisible\n    } = options;\n    var indexDifference = isVerticalGrouping || !isAllDayPanelVisible ? 0 : 1;\n    var correctedStartRowIndex = startRowIndex + indexDifference;\n    var displayedRowCount = getDisplayedRowCount(rowCount, completeTimePanelMap);\n    var timePanelMap = completeTimePanelMap.slice(correctedStartRowIndex, correctedStartRowIndex + displayedRowCount);\n    var timePanelData = {\n      topVirtualRowHeight: topVirtualRowHeight,\n      bottomVirtualRowHeight: bottomVirtualRowHeight,\n      isGroupedAllDayPanel: isGroupedAllDayPanel\n    };\n\n    var {\n      previousGroupedData: groupedData\n    } = this._generateTimePanelDataFromMap(timePanelMap, isVerticalGrouping);\n\n    timePanelData.groupedData = groupedData;\n    return timePanelData;\n  }\n\n  _generateTimePanelDataFromMap(timePanelMap, isVerticalGrouping) {\n    return timePanelMap.reduce((_ref, cellData) => {\n      var {\n        previousGroupIndex: previousGroupIndex,\n        previousGroupedData: previousGroupedData\n      } = _ref;\n      var currentGroupIndex = cellData.groupIndex;\n\n      if (currentGroupIndex !== previousGroupIndex) {\n        previousGroupedData.push({\n          dateTable: [],\n          isGroupedAllDayPanel: getIsGroupedAllDayPanel(!!cellData.allDay, isVerticalGrouping),\n          groupIndex: currentGroupIndex,\n          key: getKeyByGroup(currentGroupIndex, isVerticalGrouping)\n        });\n      }\n\n      if (cellData.allDay) {\n        previousGroupedData[previousGroupedData.length - 1].allDayPanel = cellData;\n      } else {\n        previousGroupedData[previousGroupedData.length - 1].dateTable.push(cellData);\n      }\n\n      return {\n        previousGroupIndex: currentGroupIndex,\n        previousGroupedData: previousGroupedData\n      };\n    }, {\n      previousGroupIndex: -1,\n      previousGroupedData: []\n    });\n  }\n\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","getIsGroupedAllDayPanel","getKeyByGroup","getDisplayedRowCount","getTimePanelCellText","TimePanelDataGenerator","constructor","viewDataGenerator","_viewDataGenerator","getCompleteTimePanelMap","options","completeViewDataMap","startViewDate","cellDuration","startDayHour","isVerticalGrouping","intervalCount","currentDate","viewType","hoursInterval","endDayHour","rowCountInGroup","getRowCount","cellCountInGroupRow","getCellCount","allDayRowsCount","map","row","index","_row$","allDay","startDate","groups","groupIndex","isFirstGroupCell","isLastGroupCell","cellIndex","restCellProps","timeIndex","text","Math","floor","generateTimePanelData","completeTimePanelMap","startRowIndex","rowCount","topVirtualRowHeight","bottomVirtualRowHeight","isGroupedAllDayPanel","isAllDayPanelVisible","indexDifference","correctedStartRowIndex","displayedRowCount","timePanelMap","slice","timePanelData","previousGroupedData","groupedData","_generateTimePanelDataFromMap","reduce","_ref","cellData","previousGroupIndex","currentGroupIndex","push","dateTable","key","length","allDayPanel"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/workspaces/view_model/time_panel_data_generator.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/time_panel_data_generator.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nvar _excluded = [\"allDay\", \"startDate\", \"endDate\", \"groups\", \"groupIndex\", \"isFirstGroupCell\", \"isLastGroupCell\", \"index\"];\r\nimport {\r\n    getIsGroupedAllDayPanel,\r\n    getKeyByGroup\r\n} from \"../../../../renovation/ui/scheduler/workspaces/utils\";\r\nimport {\r\n    getDisplayedRowCount\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    getTimePanelCellText\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/week\";\r\nexport class TimePanelDataGenerator {\r\n    constructor(viewDataGenerator) {\r\n        this._viewDataGenerator = viewDataGenerator\r\n    }\r\n    getCompleteTimePanelMap(options, completeViewDataMap) {\r\n        var {\r\n            startViewDate: startViewDate,\r\n            cellDuration: cellDuration,\r\n            startDayHour: startDayHour,\r\n            isVerticalGrouping: isVerticalGrouping,\r\n            intervalCount: intervalCount,\r\n            currentDate: currentDate,\r\n            viewType: viewType,\r\n            hoursInterval: hoursInterval,\r\n            endDayHour: endDayHour\r\n        } = options;\r\n        var rowCountInGroup = this._viewDataGenerator.getRowCount({\r\n            intervalCount: intervalCount,\r\n            currentDate: currentDate,\r\n            viewType: viewType,\r\n            hoursInterval: hoursInterval,\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour\r\n        });\r\n        var cellCountInGroupRow = this._viewDataGenerator.getCellCount({\r\n            intervalCount: intervalCount,\r\n            currentDate: currentDate,\r\n            viewType: viewType,\r\n            hoursInterval: hoursInterval,\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour\r\n        });\r\n        var allDayRowsCount = 0;\r\n        return completeViewDataMap.map((row, index) => {\r\n            var _row$ = row[0],\r\n                {\r\n                    allDay: allDay,\r\n                    startDate: startDate,\r\n                    groups: groups,\r\n                    groupIndex: groupIndex,\r\n                    isFirstGroupCell: isFirstGroupCell,\r\n                    isLastGroupCell: isLastGroupCell,\r\n                    index: cellIndex\r\n                } = _row$,\r\n                restCellProps = _objectWithoutPropertiesLoose(_row$, _excluded);\r\n            if (allDay) {\r\n                allDayRowsCount += 1\r\n            }\r\n            var timeIndex = (index - allDayRowsCount) % rowCountInGroup;\r\n            return _extends({}, restCellProps, {\r\n                startDate: startDate,\r\n                allDay: allDay,\r\n                text: getTimePanelCellText(timeIndex, startDate, startViewDate, cellDuration, startDayHour),\r\n                groups: isVerticalGrouping ? groups : void 0,\r\n                groupIndex: isVerticalGrouping ? groupIndex : void 0,\r\n                isFirstGroupCell: isVerticalGrouping && isFirstGroupCell,\r\n                isLastGroupCell: isVerticalGrouping && isLastGroupCell,\r\n                index: Math.floor(cellIndex / cellCountInGroupRow)\r\n            })\r\n        })\r\n    }\r\n    generateTimePanelData(completeTimePanelMap, options) {\r\n        var {\r\n            startRowIndex: startRowIndex,\r\n            rowCount: rowCount,\r\n            topVirtualRowHeight: topVirtualRowHeight,\r\n            bottomVirtualRowHeight: bottomVirtualRowHeight,\r\n            isGroupedAllDayPanel: isGroupedAllDayPanel,\r\n            isVerticalGrouping: isVerticalGrouping,\r\n            isAllDayPanelVisible: isAllDayPanelVisible\r\n        } = options;\r\n        var indexDifference = isVerticalGrouping || !isAllDayPanelVisible ? 0 : 1;\r\n        var correctedStartRowIndex = startRowIndex + indexDifference;\r\n        var displayedRowCount = getDisplayedRowCount(rowCount, completeTimePanelMap);\r\n        var timePanelMap = completeTimePanelMap.slice(correctedStartRowIndex, correctedStartRowIndex + displayedRowCount);\r\n        var timePanelData = {\r\n            topVirtualRowHeight: topVirtualRowHeight,\r\n            bottomVirtualRowHeight: bottomVirtualRowHeight,\r\n            isGroupedAllDayPanel: isGroupedAllDayPanel\r\n        };\r\n        var {\r\n            previousGroupedData: groupedData\r\n        } = this._generateTimePanelDataFromMap(timePanelMap, isVerticalGrouping);\r\n        timePanelData.groupedData = groupedData;\r\n        return timePanelData\r\n    }\r\n    _generateTimePanelDataFromMap(timePanelMap, isVerticalGrouping) {\r\n        return timePanelMap.reduce((_ref, cellData) => {\r\n            var {\r\n                previousGroupIndex: previousGroupIndex,\r\n                previousGroupedData: previousGroupedData\r\n            } = _ref;\r\n            var currentGroupIndex = cellData.groupIndex;\r\n            if (currentGroupIndex !== previousGroupIndex) {\r\n                previousGroupedData.push({\r\n                    dateTable: [],\r\n                    isGroupedAllDayPanel: getIsGroupedAllDayPanel(!!cellData.allDay, isVerticalGrouping),\r\n                    groupIndex: currentGroupIndex,\r\n                    key: getKeyByGroup(currentGroupIndex, isVerticalGrouping)\r\n                })\r\n            }\r\n            if (cellData.allDay) {\r\n                previousGroupedData[previousGroupedData.length - 1].allDayPanel = cellData\r\n            } else {\r\n                previousGroupedData[previousGroupedData.length - 1].dateTable.push(cellData)\r\n            }\r\n            return {\r\n                previousGroupIndex: currentGroupIndex,\r\n                previousGroupedData: previousGroupedData\r\n            }\r\n        }, {\r\n            previousGroupIndex: -1,\r\n            previousGroupedData: []\r\n        })\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}