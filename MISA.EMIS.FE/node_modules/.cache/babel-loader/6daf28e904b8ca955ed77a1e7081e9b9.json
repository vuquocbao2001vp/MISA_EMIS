{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/week.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../../../../core/utils/date\";\nimport dateLocalization from \"../../../../../../../localization/date\";\nimport { getCalculatedFirstDayOfWeek, getStartViewDateTimeOffset, getViewStartByOptions, setOptionHour } from \"./base\";\nimport timeZoneUtils from \"../../../../../../../ui/scheduler/utils.timeZone\";\nexport var getIntervalDuration = intervalCount => 7 * dateUtils.dateToMilliseconds(\"day\") * intervalCount;\nexport var getValidStartDate = (startDate, firstDayOfWeek) => startDate ? dateUtils.getFirstWeekDate(startDate, firstDayOfWeek) : void 0;\nexport var calculateStartViewDate = (currentDate, startDayHour, startDate, intervalDuration, firstDayOfWeekOption) => {\n  var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\n  var viewStart = getViewStartByOptions(startDate, currentDate, intervalDuration, getValidStartDate(startDate, firstDayOfWeek));\n  var firstViewDate = dateUtils.getFirstWeekDate(viewStart, firstDayOfWeek);\n  return setOptionHour(firstViewDate, startDayHour);\n};\nexport var calculateViewStartDate = (startDateOption, firstDayOfWeek) => {\n  var validFirstDayOfWeek = null !== firstDayOfWeek && void 0 !== firstDayOfWeek ? firstDayOfWeek : dateLocalization.firstDayOfWeekIndex();\n  return dateUtils.getFirstWeekDate(startDateOption, validFirstDayOfWeek);\n};\n\nvar getTimeCellDate = (rowIndex, date, startViewDate, cellDuration, startDayHour) => {\n  if (!timeZoneUtils.isTimezoneChangeInDate(date)) {\n    return date;\n  }\n\n  var startViewDateWithoutDST = timeZoneUtils.getDateWithoutTimezoneChange(startViewDate);\n  var result = new Date(startViewDateWithoutDST);\n  var timeCellDuration = Math.round(cellDuration);\n  var startViewDateOffset = getStartViewDateTimeOffset(startViewDate, startDayHour);\n  result.setMilliseconds(result.getMilliseconds() + timeCellDuration * rowIndex - startViewDateOffset);\n  return result;\n};\n\nexport var getTimePanelCellText = (rowIndex, date, startViewDate, cellDuration, startDayHour) => {\n  if (rowIndex % 2 === 0) {\n    var validDate = getTimeCellDate(rowIndex, date, startViewDate, cellDuration, startDayHour);\n    return dateLocalization.format(validDate, \"shorttime\");\n  }\n\n  return \"\";\n};","map":{"version":3,"names":["dateUtils","dateLocalization","getCalculatedFirstDayOfWeek","getStartViewDateTimeOffset","getViewStartByOptions","setOptionHour","timeZoneUtils","getIntervalDuration","intervalCount","dateToMilliseconds","getValidStartDate","startDate","firstDayOfWeek","getFirstWeekDate","calculateStartViewDate","currentDate","startDayHour","intervalDuration","firstDayOfWeekOption","viewStart","firstViewDate","calculateViewStartDate","startDateOption","validFirstDayOfWeek","firstDayOfWeekIndex","getTimeCellDate","rowIndex","date","startViewDate","cellDuration","isTimezoneChangeInDate","startViewDateWithoutDST","getDateWithoutTimezoneChange","result","Date","timeCellDuration","Math","round","startViewDateOffset","setMilliseconds","getMilliseconds","getTimePanelCellText","validDate","format"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/renovation/ui/scheduler/view_model/to_test/views/utils/week.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/week.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../../../../../core/utils/date\";\r\nimport dateLocalization from \"../../../../../../../localization/date\";\r\nimport {\r\n    getCalculatedFirstDayOfWeek,\r\n    getStartViewDateTimeOffset,\r\n    getViewStartByOptions,\r\n    setOptionHour\r\n} from \"./base\";\r\nimport timeZoneUtils from \"../../../../../../../ui/scheduler/utils.timeZone\";\r\nexport var getIntervalDuration = intervalCount => 7 * dateUtils.dateToMilliseconds(\"day\") * intervalCount;\r\nexport var getValidStartDate = (startDate, firstDayOfWeek) => startDate ? dateUtils.getFirstWeekDate(startDate, firstDayOfWeek) : void 0;\r\nexport var calculateStartViewDate = (currentDate, startDayHour, startDate, intervalDuration, firstDayOfWeekOption) => {\r\n    var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\r\n    var viewStart = getViewStartByOptions(startDate, currentDate, intervalDuration, getValidStartDate(startDate, firstDayOfWeek));\r\n    var firstViewDate = dateUtils.getFirstWeekDate(viewStart, firstDayOfWeek);\r\n    return setOptionHour(firstViewDate, startDayHour)\r\n};\r\nexport var calculateViewStartDate = (startDateOption, firstDayOfWeek) => {\r\n    var validFirstDayOfWeek = null !== firstDayOfWeek && void 0 !== firstDayOfWeek ? firstDayOfWeek : dateLocalization.firstDayOfWeekIndex();\r\n    return dateUtils.getFirstWeekDate(startDateOption, validFirstDayOfWeek)\r\n};\r\nvar getTimeCellDate = (rowIndex, date, startViewDate, cellDuration, startDayHour) => {\r\n    if (!timeZoneUtils.isTimezoneChangeInDate(date)) {\r\n        return date\r\n    }\r\n    var startViewDateWithoutDST = timeZoneUtils.getDateWithoutTimezoneChange(startViewDate);\r\n    var result = new Date(startViewDateWithoutDST);\r\n    var timeCellDuration = Math.round(cellDuration);\r\n    var startViewDateOffset = getStartViewDateTimeOffset(startViewDate, startDayHour);\r\n    result.setMilliseconds(result.getMilliseconds() + timeCellDuration * rowIndex - startViewDateOffset);\r\n    return result\r\n};\r\nexport var getTimePanelCellText = (rowIndex, date, startViewDate, cellDuration, startDayHour) => {\r\n    if (rowIndex % 2 === 0) {\r\n        var validDate = getTimeCellDate(rowIndex, date, startViewDate, cellDuration, startDayHour);\r\n        return dateLocalization.format(validDate, \"shorttime\")\r\n    }\r\n    return \"\"\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAP,MAAsB,sCAAtB;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,SACIC,2BADJ,EAEIC,0BAFJ,EAGIC,qBAHJ,EAIIC,aAJJ,QAKO,QALP;AAMA,OAAOC,aAAP,MAA0B,kDAA1B;AACA,OAAO,IAAIC,mBAAmB,GAAGC,aAAa,IAAI,IAAIR,SAAS,CAACS,kBAAV,CAA6B,KAA7B,CAAJ,GAA0CD,aAArF;AACP,OAAO,IAAIE,iBAAiB,GAAG,CAACC,SAAD,EAAYC,cAAZ,KAA+BD,SAAS,GAAGX,SAAS,CAACa,gBAAV,CAA2BF,SAA3B,EAAsCC,cAAtC,CAAH,GAA2D,KAAK,CAAhI;AACP,OAAO,IAAIE,sBAAsB,GAAG,CAACC,WAAD,EAAcC,YAAd,EAA4BL,SAA5B,EAAuCM,gBAAvC,EAAyDC,oBAAzD,KAAkF;EAClH,IAAIN,cAAc,GAAGV,2BAA2B,CAACgB,oBAAD,CAAhD;EACA,IAAIC,SAAS,GAAGf,qBAAqB,CAACO,SAAD,EAAYI,WAAZ,EAAyBE,gBAAzB,EAA2CP,iBAAiB,CAACC,SAAD,EAAYC,cAAZ,CAA5D,CAArC;EACA,IAAIQ,aAAa,GAAGpB,SAAS,CAACa,gBAAV,CAA2BM,SAA3B,EAAsCP,cAAtC,CAApB;EACA,OAAOP,aAAa,CAACe,aAAD,EAAgBJ,YAAhB,CAApB;AACH,CALM;AAMP,OAAO,IAAIK,sBAAsB,GAAG,CAACC,eAAD,EAAkBV,cAAlB,KAAqC;EACrE,IAAIW,mBAAmB,GAAG,SAASX,cAAT,IAA2B,KAAK,CAAL,KAAWA,cAAtC,GAAuDA,cAAvD,GAAwEX,gBAAgB,CAACuB,mBAAjB,EAAlG;EACA,OAAOxB,SAAS,CAACa,gBAAV,CAA2BS,eAA3B,EAA4CC,mBAA5C,CAAP;AACH,CAHM;;AAIP,IAAIE,eAAe,GAAG,CAACC,QAAD,EAAWC,IAAX,EAAiBC,aAAjB,EAAgCC,YAAhC,EAA8Cb,YAA9C,KAA+D;EACjF,IAAI,CAACV,aAAa,CAACwB,sBAAd,CAAqCH,IAArC,CAAL,EAAiD;IAC7C,OAAOA,IAAP;EACH;;EACD,IAAII,uBAAuB,GAAGzB,aAAa,CAAC0B,4BAAd,CAA2CJ,aAA3C,CAA9B;EACA,IAAIK,MAAM,GAAG,IAAIC,IAAJ,CAASH,uBAAT,CAAb;EACA,IAAII,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWR,YAAX,CAAvB;EACA,IAAIS,mBAAmB,GAAGnC,0BAA0B,CAACyB,aAAD,EAAgBZ,YAAhB,CAApD;EACAiB,MAAM,CAACM,eAAP,CAAuBN,MAAM,CAACO,eAAP,KAA2BL,gBAAgB,GAAGT,QAA9C,GAAyDY,mBAAhF;EACA,OAAOL,MAAP;AACH,CAVD;;AAWA,OAAO,IAAIQ,oBAAoB,GAAG,CAACf,QAAD,EAAWC,IAAX,EAAiBC,aAAjB,EAAgCC,YAAhC,EAA8Cb,YAA9C,KAA+D;EAC7F,IAAIU,QAAQ,GAAG,CAAX,KAAiB,CAArB,EAAwB;IACpB,IAAIgB,SAAS,GAAGjB,eAAe,CAACC,QAAD,EAAWC,IAAX,EAAiBC,aAAjB,EAAgCC,YAAhC,EAA8Cb,YAA9C,CAA/B;IACA,OAAOf,gBAAgB,CAAC0C,MAAjB,CAAwBD,SAAxB,EAAmC,WAAnC,CAAP;EACH;;EACD,OAAO,EAAP;AACH,CANM"},"metadata":{},"sourceType":"module"}