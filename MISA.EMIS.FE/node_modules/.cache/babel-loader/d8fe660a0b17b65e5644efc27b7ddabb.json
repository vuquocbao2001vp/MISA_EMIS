{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getOuterWidth, setHeight, getOuterHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport { noop } from \"../../../core/utils/common\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport tableCreatorModule from \"../table_creator\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nimport HorizontalShader from \"../shaders/ui.scheduler.current_time_shader.horizontal\";\nimport { HEADER_CURRENT_TIME_CELL_CLASS, GROUP_ROW_CLASS, GROUP_HEADER_CONTENT_CLASS } from \"../classes\";\nimport { getDateForHeaderText } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/timeline_week\";\nimport timezoneUtils from \"../utils.timeZone\";\nimport dxrTimelineDateHeader from \"../../../renovation/ui/scheduler/workspaces/timeline/header_panel/layout.j\";\nimport { formatWeekdayAndDay } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { hasWindow } from \"../../../core/utils/window\";\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar HORIZONTAL = \"horizontal\";\nvar DATE_TABLE_CELL_BORDER = 1;\nvar DATE_TABLE_HEADER_MARGIN = 10;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass SchedulerTimeline extends SchedulerWorkSpace {\n  get verticalGroupTableClass() {\n    return GROUP_TABLE_CLASS;\n  }\n\n  get viewDirection() {\n    return \"horizontal\";\n  }\n\n  get renovatedHeaderPanelComponent() {\n    return dxrTimelineDateHeader;\n  }\n\n  getGroupTableWidth() {\n    return this._$sidebarTable ? getOuterWidth(this._$sidebarTable) : 0;\n  }\n\n  _getTotalRowCount(groupCount) {\n    if (this._isHorizontalGroupedWorkSpace()) {\n      return this._getRowCount();\n    } else {\n      groupCount = groupCount || 1;\n      return this._getRowCount() * groupCount;\n    }\n  }\n\n  _getFormat() {\n    return \"shorttime\";\n  }\n\n  _getWorkSpaceHeight() {\n    if (this.option(\"crossScrollingEnabled\") && hasWindow()) {\n      return getBoundingRect(this._$dateTable.get(0)).height;\n    }\n\n    return getBoundingRect(this.$element().get(0)).height;\n  }\n\n  _dateTableScrollableConfig() {\n    var config = super._dateTableScrollableConfig();\n\n    var timelineConfig = {\n      direction: HORIZONTAL\n    };\n    return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig);\n  }\n\n  _needCreateCrossScrolling() {\n    return true;\n  }\n\n  _headerScrollableConfig() {\n    var config = super._headerScrollableConfig();\n\n    return extend(config, {\n      scrollByContent: true\n    });\n  }\n\n  supportAllDayRow() {\n    return false;\n  }\n\n  _getGroupHeaderContainer() {\n    if (this._isHorizontalGroupedWorkSpace()) {\n      return this._$thead;\n    }\n\n    return this._$sidebarTable;\n  }\n\n  _insertAllDayRowsIntoDateTable() {\n    return false;\n  }\n\n  _needRenderWeekHeader() {\n    return false;\n  }\n\n  _incrementDate(date) {\n    date.setDate(date.getDate() + 1);\n  }\n\n  getIndicationCellCount() {\n    var timeDiff = this._getTimeDiff();\n\n    return this._calculateDurationInCells(timeDiff);\n  }\n\n  _getTimeDiff() {\n    var today = this._getToday();\n\n    var date = this._getIndicationFirstViewDate();\n\n    var startViewDate = this.getStartViewDate();\n    var dayLightOffset = timezoneUtils.getDaylightOffsetInMs(startViewDate, today);\n\n    if (dayLightOffset) {\n      today = new Date(today.getTime() + dayLightOffset);\n    }\n\n    return today.getTime() - date.getTime();\n  }\n\n  _calculateDurationInCells(timeDiff) {\n    var today = this._getToday();\n\n    var differenceInDays = Math.floor(timeDiff / toMs(\"day\"));\n    var duration = (timeDiff - differenceInDays * toMs(\"day\") - this.option(\"startDayHour\") * toMs(\"hour\")) / this.getCellDuration();\n\n    if (today.getHours() > this.option(\"endDayHour\")) {\n      duration = this._getCellCountInDay();\n    }\n\n    if (duration < 0) {\n      duration = 0;\n    }\n\n    return differenceInDays * this._getCellCountInDay() + duration;\n  }\n\n  getIndicationWidth() {\n    if (this.isGroupedByDate()) {\n      var cellCount = this.getIndicationCellCount();\n      var integerPart = Math.floor(cellCount);\n      var fractionPart = cellCount - integerPart;\n      return this.getCellWidth() * (integerPart * this._getGroupCount() + fractionPart);\n    } else {\n      return this.getIndicationCellCount() * this.getCellWidth();\n    }\n  }\n\n  _isVerticalShader() {\n    return false;\n  }\n\n  _isCurrentTimeHeaderCell() {\n    return false;\n  }\n\n  _setTableSizes() {\n    var minHeight = this._getWorkSpaceMinHeight();\n\n    setHeight(this._$sidebarTable, minHeight);\n    setHeight(this._$dateTable, minHeight);\n\n    super._setTableSizes();\n\n    this.virtualScrollingDispatcher.updateDimensions();\n  }\n\n  _getWorkSpaceMinHeight() {\n    var minHeight = this._getWorkSpaceHeight();\n\n    var workspaceContainerHeight = getOuterHeight(this.$element(), true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\n\n    if (minHeight < workspaceContainerHeight) {\n      minHeight = workspaceContainerHeight;\n    }\n\n    return minHeight;\n  }\n\n  _getCellCoordinatesByIndex(index) {\n    return {\n      columnIndex: index % this._getCellCount(),\n      rowIndex: 0\n    };\n  }\n\n  _getCellByCoordinates(cellCoordinates, groupIndex) {\n    var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\n\n    return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.columnIndex);\n  }\n\n  _getWorkSpaceWidth() {\n    return getOuterWidth(this._$dateTable, true);\n  }\n\n  _getIndicationFirstViewDate() {\n    return dateUtils.trimTime(new Date(this.getStartViewDate()));\n  }\n\n  _getIntervalBetween(currentDate, allDay) {\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    var firstViewDate = this.getStartViewDate();\n    var firstViewDateTime = firstViewDate.getTime();\n    var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    var apptStart = currentDate.getTime();\n    var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\n    var fullDays = Math.floor(fullInterval / toMs(\"day\"));\n    var tailDuration = fullInterval - fullDays * toMs(\"day\");\n    var tailDelta = 0;\n\n    var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\n\n    var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\n    var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\n\n    if (!allDay) {\n      if (currentDate.getHours() < startDayHour) {\n        tailDelta = tailDuration - hiddenInterval + gapBeforeAppt;\n      } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\n        tailDelta = tailDuration;\n      } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\n        tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"));\n      } else if (!fullDays) {\n        result = fullInterval;\n      }\n\n      result += tailDelta;\n    }\n\n    return result;\n  }\n\n  _getWeekendsCount() {\n    return 0;\n  }\n\n  getAllDayContainer() {\n    return null;\n  }\n\n  getTimePanelWidth() {\n    return 0;\n  }\n\n  getIntervalDuration(allDay) {\n    return this.getCellDuration();\n  }\n\n  getCellMinWidth() {\n    return 0;\n  }\n\n  getWorkSpaceLeftOffset() {\n    return 0;\n  }\n\n  scrollToTime(hours, minutes, date) {\n    var coordinates = this._getScrollCoordinates(hours, minutes, date);\n\n    var scrollable = this.getScrollable();\n    var offset = this.option(\"rtlEnabled\") ? getBoundingRect(this.getScrollableContainer().get(0)).width : 0;\n\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      setTimeout(function () {\n        scrollable.scrollBy({\n          left: coordinates.left - scrollable.scrollLeft() - offset,\n          top: 0\n        });\n      });\n    } else {\n      scrollable.scrollBy({\n        left: coordinates.left - scrollable.scrollLeft() - offset,\n        top: 0\n      });\n    }\n  }\n\n  renderRAllDayPanel() {}\n\n  renderRTimeTable() {}\n\n  _renderGroupAllDayPanel() {}\n\n  generateRenderOptions() {\n    var options = super.generateRenderOptions(true);\n    return _extends({}, options, {\n      isGenerateWeekDaysHeaderData: this._needRenderWeekHeader(),\n      getDateForHeaderText: getDateForHeaderText\n    });\n  }\n\n  _init() {\n    super._init();\n\n    this.$element().addClass(TIMELINE_CLASS);\n    this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS);\n  }\n\n  _getDefaultGroupStrategy() {\n    return \"vertical\";\n  }\n\n  _toggleGroupingDirectionClass() {\n    this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace());\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      groupOrientation: \"vertical\"\n    });\n  }\n\n  _createWorkSpaceElements() {\n    this._createWorkSpaceScrollableElements();\n  }\n\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n\n  _changeAllDayVisibility() {\n    return noop();\n  }\n\n  _getDateHeaderTemplate() {\n    return this.option(\"timeCellTemplate\");\n  }\n\n  _renderView() {\n    var groupCellTemplates;\n\n    if (!this.isRenovatedRender()) {\n      groupCellTemplates = this._renderGroupHeader();\n    }\n\n    this.renderWorkSpace();\n    this._shader = new HorizontalShader(this);\n\n    this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\n\n    if (this.isRenovatedRender() && this._isVerticalGroupedWorkSpace()) {\n      this.renderRGroupPanel();\n    }\n\n    this.updateHeaderEmptyCellWidth();\n\n    this._applyCellTemplates(groupCellTemplates);\n  }\n\n  _setHorizontalGroupHeaderCellsHeight() {\n    return noop();\n  }\n\n  _setCurrentTimeCells() {\n    var timePanelCells = this._getTimePanelCells();\n\n    var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\n\n    currentTimeCellIndices.forEach(timePanelCellIndex => {\n      timePanelCells.eq(timePanelCellIndex).addClass(HEADER_CURRENT_TIME_CELL_CLASS);\n    });\n  }\n\n  _cleanCurrentTimeCells() {\n    this.$element().find(\".\".concat(HEADER_CURRENT_TIME_CELL_CLASS)).removeClass(HEADER_CURRENT_TIME_CELL_CLASS);\n  }\n\n  _getTimePanelCells() {\n    return this.$element().find(\".\".concat(HEADER_PANEL_CELL_CLASS, \":not(.\").concat(HEADER_PANEL_WEEK_CELL_CLASS, \")\"));\n  }\n\n  _getCurrentTimePanelCellIndices() {\n    var columnCountPerGroup = this._getCellCount();\n\n    var today = this._getToday();\n\n    var index = this.getCellIndexByDate(today);\n\n    var {\n      columnIndex: currentTimeColumnIndex\n    } = this._getCellCoordinatesByIndex(index);\n\n    if (void 0 === currentTimeColumnIndex) {\n      return [];\n    }\n\n    var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? this._getGroupCount() : 1;\n    return [...new Array(horizontalGroupCount)].map((_, groupIndex) => columnCountPerGroup * groupIndex + currentTimeColumnIndex);\n  }\n\n  _renderTimePanel() {\n    return noop();\n  }\n\n  _renderAllDayPanel() {\n    return noop();\n  }\n\n  _createAllDayPanelElements() {\n    return noop();\n  }\n\n  _renderDateHeader() {\n    var $headerRow = super._renderDateHeader();\n\n    if (this._needRenderWeekHeader()) {\n      var firstViewDate = new Date(this.getStartViewDate());\n      var currentDate = new Date(firstViewDate);\n      var $cells = [];\n\n      var groupCount = this._getGroupCount();\n\n      var cellCountInDay = this._getCellCountInDay();\n\n      var colSpan = this.isGroupedByDate() ? cellCountInDay * groupCount : cellCountInDay;\n      var cellTemplate = this.option(\"dateCellTemplate\");\n      var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\n      var cellsInGroup = this.viewDataProvider.viewDataGenerator.daysInInterval * this.option(\"intervalCount\");\n      var cellsCount = cellsInGroup * horizontalGroupCount;\n\n      for (var templateIndex = 0; templateIndex < cellsCount; templateIndex++) {\n        var $th = $(\"<th>\");\n        var text = formatWeekdayAndDay(currentDate);\n\n        if (cellTemplate) {\n          var templateOptions = {\n            model: _extends({\n              text: text,\n              date: new Date(currentDate)\n            }, this._getGroupsForDateHeaderTemplate(templateIndex, colSpan)),\n            container: $th,\n            index: templateIndex\n          };\n          cellTemplate.render(templateOptions);\n        } else {\n          $th.text(text);\n        }\n\n        $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colSpan);\n        $cells.push($th);\n\n        if (templateIndex % cellsInGroup === cellsInGroup - 1) {\n          currentDate = new Date(firstViewDate);\n        } else {\n          this._incrementDate(currentDate);\n        }\n      }\n\n      var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\n      $headerRow.before($row);\n    }\n  }\n\n  _renderIndicator(height, rtlOffset, $container, groupCount) {\n    var $indicator;\n    var width = this.getIndicationWidth();\n\n    if (\"vertical\" === this.option(\"groupOrientation\")) {\n      $indicator = this._createIndicator($container);\n      setHeight($indicator, getBoundingRect($container.get(0)).height);\n      $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width);\n    } else {\n      for (var i = 0; i < groupCount; i++) {\n        var offset = this.isGroupedByDate() ? i * this.getCellWidth() : this._getCellCount() * this.getCellWidth() * i;\n        $indicator = this._createIndicator($container);\n        setHeight($indicator, getBoundingRect($container.get(0)).height);\n        $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset);\n      }\n    }\n  }\n\n  _makeGroupRows(groups, groupByDate) {\n    var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n    return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n      groupRowClass: GROUP_ROW_CLASS,\n      groupHeaderRowClass: GROUP_ROW_CLASS,\n      groupHeaderClass: this._getGroupHeaderClass.bind(this),\n      groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\n    }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate);\n  }\n\n}\n\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\nexport default SchedulerTimeline;","map":{"version":3,"names":["_extends","getOuterWidth","setHeight","getOuterHeight","$","noop","extend","getBoundingRect","registerComponent","SchedulerWorkSpace","dateUtils","tableCreatorModule","tableCreator","HorizontalShader","HEADER_CURRENT_TIME_CELL_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CONTENT_CLASS","getDateForHeaderText","timezoneUtils","dxrTimelineDateHeader","formatWeekdayAndDay","hasWindow","TIMELINE_CLASS","GROUP_TABLE_CLASS","HORIZONTAL_GROUPED_WORKSPACE_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_PANEL_WEEK_CELL_CLASS","HEADER_ROW_CLASS","HORIZONTAL","DATE_TABLE_CELL_BORDER","DATE_TABLE_HEADER_MARGIN","toMs","dateToMilliseconds","SchedulerTimeline","verticalGroupTableClass","viewDirection","renovatedHeaderPanelComponent","getGroupTableWidth","_$sidebarTable","_getTotalRowCount","groupCount","_isHorizontalGroupedWorkSpace","_getRowCount","_getFormat","_getWorkSpaceHeight","option","_$dateTable","get","height","$element","_dateTableScrollableConfig","config","timelineConfig","direction","_needCreateCrossScrolling","_headerScrollableConfig","scrollByContent","supportAllDayRow","_getGroupHeaderContainer","_$thead","_insertAllDayRowsIntoDateTable","_needRenderWeekHeader","_incrementDate","date","setDate","getDate","getIndicationCellCount","timeDiff","_getTimeDiff","_calculateDurationInCells","today","_getToday","_getIndicationFirstViewDate","startViewDate","getStartViewDate","dayLightOffset","getDaylightOffsetInMs","Date","getTime","differenceInDays","Math","floor","duration","getCellDuration","getHours","_getCellCountInDay","getIndicationWidth","isGroupedByDate","cellCount","integerPart","fractionPart","getCellWidth","_getGroupCount","_isVerticalShader","_isCurrentTimeHeaderCell","_setTableSizes","minHeight","_getWorkSpaceMinHeight","virtualScrollingDispatcher","updateDimensions","workspaceContainerHeight","getHeaderPanelHeight","_getCellCoordinatesByIndex","index","columnIndex","_getCellCount","rowIndex","_getCellByCoordinates","cellCoordinates","groupIndex","indexes","_groupedStrategy","prepareCellIndexes","find","eq","_getWorkSpaceWidth","trimTime","_getIntervalBetween","currentDate","allDay","startDayHour","endDayHour","firstViewDate","firstViewDateTime","hiddenInterval","timeZoneOffset","getTimezonesDifference","apptStart","fullInterval","fullDays","tailDuration","tailDelta","_getWeekendsCount","gapBeforeAppt","result","getAllDayContainer","getTimePanelWidth","getIntervalDuration","getCellMinWidth","getWorkSpaceLeftOffset","scrollToTime","hours","minutes","coordinates","_getScrollCoordinates","scrollable","getScrollable","offset","getScrollableContainer","width","setTimeout","scrollBy","left","scrollLeft","top","renderRAllDayPanel","renderRTimeTable","_renderGroupAllDayPanel","generateRenderOptions","options","isGenerateWeekDaysHeaderData","_init","addClass","_getDefaultGroupStrategy","_toggleGroupingDirectionClass","toggleClass","_getDefaultOptions","groupOrientation","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_toggleAllDayVisibility","_changeAllDayVisibility","_getDateHeaderTemplate","_renderView","groupCellTemplates","isRenovatedRender","_renderGroupHeader","renderWorkSpace","_shader","appendTo","_sidebarScrollable","$content","_isVerticalGroupedWorkSpace","renderRGroupPanel","updateHeaderEmptyCellWidth","_applyCellTemplates","_setHorizontalGroupHeaderCellsHeight","_setCurrentTimeCells","timePanelCells","_getTimePanelCells","currentTimeCellIndices","_getCurrentTimePanelCellIndices","forEach","timePanelCellIndex","_cleanCurrentTimeCells","concat","removeClass","columnCountPerGroup","getCellIndexByDate","currentTimeColumnIndex","horizontalGroupCount","Array","map","_","_renderTimePanel","_renderAllDayPanel","_createAllDayPanelElements","_renderDateHeader","$headerRow","$cells","cellCountInDay","colSpan","cellTemplate","cellsInGroup","viewDataProvider","viewDataGenerator","daysInInterval","cellsCount","templateIndex","$th","text","templateOptions","model","_getGroupsForDateHeaderTemplate","container","render","attr","push","$row","append","before","_renderIndicator","rtlOffset","$container","$indicator","_createIndicator","css","i","_makeGroupRows","groups","groupByDate","tableCreatorStrategy","VERTICAL","makeGroupedTable","groupRowClass","groupHeaderRowClass","groupHeaderClass","_getGroupHeaderClass","bind","groupHeaderContentClass"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.timeline.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    getOuterWidth,\r\n    setHeight,\r\n    getOuterHeight\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport HorizontalShader from \"../shaders/ui.scheduler.current_time_shader.horizontal\";\r\nimport {\r\n    HEADER_CURRENT_TIME_CELL_CLASS,\r\n    GROUP_ROW_CLASS,\r\n    GROUP_HEADER_CONTENT_CLASS\r\n} from \"../classes\";\r\nimport {\r\n    getDateForHeaderText\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/timeline_week\";\r\nimport timezoneUtils from \"../utils.timeZone\";\r\nimport dxrTimelineDateHeader from \"../../../renovation/ui/scheduler/workspaces/timeline/header_panel/layout.j\";\r\nimport {\r\n    formatWeekdayAndDay\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar HORIZONTAL = \"horizontal\";\r\nvar DATE_TABLE_CELL_BORDER = 1;\r\nvar DATE_TABLE_HEADER_MARGIN = 10;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerTimeline extends SchedulerWorkSpace {\r\n    get verticalGroupTableClass() {\r\n        return GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"horizontal\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrTimelineDateHeader\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$sidebarTable ? getOuterWidth(this._$sidebarTable) : 0\r\n    }\r\n    _getTotalRowCount(groupCount) {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._getRowCount()\r\n        } else {\r\n            groupCount = groupCount || 1;\r\n            return this._getRowCount() * groupCount\r\n        }\r\n    }\r\n    _getFormat() {\r\n        return \"shorttime\"\r\n    }\r\n    _getWorkSpaceHeight() {\r\n        if (this.option(\"crossScrollingEnabled\") && hasWindow()) {\r\n            return getBoundingRect(this._$dateTable.get(0)).height\r\n        }\r\n        return getBoundingRect(this.$element().get(0)).height\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = super._dateTableScrollableConfig();\r\n        var timelineConfig = {\r\n            direction: HORIZONTAL\r\n        };\r\n        return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig)\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return true\r\n    }\r\n    _headerScrollableConfig() {\r\n        var config = super._headerScrollableConfig();\r\n        return extend(config, {\r\n            scrollByContent: true\r\n        })\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._$thead\r\n        }\r\n        return this._$sidebarTable\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    _needRenderWeekHeader() {\r\n        return false\r\n    }\r\n    _incrementDate(date) {\r\n        date.setDate(date.getDate() + 1)\r\n    }\r\n    getIndicationCellCount() {\r\n        var timeDiff = this._getTimeDiff();\r\n        return this._calculateDurationInCells(timeDiff)\r\n    }\r\n    _getTimeDiff() {\r\n        var today = this._getToday();\r\n        var date = this._getIndicationFirstViewDate();\r\n        var startViewDate = this.getStartViewDate();\r\n        var dayLightOffset = timezoneUtils.getDaylightOffsetInMs(startViewDate, today);\r\n        if (dayLightOffset) {\r\n            today = new Date(today.getTime() + dayLightOffset)\r\n        }\r\n        return today.getTime() - date.getTime()\r\n    }\r\n    _calculateDurationInCells(timeDiff) {\r\n        var today = this._getToday();\r\n        var differenceInDays = Math.floor(timeDiff / toMs(\"day\"));\r\n        var duration = (timeDiff - differenceInDays * toMs(\"day\") - this.option(\"startDayHour\") * toMs(\"hour\")) / this.getCellDuration();\r\n        if (today.getHours() > this.option(\"endDayHour\")) {\r\n            duration = this._getCellCountInDay()\r\n        }\r\n        if (duration < 0) {\r\n            duration = 0\r\n        }\r\n        return differenceInDays * this._getCellCountInDay() + duration\r\n    }\r\n    getIndicationWidth() {\r\n        if (this.isGroupedByDate()) {\r\n            var cellCount = this.getIndicationCellCount();\r\n            var integerPart = Math.floor(cellCount);\r\n            var fractionPart = cellCount - integerPart;\r\n            return this.getCellWidth() * (integerPart * this._getGroupCount() + fractionPart)\r\n        } else {\r\n            return this.getIndicationCellCount() * this.getCellWidth()\r\n        }\r\n    }\r\n    _isVerticalShader() {\r\n        return false\r\n    }\r\n    _isCurrentTimeHeaderCell() {\r\n        return false\r\n    }\r\n    _setTableSizes() {\r\n        var minHeight = this._getWorkSpaceMinHeight();\r\n        setHeight(this._$sidebarTable, minHeight);\r\n        setHeight(this._$dateTable, minHeight);\r\n        super._setTableSizes();\r\n        this.virtualScrollingDispatcher.updateDimensions()\r\n    }\r\n    _getWorkSpaceMinHeight() {\r\n        var minHeight = this._getWorkSpaceHeight();\r\n        var workspaceContainerHeight = getOuterHeight(this.$element(), true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\r\n        if (minHeight < workspaceContainerHeight) {\r\n            minHeight = workspaceContainerHeight\r\n        }\r\n        return minHeight\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        return {\r\n            columnIndex: index % this._getCellCount(),\r\n            rowIndex: 0\r\n        }\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\r\n        return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.columnIndex)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return getOuterWidth(this._$dateTable, true)\r\n    }\r\n    _getIndicationFirstViewDate() {\r\n        return dateUtils.trimTime(new Date(this.getStartViewDate()))\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        var firstViewDate = this.getStartViewDate();\r\n        var firstViewDateTime = firstViewDate.getTime();\r\n        var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var apptStart = currentDate.getTime();\r\n        var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\r\n        var fullDays = Math.floor(fullInterval / toMs(\"day\"));\r\n        var tailDuration = fullInterval - fullDays * toMs(\"day\");\r\n        var tailDelta = 0;\r\n        var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\r\n        var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\r\n        var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\r\n        if (!allDay) {\r\n            if (currentDate.getHours() < startDayHour) {\r\n                tailDelta = tailDuration - hiddenInterval + gapBeforeAppt\r\n            } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\r\n                tailDelta = tailDuration\r\n            } else if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\r\n                tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"))\r\n            } else if (!fullDays) {\r\n                result = fullInterval\r\n            }\r\n            result += tailDelta\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    getAllDayContainer() {\r\n        return null\r\n    }\r\n    getTimePanelWidth() {\r\n        return 0\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return this.getCellDuration()\r\n    }\r\n    getCellMinWidth() {\r\n        return 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return 0\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        var offset = this.option(\"rtlEnabled\") ? getBoundingRect(this.getScrollableContainer().get(0)).width : 0;\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout((function() {\r\n                scrollable.scrollBy({\r\n                    left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                    top: 0\r\n                })\r\n            }))\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                top: 0\r\n            })\r\n        }\r\n    }\r\n    renderRAllDayPanel() {}\r\n    renderRTimeTable() {}\r\n    _renderGroupAllDayPanel() {}\r\n    generateRenderOptions() {\r\n        var options = super.generateRenderOptions(true);\r\n        return _extends({}, options, {\r\n            isGenerateWeekDaysHeaderData: this._needRenderWeekHeader(),\r\n            getDateForHeaderText: getDateForHeaderText\r\n        })\r\n    }\r\n    _init() {\r\n        super._init();\r\n        this.$element().addClass(TIMELINE_CLASS);\r\n        this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS)\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"vertical\"\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace())\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            groupOrientation: \"vertical\"\r\n        })\r\n    }\r\n    _createWorkSpaceElements() {\r\n        this._createWorkSpaceScrollableElements()\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"timeCellTemplate\")\r\n    }\r\n    _renderView() {\r\n        var groupCellTemplates;\r\n        if (!this.isRenovatedRender()) {\r\n            groupCellTemplates = this._renderGroupHeader()\r\n        }\r\n        this.renderWorkSpace();\r\n        this._shader = new HorizontalShader(this);\r\n        this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\r\n        if (this.isRenovatedRender() && this._isVerticalGroupedWorkSpace()) {\r\n            this.renderRGroupPanel()\r\n        }\r\n        this.updateHeaderEmptyCellWidth();\r\n        this._applyCellTemplates(groupCellTemplates)\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        return noop()\r\n    }\r\n    _setCurrentTimeCells() {\r\n        var timePanelCells = this._getTimePanelCells();\r\n        var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\r\n        currentTimeCellIndices.forEach(timePanelCellIndex => {\r\n            timePanelCells.eq(timePanelCellIndex).addClass(HEADER_CURRENT_TIME_CELL_CLASS)\r\n        })\r\n    }\r\n    _cleanCurrentTimeCells() {\r\n        this.$element().find(\".\".concat(HEADER_CURRENT_TIME_CELL_CLASS)).removeClass(HEADER_CURRENT_TIME_CELL_CLASS)\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(HEADER_PANEL_CELL_CLASS, \":not(.\").concat(HEADER_PANEL_WEEK_CELL_CLASS, \")\"))\r\n    }\r\n    _getCurrentTimePanelCellIndices() {\r\n        var columnCountPerGroup = this._getCellCount();\r\n        var today = this._getToday();\r\n        var index = this.getCellIndexByDate(today);\r\n        var {\r\n            columnIndex: currentTimeColumnIndex\r\n        } = this._getCellCoordinatesByIndex(index);\r\n        if (void 0 === currentTimeColumnIndex) {\r\n            return []\r\n        }\r\n        var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? this._getGroupCount() : 1;\r\n        return [...new Array(horizontalGroupCount)].map((_, groupIndex) => columnCountPerGroup * groupIndex + currentTimeColumnIndex)\r\n    }\r\n    _renderTimePanel() {\r\n        return noop()\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _createAllDayPanelElements() {\r\n        return noop()\r\n    }\r\n    _renderDateHeader() {\r\n        var $headerRow = super._renderDateHeader();\r\n        if (this._needRenderWeekHeader()) {\r\n            var firstViewDate = new Date(this.getStartViewDate());\r\n            var currentDate = new Date(firstViewDate);\r\n            var $cells = [];\r\n            var groupCount = this._getGroupCount();\r\n            var cellCountInDay = this._getCellCountInDay();\r\n            var colSpan = this.isGroupedByDate() ? cellCountInDay * groupCount : cellCountInDay;\r\n            var cellTemplate = this.option(\"dateCellTemplate\");\r\n            var horizontalGroupCount = this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate() ? groupCount : 1;\r\n            var cellsInGroup = this.viewDataProvider.viewDataGenerator.daysInInterval * this.option(\"intervalCount\");\r\n            var cellsCount = cellsInGroup * horizontalGroupCount;\r\n            for (var templateIndex = 0; templateIndex < cellsCount; templateIndex++) {\r\n                var $th = $(\"<th>\");\r\n                var text = formatWeekdayAndDay(currentDate);\r\n                if (cellTemplate) {\r\n                    var templateOptions = {\r\n                        model: _extends({\r\n                            text: text,\r\n                            date: new Date(currentDate)\r\n                        }, this._getGroupsForDateHeaderTemplate(templateIndex, colSpan)),\r\n                        container: $th,\r\n                        index: templateIndex\r\n                    };\r\n                    cellTemplate.render(templateOptions)\r\n                } else {\r\n                    $th.text(text)\r\n                }\r\n                $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colSpan);\r\n                $cells.push($th);\r\n                if (templateIndex % cellsInGroup === cellsInGroup - 1) {\r\n                    currentDate = new Date(firstViewDate)\r\n                } else {\r\n                    this._incrementDate(currentDate)\r\n                }\r\n            }\r\n            var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\r\n            $headerRow.before($row)\r\n        }\r\n    }\r\n    _renderIndicator(height, rtlOffset, $container, groupCount) {\r\n        var $indicator;\r\n        var width = this.getIndicationWidth();\r\n        if (\"vertical\" === this.option(\"groupOrientation\")) {\r\n            $indicator = this._createIndicator($container);\r\n            setHeight($indicator, getBoundingRect($container.get(0)).height);\r\n            $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width)\r\n        } else {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var offset = this.isGroupedByDate() ? i * this.getCellWidth() : this._getCellCount() * this.getCellWidth() * i;\r\n                $indicator = this._createIndicator($container);\r\n                setHeight($indicator, getBoundingRect($container.get(0)).height);\r\n                $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset)\r\n            }\r\n        }\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupRowClass: GROUP_ROW_CLASS,\r\n            groupHeaderRowClass: GROUP_ROW_CLASS,\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate)\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\r\nexport default SchedulerTimeline;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}