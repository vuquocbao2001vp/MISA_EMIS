{"ast":null,"code":"import { DxSelectBox } from 'devextreme-vue/select-box';\nimport { DxNumberBox } from 'devextreme-vue/number-box';\nimport { DxCheckBox } from 'devextreme-vue/check-box';\nimport DataSource from 'devextreme/data/data_source';\nimport { products, simpleProducts } from './data.js';\nconst productsDataSource = new DataSource({\n  store: {\n    data: simpleProducts,\n    type: 'array',\n    key: 'ID'\n  }\n});\nexport default {\n  components: {\n    DxSelectBox,\n    DxNumberBox,\n    DxCheckBox\n  },\n\n  data() {\n    return {\n      products,\n      productsDataSource,\n      editBoxValue: simpleProducts[0],\n      product: simpleProducts[0].ID,\n      searchModeOption: 'contains',\n      searchExprOption: 'Name',\n      searchTimeoutOption: 200,\n      minSearchLengthOption: 0,\n      showDataBeforeSearchOption: false,\n      searchExprItems: [{\n        name: \"'Name'\",\n        value: 'Name'\n      }, {\n        name: \"['Name', 'Category']\",\n        value: ['Name', 'Category']\n      }]\n    };\n  },\n\n  methods: {\n    customItemCreating(data) {\n      if (!data.text) {\n        data.customItem = null;\n        return;\n      }\n\n      const productIds = simpleProducts.map(item => item.ID);\n      const incrementedId = Math.max.apply(null, productIds) + 1;\n      const newItem = {\n        Name: data.text,\n        ID: incrementedId\n      };\n      data.customItem = productsDataSource.store().insert(newItem).then(() => productsDataSource.load()).then(() => newItem).catch(error => {\n        throw error;\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAoGA,SAASA,WAAT,QAA4B,2BAA5B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AAEA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,WAAzC;AAEA,MAAMC,kBAAiB,GAAI,IAAIH,UAAJ,CAAe;EACxCI,KAAK,EAAE;IACLC,IAAI,EAAEH,cADD;IAELI,IAAI,EAAE,OAFD;IAGLC,GAAG,EAAE;EAHA;AADiC,CAAf,CAA3B;AAQA,eAAe;EACbC,UAAU,EAAE;IACVX,WADU;IAEVC,WAFU;IAGVC;EAHU,CADC;;EAMbM,IAAI,GAAG;IACL,OAAO;MACLJ,QADK;MAELE,kBAFK;MAGLM,YAAY,EAAEP,cAAc,CAAC,CAAD,CAHvB;MAILQ,OAAO,EAAER,cAAc,CAAC,CAAD,CAAd,CAAkBS,EAJtB;MAKLC,gBAAgB,EAAE,UALb;MAMLC,gBAAgB,EAAE,MANb;MAOLC,mBAAmB,EAAE,GAPhB;MAQLC,qBAAqB,EAAE,CARlB;MASLC,0BAA0B,EAAE,KATvB;MAULC,eAAe,EAAE,CACf;QACEC,IAAI,EAAE,QADR;QAEEC,KAAK,EAAE;MAFT,CADe,EAKf;QACED,IAAI,EAAE,sBADR;QAEEC,KAAK,EAAE,CAAC,MAAD,EAAS,UAAT;MAFT,CALe;IAVZ,CAAP;EAqBD,CA5BY;;EA6BbC,OAAO,EAAE;IACPC,kBAAkB,CAAChB,IAAD,EAAO;MACvB,IAAI,CAACA,IAAI,CAACiB,IAAV,EAAgB;QACdjB,IAAI,CAACkB,UAAL,GAAkB,IAAlB;QACA;MACF;;MAEA,MAAMC,UAAS,GAAItB,cAAc,CAACuB,GAAf,CAAoBC,IAAD,IAAUA,IAAI,CAACf,EAAlC,CAAnB;MACA,MAAMgB,aAAY,GAAIC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBN,UAArB,IAAmC,CAAzD;MACA,MAAMO,OAAM,GAAI;QACdC,IAAI,EAAE3B,IAAI,CAACiB,IADG;QAEdX,EAAE,EAAEgB;MAFU,CAAhB;MAKAtB,IAAI,CAACkB,UAAL,GAAkBpB,kBAAiB,CAChCC,KADe,GAEf6B,MAFe,CAERF,OAFQ,EAGfG,IAHe,CAGV,MAAM/B,kBAAkB,CAACgC,IAAnB,EAHI,EAIfD,IAJe,CAIV,MAAMH,OAJI,EAKfK,KALe,CAKRC,KAAD,IAAW;QAChB,MAAMA,KAAN;MACD,CAPe,CAAlB;IAQD;;EAtBM;AA7BI,CAAf","names":["DxSelectBox","DxNumberBox","DxCheckBox","DataSource","products","simpleProducts","productsDataSource","store","data","type","key","components","editBoxValue","product","ID","searchModeOption","searchExprOption","searchTimeoutOption","minSearchLengthOption","showDataBeforeSearchOption","searchExprItems","name","value","methods","customItemCreating","text","customItem","productIds","map","item","incrementedId","Math","max","apply","newItem","Name","insert","then","load","catch","error"],"sourceRoot":"","sources":["E:\\MisaProject\\W2022_06\\misa_emis\\src\\components\\page\\OverView.vue"],"sourcesContent":["<template>\r\n  <div id=\"selectbox-demo\">\r\n    <div class=\"widget-container\">\r\n      <div class=\"dx-fieldset\">\r\n        <div class=\"dx-fieldset-header\">SearchBox</div>\r\n        <div class=\"dx-field\">\r\n          <div class=\"dx-field-label\">Product</div>\r\n          <div class=\"dx-field-value\">\r\n            <DxSelectBox\r\n              :search-enabled=\"true\"\r\n              :data-source=\"products\"\r\n              :search-mode=\"searchModeOption\"\r\n              :search-expr=\"searchExprOption\"\r\n              :search-timeout=\"searchTimeoutOption\"\r\n              :min-search-length=\"minSearchLengthOption\"\r\n              :show-data-before-search=\"showDataBeforeSearchOption\"\r\n              display-expr=\"Name\"\r\n              value-expr=\"ID\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"dx-fieldset\">\r\n        <div class=\"dx-fieldset-header\">EditBox</div>\r\n        <div class=\"dx-field\">\r\n          <div class=\"dx-field-label\">Product</div>\r\n          <div class=\"dx-field-value\">\r\n            <DxSelectBox\r\n              v-model:selectedItem=\"editBoxValue\"\r\n              :value=\"product\"\r\n              :accept-custom-value=\"true\"\r\n              :data-source=\"productsDataSource\"\r\n              display-expr=\"Name\"\r\n              value-expr=\"ID\"\r\n              @customItemCreating=\"customItemCreating($event)\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"dx-field current-product\">\r\n          Current product:\r\n          <span\r\n            v-if=\"editBoxValue\"\r\n            class=\"current-value\"\r\n          >\r\n            {{ editBoxValue.Name }} (ID: {{ editBoxValue.ID }})\r\n          </span>\r\n          <span\r\n            v-else\r\n            class=\"current-value\"\r\n          > Not selected </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"options\">\r\n      <div class=\"caption\">SearchBox Options</div>\r\n      <div class=\"option\">\r\n        <div>Search Mode</div>\r\n        <DxSelectBox\r\n          v-model:value=\"searchModeOption\"\r\n          :items=\"['contains', 'startswith']\"\r\n        />\r\n      </div>\r\n      <div class=\"option\">\r\n        <div>Search Expression</div>\r\n        <DxSelectBox\r\n          v-model:value=\"searchExprOption\"\r\n          :items=\"searchExprItems\"\r\n          display-expr=\"name\"\r\n          value-expr=\"value\"\r\n        />\r\n      </div>\r\n      <div class=\"option\">\r\n        <div>Search Timeout</div>\r\n        <DxNumberBox\r\n          v-model:value=\"searchTimeoutOption\"\r\n          :min=\"0\"\r\n          :max=\"5000\"\r\n          :show-spin-buttons=\"true\"\r\n          :step=\"100\"\r\n        />\r\n      </div>\r\n      <div class=\"option\">\r\n        <div>Minimum Search Length</div>\r\n        <DxNumberBox\r\n          v-model:value=\"minSearchLengthOption\"\r\n          :min=\"0\"\r\n          :max=\"5\"\r\n          :show-spin-buttons=\"true\"\r\n        />\r\n      </div>\r\n      <div class=\"option\">\r\n        <DxCheckBox\r\n          v-model:value=\"showDataBeforeSearchOption\"\r\n          text=\"Show Data Before Search\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { DxSelectBox } from 'devextreme-vue/select-box';\r\nimport { DxNumberBox } from 'devextreme-vue/number-box';\r\nimport { DxCheckBox } from 'devextreme-vue/check-box';\r\nimport DataSource from 'devextreme/data/data_source';\r\n\r\nimport { products, simpleProducts } from './data.js';\r\n\r\nconst productsDataSource = new DataSource({\r\n  store: {\r\n    data: simpleProducts,\r\n    type: 'array',\r\n    key: 'ID',\r\n  },\r\n});\r\n\r\nexport default {\r\n  components: {\r\n    DxSelectBox,\r\n    DxNumberBox,\r\n    DxCheckBox,\r\n  },\r\n  data() {\r\n    return {\r\n      products,\r\n      productsDataSource,\r\n      editBoxValue: simpleProducts[0],\r\n      product: simpleProducts[0].ID,\r\n      searchModeOption: 'contains',\r\n      searchExprOption: 'Name',\r\n      searchTimeoutOption: 200,\r\n      minSearchLengthOption: 0,\r\n      showDataBeforeSearchOption: false,\r\n      searchExprItems: [\r\n        {\r\n          name: \"'Name'\",\r\n          value: 'Name',\r\n        },\r\n        {\r\n          name: \"['Name', 'Category']\",\r\n          value: ['Name', 'Category'],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    customItemCreating(data) {\r\n      if (!data.text) {\r\n        data.customItem = null;\r\n        return;\r\n      }\r\n\r\n      const productIds = simpleProducts.map((item) => item.ID);\r\n      const incrementedId = Math.max.apply(null, productIds) + 1;\r\n      const newItem = {\r\n        Name: data.text,\r\n        ID: incrementedId,\r\n      };\r\n\r\n      data.customItem = productsDataSource\r\n        .store()\r\n        .insert(newItem)\r\n        .then(() => productsDataSource.load())\r\n        .then(() => newItem)\r\n        .catch((error) => {\r\n          throw error;\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.widget-container {\r\n  margin-right: 320px;\r\n}\r\n\r\n.current-product {\r\n  padding-top: 11px;\r\n}\r\n\r\n.current-value {\r\n  font-weight: bold;\r\n}\r\n\r\n.options {\r\n  padding: 20px;\r\n  background-color: rgba(191, 191, 191, 0.15);\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 260px;\r\n}\r\n\r\n.caption {\r\n  font-weight: 500;\r\n  font-size: 18px;\r\n}\r\n\r\n.option {\r\n  margin-top: 10px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}