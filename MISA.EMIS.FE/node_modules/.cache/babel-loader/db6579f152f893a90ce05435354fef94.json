{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/vector_map/projection.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { projection } from \"./projection.main\";\nvar _min = Math.min;\nvar _max = Math.max;\nvar _sin = Math.sin;\nvar _asin = Math.asin;\nvar _tan = Math.tan;\nvar _atan = Math.atan;\nvar _exp = Math.exp;\nvar _log = Math.log;\nvar PI = Math.PI;\nvar PI_DIV_4 = PI / 4;\nvar GEO_LON_BOUND = 180;\nvar GEO_LAT_BOUND = 90;\nvar RADIANS = PI / 180;\nvar MERCATOR_LAT_BOUND = (2 * _atan(_exp(PI)) - PI / 2) / RADIANS;\nvar MILLER_LAT_BOUND = (2.5 * _atan(_exp(.8 * PI)) - .625 * PI) / RADIANS;\n\nfunction clamp(value, threshold) {\n  return _max(_min(value, +threshold), -threshold);\n}\n\nprojection.add(\"mercator\", projection({\n  aspectRatio: 1,\n  to: function (coordinates) {\n    return [coordinates[0] / GEO_LON_BOUND, _log(_tan(PI_DIV_4 + clamp(coordinates[1], MERCATOR_LAT_BOUND) * RADIANS / 2)) / PI];\n  },\n  from: function (coordinates) {\n    return [coordinates[0] * GEO_LON_BOUND, (2 * _atan(_exp(coordinates[1] * PI)) - PI / 2) / RADIANS];\n  }\n}));\nprojection.add(\"equirectangular\", projection({\n  aspectRatio: 2,\n  to: function (coordinates) {\n    return [coordinates[0] / GEO_LON_BOUND, coordinates[1] / GEO_LAT_BOUND];\n  },\n  from: function (coordinates) {\n    return [coordinates[0] * GEO_LON_BOUND, coordinates[1] * GEO_LAT_BOUND];\n  }\n}));\nprojection.add(\"lambert\", projection({\n  aspectRatio: 2,\n  to: function (coordinates) {\n    return [coordinates[0] / GEO_LON_BOUND, _sin(clamp(coordinates[1], GEO_LAT_BOUND) * RADIANS)];\n  },\n  from: function (coordinates) {\n    return [coordinates[0] * GEO_LON_BOUND, _asin(clamp(coordinates[1], 1)) / RADIANS];\n  }\n}));\nprojection.add(\"miller\", projection({\n  aspectRatio: 1,\n  to: function (coordinates) {\n    return [coordinates[0] / GEO_LON_BOUND, 1.25 * _log(_tan(PI_DIV_4 + clamp(coordinates[1], MILLER_LAT_BOUND) * RADIANS * .4)) / PI];\n  },\n  from: function (coordinates) {\n    return [coordinates[0] * GEO_LON_BOUND, (2.5 * _atan(_exp(.8 * coordinates[1] * PI)) - .625 * PI) / RADIANS];\n  }\n}));\nexport { projection };","map":{"version":3,"names":["projection","_min","Math","min","_max","max","_sin","sin","_asin","asin","_tan","tan","_atan","atan","_exp","exp","_log","log","PI","PI_DIV_4","GEO_LON_BOUND","GEO_LAT_BOUND","RADIANS","MERCATOR_LAT_BOUND","MILLER_LAT_BOUND","clamp","value","threshold","add","aspectRatio","to","coordinates","from"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/viz/vector_map/projection.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/viz/vector_map/projection.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    projection\r\n} from \"./projection.main\";\r\nvar _min = Math.min;\r\nvar _max = Math.max;\r\nvar _sin = Math.sin;\r\nvar _asin = Math.asin;\r\nvar _tan = Math.tan;\r\nvar _atan = Math.atan;\r\nvar _exp = Math.exp;\r\nvar _log = Math.log;\r\nvar PI = Math.PI;\r\nvar PI_DIV_4 = PI / 4;\r\nvar GEO_LON_BOUND = 180;\r\nvar GEO_LAT_BOUND = 90;\r\nvar RADIANS = PI / 180;\r\nvar MERCATOR_LAT_BOUND = (2 * _atan(_exp(PI)) - PI / 2) / RADIANS;\r\nvar MILLER_LAT_BOUND = (2.5 * _atan(_exp(.8 * PI)) - .625 * PI) / RADIANS;\r\n\r\nfunction clamp(value, threshold) {\r\n    return _max(_min(value, +threshold), -threshold)\r\n}\r\nprojection.add(\"mercator\", projection({\r\n    aspectRatio: 1,\r\n    to: function(coordinates) {\r\n        return [coordinates[0] / GEO_LON_BOUND, _log(_tan(PI_DIV_4 + clamp(coordinates[1], MERCATOR_LAT_BOUND) * RADIANS / 2)) / PI]\r\n    },\r\n    from: function(coordinates) {\r\n        return [coordinates[0] * GEO_LON_BOUND, (2 * _atan(_exp(coordinates[1] * PI)) - PI / 2) / RADIANS]\r\n    }\r\n}));\r\nprojection.add(\"equirectangular\", projection({\r\n    aspectRatio: 2,\r\n    to: function(coordinates) {\r\n        return [coordinates[0] / GEO_LON_BOUND, coordinates[1] / GEO_LAT_BOUND]\r\n    },\r\n    from: function(coordinates) {\r\n        return [coordinates[0] * GEO_LON_BOUND, coordinates[1] * GEO_LAT_BOUND]\r\n    }\r\n}));\r\nprojection.add(\"lambert\", projection({\r\n    aspectRatio: 2,\r\n    to: function(coordinates) {\r\n        return [coordinates[0] / GEO_LON_BOUND, _sin(clamp(coordinates[1], GEO_LAT_BOUND) * RADIANS)]\r\n    },\r\n    from: function(coordinates) {\r\n        return [coordinates[0] * GEO_LON_BOUND, _asin(clamp(coordinates[1], 1)) / RADIANS]\r\n    }\r\n}));\r\nprojection.add(\"miller\", projection({\r\n    aspectRatio: 1,\r\n    to: function(coordinates) {\r\n        return [coordinates[0] / GEO_LON_BOUND, 1.25 * _log(_tan(PI_DIV_4 + clamp(coordinates[1], MILLER_LAT_BOUND) * RADIANS * .4)) / PI]\r\n    },\r\n    from: function(coordinates) {\r\n        return [coordinates[0] * GEO_LON_BOUND, (2.5 * _atan(_exp(.8 * coordinates[1] * PI)) - .625 * PI) / RADIANS]\r\n    }\r\n}));\r\nexport {\r\n    projection\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,UADJ,QAEO,mBAFP;AAGA,IAAIC,IAAI,GAAGC,IAAI,CAACC,GAAhB;AACA,IAAIC,IAAI,GAAGF,IAAI,CAACG,GAAhB;AACA,IAAIC,IAAI,GAAGJ,IAAI,CAACK,GAAhB;AACA,IAAIC,KAAK,GAAGN,IAAI,CAACO,IAAjB;AACA,IAAIC,IAAI,GAAGR,IAAI,CAACS,GAAhB;AACA,IAAIC,KAAK,GAAGV,IAAI,CAACW,IAAjB;AACA,IAAIC,IAAI,GAAGZ,IAAI,CAACa,GAAhB;AACA,IAAIC,IAAI,GAAGd,IAAI,CAACe,GAAhB;AACA,IAAIC,EAAE,GAAGhB,IAAI,CAACgB,EAAd;AACA,IAAIC,QAAQ,GAAGD,EAAE,GAAG,CAApB;AACA,IAAIE,aAAa,GAAG,GAApB;AACA,IAAIC,aAAa,GAAG,EAApB;AACA,IAAIC,OAAO,GAAGJ,EAAE,GAAG,GAAnB;AACA,IAAIK,kBAAkB,GAAG,CAAC,IAAIX,KAAK,CAACE,IAAI,CAACI,EAAD,CAAL,CAAT,GAAsBA,EAAE,GAAG,CAA5B,IAAiCI,OAA1D;AACA,IAAIE,gBAAgB,GAAG,CAAC,MAAMZ,KAAK,CAACE,IAAI,CAAC,KAAKI,EAAN,CAAL,CAAX,GAA6B,OAAOA,EAArC,IAA2CI,OAAlE;;AAEA,SAASG,KAAT,CAAeC,KAAf,EAAsBC,SAAtB,EAAiC;EAC7B,OAAOvB,IAAI,CAACH,IAAI,CAACyB,KAAD,EAAQ,CAACC,SAAT,CAAL,EAA0B,CAACA,SAA3B,CAAX;AACH;;AACD3B,UAAU,CAAC4B,GAAX,CAAe,UAAf,EAA2B5B,UAAU,CAAC;EAClC6B,WAAW,EAAE,CADqB;EAElCC,EAAE,EAAE,UAASC,WAAT,EAAsB;IACtB,OAAO,CAACA,WAAW,CAAC,CAAD,CAAX,GAAiBX,aAAlB,EAAiCJ,IAAI,CAACN,IAAI,CAACS,QAAQ,GAAGM,KAAK,CAACM,WAAW,CAAC,CAAD,CAAZ,EAAiBR,kBAAjB,CAAL,GAA4CD,OAA5C,GAAsD,CAAlE,CAAL,CAAJ,GAAiFJ,EAAlH,CAAP;EACH,CAJiC;EAKlCc,IAAI,EAAE,UAASD,WAAT,EAAsB;IACxB,OAAO,CAACA,WAAW,CAAC,CAAD,CAAX,GAAiBX,aAAlB,EAAiC,CAAC,IAAIR,KAAK,CAACE,IAAI,CAACiB,WAAW,CAAC,CAAD,CAAX,GAAiBb,EAAlB,CAAL,CAAT,GAAuCA,EAAE,GAAG,CAA7C,IAAkDI,OAAnF,CAAP;EACH;AAPiC,CAAD,CAArC;AASAtB,UAAU,CAAC4B,GAAX,CAAe,iBAAf,EAAkC5B,UAAU,CAAC;EACzC6B,WAAW,EAAE,CAD4B;EAEzCC,EAAE,EAAE,UAASC,WAAT,EAAsB;IACtB,OAAO,CAACA,WAAW,CAAC,CAAD,CAAX,GAAiBX,aAAlB,EAAiCW,WAAW,CAAC,CAAD,CAAX,GAAiBV,aAAlD,CAAP;EACH,CAJwC;EAKzCW,IAAI,EAAE,UAASD,WAAT,EAAsB;IACxB,OAAO,CAACA,WAAW,CAAC,CAAD,CAAX,GAAiBX,aAAlB,EAAiCW,WAAW,CAAC,CAAD,CAAX,GAAiBV,aAAlD,CAAP;EACH;AAPwC,CAAD,CAA5C;AASArB,UAAU,CAAC4B,GAAX,CAAe,SAAf,EAA0B5B,UAAU,CAAC;EACjC6B,WAAW,EAAE,CADoB;EAEjCC,EAAE,EAAE,UAASC,WAAT,EAAsB;IACtB,OAAO,CAACA,WAAW,CAAC,CAAD,CAAX,GAAiBX,aAAlB,EAAiCd,IAAI,CAACmB,KAAK,CAACM,WAAW,CAAC,CAAD,CAAZ,EAAiBV,aAAjB,CAAL,GAAuCC,OAAxC,CAArC,CAAP;EACH,CAJgC;EAKjCU,IAAI,EAAE,UAASD,WAAT,EAAsB;IACxB,OAAO,CAACA,WAAW,CAAC,CAAD,CAAX,GAAiBX,aAAlB,EAAiCZ,KAAK,CAACiB,KAAK,CAACM,WAAW,CAAC,CAAD,CAAZ,EAAiB,CAAjB,CAAN,CAAL,GAAkCT,OAAnE,CAAP;EACH;AAPgC,CAAD,CAApC;AASAtB,UAAU,CAAC4B,GAAX,CAAe,QAAf,EAAyB5B,UAAU,CAAC;EAChC6B,WAAW,EAAE,CADmB;EAEhCC,EAAE,EAAE,UAASC,WAAT,EAAsB;IACtB,OAAO,CAACA,WAAW,CAAC,CAAD,CAAX,GAAiBX,aAAlB,EAAiC,OAAOJ,IAAI,CAACN,IAAI,CAACS,QAAQ,GAAGM,KAAK,CAACM,WAAW,CAAC,CAAD,CAAZ,EAAiBP,gBAAjB,CAAL,GAA0CF,OAA1C,GAAoD,EAAhE,CAAL,CAAX,GAAuFJ,EAAxH,CAAP;EACH,CAJ+B;EAKhCc,IAAI,EAAE,UAASD,WAAT,EAAsB;IACxB,OAAO,CAACA,WAAW,CAAC,CAAD,CAAX,GAAiBX,aAAlB,EAAiC,CAAC,MAAMR,KAAK,CAACE,IAAI,CAAC,KAAKiB,WAAW,CAAC,CAAD,CAAhB,GAAsBb,EAAvB,CAAL,CAAX,GAA8C,OAAOA,EAAtD,IAA4DI,OAA7F,CAAP;EACH;AAP+B,CAAD,CAAnC;AASA,SACItB,UADJ"},"metadata":{},"sourceType":"module"}