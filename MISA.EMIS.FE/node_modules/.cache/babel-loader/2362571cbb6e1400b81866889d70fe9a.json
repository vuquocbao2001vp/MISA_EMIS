{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/tableResizing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterWidth, getOuterHeight, getHeight } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport _windowResizeCallbacks from \"../../../core/utils/resize_callbacks\";\nimport { move } from \"../../../animation/translator\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport BaseModule from \"./base\";\nimport Draggable from \"../../draggable\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { setLineElementsFormat, getLineElements, getAutoSizedElements, getColumnElements, unfixTableWidth } from \"../utils/table_helper\";\nvar DX_COLUMN_RESIZE_FRAME_CLASS = \"dx-table-resize-frame\";\nvar DX_COLUMN_RESIZER_CLASS = \"dx-htmleditor-column-resizer\";\nvar DX_ROW_RESIZER_CLASS = \"dx-htmleditor-row-resizer\";\nvar DEFAULTS = {\n  minColumnWidth: 40,\n  minRowHeight: 24\n};\nvar DRAGGABLE_ELEMENT_OFFSET = 2;\nvar ROUGH_OFFSET = 3;\nvar MODULE_NAMESPACE = \"dxHtmlTableResizingModule\";\nvar POINTERDOWN_EVENT = addNamespace(\"dxpointerdown\", MODULE_NAMESPACE);\nvar SCROLL_EVENT = addNamespace(\"scroll\", MODULE_NAMESPACE);\nexport default class TableResizingModule extends BaseModule {\n  constructor(quill, options) {\n    super(quill, options);\n    this.enabled = !!options.enabled;\n    this._tableResizeFrames = [];\n    this._minColumnWidth = this._minSizeLimit(\"minColumnWidth\", options.minColumnWidth);\n    this._minRowHeight = this._minSizeLimit(\"minRowHeight\", options.minRowHeight);\n    this._quillContainer = this.editorInstance._getQuillContainer();\n    this._tableData = [];\n\n    if (this.enabled) {\n      this._applyResizing();\n    }\n  }\n\n  _applyResizing(forcedStart) {\n    if (forcedStart) {\n      this._applyResizingImpl();\n    } else {\n      this.editorInstance.addContentInitializedCallback(this._applyResizingImpl.bind(this));\n    }\n\n    this.addCleanCallback(this.clean.bind(this));\n    this._resizeHandlerWithContext = _windowResizeCallbacks.add(this._resizeHandler.bind(this));\n  }\n\n  _minSizeLimit(propertyName, newValue) {\n    return isDefined(newValue) ? Math.max(newValue, 0) : DEFAULTS[propertyName];\n  }\n\n  _applyResizingImpl() {\n    var $tables = this._findTables();\n\n    if ($tables.length) {\n      this._fixTablesWidths($tables);\n\n      this._createResizeFrames($tables);\n\n      this._updateFramesPositions();\n\n      this._updateFramesSeparators();\n    }\n\n    this._attachEvents();\n  }\n\n  _attachEvents() {\n    eventsEngine.on(this.editorInstance._getContent(), SCROLL_EVENT, this._updateFramesPositions.bind(this));\n    this.quill.on(\"text-change\", this._getQuillTextChangeHandler());\n  }\n\n  _detachEvents() {\n    eventsEngine.off(this.editorInstance._getContent(), MODULE_NAMESPACE);\n    this.quill.off(\"text-change\", this._quillTextChangeHandler);\n  }\n\n  _getQuillTextChangeHandler(delta, oldContent, source) {\n    return (delta, oldContent, source) => {\n      if (this._isTableChanging()) {\n        var $tables = this._findTables();\n\n        this._removeResizeFrames();\n\n        if (\"api\" === source) {\n          this._fixTablesWidths($tables);\n        }\n\n        this._updateTablesColumnsWidth($tables);\n\n        this._createResizeFrames($tables);\n\n        this._updateFramesPositions();\n\n        this._updateFramesSeparators();\n      } else {\n        this._updateFramesPositions();\n\n        if (!this._isDragging) {\n          this._updateFramesSeparators();\n        }\n      }\n    };\n  }\n\n  _getFrameForTable($table) {\n    var _this$_framesForTable;\n\n    return null === (_this$_framesForTable = this._framesForTables) || void 0 === _this$_framesForTable ? void 0 : _this$_framesForTable.get($table.get(0));\n  }\n\n  _resizeHandler() {\n    this._windowResizeTimeout = setTimeout(() => {\n      var $tables = this._findTables();\n\n      each($tables, (index, table) => {\n        var $table = $(table);\n        var frame = this._tableResizeFrames[index];\n        var actualTableWidth = getOuterWidth($table);\n\n        var lastTableWidth = this._tableLastWidth(frame);\n\n        if (Math.abs(actualTableWidth - lastTableWidth) > 1) {\n          this._tableLastWidth(frame, actualTableWidth);\n\n          this._updateColumnsWidth($table, index);\n        }\n      });\n\n      this._updateFramesPositions();\n\n      this._updateFramesSeparators();\n    });\n  }\n\n  _findTables() {\n    return $(this._quillContainer).find(\"table\");\n  }\n\n  _getWidthStyleValue($element) {\n    var styleValue = $element[0].style.width;\n    return \"\" !== styleValue ? parseInt(styleValue) : void 0;\n  }\n\n  _tableLastWidth(frame, newValue) {\n    if (isDefined(newValue)) {\n      frame.lastWidth = newValue;\n    } else {\n      return null === frame || void 0 === frame ? void 0 : frame.lastWidth;\n    }\n  }\n\n  _fixTablesWidths($tables) {\n    each($tables, (index, table) => {\n      var $table = $(table);\n\n      var $columnElements = this._getTableDeterminantElements($table, \"horizontal\");\n\n      if (!this._tableResizeFrames[index]) {\n        this._tableResizeFrames[index] = {\n          lastWidth: void 0\n        };\n      }\n\n      var frame = this._getFrameForTable($table);\n\n      if (!frame) {\n        this._tableResizeFrames.push({\n          $table: $table\n        });\n      }\n\n      if (0 === getAutoSizedElements($table).length) {\n        var _this$_tableLastWidth;\n\n        var {\n          columnsSum: columnsSum\n        } = this._getColumnElementsSum($columnElements);\n\n        unfixTableWidth($table, {\n          quill: this.quill\n        });\n        var tableWidth = null !== (_this$_tableLastWidth = this._tableLastWidth(frame)) && void 0 !== _this$_tableLastWidth ? _this$_tableLastWidth : getOuterWidth($table);\n\n        if (frame) {\n          this._tableLastWidth(frame, Math.max(columnsSum, tableWidth));\n        }\n      }\n    });\n  }\n\n  _createResizeFrames($tables) {\n    this._framesForTables = new Map();\n    $tables.each((index, table) => {\n      var _this$_tableResizeFra;\n\n      var $table = $(table);\n      var $lastTable = null === (_this$_tableResizeFra = this._tableResizeFrames[index]) || void 0 === _this$_tableResizeFra ? void 0 : _this$_tableResizeFra.$table;\n      var $tableLastWidth = this._tableResizeFrames[index].lastWidth;\n      this._tableResizeFrames[index] = {\n        $frame: this._createTableResizeFrame(table),\n        $table: $table,\n        index: index,\n        lastWidth: $lastTable && table === $lastTable.get(0) ? $tableLastWidth : void 0,\n        columnsCount: this._getTableDeterminantElements($table, \"horizontal\").length,\n        rowsCount: this._getTableDeterminantElements($table, \"vertical\").length\n      };\n\n      this._framesForTables.set(table, this._tableResizeFrames[index]);\n    });\n    this._tableResizeFrames.length = $tables.length;\n  }\n\n  _isTableChanging() {\n    var $tables = this._findTables();\n\n    var result = false;\n\n    if ($tables.length !== this._tableResizeFrames.length) {\n      result = true;\n    } else {\n      each($tables, (index, table) => {\n        var $table = $(table);\n        var frame = this._tableResizeFrames[index];\n\n        var isColumnsCountChanged = (null === frame || void 0 === frame ? void 0 : frame.columnsCount) !== this._getTableDeterminantElements($table, \"horizontal\").length;\n\n        var isRowCountChanged = (null === frame || void 0 === frame ? void 0 : frame.rowsCount) !== this._getTableDeterminantElements($table, \"vertical\").length;\n\n        if (isColumnsCountChanged || isRowCountChanged) {\n          result = true;\n          return false;\n        }\n      });\n    }\n\n    return result;\n  }\n\n  _removeResizeFrames(clearArray) {\n    var _this$_framesForTable2;\n\n    each(this._tableResizeFrames, (index, resizeFrame) => {\n      if (resizeFrame.$frame) {\n        var _resizeFrame$$frame;\n\n        var resizerElementsSelector = \".\".concat(DX_COLUMN_RESIZER_CLASS, \", .\").concat(DX_ROW_RESIZER_CLASS);\n\n        this._detachSeparatorEvents(null === (_resizeFrame$$frame = resizeFrame.$frame) || void 0 === _resizeFrame$$frame ? void 0 : _resizeFrame$$frame.find(resizerElementsSelector));\n\n        resizeFrame.$frame.remove();\n      }\n    });\n    null === (_this$_framesForTable2 = this._framesForTables) || void 0 === _this$_framesForTable2 ? void 0 : _this$_framesForTable2.clear();\n\n    if (clearArray) {\n      this._tableResizeFrames = [];\n    }\n  }\n\n  _detachSeparatorEvents($lineSeparators) {\n    $lineSeparators.each((i, $lineSeparator) => {\n      eventsEngine.off($lineSeparator, POINTERDOWN_EVENT);\n    });\n  }\n\n  _createTableResizeFrame() {\n    return $(\"<div>\").addClass(DX_COLUMN_RESIZE_FRAME_CLASS).appendTo(this._quillContainer);\n  }\n\n  _updateFramesPositions() {\n    each(this._tableResizeFrames, (index, tableResizeFrame) => {\n      this._updateFramePosition(tableResizeFrame.$table, tableResizeFrame.$frame);\n    });\n  }\n\n  _updateFramePosition($table, $frame) {\n    var {\n      height: height,\n      width: width,\n      top: targetTop,\n      left: targetLeft\n    } = getBoundingRect($table.get(0));\n    var {\n      top: containerTop,\n      left: containerLeft\n    } = getBoundingRect(this.quill.root);\n    $frame.css({\n      height: height,\n      width: width,\n      top: targetTop - containerTop,\n      left: targetLeft - containerLeft\n    });\n    move($frame, {\n      left: 0,\n      top: 0\n    });\n  }\n\n  _updateFramesSeparators(direction) {\n    each(this._tableResizeFrames, (index, frame) => {\n      if (direction) {\n        this._updateFrameSeparators(frame, direction);\n      } else {\n        this._updateFrameSeparators(frame, \"vertical\");\n\n        this._updateFrameSeparators(frame, \"horizontal\");\n      }\n    });\n  }\n\n  _isDraggable($element) {\n    return $element.hasClass(\"dx-draggable\") && $element.is(\":visible\");\n  }\n\n  _removeDraggable($currentLineSeparator, lineResizerClass) {\n    if (this._isDraggable($currentLineSeparator)) {\n      var draggable = $($currentLineSeparator).dxDraggable(\"instance\");\n      draggable.dispose();\n      $($currentLineSeparator).addClass(lineResizerClass);\n    }\n  }\n\n  _getDirectionInfo(direction) {\n    if (\"vertical\" === direction) {\n      return {\n        lineResizerClass: DX_ROW_RESIZER_CLASS,\n        sizeFunction: x => getOuterHeight(x),\n        positionCoordinate: \"top\",\n        positionStyleProperty: \"height\",\n        positionCoordinateName: \"y\"\n      };\n    } else {\n      return {\n        lineResizerClass: DX_COLUMN_RESIZER_CLASS,\n        sizeFunction: x => getOuterWidth(x),\n        positionCoordinate: this.editorInstance.option(\"rtlEnabled\") ? \"right\" : \"left\",\n        positionStyleProperty: \"width\",\n        positionCoordinateName: \"x\"\n      };\n    }\n  }\n\n  _getSize($element, directionInfo) {\n    return directionInfo.sizeFunction($element);\n  }\n\n  _updateFrameSeparators(frame, direction) {\n    var $determinantElements = this._getTableDeterminantElements(frame.$table, direction);\n\n    var determinantElementsCount = $determinantElements.length;\n    var determinantElementsSeparatorsCount = determinantElementsCount - 1;\n\n    var directionInfo = this._getDirectionInfo(direction);\n\n    var lineSeparators = frame.$frame.find(\".\".concat(directionInfo.lineResizerClass));\n    var styleOptions = {\n      transform: \"none\"\n    };\n    var currentPosition = 0;\n\n    for (var i = 0; i <= determinantElementsSeparatorsCount; i++) {\n      currentPosition += this._getSize($determinantElements.eq(i), directionInfo);\n\n      if (!isDefined(lineSeparators[i])) {\n        lineSeparators[i] = $(\"<div>\").addClass(directionInfo.lineResizerClass).appendTo(frame.$frame).get(0);\n      }\n\n      var $currentLineSeparator = $(lineSeparators[i]);\n\n      this._removeDraggable($currentLineSeparator, directionInfo.lineResizerClass);\n\n      styleOptions[directionInfo.positionCoordinate] = currentPosition - DRAGGABLE_ELEMENT_OFFSET;\n      $($currentLineSeparator).css(styleOptions);\n      var attachSeparatorData = {\n        lineSeparator: lineSeparators[i],\n        index: i,\n        $determinantElements: $determinantElements,\n        frame: frame,\n        direction: direction\n      };\n\n      this._attachColumnSeparatorEvents(attachSeparatorData);\n    }\n  }\n\n  _getTableDeterminantElements($table, direction) {\n    if (\"vertical\" === direction) {\n      return $table.find(\"th:first-child, td:first-child\");\n    } else {\n      return getColumnElements($table);\n    }\n  }\n\n  _attachColumnSeparatorEvents(options) {\n    eventsEngine.on(options.lineSeparator, POINTERDOWN_EVENT, () => {\n      this._createDraggableElement(options);\n    });\n  }\n\n  _dragStartHandler(_ref) {\n    var {\n      $determinantElements: $determinantElements,\n      index: index,\n      frame: frame,\n      direction: direction,\n      lineSeparator: lineSeparator\n    } = _ref;\n\n    var directionInfo = this._getDirectionInfo(direction);\n\n    this._isDragging = true;\n\n    this._fixColumnsWidth(frame.$table);\n\n    this._startLineSize = parseInt(this._getSize($($determinantElements[index]), directionInfo));\n    this._startTableWidth = getOuterWidth(frame.$table);\n    this._startLineSeparatorPosition = parseInt($(lineSeparator).css(directionInfo.positionCoordinate));\n    this._nextLineSize = 0;\n\n    if ($determinantElements[index + 1]) {\n      this._nextLineSize = parseInt(this._getSize($($determinantElements[index + 1]), directionInfo));\n    } else if (\"horizontal\" === direction) {\n      unfixTableWidth(frame.$table, {\n        quill: this.quill\n      });\n    }\n  }\n\n  _shouldRevertOffset(direction) {\n    return \"horizontal\" === direction && this.editorInstance.option(\"rtlEnabled\");\n  }\n\n  _isNextColumnWidthEnough(nextColumnNewSize, $nextColumnElement, eventOffset) {\n    if (!this._nextLineSize) {\n      return true;\n    } else if (nextColumnNewSize >= this._minColumnWidth) {\n      var isWidthIncreased = this._nextColumnOffsetLimit ? eventOffset < this._nextColumnOffsetLimit : eventOffset < 0;\n      var isWidthLimited = Math.abs(this._getWidthStyleValue($nextColumnElement) - getOuterWidth($nextColumnElement)) > ROUGH_OFFSET;\n      return isWidthIncreased || !isWidthLimited;\n    }\n\n    return false;\n  }\n\n  _shouldSetNextColumnWidth(nextColumnNewSize) {\n    return this._nextLineSize && nextColumnNewSize > 0;\n  }\n\n  _horizontalDragHandler(_ref2) {\n    var {\n      currentLineNewSize: currentLineNewSize,\n      directionInfo: directionInfo,\n      eventOffset: eventOffset,\n      $determinantElements: $determinantElements,\n      index: index,\n      frame: frame\n    } = _ref2;\n    var nextColumnNewSize = this._nextLineSize && this._nextLineSize - eventOffset;\n    var isCurrentColumnWidthEnough = currentLineNewSize >= this._minColumnWidth;\n    var $lineElements = getLineElements(frame.$table, index);\n    var $nextLineElements = getLineElements(frame.$table, index + 1);\n    var realWidthDiff = getOuterWidth($lineElements.eq(0)) - currentLineNewSize;\n\n    if (isCurrentColumnWidthEnough) {\n      if (this._isNextColumnWidthEnough(nextColumnNewSize, $determinantElements.eq(index + 1), eventOffset)) {\n        setLineElementsFormat(this, {\n          elements: $lineElements,\n          property: directionInfo.positionStyleProperty,\n          value: currentLineNewSize\n        });\n\n        if (this._shouldSetNextColumnWidth(nextColumnNewSize)) {\n          setLineElementsFormat(this, {\n            elements: $nextLineElements,\n            property: directionInfo.positionStyleProperty,\n            value: nextColumnNewSize\n          });\n        }\n\n        var isTableWidthChanged = Math.abs(this._startTableWidth - getOuterWidth(frame.$table)) < ROUGH_OFFSET;\n        var shouldRevertNewValue = Math.abs(realWidthDiff) > ROUGH_OFFSET || !this._nextLineSize && isTableWidthChanged;\n\n        if (shouldRevertNewValue) {\n          setLineElementsFormat(this, {\n            elements: $lineElements,\n            property: directionInfo.positionStyleProperty,\n            value: getOuterWidth($lineElements.eq(0))\n          });\n          nextColumnNewSize += currentLineNewSize - getOuterWidth($lineElements.eq(0));\n\n          if (this._shouldSetNextColumnWidth(nextColumnNewSize)) {\n            setLineElementsFormat(this, {\n              elements: $nextLineElements,\n              property: directionInfo.positionStyleProperty,\n              value: nextColumnNewSize\n            });\n          }\n        }\n      } else {\n        this._nextColumnOffsetLimit = this._nextColumnOffsetLimit || eventOffset;\n      }\n    }\n\n    this._$highlightedElement.css(directionInfo.positionCoordinate, this._startLineSeparatorPosition + eventOffset + realWidthDiff + \"px\");\n  }\n\n  _verticalDragHandler(_ref3) {\n    var {\n      currentLineNewSize: currentLineNewSize,\n      directionInfo: directionInfo,\n      eventOffset: eventOffset,\n      $determinantElements: $determinantElements,\n      index: index,\n      frame: frame\n    } = _ref3;\n    var newHeight = Math.max(currentLineNewSize, this._minRowHeight);\n    var $lineElements = getLineElements(frame.$table, index, \"vertical\");\n    setLineElementsFormat(this, {\n      elements: $lineElements,\n      property: directionInfo.positionStyleProperty,\n      value: newHeight\n    });\n    var rowHeightDiff = getOuterHeight($determinantElements.eq(index)) - currentLineNewSize;\n\n    this._$highlightedElement.css(directionInfo.positionCoordinate, this._startLineSeparatorPosition + eventOffset + rowHeightDiff + \"px\");\n  }\n\n  _dragMoveHandler(event, _ref4) {\n    var {\n      $determinantElements: $determinantElements,\n      index: index,\n      frame: frame,\n      direction: direction\n    } = _ref4;\n\n    var directionInfo = this._getDirectionInfo(direction);\n\n    var eventOffset = event.offset[directionInfo.positionCoordinateName];\n\n    this.editorInstance._saveValueChangeEvent(event);\n\n    if (this._shouldRevertOffset(direction)) {\n      eventOffset = -eventOffset;\n    }\n\n    var currentLineNewSize = this._startLineSize + eventOffset;\n\n    if (\"horizontal\" === direction) {\n      this._horizontalDragHandler({\n        currentLineNewSize: currentLineNewSize,\n        directionInfo: directionInfo,\n        eventOffset: eventOffset,\n        $determinantElements: $determinantElements,\n        index: index,\n        frame: frame\n      });\n    } else {\n      this._verticalDragHandler({\n        currentLineNewSize: currentLineNewSize,\n        directionInfo: directionInfo,\n        eventOffset: eventOffset,\n        $determinantElements: $determinantElements,\n        index: index,\n        frame: frame\n      });\n    }\n\n    this._updateFramePosition(frame.$table, frame.$frame);\n  }\n\n  _dragEndHandler(options) {\n    var _this$_$highlightedEl;\n\n    null === (_this$_$highlightedEl = this._$highlightedElement) || void 0 === _this$_$highlightedEl ? void 0 : _this$_$highlightedEl.remove();\n    this._isDragging = void 0;\n    this._nextColumnOffsetLimit = void 0;\n\n    this._tableLastWidth(options.frame, getOuterWidth(options.frame.$table));\n\n    this._updateFramesPositions();\n\n    this._updateFramesSeparators();\n  }\n\n  _isLastColumnResizing(_ref5) {\n    var {\n      $determinantElements: $determinantElements,\n      index: index\n    } = _ref5;\n    return !isDefined($determinantElements[index + 1]);\n  }\n\n  _getBoundaryConfig(options) {\n    var result = {};\n\n    if (\"vertical\" === options.direction) {\n      result.boundary = options.frame.$table;\n      result.boundOffset = {\n        bottom: hasWindow() ? -getHeight(getWindow()) : -getOuterHeight(this._quillContainer),\n        top: 0,\n        left: 0,\n        right: 0\n      };\n    } else if (!this._isLastColumnResizing(options)) {\n      result.boundary = options.frame.$table;\n    } else {\n      var $content = this.editorInstance._getContent();\n\n      result.boundary = $content;\n      result.boundOffset = {\n        bottom: 0,\n        top: 0,\n        left: $content.css(\"paddingLeft\"),\n        right: $content.css(\"paddingRight\")\n      };\n    }\n\n    return result;\n  }\n\n  _createDraggableElement(options) {\n    var _this$_$highlightedEl2;\n\n    var boundaryConfig = this._getBoundaryConfig(options);\n\n    var directionClass = \"vertical\" === options.direction ? \"dx-htmleditor-highlighted-row\" : \"dx-htmleditor-highlighted-column\";\n    null === (_this$_$highlightedEl2 = this._$highlightedElement) || void 0 === _this$_$highlightedEl2 ? void 0 : _this$_$highlightedEl2.remove();\n    this._$highlightedElement = $(\"<div>\").addClass(\"\".concat(directionClass)).insertAfter($(options.lineSeparator));\n    var config = {\n      contentTemplate: null,\n      allowMoveByClick: false,\n      dragDirection: options.direction,\n      onDragMove: _ref6 => {\n        var {\n          component: component,\n          event: event\n        } = _ref6;\n\n        this._dragMoveHandler(event, options);\n      },\n      onDragStart: () => {\n        this._dragStartHandler(options);\n      },\n      onDragEnd: () => {\n        this._dragEndHandler(options);\n      }\n    };\n    extend(config, boundaryConfig);\n    this._currentDraggableElement = this.editorInstance._createComponent(options.lineSeparator, Draggable, config);\n  }\n\n  _fixColumnsWidth($table) {\n    var determinantElements = this._getTableDeterminantElements($table);\n\n    each(determinantElements, (index, element) => {\n      var columnWidth = getOuterWidth(element);\n      var $lineElements = getLineElements($table, index);\n      setLineElementsFormat(this, {\n        elements: $lineElements,\n        property: \"width\",\n        value: Math.max(columnWidth, this._minColumnWidth)\n      });\n    });\n  }\n\n  _getColumnElementsSum(columnElements) {\n    var columnsWidths = [];\n    var columnsSum = 0;\n    each(columnElements, (index, element) => {\n      var $element = $(element);\n      var columnWidth = this._getWidthStyleValue($element) || getOuterWidth($element);\n      columnsWidths[index] = Math.max(columnWidth, this._minColumnWidth);\n      columnsSum += columnsWidths[index];\n    });\n    return {\n      columnsWidths: columnsWidths,\n      columnsSum: columnsSum\n    };\n  }\n\n  _setColumnsRatioWidth(columnElements, ratio, columnsWidths, $table) {\n    each(columnElements, index => {\n      var $lineElements = getLineElements($table, index);\n      var resultWidth;\n\n      if (ratio > 0) {\n        resultWidth = this._minColumnWidth + Math.round((columnsWidths[index] - this._minColumnWidth) * ratio);\n      } else {\n        resultWidth = this._minColumnWidth;\n      }\n\n      setLineElementsFormat(this, {\n        elements: $lineElements,\n        property: \"width\",\n        value: resultWidth\n      });\n    });\n  }\n\n  _updateColumnsWidth($table, frameIndex) {\n    var determinantElements = this._getTableDeterminantElements($table);\n\n    var frame = this._tableResizeFrames[frameIndex];\n\n    if (!frame) {\n      this._tableResizeFrames[frameIndex] = {};\n    }\n\n    frame = this._tableResizeFrames[frameIndex];\n    var tableWidth = this._tableLastWidth(frame) || getOuterWidth($table);\n    var ratio;\n\n    var {\n      columnsWidths: columnsWidths,\n      columnsSum: columnsSum\n    } = this._getColumnElementsSum(determinantElements);\n\n    var minWidthForColumns = determinantElements.length * this._minColumnWidth;\n\n    if (columnsSum > minWidthForColumns) {\n      ratio = (tableWidth - minWidthForColumns) / (columnsSum - minWidthForColumns);\n    } else {\n      ratio = -1;\n    }\n\n    this._tableLastWidth(frame, ratio > 0 ? tableWidth : minWidthForColumns);\n\n    this._setColumnsRatioWidth(determinantElements, ratio, columnsWidths, $table);\n  }\n\n  _updateTablesColumnsWidth($tables) {\n    each($tables, (index, table) => {\n      this._updateColumnsWidth($(table), index);\n    });\n  }\n\n  option(option, value) {\n    if (\"tableResizing\" === option) {\n      this.handleOptionChangeValue(value);\n      return;\n    }\n\n    if (\"enabled\" === option) {\n      this.enabled = value;\n      value ? this._applyResizing(true) : this.clean();\n    } else if ([\"minColumnWidth\", \"minRowHeight\"].includes(option)) {\n      this[\"_\".concat(option)] = this._minSizeLimit(option, value);\n    }\n  }\n\n  clean() {\n    this._removeResizeFrames(true);\n\n    this._detachEvents();\n\n    _windowResizeCallbacks.remove(this._resizeHandlerWithContext);\n\n    clearTimeout(this._windowResizeTimeout);\n    this._resizeHandlerWithContext = void 0;\n    this._isDragging = void 0;\n    this._startTableWidth = void 0;\n    clearTimeout(this._attachResizerTimeout);\n  }\n\n}","map":{"version":3,"names":["getOuterWidth","getOuterHeight","getHeight","$","eventsEngine","isDefined","addNamespace","_windowResizeCallbacks","move","getBoundingRect","BaseModule","Draggable","each","getWindow","hasWindow","extend","setLineElementsFormat","getLineElements","getAutoSizedElements","getColumnElements","unfixTableWidth","DX_COLUMN_RESIZE_FRAME_CLASS","DX_COLUMN_RESIZER_CLASS","DX_ROW_RESIZER_CLASS","DEFAULTS","minColumnWidth","minRowHeight","DRAGGABLE_ELEMENT_OFFSET","ROUGH_OFFSET","MODULE_NAMESPACE","POINTERDOWN_EVENT","SCROLL_EVENT","TableResizingModule","constructor","quill","options","enabled","_tableResizeFrames","_minColumnWidth","_minSizeLimit","_minRowHeight","_quillContainer","editorInstance","_getQuillContainer","_tableData","_applyResizing","forcedStart","_applyResizingImpl","addContentInitializedCallback","bind","addCleanCallback","clean","_resizeHandlerWithContext","add","_resizeHandler","propertyName","newValue","Math","max","$tables","_findTables","length","_fixTablesWidths","_createResizeFrames","_updateFramesPositions","_updateFramesSeparators","_attachEvents","on","_getContent","_getQuillTextChangeHandler","_detachEvents","off","_quillTextChangeHandler","delta","oldContent","source","_isTableChanging","_removeResizeFrames","_updateTablesColumnsWidth","_isDragging","_getFrameForTable","$table","_this$_framesForTable","_framesForTables","get","_windowResizeTimeout","setTimeout","index","table","frame","actualTableWidth","lastTableWidth","_tableLastWidth","abs","_updateColumnsWidth","find","_getWidthStyleValue","$element","styleValue","style","width","parseInt","lastWidth","$columnElements","_getTableDeterminantElements","push","_this$_tableLastWidth","columnsSum","_getColumnElementsSum","tableWidth","Map","_this$_tableResizeFra","$lastTable","$tableLastWidth","$frame","_createTableResizeFrame","columnsCount","rowsCount","set","result","isColumnsCountChanged","isRowCountChanged","clearArray","_this$_framesForTable2","resizeFrame","_resizeFrame$$frame","resizerElementsSelector","concat","_detachSeparatorEvents","remove","clear","$lineSeparators","i","$lineSeparator","addClass","appendTo","tableResizeFrame","_updateFramePosition","height","top","targetTop","left","targetLeft","containerTop","containerLeft","root","css","direction","_updateFrameSeparators","_isDraggable","hasClass","is","_removeDraggable","$currentLineSeparator","lineResizerClass","draggable","dxDraggable","dispose","_getDirectionInfo","sizeFunction","x","positionCoordinate","positionStyleProperty","positionCoordinateName","option","_getSize","directionInfo","$determinantElements","determinantElementsCount","determinantElementsSeparatorsCount","lineSeparators","styleOptions","transform","currentPosition","eq","attachSeparatorData","lineSeparator","_attachColumnSeparatorEvents","_createDraggableElement","_dragStartHandler","_ref","_fixColumnsWidth","_startLineSize","_startTableWidth","_startLineSeparatorPosition","_nextLineSize","_shouldRevertOffset","_isNextColumnWidthEnough","nextColumnNewSize","$nextColumnElement","eventOffset","isWidthIncreased","_nextColumnOffsetLimit","isWidthLimited","_shouldSetNextColumnWidth","_horizontalDragHandler","_ref2","currentLineNewSize","isCurrentColumnWidthEnough","$lineElements","$nextLineElements","realWidthDiff","elements","property","value","isTableWidthChanged","shouldRevertNewValue","_$highlightedElement","_verticalDragHandler","_ref3","newHeight","rowHeightDiff","_dragMoveHandler","event","_ref4","offset","_saveValueChangeEvent","_dragEndHandler","_this$_$highlightedEl","_isLastColumnResizing","_ref5","_getBoundaryConfig","boundary","boundOffset","bottom","right","$content","_this$_$highlightedEl2","boundaryConfig","directionClass","insertAfter","config","contentTemplate","allowMoveByClick","dragDirection","onDragMove","_ref6","component","onDragStart","onDragEnd","_currentDraggableElement","_createComponent","determinantElements","element","columnWidth","columnElements","columnsWidths","_setColumnsRatioWidth","ratio","resultWidth","round","frameIndex","minWidthForColumns","handleOptionChangeValue","includes","clearTimeout","_attachResizerTimeout"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/html_editor/modules/tableResizing.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/html_editor/modules/tableResizing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterWidth,\r\n    getOuterHeight,\r\n    getHeight\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../events/utils/index\";\r\nimport _windowResizeCallbacks from \"../../../core/utils/resize_callbacks\";\r\nimport {\r\n    move\r\n} from \"../../../animation/translator\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport BaseModule from \"./base\";\r\nimport Draggable from \"../../draggable\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    setLineElementsFormat,\r\n    getLineElements,\r\n    getAutoSizedElements,\r\n    getColumnElements,\r\n    unfixTableWidth\r\n} from \"../utils/table_helper\";\r\nvar DX_COLUMN_RESIZE_FRAME_CLASS = \"dx-table-resize-frame\";\r\nvar DX_COLUMN_RESIZER_CLASS = \"dx-htmleditor-column-resizer\";\r\nvar DX_ROW_RESIZER_CLASS = \"dx-htmleditor-row-resizer\";\r\nvar DEFAULTS = {\r\n    minColumnWidth: 40,\r\n    minRowHeight: 24\r\n};\r\nvar DRAGGABLE_ELEMENT_OFFSET = 2;\r\nvar ROUGH_OFFSET = 3;\r\nvar MODULE_NAMESPACE = \"dxHtmlTableResizingModule\";\r\nvar POINTERDOWN_EVENT = addNamespace(\"dxpointerdown\", MODULE_NAMESPACE);\r\nvar SCROLL_EVENT = addNamespace(\"scroll\", MODULE_NAMESPACE);\r\nexport default class TableResizingModule extends BaseModule {\r\n    constructor(quill, options) {\r\n        super(quill, options);\r\n        this.enabled = !!options.enabled;\r\n        this._tableResizeFrames = [];\r\n        this._minColumnWidth = this._minSizeLimit(\"minColumnWidth\", options.minColumnWidth);\r\n        this._minRowHeight = this._minSizeLimit(\"minRowHeight\", options.minRowHeight);\r\n        this._quillContainer = this.editorInstance._getQuillContainer();\r\n        this._tableData = [];\r\n        if (this.enabled) {\r\n            this._applyResizing()\r\n        }\r\n    }\r\n    _applyResizing(forcedStart) {\r\n        if (forcedStart) {\r\n            this._applyResizingImpl()\r\n        } else {\r\n            this.editorInstance.addContentInitializedCallback(this._applyResizingImpl.bind(this))\r\n        }\r\n        this.addCleanCallback(this.clean.bind(this));\r\n        this._resizeHandlerWithContext = _windowResizeCallbacks.add(this._resizeHandler.bind(this))\r\n    }\r\n    _minSizeLimit(propertyName, newValue) {\r\n        return isDefined(newValue) ? Math.max(newValue, 0) : DEFAULTS[propertyName]\r\n    }\r\n    _applyResizingImpl() {\r\n        var $tables = this._findTables();\r\n        if ($tables.length) {\r\n            this._fixTablesWidths($tables);\r\n            this._createResizeFrames($tables);\r\n            this._updateFramesPositions();\r\n            this._updateFramesSeparators()\r\n        }\r\n        this._attachEvents()\r\n    }\r\n    _attachEvents() {\r\n        eventsEngine.on(this.editorInstance._getContent(), SCROLL_EVENT, this._updateFramesPositions.bind(this));\r\n        this.quill.on(\"text-change\", this._getQuillTextChangeHandler())\r\n    }\r\n    _detachEvents() {\r\n        eventsEngine.off(this.editorInstance._getContent(), MODULE_NAMESPACE);\r\n        this.quill.off(\"text-change\", this._quillTextChangeHandler)\r\n    }\r\n    _getQuillTextChangeHandler(delta, oldContent, source) {\r\n        return (delta, oldContent, source) => {\r\n            if (this._isTableChanging()) {\r\n                var $tables = this._findTables();\r\n                this._removeResizeFrames();\r\n                if (\"api\" === source) {\r\n                    this._fixTablesWidths($tables)\r\n                }\r\n                this._updateTablesColumnsWidth($tables);\r\n                this._createResizeFrames($tables);\r\n                this._updateFramesPositions();\r\n                this._updateFramesSeparators()\r\n            } else {\r\n                this._updateFramesPositions();\r\n                if (!this._isDragging) {\r\n                    this._updateFramesSeparators()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _getFrameForTable($table) {\r\n        var _this$_framesForTable;\r\n        return null === (_this$_framesForTable = this._framesForTables) || void 0 === _this$_framesForTable ? void 0 : _this$_framesForTable.get($table.get(0))\r\n    }\r\n    _resizeHandler() {\r\n        this._windowResizeTimeout = setTimeout(() => {\r\n            var $tables = this._findTables();\r\n            each($tables, (index, table) => {\r\n                var $table = $(table);\r\n                var frame = this._tableResizeFrames[index];\r\n                var actualTableWidth = getOuterWidth($table);\r\n                var lastTableWidth = this._tableLastWidth(frame);\r\n                if (Math.abs(actualTableWidth - lastTableWidth) > 1) {\r\n                    this._tableLastWidth(frame, actualTableWidth);\r\n                    this._updateColumnsWidth($table, index)\r\n                }\r\n            });\r\n            this._updateFramesPositions();\r\n            this._updateFramesSeparators()\r\n        })\r\n    }\r\n    _findTables() {\r\n        return $(this._quillContainer).find(\"table\")\r\n    }\r\n    _getWidthStyleValue($element) {\r\n        var styleValue = $element[0].style.width;\r\n        return \"\" !== styleValue ? parseInt(styleValue) : void 0\r\n    }\r\n    _tableLastWidth(frame, newValue) {\r\n        if (isDefined(newValue)) {\r\n            frame.lastWidth = newValue\r\n        } else {\r\n            return null === frame || void 0 === frame ? void 0 : frame.lastWidth\r\n        }\r\n    }\r\n    _fixTablesWidths($tables) {\r\n        each($tables, (index, table) => {\r\n            var $table = $(table);\r\n            var $columnElements = this._getTableDeterminantElements($table, \"horizontal\");\r\n            if (!this._tableResizeFrames[index]) {\r\n                this._tableResizeFrames[index] = {\r\n                    lastWidth: void 0\r\n                }\r\n            }\r\n            var frame = this._getFrameForTable($table);\r\n            if (!frame) {\r\n                this._tableResizeFrames.push({\r\n                    $table: $table\r\n                })\r\n            }\r\n            if (0 === getAutoSizedElements($table).length) {\r\n                var _this$_tableLastWidth;\r\n                var {\r\n                    columnsSum: columnsSum\r\n                } = this._getColumnElementsSum($columnElements);\r\n                unfixTableWidth($table, {\r\n                    quill: this.quill\r\n                });\r\n                var tableWidth = null !== (_this$_tableLastWidth = this._tableLastWidth(frame)) && void 0 !== _this$_tableLastWidth ? _this$_tableLastWidth : getOuterWidth($table);\r\n                if (frame) {\r\n                    this._tableLastWidth(frame, Math.max(columnsSum, tableWidth))\r\n                }\r\n            }\r\n        })\r\n    }\r\n    _createResizeFrames($tables) {\r\n        this._framesForTables = new Map;\r\n        $tables.each((index, table) => {\r\n            var _this$_tableResizeFra;\r\n            var $table = $(table);\r\n            var $lastTable = null === (_this$_tableResizeFra = this._tableResizeFrames[index]) || void 0 === _this$_tableResizeFra ? void 0 : _this$_tableResizeFra.$table;\r\n            var $tableLastWidth = this._tableResizeFrames[index].lastWidth;\r\n            this._tableResizeFrames[index] = {\r\n                $frame: this._createTableResizeFrame(table),\r\n                $table: $table,\r\n                index: index,\r\n                lastWidth: $lastTable && table === $lastTable.get(0) ? $tableLastWidth : void 0,\r\n                columnsCount: this._getTableDeterminantElements($table, \"horizontal\").length,\r\n                rowsCount: this._getTableDeterminantElements($table, \"vertical\").length\r\n            };\r\n            this._framesForTables.set(table, this._tableResizeFrames[index])\r\n        });\r\n        this._tableResizeFrames.length = $tables.length\r\n    }\r\n    _isTableChanging() {\r\n        var $tables = this._findTables();\r\n        var result = false;\r\n        if ($tables.length !== this._tableResizeFrames.length) {\r\n            result = true\r\n        } else {\r\n            each($tables, (index, table) => {\r\n                var $table = $(table);\r\n                var frame = this._tableResizeFrames[index];\r\n                var isColumnsCountChanged = (null === frame || void 0 === frame ? void 0 : frame.columnsCount) !== this._getTableDeterminantElements($table, \"horizontal\").length;\r\n                var isRowCountChanged = (null === frame || void 0 === frame ? void 0 : frame.rowsCount) !== this._getTableDeterminantElements($table, \"vertical\").length;\r\n                if (isColumnsCountChanged || isRowCountChanged) {\r\n                    result = true;\r\n                    return false\r\n                }\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _removeResizeFrames(clearArray) {\r\n        var _this$_framesForTable2;\r\n        each(this._tableResizeFrames, (index, resizeFrame) => {\r\n            if (resizeFrame.$frame) {\r\n                var _resizeFrame$$frame;\r\n                var resizerElementsSelector = \".\".concat(DX_COLUMN_RESIZER_CLASS, \", .\").concat(DX_ROW_RESIZER_CLASS);\r\n                this._detachSeparatorEvents(null === (_resizeFrame$$frame = resizeFrame.$frame) || void 0 === _resizeFrame$$frame ? void 0 : _resizeFrame$$frame.find(resizerElementsSelector));\r\n                resizeFrame.$frame.remove()\r\n            }\r\n        });\r\n        null === (_this$_framesForTable2 = this._framesForTables) || void 0 === _this$_framesForTable2 ? void 0 : _this$_framesForTable2.clear();\r\n        if (clearArray) {\r\n            this._tableResizeFrames = []\r\n        }\r\n    }\r\n    _detachSeparatorEvents($lineSeparators) {\r\n        $lineSeparators.each((i, $lineSeparator) => {\r\n            eventsEngine.off($lineSeparator, POINTERDOWN_EVENT)\r\n        })\r\n    }\r\n    _createTableResizeFrame() {\r\n        return $(\"<div>\").addClass(DX_COLUMN_RESIZE_FRAME_CLASS).appendTo(this._quillContainer)\r\n    }\r\n    _updateFramesPositions() {\r\n        each(this._tableResizeFrames, (index, tableResizeFrame) => {\r\n            this._updateFramePosition(tableResizeFrame.$table, tableResizeFrame.$frame)\r\n        })\r\n    }\r\n    _updateFramePosition($table, $frame) {\r\n        var {\r\n            height: height,\r\n            width: width,\r\n            top: targetTop,\r\n            left: targetLeft\r\n        } = getBoundingRect($table.get(0));\r\n        var {\r\n            top: containerTop,\r\n            left: containerLeft\r\n        } = getBoundingRect(this.quill.root);\r\n        $frame.css({\r\n            height: height,\r\n            width: width,\r\n            top: targetTop - containerTop,\r\n            left: targetLeft - containerLeft\r\n        });\r\n        move($frame, {\r\n            left: 0,\r\n            top: 0\r\n        })\r\n    }\r\n    _updateFramesSeparators(direction) {\r\n        each(this._tableResizeFrames, (index, frame) => {\r\n            if (direction) {\r\n                this._updateFrameSeparators(frame, direction)\r\n            } else {\r\n                this._updateFrameSeparators(frame, \"vertical\");\r\n                this._updateFrameSeparators(frame, \"horizontal\")\r\n            }\r\n        })\r\n    }\r\n    _isDraggable($element) {\r\n        return $element.hasClass(\"dx-draggable\") && $element.is(\":visible\")\r\n    }\r\n    _removeDraggable($currentLineSeparator, lineResizerClass) {\r\n        if (this._isDraggable($currentLineSeparator)) {\r\n            var draggable = $($currentLineSeparator).dxDraggable(\"instance\");\r\n            draggable.dispose();\r\n            $($currentLineSeparator).addClass(lineResizerClass)\r\n        }\r\n    }\r\n    _getDirectionInfo(direction) {\r\n        if (\"vertical\" === direction) {\r\n            return {\r\n                lineResizerClass: DX_ROW_RESIZER_CLASS,\r\n                sizeFunction: x => getOuterHeight(x),\r\n                positionCoordinate: \"top\",\r\n                positionStyleProperty: \"height\",\r\n                positionCoordinateName: \"y\"\r\n            }\r\n        } else {\r\n            return {\r\n                lineResizerClass: DX_COLUMN_RESIZER_CLASS,\r\n                sizeFunction: x => getOuterWidth(x),\r\n                positionCoordinate: this.editorInstance.option(\"rtlEnabled\") ? \"right\" : \"left\",\r\n                positionStyleProperty: \"width\",\r\n                positionCoordinateName: \"x\"\r\n            }\r\n        }\r\n    }\r\n    _getSize($element, directionInfo) {\r\n        return directionInfo.sizeFunction($element)\r\n    }\r\n    _updateFrameSeparators(frame, direction) {\r\n        var $determinantElements = this._getTableDeterminantElements(frame.$table, direction);\r\n        var determinantElementsCount = $determinantElements.length;\r\n        var determinantElementsSeparatorsCount = determinantElementsCount - 1;\r\n        var directionInfo = this._getDirectionInfo(direction);\r\n        var lineSeparators = frame.$frame.find(\".\".concat(directionInfo.lineResizerClass));\r\n        var styleOptions = {\r\n            transform: \"none\"\r\n        };\r\n        var currentPosition = 0;\r\n        for (var i = 0; i <= determinantElementsSeparatorsCount; i++) {\r\n            currentPosition += this._getSize($determinantElements.eq(i), directionInfo);\r\n            if (!isDefined(lineSeparators[i])) {\r\n                lineSeparators[i] = $(\"<div>\").addClass(directionInfo.lineResizerClass).appendTo(frame.$frame).get(0)\r\n            }\r\n            var $currentLineSeparator = $(lineSeparators[i]);\r\n            this._removeDraggable($currentLineSeparator, directionInfo.lineResizerClass);\r\n            styleOptions[directionInfo.positionCoordinate] = currentPosition - DRAGGABLE_ELEMENT_OFFSET;\r\n            $($currentLineSeparator).css(styleOptions);\r\n            var attachSeparatorData = {\r\n                lineSeparator: lineSeparators[i],\r\n                index: i,\r\n                $determinantElements: $determinantElements,\r\n                frame: frame,\r\n                direction: direction\r\n            };\r\n            this._attachColumnSeparatorEvents(attachSeparatorData)\r\n        }\r\n    }\r\n    _getTableDeterminantElements($table, direction) {\r\n        if (\"vertical\" === direction) {\r\n            return $table.find(\"th:first-child, td:first-child\")\r\n        } else {\r\n            return getColumnElements($table)\r\n        }\r\n    }\r\n    _attachColumnSeparatorEvents(options) {\r\n        eventsEngine.on(options.lineSeparator, POINTERDOWN_EVENT, () => {\r\n            this._createDraggableElement(options)\r\n        })\r\n    }\r\n    _dragStartHandler(_ref) {\r\n        var {\r\n            $determinantElements: $determinantElements,\r\n            index: index,\r\n            frame: frame,\r\n            direction: direction,\r\n            lineSeparator: lineSeparator\r\n        } = _ref;\r\n        var directionInfo = this._getDirectionInfo(direction);\r\n        this._isDragging = true;\r\n        this._fixColumnsWidth(frame.$table);\r\n        this._startLineSize = parseInt(this._getSize($($determinantElements[index]), directionInfo));\r\n        this._startTableWidth = getOuterWidth(frame.$table);\r\n        this._startLineSeparatorPosition = parseInt($(lineSeparator).css(directionInfo.positionCoordinate));\r\n        this._nextLineSize = 0;\r\n        if ($determinantElements[index + 1]) {\r\n            this._nextLineSize = parseInt(this._getSize($($determinantElements[index + 1]), directionInfo))\r\n        } else if (\"horizontal\" === direction) {\r\n            unfixTableWidth(frame.$table, {\r\n                quill: this.quill\r\n            })\r\n        }\r\n    }\r\n    _shouldRevertOffset(direction) {\r\n        return \"horizontal\" === direction && this.editorInstance.option(\"rtlEnabled\")\r\n    }\r\n    _isNextColumnWidthEnough(nextColumnNewSize, $nextColumnElement, eventOffset) {\r\n        if (!this._nextLineSize) {\r\n            return true\r\n        } else if (nextColumnNewSize >= this._minColumnWidth) {\r\n            var isWidthIncreased = this._nextColumnOffsetLimit ? eventOffset < this._nextColumnOffsetLimit : eventOffset < 0;\r\n            var isWidthLimited = Math.abs(this._getWidthStyleValue($nextColumnElement) - getOuterWidth($nextColumnElement)) > ROUGH_OFFSET;\r\n            return isWidthIncreased || !isWidthLimited\r\n        }\r\n        return false\r\n    }\r\n    _shouldSetNextColumnWidth(nextColumnNewSize) {\r\n        return this._nextLineSize && nextColumnNewSize > 0\r\n    }\r\n    _horizontalDragHandler(_ref2) {\r\n        var {\r\n            currentLineNewSize: currentLineNewSize,\r\n            directionInfo: directionInfo,\r\n            eventOffset: eventOffset,\r\n            $determinantElements: $determinantElements,\r\n            index: index,\r\n            frame: frame\r\n        } = _ref2;\r\n        var nextColumnNewSize = this._nextLineSize && this._nextLineSize - eventOffset;\r\n        var isCurrentColumnWidthEnough = currentLineNewSize >= this._minColumnWidth;\r\n        var $lineElements = getLineElements(frame.$table, index);\r\n        var $nextLineElements = getLineElements(frame.$table, index + 1);\r\n        var realWidthDiff = getOuterWidth($lineElements.eq(0)) - currentLineNewSize;\r\n        if (isCurrentColumnWidthEnough) {\r\n            if (this._isNextColumnWidthEnough(nextColumnNewSize, $determinantElements.eq(index + 1), eventOffset)) {\r\n                setLineElementsFormat(this, {\r\n                    elements: $lineElements,\r\n                    property: directionInfo.positionStyleProperty,\r\n                    value: currentLineNewSize\r\n                });\r\n                if (this._shouldSetNextColumnWidth(nextColumnNewSize)) {\r\n                    setLineElementsFormat(this, {\r\n                        elements: $nextLineElements,\r\n                        property: directionInfo.positionStyleProperty,\r\n                        value: nextColumnNewSize\r\n                    })\r\n                }\r\n                var isTableWidthChanged = Math.abs(this._startTableWidth - getOuterWidth(frame.$table)) < ROUGH_OFFSET;\r\n                var shouldRevertNewValue = Math.abs(realWidthDiff) > ROUGH_OFFSET || !this._nextLineSize && isTableWidthChanged;\r\n                if (shouldRevertNewValue) {\r\n                    setLineElementsFormat(this, {\r\n                        elements: $lineElements,\r\n                        property: directionInfo.positionStyleProperty,\r\n                        value: getOuterWidth($lineElements.eq(0))\r\n                    });\r\n                    nextColumnNewSize += currentLineNewSize - getOuterWidth($lineElements.eq(0));\r\n                    if (this._shouldSetNextColumnWidth(nextColumnNewSize)) {\r\n                        setLineElementsFormat(this, {\r\n                            elements: $nextLineElements,\r\n                            property: directionInfo.positionStyleProperty,\r\n                            value: nextColumnNewSize\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                this._nextColumnOffsetLimit = this._nextColumnOffsetLimit || eventOffset\r\n            }\r\n        }\r\n        this._$highlightedElement.css(directionInfo.positionCoordinate, this._startLineSeparatorPosition + eventOffset + realWidthDiff + \"px\")\r\n    }\r\n    _verticalDragHandler(_ref3) {\r\n        var {\r\n            currentLineNewSize: currentLineNewSize,\r\n            directionInfo: directionInfo,\r\n            eventOffset: eventOffset,\r\n            $determinantElements: $determinantElements,\r\n            index: index,\r\n            frame: frame\r\n        } = _ref3;\r\n        var newHeight = Math.max(currentLineNewSize, this._minRowHeight);\r\n        var $lineElements = getLineElements(frame.$table, index, \"vertical\");\r\n        setLineElementsFormat(this, {\r\n            elements: $lineElements,\r\n            property: directionInfo.positionStyleProperty,\r\n            value: newHeight\r\n        });\r\n        var rowHeightDiff = getOuterHeight($determinantElements.eq(index)) - currentLineNewSize;\r\n        this._$highlightedElement.css(directionInfo.positionCoordinate, this._startLineSeparatorPosition + eventOffset + rowHeightDiff + \"px\")\r\n    }\r\n    _dragMoveHandler(event, _ref4) {\r\n        var {\r\n            $determinantElements: $determinantElements,\r\n            index: index,\r\n            frame: frame,\r\n            direction: direction\r\n        } = _ref4;\r\n        var directionInfo = this._getDirectionInfo(direction);\r\n        var eventOffset = event.offset[directionInfo.positionCoordinateName];\r\n        this.editorInstance._saveValueChangeEvent(event);\r\n        if (this._shouldRevertOffset(direction)) {\r\n            eventOffset = -eventOffset\r\n        }\r\n        var currentLineNewSize = this._startLineSize + eventOffset;\r\n        if (\"horizontal\" === direction) {\r\n            this._horizontalDragHandler({\r\n                currentLineNewSize: currentLineNewSize,\r\n                directionInfo: directionInfo,\r\n                eventOffset: eventOffset,\r\n                $determinantElements: $determinantElements,\r\n                index: index,\r\n                frame: frame\r\n            })\r\n        } else {\r\n            this._verticalDragHandler({\r\n                currentLineNewSize: currentLineNewSize,\r\n                directionInfo: directionInfo,\r\n                eventOffset: eventOffset,\r\n                $determinantElements: $determinantElements,\r\n                index: index,\r\n                frame: frame\r\n            })\r\n        }\r\n        this._updateFramePosition(frame.$table, frame.$frame)\r\n    }\r\n    _dragEndHandler(options) {\r\n        var _this$_$highlightedEl;\r\n        null === (_this$_$highlightedEl = this._$highlightedElement) || void 0 === _this$_$highlightedEl ? void 0 : _this$_$highlightedEl.remove();\r\n        this._isDragging = void 0;\r\n        this._nextColumnOffsetLimit = void 0;\r\n        this._tableLastWidth(options.frame, getOuterWidth(options.frame.$table));\r\n        this._updateFramesPositions();\r\n        this._updateFramesSeparators()\r\n    }\r\n    _isLastColumnResizing(_ref5) {\r\n        var {\r\n            $determinantElements: $determinantElements,\r\n            index: index\r\n        } = _ref5;\r\n        return !isDefined($determinantElements[index + 1])\r\n    }\r\n    _getBoundaryConfig(options) {\r\n        var result = {};\r\n        if (\"vertical\" === options.direction) {\r\n            result.boundary = options.frame.$table;\r\n            result.boundOffset = {\r\n                bottom: hasWindow() ? -getHeight(getWindow()) : -getOuterHeight(this._quillContainer),\r\n                top: 0,\r\n                left: 0,\r\n                right: 0\r\n            }\r\n        } else if (!this._isLastColumnResizing(options)) {\r\n            result.boundary = options.frame.$table\r\n        } else {\r\n            var $content = this.editorInstance._getContent();\r\n            result.boundary = $content;\r\n            result.boundOffset = {\r\n                bottom: 0,\r\n                top: 0,\r\n                left: $content.css(\"paddingLeft\"),\r\n                right: $content.css(\"paddingRight\")\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _createDraggableElement(options) {\r\n        var _this$_$highlightedEl2;\r\n        var boundaryConfig = this._getBoundaryConfig(options);\r\n        var directionClass = \"vertical\" === options.direction ? \"dx-htmleditor-highlighted-row\" : \"dx-htmleditor-highlighted-column\";\r\n        null === (_this$_$highlightedEl2 = this._$highlightedElement) || void 0 === _this$_$highlightedEl2 ? void 0 : _this$_$highlightedEl2.remove();\r\n        this._$highlightedElement = $(\"<div>\").addClass(\"\".concat(directionClass)).insertAfter($(options.lineSeparator));\r\n        var config = {\r\n            contentTemplate: null,\r\n            allowMoveByClick: false,\r\n            dragDirection: options.direction,\r\n            onDragMove: _ref6 => {\r\n                var {\r\n                    component: component,\r\n                    event: event\r\n                } = _ref6;\r\n                this._dragMoveHandler(event, options)\r\n            },\r\n            onDragStart: () => {\r\n                this._dragStartHandler(options)\r\n            },\r\n            onDragEnd: () => {\r\n                this._dragEndHandler(options)\r\n            }\r\n        };\r\n        extend(config, boundaryConfig);\r\n        this._currentDraggableElement = this.editorInstance._createComponent(options.lineSeparator, Draggable, config)\r\n    }\r\n    _fixColumnsWidth($table) {\r\n        var determinantElements = this._getTableDeterminantElements($table);\r\n        each(determinantElements, (index, element) => {\r\n            var columnWidth = getOuterWidth(element);\r\n            var $lineElements = getLineElements($table, index);\r\n            setLineElementsFormat(this, {\r\n                elements: $lineElements,\r\n                property: \"width\",\r\n                value: Math.max(columnWidth, this._minColumnWidth)\r\n            })\r\n        })\r\n    }\r\n    _getColumnElementsSum(columnElements) {\r\n        var columnsWidths = [];\r\n        var columnsSum = 0;\r\n        each(columnElements, (index, element) => {\r\n            var $element = $(element);\r\n            var columnWidth = this._getWidthStyleValue($element) || getOuterWidth($element);\r\n            columnsWidths[index] = Math.max(columnWidth, this._minColumnWidth);\r\n            columnsSum += columnsWidths[index]\r\n        });\r\n        return {\r\n            columnsWidths: columnsWidths,\r\n            columnsSum: columnsSum\r\n        }\r\n    }\r\n    _setColumnsRatioWidth(columnElements, ratio, columnsWidths, $table) {\r\n        each(columnElements, index => {\r\n            var $lineElements = getLineElements($table, index);\r\n            var resultWidth;\r\n            if (ratio > 0) {\r\n                resultWidth = this._minColumnWidth + Math.round((columnsWidths[index] - this._minColumnWidth) * ratio)\r\n            } else {\r\n                resultWidth = this._minColumnWidth\r\n            }\r\n            setLineElementsFormat(this, {\r\n                elements: $lineElements,\r\n                property: \"width\",\r\n                value: resultWidth\r\n            })\r\n        })\r\n    }\r\n    _updateColumnsWidth($table, frameIndex) {\r\n        var determinantElements = this._getTableDeterminantElements($table);\r\n        var frame = this._tableResizeFrames[frameIndex];\r\n        if (!frame) {\r\n            this._tableResizeFrames[frameIndex] = {}\r\n        }\r\n        frame = this._tableResizeFrames[frameIndex];\r\n        var tableWidth = this._tableLastWidth(frame) || getOuterWidth($table);\r\n        var ratio;\r\n        var {\r\n            columnsWidths: columnsWidths,\r\n            columnsSum: columnsSum\r\n        } = this._getColumnElementsSum(determinantElements);\r\n        var minWidthForColumns = determinantElements.length * this._minColumnWidth;\r\n        if (columnsSum > minWidthForColumns) {\r\n            ratio = (tableWidth - minWidthForColumns) / (columnsSum - minWidthForColumns)\r\n        } else {\r\n            ratio = -1\r\n        }\r\n        this._tableLastWidth(frame, ratio > 0 ? tableWidth : minWidthForColumns);\r\n        this._setColumnsRatioWidth(determinantElements, ratio, columnsWidths, $table)\r\n    }\r\n    _updateTablesColumnsWidth($tables) {\r\n        each($tables, (index, table) => {\r\n            this._updateColumnsWidth($(table), index)\r\n        })\r\n    }\r\n    option(option, value) {\r\n        if (\"tableResizing\" === option) {\r\n            this.handleOptionChangeValue(value);\r\n            return\r\n        }\r\n        if (\"enabled\" === option) {\r\n            this.enabled = value;\r\n            value ? this._applyResizing(true) : this.clean()\r\n        } else if ([\"minColumnWidth\", \"minRowHeight\"].includes(option)) {\r\n            this[\"_\".concat(option)] = this._minSizeLimit(option, value)\r\n        }\r\n    }\r\n    clean() {\r\n        this._removeResizeFrames(true);\r\n        this._detachEvents();\r\n        _windowResizeCallbacks.remove(this._resizeHandlerWithContext);\r\n        clearTimeout(this._windowResizeTimeout);\r\n        this._resizeHandlerWithContext = void 0;\r\n        this._isDragging = void 0;\r\n        this._startTableWidth = void 0;\r\n        clearTimeout(this._attachResizerTimeout)\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}