{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/file_items_controller.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport FileSystemProviderBase from \"../../file_management/provider_base\";\nimport FileSystemItem from \"../../file_management/file_system_item\";\nimport ObjectFileSystemProvider from \"../../file_management/object_provider\";\nimport RemoteFileSystemProvider from \"../../file_management/remote_provider\";\nimport CustomFileSystemProvider from \"../../file_management/custom_provider\";\nimport FileSystemError from \"../../file_management/error\";\nimport ErrorCode from \"../../file_management/error_codes\";\nimport { pathCombine, getEscapedFileName, getPathParts, getFileExtension } from \"../../file_management/utils\";\nimport { whenSome } from \"./ui.file_manager.common\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport { extend } from \"../../core/utils/extend\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { isDefined, isObject, isPromise } from \"../../core/utils/type\";\nimport Guid from \"../../core/guid\";\nvar DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME = \"Files\";\nexport default class FileItemsController {\n  constructor(options) {\n    options = options || {};\n    this._options = extend({}, options);\n    this._isInitialized = false;\n    this._dataLoading = false;\n    this._dataLoadingDeferred = null;\n    this._rootDirectoryInfo = this._createRootDirectoryInfo(options.rootText);\n    this._currentDirectoryInfo = this._rootDirectoryInfo;\n    this._defaultIconMap = this._createDefaultIconMap();\n    this.startSingleLoad();\n\n    this._setSecurityController();\n\n    this._setProvider(options.fileProvider);\n\n    this._initialize();\n  }\n\n  _initialize() {\n    var result = this._options.currentPathKeys && this._options.currentPathKeys.length ? this.setCurrentPathByKeys(this._options.currentPathKeys) : this.setCurrentPath(this._options.currentPath);\n\n    var completeInitialization = () => {\n      this._isInitialized = true;\n\n      this._raiseInitialized();\n    };\n\n    if (result) {\n      when(result).always(completeInitialization);\n    } else {\n      completeInitialization();\n    }\n  }\n\n  _setSecurityController() {\n    this._securityController = new FileSecurityController({\n      allowedFileExtensions: this._options.allowedFileExtensions,\n      maxFileSize: this._options.uploadMaxFileSize\n    });\n\n    this._resetState();\n  }\n\n  setAllowedFileExtensions(allowedFileExtensions) {\n    if (isDefined(allowedFileExtensions)) {\n      this._options.allowedFileExtensions = allowedFileExtensions;\n    }\n\n    this._setSecurityController();\n\n    this.refresh();\n  }\n\n  setUploadOptions(_ref) {\n    var {\n      maxFileSize: maxFileSize,\n      chunkSize: chunkSize\n    } = _ref;\n\n    if (isDefined(chunkSize)) {\n      this._options.uploadChunkSize = chunkSize;\n    }\n\n    if (isDefined(maxFileSize)) {\n      this._options.uploadMaxFileSize = maxFileSize;\n\n      this._setSecurityController();\n\n      this.refresh();\n    }\n  }\n\n  _setProvider(fileProvider) {\n    this._fileProvider = this._createFileProvider(fileProvider);\n\n    this._resetState();\n  }\n\n  updateProvider(fileProvider, currentPathKeys) {\n    if (!isDefined(currentPathKeys)) {\n      return this._updateProviderOnly(fileProvider);\n    }\n\n    return when(this._getDirectoryByPathParts(this._rootDirectoryInfo, currentPathKeys, true)).then(newDirectory => {\n      if (newDirectory !== this._rootDirectoryInfo) {\n        this._resetCurrentDirectory();\n      }\n\n      this._setProvider(fileProvider);\n    }).then(() => this.setCurrentPathByKeys(currentPathKeys));\n  }\n\n  _updateProviderOnly(fileProvider) {\n    this._resetCurrentDirectory();\n\n    this._setProvider(fileProvider);\n\n    return when(this.refresh());\n  }\n\n  _createFileProvider(fileProvider) {\n    if (!fileProvider) {\n      fileProvider = [];\n    }\n\n    if (Array.isArray(fileProvider)) {\n      return new ObjectFileSystemProvider({\n        data: fileProvider\n      });\n    }\n\n    if (fileProvider instanceof FileSystemProviderBase) {\n      return fileProvider;\n    }\n\n    switch (fileProvider.type) {\n      case \"remote\":\n        return new RemoteFileSystemProvider(fileProvider);\n\n      case \"custom\":\n        return new CustomFileSystemProvider(fileProvider);\n    }\n\n    return new ObjectFileSystemProvider(fileProvider);\n  }\n\n  setCurrentPath(path) {\n    var pathParts = getPathParts(path);\n    var rawPath = pathCombine(...pathParts);\n\n    if (this.getCurrentDirectory().fileItem.relativeName === rawPath) {\n      return new Deferred().resolve().promise();\n    }\n\n    return this._setCurrentDirectoryByPathParts(pathParts);\n  }\n\n  setCurrentPathByKeys(pathKeys) {\n    if (equalByValue(this.getCurrentDirectory().fileItem.pathKeys, pathKeys, 0, true)) {\n      return new Deferred().resolve().promise();\n    }\n\n    return this._setCurrentDirectoryByPathParts(pathKeys, true);\n  }\n\n  getCurrentPath() {\n    var currentPath = \"\";\n    var directory = this.getCurrentDirectory();\n\n    while (directory && !directory.fileItem.isRoot()) {\n      var escapedName = getEscapedFileName(directory.fileItem.name);\n      currentPath = pathCombine(escapedName, currentPath);\n      directory = directory.parentDirectory;\n    }\n\n    return currentPath;\n  }\n\n  getCurrentPathKeys() {\n    return this.getCurrentDirectory().fileItem.pathKeys;\n  }\n\n  getCurrentDirectory() {\n    return this._currentDirectoryInfo;\n  }\n\n  setCurrentDirectory(directoryInfo, checkActuality) {\n    if (!directoryInfo) {\n      return;\n    }\n\n    if (checkActuality) {\n      directoryInfo = this._getActualDirectoryInfo(directoryInfo);\n    }\n\n    if (this._currentDirectoryInfo && this._currentDirectoryInfo === directoryInfo) {\n      this._raisePathPotentiallyChanged();\n\n      return;\n    }\n\n    var requireRaiseSelectedDirectory = this._currentDirectoryInfo.fileItem.key !== directoryInfo.fileItem.key;\n    this._currentDirectoryInfo = directoryInfo;\n\n    if (requireRaiseSelectedDirectory && this._isInitialized) {\n      if (!this._dataLoading) {\n        this._raiseDataLoading(\"navigation\");\n      }\n\n      this._raiseSelectedDirectoryChanged(directoryInfo);\n    }\n  }\n\n  _resetCurrentDirectory() {\n    this._currentDirectoryInfo = this._rootDirectoryInfo;\n  }\n\n  getCurrentItems(onlyFiles) {\n    return this._dataLoadingDeferred ? this._dataLoadingDeferred.then(() => this._getCurrentItemsInternal(onlyFiles)) : this._getCurrentItemsInternal(onlyFiles);\n  }\n\n  _getCurrentItemsInternal(onlyFiles) {\n    var currentDirectory = this.getCurrentDirectory();\n    var getItemsPromise = this.getDirectoryContents(currentDirectory);\n    return getItemsPromise.then(items => {\n      var separatedItems = this._separateItemsByType(items);\n\n      currentDirectory.fileItem.hasSubDirectories = !!separatedItems.folders.length;\n      return onlyFiles ? separatedItems.files : items;\n    });\n  }\n\n  getDirectories(parentDirectoryInfo, skipNavigationOnError) {\n    return this.getDirectoryContents(parentDirectoryInfo, skipNavigationOnError).then(itemInfos => itemInfos.filter(info => info.fileItem.isDirectory));\n  }\n\n  _separateItemsByType(itemInfos) {\n    var folders = [];\n    var files = [];\n    itemInfos.forEach(info => info.fileItem.isDirectory ? folders.push(info) : files.push(info));\n    return {\n      folders: folders,\n      files: files\n    };\n  }\n\n  getDirectoryContents(parentDirectoryInfo, skipNavigationOnError) {\n    if (!parentDirectoryInfo) {\n      return new Deferred().resolve([this._rootDirectoryInfo]).promise();\n    }\n\n    if (parentDirectoryInfo.itemsLoaded) {\n      return new Deferred().resolve(parentDirectoryInfo.items).promise();\n    }\n\n    if (this._singleOperationLockId && parentDirectoryInfo.itemsSingleLoadErrorId === this._singleOperationLockId) {\n      this._changeDirectoryOnError(parentDirectoryInfo, skipNavigationOnError, true);\n\n      return new Deferred().reject().promise();\n    }\n\n    var dirKey = parentDirectoryInfo.getInternalKey();\n    var loadItemsDeferred = this._loadedItems[dirKey];\n\n    if (loadItemsDeferred) {\n      return loadItemsDeferred;\n    }\n\n    loadItemsDeferred = this._getFileItems(parentDirectoryInfo, skipNavigationOnError).then(fileItems => {\n      fileItems = fileItems || [];\n      parentDirectoryInfo.items = fileItems.map(fileItem => fileItem.isDirectory && this._createDirectoryInfo(fileItem, parentDirectoryInfo) || this._createFileInfo(fileItem, parentDirectoryInfo));\n      parentDirectoryInfo.itemsLoaded = true;\n      return parentDirectoryInfo.items;\n    }, () => {\n      if (this._singleOperationLockId && parentDirectoryInfo.itemsSingleLoadErrorId !== this._singleOperationLockId) {\n        parentDirectoryInfo.itemsSingleLoadErrorId = this._singleOperationLockId;\n      }\n\n      return [];\n    });\n    this._loadedItems[dirKey] = loadItemsDeferred;\n    loadItemsDeferred.always(() => {\n      delete this._loadedItems[dirKey];\n    });\n    return loadItemsDeferred;\n  }\n\n  _getFileItems(parentDirectoryInfo, skipNavigationOnError) {\n    var loadItemsDeferred = null;\n\n    try {\n      loadItemsDeferred = this._fileProvider.getItems(parentDirectoryInfo.fileItem);\n    } catch (error) {\n      return this._handleItemLoadError(parentDirectoryInfo, error, skipNavigationOnError);\n    }\n\n    return when(loadItemsDeferred).then(fileItems => this._securityController.getAllowedItems(fileItems), errorInfo => this._handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError));\n  }\n\n  createDirectory(parentDirectoryInfo, name) {\n    var parentDirItem = parentDirectoryInfo.fileItem;\n\n    var tempDirInfo = this._createDirInfoByName(name, parentDirectoryInfo);\n\n    var actionInfo = this._createEditActionInfo(\"create\", tempDirInfo, parentDirectoryInfo);\n\n    return this._processEditAction(actionInfo, args => {\n      args.parentDirectory = parentDirItem;\n      args.name = name;\n\n      this._editingEvents.onDirectoryCreating(args);\n    }, () => this._fileProvider.createDirectory(parentDirItem, name).done(info => {\n      if (!parentDirItem.isRoot()) {\n        parentDirItem.hasSubDirectories = true;\n      }\n\n      return info;\n    }), () => {\n      var args = {\n        parentDirectory: parentDirItem,\n        name: name\n      };\n\n      this._editingEvents.onDirectoryCreated(args);\n    }, () => this._resetDirectoryState(parentDirectoryInfo, true));\n  }\n\n  renameItem(fileItemInfo, name) {\n    var sourceItem = fileItemInfo.fileItem.createClone();\n\n    var actionInfo = this._createEditActionInfo(\"rename\", fileItemInfo, fileItemInfo.parentDirectory, {\n      itemNewName: name\n    });\n\n    return this._processEditAction(actionInfo, (args, itemInfo) => {\n      if (!itemInfo.fileItem.isDirectory) {\n        this._securityController.validateExtension(name);\n      }\n\n      args.item = sourceItem;\n      args.newName = name;\n\n      this._editingEvents.onItemRenaming(args);\n    }, item => this._fileProvider.renameItem(item, name), () => {\n      var args = {\n        sourceItem: sourceItem,\n        itemName: name\n      };\n\n      this._editingEvents.onItemRenamed(args);\n    }, () => {\n      var parentDirectory = this._getActualDirectoryInfo(fileItemInfo.parentDirectory);\n\n      this._resetDirectoryState(parentDirectory);\n\n      this.setCurrentDirectory(parentDirectory);\n    });\n  }\n\n  moveItems(itemInfos, destinationDirectory) {\n    var actionInfo = this._createEditActionInfo(\"move\", itemInfos, destinationDirectory);\n\n    return this._processEditAction(actionInfo, (args, itemInfo) => {\n      args.item = itemInfo.fileItem;\n      args.destinationDirectory = destinationDirectory.fileItem;\n\n      this._editingEvents.onItemMoving(args);\n    }, item => this._fileProvider.moveItems([item], destinationDirectory.fileItem), itemInfo => {\n      var args = {\n        sourceItem: itemInfo.fileItem,\n        parentDirectory: destinationDirectory.fileItem,\n        itemName: itemInfo.fileItem.name,\n        itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\n      };\n\n      this._editingEvents.onItemMoved(args);\n    }, needChangeCurrentDirectory => {\n      if (needChangeCurrentDirectory) {\n        destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\n\n        this._resetDirectoryState(destinationDirectory);\n\n        this.setCurrentDirectory(destinationDirectory);\n        destinationDirectory.expanded = true;\n      }\n\n      itemInfos.forEach(itemInfo => this._resetDirectoryState(itemInfo.parentDirectory, true));\n    });\n  }\n\n  copyItems(itemInfos, destinationDirectory) {\n    var actionInfo = this._createEditActionInfo(\"copy\", itemInfos, destinationDirectory);\n\n    return this._processEditAction(actionInfo, (args, itemInfo) => {\n      args.item = itemInfo.fileItem;\n      args.destinationDirectory = destinationDirectory.fileItem;\n\n      this._editingEvents.onItemCopying(args);\n    }, item => this._fileProvider.copyItems([item], destinationDirectory.fileItem), itemInfo => {\n      var args = {\n        sourceItem: itemInfo.fileItem,\n        parentDirectory: destinationDirectory.fileItem,\n        itemName: itemInfo.fileItem.name,\n        itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\n      };\n\n      this._editingEvents.onItemCopied(args);\n    }, needChangeCurrentDirectory => {\n      if (needChangeCurrentDirectory) {\n        destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\n\n        this._resetDirectoryState(destinationDirectory);\n\n        this.setCurrentDirectory(destinationDirectory);\n        destinationDirectory.expanded = true;\n      }\n    });\n  }\n\n  deleteItems(itemInfos) {\n    var directory = itemInfos.length > 0 ? itemInfos[0].parentDirectory : null;\n\n    var actionInfo = this._createEditActionInfo(\"delete\", itemInfos, directory);\n\n    return this._processEditAction(actionInfo, (args, itemInfo) => {\n      args.item = itemInfo.fileItem;\n\n      this._editingEvents.onItemDeleting(args);\n    }, item => this._fileProvider.deleteItems([item]), itemInfo => this._editingEvents.onItemDeleted({\n      item: itemInfo.fileItem\n    }), () => {\n      itemInfos.forEach(itemInfo => {\n        var parentDir = this._getActualDirectoryInfo(itemInfo.parentDirectory);\n\n        this._resetDirectoryState(parentDir);\n\n        this.setCurrentDirectory(parentDir);\n      });\n    });\n  }\n\n  processUploadSession(sessionInfo, uploadDirectoryInfo) {\n    var itemInfos = this._getItemInfosForUploaderFiles(sessionInfo.files, uploadDirectoryInfo);\n\n    var actionInfo = this._createEditActionInfo(\"upload\", itemInfos, uploadDirectoryInfo, {\n      sessionInfo: sessionInfo\n    });\n\n    return this._processEditAction(actionInfo, () => {}, (_, index) => sessionInfo.deferreds[index], () => {}, () => this._resetDirectoryState(uploadDirectoryInfo, true));\n  }\n\n  uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\n    var startDeferred = null;\n\n    if (0 === chunksInfo.chunkIndex) {\n      this._securityController.validateMaxFileSize(fileData.size);\n\n      this._securityController.validateExtension(fileData.name);\n\n      startDeferred = this._processBeforeItemEditAction(args => {\n        args.fileData = fileData;\n        args.destinationDirectory = destinationDirectory;\n\n        this._editingEvents.onFileUploading(args);\n      });\n    } else {\n      startDeferred = new Deferred().resolve().promise();\n    }\n\n    var result = startDeferred.then(() => this._fileProvider.uploadFileChunk(fileData, chunksInfo, destinationDirectory));\n\n    if (chunksInfo.chunkIndex === chunksInfo.chunkCount - 1) {\n      result = result.done(() => {\n        var args = {\n          fileData: fileData,\n          parentDirectory: destinationDirectory\n        };\n\n        this._editingEvents.onFileUploaded(args);\n      });\n    }\n\n    return result;\n  }\n\n  abortFileUpload(fileData, chunksInfo, destinationDirectory) {\n    return when(this._fileProvider.abortFileUpload(fileData, chunksInfo, destinationDirectory));\n  }\n\n  getFileUploadChunkSize() {\n    var chunkSize = this._options.uploadChunkSize;\n\n    if (chunkSize && chunkSize > 0) {\n      return chunkSize;\n    }\n\n    return this._fileProvider.getFileUploadChunkSize();\n  }\n\n  downloadItems(itemInfos) {\n    var deferreds = itemInfos.map(itemInfo => this._processBeforeItemEditAction(args => {\n      args.item = itemInfo.fileItem;\n\n      this._editingEvents.onItemDownloading(args);\n    }, itemInfo));\n    return when(...deferreds).then(() => {\n      var items = itemInfos.map(i => i.fileItem);\n      return when(this._getItemActionResult(this._fileProvider.downloadItems(items))).then(() => {}, errorInfo => {\n        this._raiseDownloadItemsError(itemInfos, itemInfos[0].parentDirectory, errorInfo);\n      });\n    }, errorInfo => {\n      this._raiseDownloadItemsError(itemInfos, itemInfos[0].parentDirectory, errorInfo);\n    });\n  }\n\n  getItemContent(itemInfos) {\n    var items = itemInfos.map(i => i.fileItem);\n    return when(this._fileProvider.getItemsContent(items));\n  }\n\n  _handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError) {\n    parentDirectoryInfo = this._getActualDirectoryInfo(parentDirectoryInfo);\n\n    this._raiseGetItemsError(parentDirectoryInfo, errorInfo);\n\n    this._changeDirectoryOnError(parentDirectoryInfo, skipNavigationOnError);\n\n    return new Deferred().reject().promise();\n  }\n\n  _raiseGetItemsError(parentDirectoryInfo, errorInfo) {\n    var actionInfo = this._createEditActionInfo(\"getItems\", parentDirectoryInfo, parentDirectoryInfo);\n\n    this._raiseEditActionStarting(actionInfo);\n\n    this._raiseEditActionResultAcquired(actionInfo);\n\n    this._raiseEditActionError(actionInfo, {\n      errorCode: errorInfo.errorCode,\n      errorText: errorInfo.errorText,\n      fileItem: parentDirectoryInfo.fileItem,\n      index: 0\n    });\n  }\n\n  _raiseDownloadItemsError(targetFileInfos, directory, errorInfo) {\n    var actionInfo = this._createEditActionInfo(\"download\", targetFileInfos, directory);\n\n    var itemsLength = targetFileInfos.length;\n    actionInfo.singleRequest = 1 === itemsLength;\n\n    this._raiseEditActionStarting(actionInfo);\n\n    this._raiseEditActionResultAcquired(actionInfo);\n\n    for (var index = 0; index < itemsLength - 1; index++) {\n      this._raiseEditActionItemError(actionInfo, {\n        errorCode: errorInfo.errorCode,\n        errorText: errorInfo.errorText,\n        fileItem: targetFileInfos[index].fileItem,\n        index: index\n      });\n    }\n\n    this._raiseEditActionError(actionInfo, {\n      errorCode: errorInfo.errorCode,\n      errorText: errorInfo.errorText,\n      fileItem: targetFileInfos[itemsLength - 1].fileItem,\n      index: itemsLength - 1\n    });\n  }\n\n  _changeDirectoryOnError(dirInfo, skipNavigationOnError, isActualDirectoryRequired) {\n    if (isActualDirectoryRequired) {\n      dirInfo = this._getActualDirectoryInfo(dirInfo);\n    }\n\n    this._resetDirectoryState(dirInfo);\n\n    dirInfo.expanded = false;\n\n    if (!skipNavigationOnError) {\n      this.setCurrentDirectory(dirInfo.parentDirectory);\n    }\n  }\n\n  _getItemActionResult(actionResult) {\n    return Array.isArray(actionResult) ? actionResult[0] : actionResult;\n  }\n\n  _processEditAction(actionInfo, beforeAction, action, afterAction, completeAction) {\n    var isAnyOperationSuccessful = false;\n\n    this._raiseEditActionStarting(actionInfo);\n\n    var actionResult = actionInfo.itemInfos.map((itemInfo, itemIndex) => this._processBeforeItemEditAction(beforeAction, itemInfo).then(() => {\n      var itemActionResult = this._getItemActionResult(action(itemInfo.fileItem, itemIndex));\n\n      return itemActionResult.done(() => afterAction(itemInfo));\n    }));\n    actionInfo.singleRequest = 1 === actionResult.length;\n\n    this._raiseEditActionResultAcquired(actionInfo);\n\n    return whenSome(actionResult, info => {\n      isAnyOperationSuccessful = true;\n\n      this._raiseCompleteEditActionItem(actionInfo, info);\n    }, errorInfo => this._raiseEditActionItemError(actionInfo, errorInfo)).then(() => {\n      completeAction(isAnyOperationSuccessful);\n\n      this._raiseCompleteEditAction(actionInfo);\n    });\n  }\n\n  _createEditActionInfo(name, targetItemInfos, directory, customData) {\n    targetItemInfos = Array.isArray(targetItemInfos) ? targetItemInfos : [targetItemInfos];\n    customData = customData || {};\n    var items = targetItemInfos.map(itemInfo => itemInfo.fileItem);\n    return {\n      name: name,\n      itemInfos: targetItemInfos,\n      items: items,\n      directory: directory,\n      customData: customData,\n      singleRequest: true\n    };\n  }\n\n  _processBeforeItemEditAction(action, itemInfo) {\n    var deferred = new Deferred();\n\n    var args = this._createBeforeActionArgs();\n\n    try {\n      action(args, itemInfo);\n    } catch (errorInfo) {\n      return deferred.reject(errorInfo).promise();\n    }\n\n    if (!args.cancel) {\n      deferred.resolve();\n    } else if (true === args.cancel) {\n      return deferred.reject({\n        errorText: args.errorText,\n        errorCode: args.errorCode\n      });\n    } else if (isPromise(args.cancel)) {\n      when(args.cancel).then(res => {\n        if (true === res) {\n          deferred.reject();\n        } else if (isObject(res) && true === res.cancel) {\n          deferred.reject({\n            errorText: res.errorText,\n            errorCode: res.errorCode\n          });\n        }\n\n        deferred.resolve();\n      }, deferred.resolve);\n    }\n\n    return deferred.promise();\n  }\n\n  _createBeforeActionArgs() {\n    return {\n      errorCode: void 0,\n      errorText: \"\",\n      cancel: false\n    };\n  }\n\n  _getItemInfosForUploaderFiles(files, parentDirectoryInfo) {\n    var pathInfo = this._getPathInfo(parentDirectoryInfo);\n\n    var result = [];\n\n    for (var i = 0; i < files.length; i++) {\n      var file = files[i];\n      var item = new FileSystemItem(pathInfo, file.name, false);\n\n      var itemInfo = this._createFileInfo(item, parentDirectoryInfo);\n\n      result.push(itemInfo);\n    }\n\n    return result;\n  }\n\n  refresh() {\n    if (this._lockRefresh) {\n      return this._refreshDeferred;\n    }\n\n    this._lockRefresh = true;\n    return this._executeDataLoad(() => this._refreshDeferred = this._refreshInternal(), \"refresh\");\n  }\n\n  startSingleLoad() {\n    this._singleOperationLockId = new Guid().toString();\n  }\n\n  endSingleLoad() {\n    delete this._singleOperationLockId;\n  }\n\n  _refreshInternal() {\n    var cachedRootInfo = {\n      items: this._rootDirectoryInfo.items\n    };\n\n    var selectedKeyParts = this._getDirectoryPathKeyParts(this.getCurrentDirectory());\n\n    this._resetDirectoryState(this._rootDirectoryInfo);\n\n    return this._loadItemsRecursive(this._rootDirectoryInfo, cachedRootInfo).then(() => {\n      var dirInfo = this._findDirectoryByPathKeyParts(selectedKeyParts);\n\n      this.setCurrentDirectory(dirInfo);\n      delete this._lockRefresh;\n    });\n  }\n\n  _loadItemsRecursive(directoryInfo, cachedDirectoryInfo) {\n    var _this = this;\n\n    return this.getDirectories(directoryInfo).then(dirInfos => {\n      var itemDeferreds = [];\n\n      var _loop = function (i) {\n        var cachedItem = cachedDirectoryInfo.items.find(cache => dirInfos[i].fileItem.key === cache.fileItem.key);\n\n        if (!cachedItem) {\n          return \"continue\";\n        }\n\n        dirInfos[i].expanded = cachedItem.expanded;\n\n        if (dirInfos[i].expanded) {\n          itemDeferreds.push(_this._loadItemsRecursive(dirInfos[i], cachedItem));\n        }\n      };\n\n      for (var i = 0; i < dirInfos.length; i++) {\n        var _ret = _loop(i);\n\n        if (\"continue\" === _ret) {\n          continue;\n        }\n      }\n\n      return whenSome(itemDeferreds);\n    }, () => null);\n  }\n\n  _setCurrentDirectoryByPathParts(pathParts, useKeys) {\n    return this._executeDataLoad(() => this._setCurrentDirectoryByPathPartsInternal(pathParts, useKeys), \"navigation\");\n  }\n\n  _setCurrentDirectoryByPathPartsInternal(pathParts, useKeys) {\n    return this._getDirectoryByPathParts(this._rootDirectoryInfo, pathParts, useKeys).then(directoryInfo => {\n      for (var info = directoryInfo.parentDirectory; info; info = info.parentDirectory) {\n        info.expanded = true;\n      }\n\n      this.setCurrentDirectory(directoryInfo);\n    }, () => {\n      this._raisePathPotentiallyChanged();\n    });\n  }\n\n  _executeDataLoad(action, operation) {\n    if (this._dataLoadingDeferred) {\n      return this._dataLoadingDeferred.then(() => this._executeDataLoad(action, operation));\n    }\n\n    this._dataLoading = true;\n    this._dataLoadingDeferred = new Deferred();\n\n    if (this._isInitialized) {\n      this._raiseDataLoading(operation);\n    }\n\n    return action().always(() => {\n      var tempDeferred = this._dataLoadingDeferred;\n      this._dataLoadingDeferred = null;\n      this._dataLoading = false;\n      tempDeferred.resolve();\n    });\n  }\n\n  _getDirectoryByPathParts(parentDirectoryInfo, pathParts, useKeys) {\n    if (pathParts.length < 1) {\n      return new Deferred().resolve(parentDirectoryInfo).promise();\n    }\n\n    var fieldName = useKeys ? \"key\" : \"name\";\n    return this.getDirectories(parentDirectoryInfo).then(dirInfos => {\n      var subDirInfo = dirInfos.find(d => d.fileItem[fieldName] === pathParts[0]);\n\n      if (!subDirInfo) {\n        return new Deferred().reject().promise();\n      }\n\n      var restPathParts = [...pathParts].splice(1);\n      return this._getDirectoryByPathParts(subDirInfo, restPathParts, useKeys);\n    });\n  }\n\n  _getDirectoryPathKeyParts(directoryInfo) {\n    var pathParts = [];\n\n    while (directoryInfo && directoryInfo.parentDirectory) {\n      pathParts.unshift(directoryInfo.fileItem.key);\n      directoryInfo = directoryInfo.parentDirectory;\n    }\n\n    return pathParts;\n  }\n\n  _findDirectoryByPathKeyParts(keyParts) {\n    var selectedDirInfo = this._rootDirectoryInfo;\n\n    if (0 === keyParts.length) {\n      return selectedDirInfo;\n    }\n\n    var i = 0;\n    var newSelectedDir = selectedDirInfo;\n\n    while (newSelectedDir && i < keyParts.length) {\n      newSelectedDir = selectedDirInfo.items.find(info => info.fileItem.key === keyParts[i]);\n\n      if (newSelectedDir) {\n        selectedDirInfo = newSelectedDir;\n      }\n\n      i++;\n    }\n\n    return selectedDirInfo;\n  }\n\n  _getActualDirectoryInfo(directoryInfo) {\n    var keys = this._getDirectoryPathKeyParts(directoryInfo);\n\n    return this._findDirectoryByPathKeyParts(keys);\n  }\n\n  _createDirInfoByName(name, parentDirectoryInfo) {\n    var dirPathInfo = this._getPathInfo(parentDirectoryInfo);\n\n    var fileItem = new FileSystemItem(dirPathInfo, name, true);\n    return this._createDirectoryInfo(fileItem, parentDirectoryInfo);\n  }\n\n  _createDirectoryInfo(fileItem, parentDirectoryInfo) {\n    return extend(this._createFileInfo(fileItem, parentDirectoryInfo), {\n      icon: \"folder\",\n      expanded: fileItem.isRoot(),\n      items: []\n    });\n  }\n\n  _createFileInfo(fileItem, parentDirectoryInfo) {\n    return {\n      fileItem: fileItem,\n      parentDirectory: parentDirectoryInfo,\n      icon: this._getFileItemDefaultIcon(fileItem),\n\n      getInternalKey() {\n        return \"FIK_\".concat(this.fileItem.key);\n      },\n\n      getDisplayName() {\n        return this.displayName || this.fileItem.name;\n      }\n\n    };\n  }\n\n  _resetDirectoryState(directoryInfo, isActualDirectoryRequired) {\n    if (isActualDirectoryRequired) {\n      directoryInfo = this._getActualDirectoryInfo(directoryInfo);\n    }\n\n    directoryInfo.itemsLoaded = false;\n    directoryInfo.items = [];\n  }\n\n  _getFileItemDefaultIcon(fileItem) {\n    if (fileItem.isDirectory) {\n      return \"folder\";\n    }\n\n    var extension = fileItem.getFileExtension();\n    var icon = this._defaultIconMap[extension];\n    return icon || \"doc\";\n  }\n\n  _createDefaultIconMap() {\n    var result = {\n      \".txt\": \"txtfile\",\n      \".rtf\": \"rtffile\",\n      \".doc\": \"docfile\",\n      \".docx\": \"docxfile\",\n      \".xls\": \"xlsfile\",\n      \".xlsx\": \"xlsxfile\",\n      \".ppt\": \"pptfile\",\n      \".pptx\": \"pptxfile\",\n      \".pdf\": \"pdffile\"\n    };\n    [\".png\", \".gif\", \".jpg\", \".jpeg\", \".ico\", \".bmp\"].forEach(extension => {\n      result[extension] = \"image\";\n    });\n    return result;\n  }\n\n  _createRootDirectoryInfo(text) {\n    var rootDirectory = new FileSystemItem(null, \"\", true);\n\n    var result = this._createDirectoryInfo(rootDirectory, null);\n\n    result.displayName = text || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n    return result;\n  }\n\n  setRootText(rootText) {\n    this._rootDirectoryInfo.displayName = rootText || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\n  }\n\n  _raiseInitialized() {\n    this._tryCallAction(\"onInitialized\", {\n      controller: this\n    });\n  }\n\n  _raiseDataLoading(operation) {\n    this._tryCallAction(\"onDataLoading\", {\n      operation: operation\n    });\n  }\n\n  _raiseSelectedDirectoryChanged(directoryInfo) {\n    this._tryCallAction(\"onSelectedDirectoryChanged\", {\n      selectedDirectoryInfo: directoryInfo\n    });\n  }\n\n  _raiseEditActionStarting(actionInfo) {\n    this._tryCallAction(\"onEditActionStarting\", actionInfo);\n  }\n\n  _raiseEditActionResultAcquired(actionInfo) {\n    this._tryCallAction(\"onEditActionResultAcquired\", actionInfo);\n  }\n\n  _raiseEditActionError(actionInfo, errorInfo) {\n    this._tryCallAction(\"onEditActionError\", actionInfo, errorInfo);\n  }\n\n  _raiseEditActionItemError(actionInfo, errorInfo) {\n    this._tryCallAction(\"onEditActionItemError\", actionInfo, errorInfo);\n  }\n\n  _raiseCompleteEditActionItem(actionInfo, info) {\n    this._tryCallAction(\"onCompleteEditActionItem\", actionInfo, info);\n  }\n\n  _raiseCompleteEditAction(actionInfo) {\n    this._tryCallAction(\"onCompleteEditAction\", actionInfo);\n  }\n\n  _raisePathPotentiallyChanged() {\n    this._tryCallAction(\"onPathPotentiallyChanged\");\n  }\n\n  _tryCallAction(actionName) {\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if (this._isInitialized && this._options[actionName]) {\n      this._options[actionName](...args);\n    }\n  }\n\n  _resetState() {\n    this._selectedDirectory = null;\n    this._rootDirectoryInfo.items = [];\n    this._rootDirectoryInfo.itemsLoaded = false;\n    this._loadedItems = {};\n  }\n\n  _getPathInfo(directoryInfo) {\n    var pathInfo = [];\n\n    for (var dirInfo = directoryInfo; dirInfo && !dirInfo.fileItem.isRoot(); dirInfo = dirInfo.parentDirectory) {\n      pathInfo.unshift({\n        key: dirInfo.fileItem.key,\n        name: dirInfo.fileItem.name\n      });\n    }\n\n    return pathInfo;\n  }\n\n  on(eventName, eventHandler) {\n    var finalEventName = \"on\".concat(eventName);\n    this._options[finalEventName] = eventHandler;\n  }\n\n  get _editingEvents() {\n    return this._options.editingEvents;\n  }\n\n}\n\nclass FileSecurityController {\n  constructor(options) {\n    this._options = extend({\n      allowedFileExtensions: [],\n      maxFileSize: 0\n    }, options);\n    this._extensionsMap = {};\n\n    this._allowedFileExtensions.forEach(extension => {\n      this._extensionsMap[extension.toUpperCase()] = true;\n    });\n  }\n\n  getAllowedItems(items) {\n    if (0 === this._allowedFileExtensions.length) {\n      return items;\n    }\n\n    return items.filter(item => item.isDirectory || this._isValidExtension(item.name));\n  }\n\n  validateExtension(name) {\n    if (!this._isValidExtension(name)) {\n      throw new FileSystemError(ErrorCode.WrongFileExtension, null);\n    }\n  }\n\n  validateMaxFileSize(size) {\n    if (this._maxFileSize && size > this._maxFileSize) {\n      throw new FileSystemError(ErrorCode.MaxFileSizeExceeded, null);\n    }\n  }\n\n  _isValidExtension(name) {\n    if (0 === this._allowedFileExtensions.length) {\n      return true;\n    }\n\n    var extension = getFileExtension(name).toUpperCase();\n    return this._extensionsMap[extension];\n  }\n\n  get _allowedFileExtensions() {\n    return this._options.allowedFileExtensions;\n  }\n\n  get _maxFileSize() {\n    return this._options.maxFileSize;\n  }\n\n}","map":{"version":3,"names":["FileSystemProviderBase","FileSystemItem","ObjectFileSystemProvider","RemoteFileSystemProvider","CustomFileSystemProvider","FileSystemError","ErrorCode","pathCombine","getEscapedFileName","getPathParts","getFileExtension","whenSome","Deferred","when","extend","equalByValue","isDefined","isObject","isPromise","Guid","DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME","FileItemsController","constructor","options","_options","_isInitialized","_dataLoading","_dataLoadingDeferred","_rootDirectoryInfo","_createRootDirectoryInfo","rootText","_currentDirectoryInfo","_defaultIconMap","_createDefaultIconMap","startSingleLoad","_setSecurityController","_setProvider","fileProvider","_initialize","result","currentPathKeys","length","setCurrentPathByKeys","setCurrentPath","currentPath","completeInitialization","_raiseInitialized","always","_securityController","FileSecurityController","allowedFileExtensions","maxFileSize","uploadMaxFileSize","_resetState","setAllowedFileExtensions","refresh","setUploadOptions","_ref","chunkSize","uploadChunkSize","_fileProvider","_createFileProvider","updateProvider","_updateProviderOnly","_getDirectoryByPathParts","then","newDirectory","_resetCurrentDirectory","Array","isArray","data","type","path","pathParts","rawPath","getCurrentDirectory","fileItem","relativeName","resolve","promise","_setCurrentDirectoryByPathParts","pathKeys","getCurrentPath","directory","isRoot","escapedName","name","parentDirectory","getCurrentPathKeys","setCurrentDirectory","directoryInfo","checkActuality","_getActualDirectoryInfo","_raisePathPotentiallyChanged","requireRaiseSelectedDirectory","key","_raiseDataLoading","_raiseSelectedDirectoryChanged","getCurrentItems","onlyFiles","_getCurrentItemsInternal","currentDirectory","getItemsPromise","getDirectoryContents","items","separatedItems","_separateItemsByType","hasSubDirectories","folders","files","getDirectories","parentDirectoryInfo","skipNavigationOnError","itemInfos","filter","info","isDirectory","forEach","push","itemsLoaded","_singleOperationLockId","itemsSingleLoadErrorId","_changeDirectoryOnError","reject","dirKey","getInternalKey","loadItemsDeferred","_loadedItems","_getFileItems","fileItems","map","_createDirectoryInfo","_createFileInfo","getItems","error","_handleItemLoadError","getAllowedItems","errorInfo","createDirectory","parentDirItem","tempDirInfo","_createDirInfoByName","actionInfo","_createEditActionInfo","_processEditAction","args","_editingEvents","onDirectoryCreating","done","onDirectoryCreated","_resetDirectoryState","renameItem","fileItemInfo","sourceItem","createClone","itemNewName","itemInfo","validateExtension","item","newName","onItemRenaming","itemName","onItemRenamed","moveItems","destinationDirectory","onItemMoving","itemPath","onItemMoved","needChangeCurrentDirectory","expanded","copyItems","onItemCopying","onItemCopied","deleteItems","onItemDeleting","onItemDeleted","parentDir","processUploadSession","sessionInfo","uploadDirectoryInfo","_getItemInfosForUploaderFiles","_","index","deferreds","uploadFileChunk","fileData","chunksInfo","startDeferred","chunkIndex","validateMaxFileSize","size","_processBeforeItemEditAction","onFileUploading","chunkCount","onFileUploaded","abortFileUpload","getFileUploadChunkSize","downloadItems","onItemDownloading","i","_getItemActionResult","_raiseDownloadItemsError","getItemContent","getItemsContent","_raiseGetItemsError","_raiseEditActionStarting","_raiseEditActionResultAcquired","_raiseEditActionError","errorCode","errorText","targetFileInfos","itemsLength","singleRequest","_raiseEditActionItemError","dirInfo","isActualDirectoryRequired","actionResult","beforeAction","action","afterAction","completeAction","isAnyOperationSuccessful","itemIndex","itemActionResult","_raiseCompleteEditActionItem","_raiseCompleteEditAction","targetItemInfos","customData","deferred","_createBeforeActionArgs","cancel","res","pathInfo","_getPathInfo","file","_lockRefresh","_refreshDeferred","_executeDataLoad","_refreshInternal","toString","endSingleLoad","cachedRootInfo","selectedKeyParts","_getDirectoryPathKeyParts","_loadItemsRecursive","_findDirectoryByPathKeyParts","cachedDirectoryInfo","_this","dirInfos","itemDeferreds","_loop","cachedItem","find","cache","_ret","useKeys","_setCurrentDirectoryByPathPartsInternal","operation","tempDeferred","fieldName","subDirInfo","d","restPathParts","splice","unshift","keyParts","selectedDirInfo","newSelectedDir","keys","dirPathInfo","icon","_getFileItemDefaultIcon","concat","getDisplayName","displayName","extension","text","rootDirectory","setRootText","_tryCallAction","controller","selectedDirectoryInfo","actionName","prototype","slice","call","arguments","_selectedDirectory","on","eventName","eventHandler","finalEventName","editingEvents","_extensionsMap","_allowedFileExtensions","toUpperCase","_isValidExtension","WrongFileExtension","_maxFileSize","MaxFileSizeExceeded"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/file_manager/file_items_controller.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/file_items_controller.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport FileSystemProviderBase from \"../../file_management/provider_base\";\r\nimport FileSystemItem from \"../../file_management/file_system_item\";\r\nimport ObjectFileSystemProvider from \"../../file_management/object_provider\";\r\nimport RemoteFileSystemProvider from \"../../file_management/remote_provider\";\r\nimport CustomFileSystemProvider from \"../../file_management/custom_provider\";\r\nimport FileSystemError from \"../../file_management/error\";\r\nimport ErrorCode from \"../../file_management/error_codes\";\r\nimport {\r\n    pathCombine,\r\n    getEscapedFileName,\r\n    getPathParts,\r\n    getFileExtension\r\n} from \"../../file_management/utils\";\r\nimport {\r\n    whenSome\r\n} from \"./ui.file_manager.common\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isPromise\r\n} from \"../../core/utils/type\";\r\nimport Guid from \"../../core/guid\";\r\nvar DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME = \"Files\";\r\nexport default class FileItemsController {\r\n    constructor(options) {\r\n        options = options || {};\r\n        this._options = extend({}, options);\r\n        this._isInitialized = false;\r\n        this._dataLoading = false;\r\n        this._dataLoadingDeferred = null;\r\n        this._rootDirectoryInfo = this._createRootDirectoryInfo(options.rootText);\r\n        this._currentDirectoryInfo = this._rootDirectoryInfo;\r\n        this._defaultIconMap = this._createDefaultIconMap();\r\n        this.startSingleLoad();\r\n        this._setSecurityController();\r\n        this._setProvider(options.fileProvider);\r\n        this._initialize()\r\n    }\r\n    _initialize() {\r\n        var result = this._options.currentPathKeys && this._options.currentPathKeys.length ? this.setCurrentPathByKeys(this._options.currentPathKeys) : this.setCurrentPath(this._options.currentPath);\r\n        var completeInitialization = () => {\r\n            this._isInitialized = true;\r\n            this._raiseInitialized()\r\n        };\r\n        if (result) {\r\n            when(result).always(completeInitialization)\r\n        } else {\r\n            completeInitialization()\r\n        }\r\n    }\r\n    _setSecurityController() {\r\n        this._securityController = new FileSecurityController({\r\n            allowedFileExtensions: this._options.allowedFileExtensions,\r\n            maxFileSize: this._options.uploadMaxFileSize\r\n        });\r\n        this._resetState()\r\n    }\r\n    setAllowedFileExtensions(allowedFileExtensions) {\r\n        if (isDefined(allowedFileExtensions)) {\r\n            this._options.allowedFileExtensions = allowedFileExtensions\r\n        }\r\n        this._setSecurityController();\r\n        this.refresh()\r\n    }\r\n    setUploadOptions(_ref) {\r\n        var {\r\n            maxFileSize: maxFileSize,\r\n            chunkSize: chunkSize\r\n        } = _ref;\r\n        if (isDefined(chunkSize)) {\r\n            this._options.uploadChunkSize = chunkSize\r\n        }\r\n        if (isDefined(maxFileSize)) {\r\n            this._options.uploadMaxFileSize = maxFileSize;\r\n            this._setSecurityController();\r\n            this.refresh()\r\n        }\r\n    }\r\n    _setProvider(fileProvider) {\r\n        this._fileProvider = this._createFileProvider(fileProvider);\r\n        this._resetState()\r\n    }\r\n    updateProvider(fileProvider, currentPathKeys) {\r\n        if (!isDefined(currentPathKeys)) {\r\n            return this._updateProviderOnly(fileProvider)\r\n        }\r\n        return when(this._getDirectoryByPathParts(this._rootDirectoryInfo, currentPathKeys, true)).then(newDirectory => {\r\n            if (newDirectory !== this._rootDirectoryInfo) {\r\n                this._resetCurrentDirectory()\r\n            }\r\n            this._setProvider(fileProvider)\r\n        }).then(() => this.setCurrentPathByKeys(currentPathKeys))\r\n    }\r\n    _updateProviderOnly(fileProvider) {\r\n        this._resetCurrentDirectory();\r\n        this._setProvider(fileProvider);\r\n        return when(this.refresh())\r\n    }\r\n    _createFileProvider(fileProvider) {\r\n        if (!fileProvider) {\r\n            fileProvider = []\r\n        }\r\n        if (Array.isArray(fileProvider)) {\r\n            return new ObjectFileSystemProvider({\r\n                data: fileProvider\r\n            })\r\n        }\r\n        if (fileProvider instanceof FileSystemProviderBase) {\r\n            return fileProvider\r\n        }\r\n        switch (fileProvider.type) {\r\n            case \"remote\":\r\n                return new RemoteFileSystemProvider(fileProvider);\r\n            case \"custom\":\r\n                return new CustomFileSystemProvider(fileProvider)\r\n        }\r\n        return new ObjectFileSystemProvider(fileProvider)\r\n    }\r\n    setCurrentPath(path) {\r\n        var pathParts = getPathParts(path);\r\n        var rawPath = pathCombine(...pathParts);\r\n        if (this.getCurrentDirectory().fileItem.relativeName === rawPath) {\r\n            return (new Deferred).resolve().promise()\r\n        }\r\n        return this._setCurrentDirectoryByPathParts(pathParts)\r\n    }\r\n    setCurrentPathByKeys(pathKeys) {\r\n        if (equalByValue(this.getCurrentDirectory().fileItem.pathKeys, pathKeys, 0, true)) {\r\n            return (new Deferred).resolve().promise()\r\n        }\r\n        return this._setCurrentDirectoryByPathParts(pathKeys, true)\r\n    }\r\n    getCurrentPath() {\r\n        var currentPath = \"\";\r\n        var directory = this.getCurrentDirectory();\r\n        while (directory && !directory.fileItem.isRoot()) {\r\n            var escapedName = getEscapedFileName(directory.fileItem.name);\r\n            currentPath = pathCombine(escapedName, currentPath);\r\n            directory = directory.parentDirectory\r\n        }\r\n        return currentPath\r\n    }\r\n    getCurrentPathKeys() {\r\n        return this.getCurrentDirectory().fileItem.pathKeys\r\n    }\r\n    getCurrentDirectory() {\r\n        return this._currentDirectoryInfo\r\n    }\r\n    setCurrentDirectory(directoryInfo, checkActuality) {\r\n        if (!directoryInfo) {\r\n            return\r\n        }\r\n        if (checkActuality) {\r\n            directoryInfo = this._getActualDirectoryInfo(directoryInfo)\r\n        }\r\n        if (this._currentDirectoryInfo && this._currentDirectoryInfo === directoryInfo) {\r\n            this._raisePathPotentiallyChanged();\r\n            return\r\n        }\r\n        var requireRaiseSelectedDirectory = this._currentDirectoryInfo.fileItem.key !== directoryInfo.fileItem.key;\r\n        this._currentDirectoryInfo = directoryInfo;\r\n        if (requireRaiseSelectedDirectory && this._isInitialized) {\r\n            if (!this._dataLoading) {\r\n                this._raiseDataLoading(\"navigation\")\r\n            }\r\n            this._raiseSelectedDirectoryChanged(directoryInfo)\r\n        }\r\n    }\r\n    _resetCurrentDirectory() {\r\n        this._currentDirectoryInfo = this._rootDirectoryInfo\r\n    }\r\n    getCurrentItems(onlyFiles) {\r\n        return this._dataLoadingDeferred ? this._dataLoadingDeferred.then(() => this._getCurrentItemsInternal(onlyFiles)) : this._getCurrentItemsInternal(onlyFiles)\r\n    }\r\n    _getCurrentItemsInternal(onlyFiles) {\r\n        var currentDirectory = this.getCurrentDirectory();\r\n        var getItemsPromise = this.getDirectoryContents(currentDirectory);\r\n        return getItemsPromise.then(items => {\r\n            var separatedItems = this._separateItemsByType(items);\r\n            currentDirectory.fileItem.hasSubDirectories = !!separatedItems.folders.length;\r\n            return onlyFiles ? separatedItems.files : items\r\n        })\r\n    }\r\n    getDirectories(parentDirectoryInfo, skipNavigationOnError) {\r\n        return this.getDirectoryContents(parentDirectoryInfo, skipNavigationOnError).then(itemInfos => itemInfos.filter(info => info.fileItem.isDirectory))\r\n    }\r\n    _separateItemsByType(itemInfos) {\r\n        var folders = [];\r\n        var files = [];\r\n        itemInfos.forEach(info => info.fileItem.isDirectory ? folders.push(info) : files.push(info));\r\n        return {\r\n            folders: folders,\r\n            files: files\r\n        }\r\n    }\r\n    getDirectoryContents(parentDirectoryInfo, skipNavigationOnError) {\r\n        if (!parentDirectoryInfo) {\r\n            return (new Deferred).resolve([this._rootDirectoryInfo]).promise()\r\n        }\r\n        if (parentDirectoryInfo.itemsLoaded) {\r\n            return (new Deferred).resolve(parentDirectoryInfo.items).promise()\r\n        }\r\n        if (this._singleOperationLockId && parentDirectoryInfo.itemsSingleLoadErrorId === this._singleOperationLockId) {\r\n            this._changeDirectoryOnError(parentDirectoryInfo, skipNavigationOnError, true);\r\n            return (new Deferred).reject().promise()\r\n        }\r\n        var dirKey = parentDirectoryInfo.getInternalKey();\r\n        var loadItemsDeferred = this._loadedItems[dirKey];\r\n        if (loadItemsDeferred) {\r\n            return loadItemsDeferred\r\n        }\r\n        loadItemsDeferred = this._getFileItems(parentDirectoryInfo, skipNavigationOnError).then(fileItems => {\r\n            fileItems = fileItems || [];\r\n            parentDirectoryInfo.items = fileItems.map(fileItem => fileItem.isDirectory && this._createDirectoryInfo(fileItem, parentDirectoryInfo) || this._createFileInfo(fileItem, parentDirectoryInfo));\r\n            parentDirectoryInfo.itemsLoaded = true;\r\n            return parentDirectoryInfo.items\r\n        }, () => {\r\n            if (this._singleOperationLockId && parentDirectoryInfo.itemsSingleLoadErrorId !== this._singleOperationLockId) {\r\n                parentDirectoryInfo.itemsSingleLoadErrorId = this._singleOperationLockId\r\n            }\r\n            return []\r\n        });\r\n        this._loadedItems[dirKey] = loadItemsDeferred;\r\n        loadItemsDeferred.always(() => {\r\n            delete this._loadedItems[dirKey]\r\n        });\r\n        return loadItemsDeferred\r\n    }\r\n    _getFileItems(parentDirectoryInfo, skipNavigationOnError) {\r\n        var loadItemsDeferred = null;\r\n        try {\r\n            loadItemsDeferred = this._fileProvider.getItems(parentDirectoryInfo.fileItem)\r\n        } catch (error) {\r\n            return this._handleItemLoadError(parentDirectoryInfo, error, skipNavigationOnError)\r\n        }\r\n        return when(loadItemsDeferred).then(fileItems => this._securityController.getAllowedItems(fileItems), errorInfo => this._handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError))\r\n    }\r\n    createDirectory(parentDirectoryInfo, name) {\r\n        var parentDirItem = parentDirectoryInfo.fileItem;\r\n        var tempDirInfo = this._createDirInfoByName(name, parentDirectoryInfo);\r\n        var actionInfo = this._createEditActionInfo(\"create\", tempDirInfo, parentDirectoryInfo);\r\n        return this._processEditAction(actionInfo, args => {\r\n            args.parentDirectory = parentDirItem;\r\n            args.name = name;\r\n            this._editingEvents.onDirectoryCreating(args)\r\n        }, () => this._fileProvider.createDirectory(parentDirItem, name).done(info => {\r\n            if (!parentDirItem.isRoot()) {\r\n                parentDirItem.hasSubDirectories = true\r\n            }\r\n            return info\r\n        }), () => {\r\n            var args = {\r\n                parentDirectory: parentDirItem,\r\n                name: name\r\n            };\r\n            this._editingEvents.onDirectoryCreated(args)\r\n        }, () => this._resetDirectoryState(parentDirectoryInfo, true))\r\n    }\r\n    renameItem(fileItemInfo, name) {\r\n        var sourceItem = fileItemInfo.fileItem.createClone();\r\n        var actionInfo = this._createEditActionInfo(\"rename\", fileItemInfo, fileItemInfo.parentDirectory, {\r\n            itemNewName: name\r\n        });\r\n        return this._processEditAction(actionInfo, (args, itemInfo) => {\r\n            if (!itemInfo.fileItem.isDirectory) {\r\n                this._securityController.validateExtension(name)\r\n            }\r\n            args.item = sourceItem;\r\n            args.newName = name;\r\n            this._editingEvents.onItemRenaming(args)\r\n        }, item => this._fileProvider.renameItem(item, name), () => {\r\n            var args = {\r\n                sourceItem: sourceItem,\r\n                itemName: name\r\n            };\r\n            this._editingEvents.onItemRenamed(args)\r\n        }, () => {\r\n            var parentDirectory = this._getActualDirectoryInfo(fileItemInfo.parentDirectory);\r\n            this._resetDirectoryState(parentDirectory);\r\n            this.setCurrentDirectory(parentDirectory)\r\n        })\r\n    }\r\n    moveItems(itemInfos, destinationDirectory) {\r\n        var actionInfo = this._createEditActionInfo(\"move\", itemInfos, destinationDirectory);\r\n        return this._processEditAction(actionInfo, (args, itemInfo) => {\r\n            args.item = itemInfo.fileItem;\r\n            args.destinationDirectory = destinationDirectory.fileItem;\r\n            this._editingEvents.onItemMoving(args)\r\n        }, item => this._fileProvider.moveItems([item], destinationDirectory.fileItem), itemInfo => {\r\n            var args = {\r\n                sourceItem: itemInfo.fileItem,\r\n                parentDirectory: destinationDirectory.fileItem,\r\n                itemName: itemInfo.fileItem.name,\r\n                itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\r\n            };\r\n            this._editingEvents.onItemMoved(args)\r\n        }, needChangeCurrentDirectory => {\r\n            if (needChangeCurrentDirectory) {\r\n                destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\r\n                this._resetDirectoryState(destinationDirectory);\r\n                this.setCurrentDirectory(destinationDirectory);\r\n                destinationDirectory.expanded = true\r\n            }\r\n            itemInfos.forEach(itemInfo => this._resetDirectoryState(itemInfo.parentDirectory, true))\r\n        })\r\n    }\r\n    copyItems(itemInfos, destinationDirectory) {\r\n        var actionInfo = this._createEditActionInfo(\"copy\", itemInfos, destinationDirectory);\r\n        return this._processEditAction(actionInfo, (args, itemInfo) => {\r\n            args.item = itemInfo.fileItem;\r\n            args.destinationDirectory = destinationDirectory.fileItem;\r\n            this._editingEvents.onItemCopying(args)\r\n        }, item => this._fileProvider.copyItems([item], destinationDirectory.fileItem), itemInfo => {\r\n            var args = {\r\n                sourceItem: itemInfo.fileItem,\r\n                parentDirectory: destinationDirectory.fileItem,\r\n                itemName: itemInfo.fileItem.name,\r\n                itemPath: pathCombine(destinationDirectory.fileItem.path, itemInfo.fileItem.name)\r\n            };\r\n            this._editingEvents.onItemCopied(args)\r\n        }, needChangeCurrentDirectory => {\r\n            if (needChangeCurrentDirectory) {\r\n                destinationDirectory = this._getActualDirectoryInfo(destinationDirectory);\r\n                this._resetDirectoryState(destinationDirectory);\r\n                this.setCurrentDirectory(destinationDirectory);\r\n                destinationDirectory.expanded = true\r\n            }\r\n        })\r\n    }\r\n    deleteItems(itemInfos) {\r\n        var directory = itemInfos.length > 0 ? itemInfos[0].parentDirectory : null;\r\n        var actionInfo = this._createEditActionInfo(\"delete\", itemInfos, directory);\r\n        return this._processEditAction(actionInfo, (args, itemInfo) => {\r\n            args.item = itemInfo.fileItem;\r\n            this._editingEvents.onItemDeleting(args)\r\n        }, item => this._fileProvider.deleteItems([item]), itemInfo => this._editingEvents.onItemDeleted({\r\n            item: itemInfo.fileItem\r\n        }), () => {\r\n            itemInfos.forEach(itemInfo => {\r\n                var parentDir = this._getActualDirectoryInfo(itemInfo.parentDirectory);\r\n                this._resetDirectoryState(parentDir);\r\n                this.setCurrentDirectory(parentDir)\r\n            })\r\n        })\r\n    }\r\n    processUploadSession(sessionInfo, uploadDirectoryInfo) {\r\n        var itemInfos = this._getItemInfosForUploaderFiles(sessionInfo.files, uploadDirectoryInfo);\r\n        var actionInfo = this._createEditActionInfo(\"upload\", itemInfos, uploadDirectoryInfo, {\r\n            sessionInfo: sessionInfo\r\n        });\r\n        return this._processEditAction(actionInfo, () => {}, (_, index) => sessionInfo.deferreds[index], () => {}, () => this._resetDirectoryState(uploadDirectoryInfo, true))\r\n    }\r\n    uploadFileChunk(fileData, chunksInfo, destinationDirectory) {\r\n        var startDeferred = null;\r\n        if (0 === chunksInfo.chunkIndex) {\r\n            this._securityController.validateMaxFileSize(fileData.size);\r\n            this._securityController.validateExtension(fileData.name);\r\n            startDeferred = this._processBeforeItemEditAction(args => {\r\n                args.fileData = fileData;\r\n                args.destinationDirectory = destinationDirectory;\r\n                this._editingEvents.onFileUploading(args)\r\n            })\r\n        } else {\r\n            startDeferred = (new Deferred).resolve().promise()\r\n        }\r\n        var result = startDeferred.then(() => this._fileProvider.uploadFileChunk(fileData, chunksInfo, destinationDirectory));\r\n        if (chunksInfo.chunkIndex === chunksInfo.chunkCount - 1) {\r\n            result = result.done(() => {\r\n                var args = {\r\n                    fileData: fileData,\r\n                    parentDirectory: destinationDirectory\r\n                };\r\n                this._editingEvents.onFileUploaded(args)\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    abortFileUpload(fileData, chunksInfo, destinationDirectory) {\r\n        return when(this._fileProvider.abortFileUpload(fileData, chunksInfo, destinationDirectory))\r\n    }\r\n    getFileUploadChunkSize() {\r\n        var chunkSize = this._options.uploadChunkSize;\r\n        if (chunkSize && chunkSize > 0) {\r\n            return chunkSize\r\n        }\r\n        return this._fileProvider.getFileUploadChunkSize()\r\n    }\r\n    downloadItems(itemInfos) {\r\n        var deferreds = itemInfos.map(itemInfo => this._processBeforeItemEditAction(args => {\r\n            args.item = itemInfo.fileItem;\r\n            this._editingEvents.onItemDownloading(args)\r\n        }, itemInfo));\r\n        return when(...deferreds).then(() => {\r\n            var items = itemInfos.map(i => i.fileItem);\r\n            return when(this._getItemActionResult(this._fileProvider.downloadItems(items))).then(() => {}, errorInfo => {\r\n                this._raiseDownloadItemsError(itemInfos, itemInfos[0].parentDirectory, errorInfo)\r\n            })\r\n        }, errorInfo => {\r\n            this._raiseDownloadItemsError(itemInfos, itemInfos[0].parentDirectory, errorInfo)\r\n        })\r\n    }\r\n    getItemContent(itemInfos) {\r\n        var items = itemInfos.map(i => i.fileItem);\r\n        return when(this._fileProvider.getItemsContent(items))\r\n    }\r\n    _handleItemLoadError(parentDirectoryInfo, errorInfo, skipNavigationOnError) {\r\n        parentDirectoryInfo = this._getActualDirectoryInfo(parentDirectoryInfo);\r\n        this._raiseGetItemsError(parentDirectoryInfo, errorInfo);\r\n        this._changeDirectoryOnError(parentDirectoryInfo, skipNavigationOnError);\r\n        return (new Deferred).reject().promise()\r\n    }\r\n    _raiseGetItemsError(parentDirectoryInfo, errorInfo) {\r\n        var actionInfo = this._createEditActionInfo(\"getItems\", parentDirectoryInfo, parentDirectoryInfo);\r\n        this._raiseEditActionStarting(actionInfo);\r\n        this._raiseEditActionResultAcquired(actionInfo);\r\n        this._raiseEditActionError(actionInfo, {\r\n            errorCode: errorInfo.errorCode,\r\n            errorText: errorInfo.errorText,\r\n            fileItem: parentDirectoryInfo.fileItem,\r\n            index: 0\r\n        })\r\n    }\r\n    _raiseDownloadItemsError(targetFileInfos, directory, errorInfo) {\r\n        var actionInfo = this._createEditActionInfo(\"download\", targetFileInfos, directory);\r\n        var itemsLength = targetFileInfos.length;\r\n        actionInfo.singleRequest = 1 === itemsLength;\r\n        this._raiseEditActionStarting(actionInfo);\r\n        this._raiseEditActionResultAcquired(actionInfo);\r\n        for (var index = 0; index < itemsLength - 1; index++) {\r\n            this._raiseEditActionItemError(actionInfo, {\r\n                errorCode: errorInfo.errorCode,\r\n                errorText: errorInfo.errorText,\r\n                fileItem: targetFileInfos[index].fileItem,\r\n                index: index\r\n            })\r\n        }\r\n        this._raiseEditActionError(actionInfo, {\r\n            errorCode: errorInfo.errorCode,\r\n            errorText: errorInfo.errorText,\r\n            fileItem: targetFileInfos[itemsLength - 1].fileItem,\r\n            index: itemsLength - 1\r\n        })\r\n    }\r\n    _changeDirectoryOnError(dirInfo, skipNavigationOnError, isActualDirectoryRequired) {\r\n        if (isActualDirectoryRequired) {\r\n            dirInfo = this._getActualDirectoryInfo(dirInfo)\r\n        }\r\n        this._resetDirectoryState(dirInfo);\r\n        dirInfo.expanded = false;\r\n        if (!skipNavigationOnError) {\r\n            this.setCurrentDirectory(dirInfo.parentDirectory)\r\n        }\r\n    }\r\n    _getItemActionResult(actionResult) {\r\n        return Array.isArray(actionResult) ? actionResult[0] : actionResult\r\n    }\r\n    _processEditAction(actionInfo, beforeAction, action, afterAction, completeAction) {\r\n        var isAnyOperationSuccessful = false;\r\n        this._raiseEditActionStarting(actionInfo);\r\n        var actionResult = actionInfo.itemInfos.map((itemInfo, itemIndex) => this._processBeforeItemEditAction(beforeAction, itemInfo).then(() => {\r\n            var itemActionResult = this._getItemActionResult(action(itemInfo.fileItem, itemIndex));\r\n            return itemActionResult.done(() => afterAction(itemInfo))\r\n        }));\r\n        actionInfo.singleRequest = 1 === actionResult.length;\r\n        this._raiseEditActionResultAcquired(actionInfo);\r\n        return whenSome(actionResult, info => {\r\n            isAnyOperationSuccessful = true;\r\n            this._raiseCompleteEditActionItem(actionInfo, info)\r\n        }, errorInfo => this._raiseEditActionItemError(actionInfo, errorInfo)).then(() => {\r\n            completeAction(isAnyOperationSuccessful);\r\n            this._raiseCompleteEditAction(actionInfo)\r\n        })\r\n    }\r\n    _createEditActionInfo(name, targetItemInfos, directory, customData) {\r\n        targetItemInfos = Array.isArray(targetItemInfos) ? targetItemInfos : [targetItemInfos];\r\n        customData = customData || {};\r\n        var items = targetItemInfos.map(itemInfo => itemInfo.fileItem);\r\n        return {\r\n            name: name,\r\n            itemInfos: targetItemInfos,\r\n            items: items,\r\n            directory: directory,\r\n            customData: customData,\r\n            singleRequest: true\r\n        }\r\n    }\r\n    _processBeforeItemEditAction(action, itemInfo) {\r\n        var deferred = new Deferred;\r\n        var args = this._createBeforeActionArgs();\r\n        try {\r\n            action(args, itemInfo)\r\n        } catch (errorInfo) {\r\n            return deferred.reject(errorInfo).promise()\r\n        }\r\n        if (!args.cancel) {\r\n            deferred.resolve()\r\n        } else if (true === args.cancel) {\r\n            return deferred.reject({\r\n                errorText: args.errorText,\r\n                errorCode: args.errorCode\r\n            })\r\n        } else if (isPromise(args.cancel)) {\r\n            when(args.cancel).then(res => {\r\n                if (true === res) {\r\n                    deferred.reject()\r\n                } else if (isObject(res) && true === res.cancel) {\r\n                    deferred.reject({\r\n                        errorText: res.errorText,\r\n                        errorCode: res.errorCode\r\n                    })\r\n                }\r\n                deferred.resolve()\r\n            }, deferred.resolve)\r\n        }\r\n        return deferred.promise()\r\n    }\r\n    _createBeforeActionArgs() {\r\n        return {\r\n            errorCode: void 0,\r\n            errorText: \"\",\r\n            cancel: false\r\n        }\r\n    }\r\n    _getItemInfosForUploaderFiles(files, parentDirectoryInfo) {\r\n        var pathInfo = this._getPathInfo(parentDirectoryInfo);\r\n        var result = [];\r\n        for (var i = 0; i < files.length; i++) {\r\n            var file = files[i];\r\n            var item = new FileSystemItem(pathInfo, file.name, false);\r\n            var itemInfo = this._createFileInfo(item, parentDirectoryInfo);\r\n            result.push(itemInfo)\r\n        }\r\n        return result\r\n    }\r\n    refresh() {\r\n        if (this._lockRefresh) {\r\n            return this._refreshDeferred\r\n        }\r\n        this._lockRefresh = true;\r\n        return this._executeDataLoad(() => this._refreshDeferred = this._refreshInternal(), \"refresh\")\r\n    }\r\n    startSingleLoad() {\r\n        this._singleOperationLockId = (new Guid).toString()\r\n    }\r\n    endSingleLoad() {\r\n        delete this._singleOperationLockId\r\n    }\r\n    _refreshInternal() {\r\n        var cachedRootInfo = {\r\n            items: this._rootDirectoryInfo.items\r\n        };\r\n        var selectedKeyParts = this._getDirectoryPathKeyParts(this.getCurrentDirectory());\r\n        this._resetDirectoryState(this._rootDirectoryInfo);\r\n        return this._loadItemsRecursive(this._rootDirectoryInfo, cachedRootInfo).then(() => {\r\n            var dirInfo = this._findDirectoryByPathKeyParts(selectedKeyParts);\r\n            this.setCurrentDirectory(dirInfo);\r\n            delete this._lockRefresh\r\n        })\r\n    }\r\n    _loadItemsRecursive(directoryInfo, cachedDirectoryInfo) {\r\n        var _this = this;\r\n        return this.getDirectories(directoryInfo).then(dirInfos => {\r\n            var itemDeferreds = [];\r\n            var _loop = function(i) {\r\n                var cachedItem = cachedDirectoryInfo.items.find(cache => dirInfos[i].fileItem.key === cache.fileItem.key);\r\n                if (!cachedItem) {\r\n                    return \"continue\"\r\n                }\r\n                dirInfos[i].expanded = cachedItem.expanded;\r\n                if (dirInfos[i].expanded) {\r\n                    itemDeferreds.push(_this._loadItemsRecursive(dirInfos[i], cachedItem))\r\n                }\r\n            };\r\n            for (var i = 0; i < dirInfos.length; i++) {\r\n                var _ret = _loop(i);\r\n                if (\"continue\" === _ret) {\r\n                    continue\r\n                }\r\n            }\r\n            return whenSome(itemDeferreds)\r\n        }, () => null)\r\n    }\r\n    _setCurrentDirectoryByPathParts(pathParts, useKeys) {\r\n        return this._executeDataLoad(() => this._setCurrentDirectoryByPathPartsInternal(pathParts, useKeys), \"navigation\")\r\n    }\r\n    _setCurrentDirectoryByPathPartsInternal(pathParts, useKeys) {\r\n        return this._getDirectoryByPathParts(this._rootDirectoryInfo, pathParts, useKeys).then(directoryInfo => {\r\n            for (var info = directoryInfo.parentDirectory; info; info = info.parentDirectory) {\r\n                info.expanded = true\r\n            }\r\n            this.setCurrentDirectory(directoryInfo)\r\n        }, () => {\r\n            this._raisePathPotentiallyChanged()\r\n        })\r\n    }\r\n    _executeDataLoad(action, operation) {\r\n        if (this._dataLoadingDeferred) {\r\n            return this._dataLoadingDeferred.then(() => this._executeDataLoad(action, operation))\r\n        }\r\n        this._dataLoading = true;\r\n        this._dataLoadingDeferred = new Deferred;\r\n        if (this._isInitialized) {\r\n            this._raiseDataLoading(operation)\r\n        }\r\n        return action().always(() => {\r\n            var tempDeferred = this._dataLoadingDeferred;\r\n            this._dataLoadingDeferred = null;\r\n            this._dataLoading = false;\r\n            tempDeferred.resolve()\r\n        })\r\n    }\r\n    _getDirectoryByPathParts(parentDirectoryInfo, pathParts, useKeys) {\r\n        if (pathParts.length < 1) {\r\n            return (new Deferred).resolve(parentDirectoryInfo).promise()\r\n        }\r\n        var fieldName = useKeys ? \"key\" : \"name\";\r\n        return this.getDirectories(parentDirectoryInfo).then(dirInfos => {\r\n            var subDirInfo = dirInfos.find(d => d.fileItem[fieldName] === pathParts[0]);\r\n            if (!subDirInfo) {\r\n                return (new Deferred).reject().promise()\r\n            }\r\n            var restPathParts = [...pathParts].splice(1);\r\n            return this._getDirectoryByPathParts(subDirInfo, restPathParts, useKeys)\r\n        })\r\n    }\r\n    _getDirectoryPathKeyParts(directoryInfo) {\r\n        var pathParts = [];\r\n        while (directoryInfo && directoryInfo.parentDirectory) {\r\n            pathParts.unshift(directoryInfo.fileItem.key);\r\n            directoryInfo = directoryInfo.parentDirectory\r\n        }\r\n        return pathParts\r\n    }\r\n    _findDirectoryByPathKeyParts(keyParts) {\r\n        var selectedDirInfo = this._rootDirectoryInfo;\r\n        if (0 === keyParts.length) {\r\n            return selectedDirInfo\r\n        }\r\n        var i = 0;\r\n        var newSelectedDir = selectedDirInfo;\r\n        while (newSelectedDir && i < keyParts.length) {\r\n            newSelectedDir = selectedDirInfo.items.find(info => info.fileItem.key === keyParts[i]);\r\n            if (newSelectedDir) {\r\n                selectedDirInfo = newSelectedDir\r\n            }\r\n            i++\r\n        }\r\n        return selectedDirInfo\r\n    }\r\n    _getActualDirectoryInfo(directoryInfo) {\r\n        var keys = this._getDirectoryPathKeyParts(directoryInfo);\r\n        return this._findDirectoryByPathKeyParts(keys)\r\n    }\r\n    _createDirInfoByName(name, parentDirectoryInfo) {\r\n        var dirPathInfo = this._getPathInfo(parentDirectoryInfo);\r\n        var fileItem = new FileSystemItem(dirPathInfo, name, true);\r\n        return this._createDirectoryInfo(fileItem, parentDirectoryInfo)\r\n    }\r\n    _createDirectoryInfo(fileItem, parentDirectoryInfo) {\r\n        return extend(this._createFileInfo(fileItem, parentDirectoryInfo), {\r\n            icon: \"folder\",\r\n            expanded: fileItem.isRoot(),\r\n            items: []\r\n        })\r\n    }\r\n    _createFileInfo(fileItem, parentDirectoryInfo) {\r\n        return {\r\n            fileItem: fileItem,\r\n            parentDirectory: parentDirectoryInfo,\r\n            icon: this._getFileItemDefaultIcon(fileItem),\r\n            getInternalKey() {\r\n                return \"FIK_\".concat(this.fileItem.key)\r\n            },\r\n            getDisplayName() {\r\n                return this.displayName || this.fileItem.name\r\n            }\r\n        }\r\n    }\r\n    _resetDirectoryState(directoryInfo, isActualDirectoryRequired) {\r\n        if (isActualDirectoryRequired) {\r\n            directoryInfo = this._getActualDirectoryInfo(directoryInfo)\r\n        }\r\n        directoryInfo.itemsLoaded = false;\r\n        directoryInfo.items = []\r\n    }\r\n    _getFileItemDefaultIcon(fileItem) {\r\n        if (fileItem.isDirectory) {\r\n            return \"folder\"\r\n        }\r\n        var extension = fileItem.getFileExtension();\r\n        var icon = this._defaultIconMap[extension];\r\n        return icon || \"doc\"\r\n    }\r\n    _createDefaultIconMap() {\r\n        var result = {\r\n            \".txt\": \"txtfile\",\r\n            \".rtf\": \"rtffile\",\r\n            \".doc\": \"docfile\",\r\n            \".docx\": \"docxfile\",\r\n            \".xls\": \"xlsfile\",\r\n            \".xlsx\": \"xlsxfile\",\r\n            \".ppt\": \"pptfile\",\r\n            \".pptx\": \"pptxfile\",\r\n            \".pdf\": \"pdffile\"\r\n        };\r\n        [\".png\", \".gif\", \".jpg\", \".jpeg\", \".ico\", \".bmp\"].forEach(extension => {\r\n            result[extension] = \"image\"\r\n        });\r\n        return result\r\n    }\r\n    _createRootDirectoryInfo(text) {\r\n        var rootDirectory = new FileSystemItem(null, \"\", true);\r\n        var result = this._createDirectoryInfo(rootDirectory, null);\r\n        result.displayName = text || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME;\r\n        return result\r\n    }\r\n    setRootText(rootText) {\r\n        this._rootDirectoryInfo.displayName = rootText || DEFAULT_ROOT_FILE_SYSTEM_ITEM_NAME\r\n    }\r\n    _raiseInitialized() {\r\n        this._tryCallAction(\"onInitialized\", {\r\n            controller: this\r\n        })\r\n    }\r\n    _raiseDataLoading(operation) {\r\n        this._tryCallAction(\"onDataLoading\", {\r\n            operation: operation\r\n        })\r\n    }\r\n    _raiseSelectedDirectoryChanged(directoryInfo) {\r\n        this._tryCallAction(\"onSelectedDirectoryChanged\", {\r\n            selectedDirectoryInfo: directoryInfo\r\n        })\r\n    }\r\n    _raiseEditActionStarting(actionInfo) {\r\n        this._tryCallAction(\"onEditActionStarting\", actionInfo)\r\n    }\r\n    _raiseEditActionResultAcquired(actionInfo) {\r\n        this._tryCallAction(\"onEditActionResultAcquired\", actionInfo)\r\n    }\r\n    _raiseEditActionError(actionInfo, errorInfo) {\r\n        this._tryCallAction(\"onEditActionError\", actionInfo, errorInfo)\r\n    }\r\n    _raiseEditActionItemError(actionInfo, errorInfo) {\r\n        this._tryCallAction(\"onEditActionItemError\", actionInfo, errorInfo)\r\n    }\r\n    _raiseCompleteEditActionItem(actionInfo, info) {\r\n        this._tryCallAction(\"onCompleteEditActionItem\", actionInfo, info)\r\n    }\r\n    _raiseCompleteEditAction(actionInfo) {\r\n        this._tryCallAction(\"onCompleteEditAction\", actionInfo)\r\n    }\r\n    _raisePathPotentiallyChanged() {\r\n        this._tryCallAction(\"onPathPotentiallyChanged\")\r\n    }\r\n    _tryCallAction(actionName) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        if (this._isInitialized && this._options[actionName]) {\r\n            this._options[actionName](...args)\r\n        }\r\n    }\r\n    _resetState() {\r\n        this._selectedDirectory = null;\r\n        this._rootDirectoryInfo.items = [];\r\n        this._rootDirectoryInfo.itemsLoaded = false;\r\n        this._loadedItems = {}\r\n    }\r\n    _getPathInfo(directoryInfo) {\r\n        var pathInfo = [];\r\n        for (var dirInfo = directoryInfo; dirInfo && !dirInfo.fileItem.isRoot(); dirInfo = dirInfo.parentDirectory) {\r\n            pathInfo.unshift({\r\n                key: dirInfo.fileItem.key,\r\n                name: dirInfo.fileItem.name\r\n            })\r\n        }\r\n        return pathInfo\r\n    }\r\n    on(eventName, eventHandler) {\r\n        var finalEventName = \"on\".concat(eventName);\r\n        this._options[finalEventName] = eventHandler\r\n    }\r\n    get _editingEvents() {\r\n        return this._options.editingEvents\r\n    }\r\n}\r\nclass FileSecurityController {\r\n    constructor(options) {\r\n        this._options = extend({\r\n            allowedFileExtensions: [],\r\n            maxFileSize: 0\r\n        }, options);\r\n        this._extensionsMap = {};\r\n        this._allowedFileExtensions.forEach(extension => {\r\n            this._extensionsMap[extension.toUpperCase()] = true\r\n        })\r\n    }\r\n    getAllowedItems(items) {\r\n        if (0 === this._allowedFileExtensions.length) {\r\n            return items\r\n        }\r\n        return items.filter(item => item.isDirectory || this._isValidExtension(item.name))\r\n    }\r\n    validateExtension(name) {\r\n        if (!this._isValidExtension(name)) {\r\n            throw new FileSystemError(ErrorCode.WrongFileExtension, null)\r\n        }\r\n    }\r\n    validateMaxFileSize(size) {\r\n        if (this._maxFileSize && size > this._maxFileSize) {\r\n            throw new FileSystemError(ErrorCode.MaxFileSizeExceeded, null)\r\n        }\r\n    }\r\n    _isValidExtension(name) {\r\n        if (0 === this._allowedFileExtensions.length) {\r\n            return true\r\n        }\r\n        var extension = getFileExtension(name).toUpperCase();\r\n        return this._extensionsMap[extension]\r\n    }\r\n    get _allowedFileExtensions() {\r\n        return this._options.allowedFileExtensions\r\n    }\r\n    get _maxFileSize() {\r\n        return this._options.maxFileSize\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}