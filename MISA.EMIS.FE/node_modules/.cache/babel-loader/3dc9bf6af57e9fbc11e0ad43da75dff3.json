{"ast":null,"code":"/**\r\n * DevExtreme (esm/localization/intl/number.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dxConfig from \"../../core/config\";\nimport localizationCoreUtils from \"../core\";\nimport openXmlCurrencyFormat from \"../open_xml_currency_format\";\nimport accountingFormats from \"../cldr-data/accounting_formats\";\nvar CURRENCY_STYLES = [\"standard\", \"accounting\"];\nvar detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\nvar formattersCache = {};\n\nvar getFormatter = format => {\n  var key = localizationCoreUtils.locale() + \"/\" + JSON.stringify(format);\n\n  if (!formattersCache[key]) {\n    formattersCache[key] = new Intl.NumberFormat(localizationCoreUtils.locale(), format).format;\n  }\n\n  return formattersCache[key];\n};\n\nvar getCurrencyFormatter = currency => new Intl.NumberFormat(localizationCoreUtils.locale(), {\n  style: \"currency\",\n  currency: currency\n});\n\nexport default {\n  engine: function () {\n    return \"intl\";\n  },\n  _formatNumberCore: function (value, format, formatConfig) {\n    if (\"exponential\" === format) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return getFormatter(this._normalizeFormatConfig(format, formatConfig, value))(value);\n  },\n  _normalizeFormatConfig: function (format, formatConfig, value) {\n    var config;\n\n    if (\"decimal\" === format) {\n      config = {\n        minimumIntegerDigits: formatConfig.precision || void 0,\n        useGrouping: false,\n        maximumFractionDigits: String(value).length,\n        round: value < 0 ? \"ceil\" : \"floor\"\n      };\n    } else {\n      config = this._getPrecisionConfig(formatConfig.precision);\n    }\n\n    if (\"percent\" === format) {\n      config.style = \"percent\";\n    } else if (\"currency\" === format) {\n      var _formatConfig$useCurr;\n\n      var useAccountingStyle = null !== (_formatConfig$useCurr = formatConfig.useCurrencyAccountingStyle) && void 0 !== _formatConfig$useCurr ? _formatConfig$useCurr : dxConfig().defaultUseCurrencyAccountingStyle;\n      config.style = \"currency\";\n      config.currency = formatConfig.currency || dxConfig().defaultCurrency;\n      config.currencySign = CURRENCY_STYLES[+useAccountingStyle];\n    }\n\n    return config;\n  },\n  _getPrecisionConfig: function (precision) {\n    var config;\n\n    if (null === precision) {\n      config = {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 20\n      };\n    } else {\n      config = {\n        minimumFractionDigits: precision || 0,\n        maximumFractionDigits: precision || 0\n      };\n    }\n\n    return config;\n  },\n  format: function (value, _format) {\n    if (\"number\" !== typeof value) {\n      return value;\n    }\n\n    _format = this._normalizeFormat(_format);\n\n    if (\"default\" === _format.currency) {\n      _format.currency = dxConfig().defaultCurrency;\n    }\n\n    if (!_format || \"function\" !== typeof _format && !_format.type && !_format.formatter) {\n      return getFormatter(_format)(value);\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  _getCurrencySymbolInfo: function (currency) {\n    var formatter = getCurrencyFormatter(currency);\n    return this._extractCurrencySymbolInfo(formatter.format(0));\n  },\n  _extractCurrencySymbolInfo: function (currencyValueString) {\n    var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\n    var position = match[1] ? \"before\" : \"after\";\n    var symbol = match[1] || match[4] || \"\";\n    var delimiter = match[2] || match[3] || \"\";\n    return {\n      position: position,\n      symbol: symbol,\n      delimiter: delimiter\n    };\n  },\n  getCurrencySymbol: function (currency) {\n    if (!currency) {\n      currency = dxConfig().defaultCurrency;\n    }\n\n    var symbolInfo = this._getCurrencySymbolInfo(currency);\n\n    return {\n      symbol: symbolInfo.symbol\n    };\n  },\n  getOpenXmlCurrencyFormat: function (currency) {\n    var targetCurrency = currency || dxConfig().defaultCurrency;\n\n    var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\n\n    var closestAccountingFormat = localizationCoreUtils.getValueByClosestLocale(locale => accountingFormats[locale]);\n    return openXmlCurrencyFormat(currencySymbol, closestAccountingFormat);\n  }\n};","map":{"version":3,"names":["dxConfig","localizationCoreUtils","openXmlCurrencyFormat","accountingFormats","CURRENCY_STYLES","detectCurrencySymbolRegex","formattersCache","getFormatter","format","key","locale","JSON","stringify","Intl","NumberFormat","getCurrencyFormatter","currency","style","engine","_formatNumberCore","value","formatConfig","callBase","apply","arguments","_normalizeFormatConfig","config","minimumIntegerDigits","precision","useGrouping","maximumFractionDigits","String","length","round","_getPrecisionConfig","_formatConfig$useCurr","useAccountingStyle","useCurrencyAccountingStyle","defaultUseCurrencyAccountingStyle","defaultCurrency","currencySign","minimumFractionDigits","_format","_normalizeFormat","type","formatter","_getCurrencySymbolInfo","_extractCurrencySymbolInfo","currencyValueString","match","exec","position","symbol","delimiter","getCurrencySymbol","symbolInfo","getOpenXmlCurrencyFormat","targetCurrency","currencySymbol","closestAccountingFormat","getValueByClosestLocale"],"sources":["E:/MisaProject/W2022_06/MISA.EMIS.FE/node_modules/devextreme/esm/localization/intl/number.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/localization/intl/number.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dxConfig from \"../../core/config\";\r\nimport localizationCoreUtils from \"../core\";\r\nimport openXmlCurrencyFormat from \"../open_xml_currency_format\";\r\nimport accountingFormats from \"../cldr-data/accounting_formats\";\r\nvar CURRENCY_STYLES = [\"standard\", \"accounting\"];\r\nvar detectCurrencySymbolRegex = /([^\\s0]+)?(\\s*)0*[.,]*0*(\\s*)([^\\s0]+)?/;\r\nvar formattersCache = {};\r\nvar getFormatter = format => {\r\n    var key = localizationCoreUtils.locale() + \"/\" + JSON.stringify(format);\r\n    if (!formattersCache[key]) {\r\n        formattersCache[key] = new Intl.NumberFormat(localizationCoreUtils.locale(), format).format\r\n    }\r\n    return formattersCache[key]\r\n};\r\nvar getCurrencyFormatter = currency => new Intl.NumberFormat(localizationCoreUtils.locale(), {\r\n    style: \"currency\",\r\n    currency: currency\r\n});\r\nexport default {\r\n    engine: function() {\r\n        return \"intl\"\r\n    },\r\n    _formatNumberCore: function(value, format, formatConfig) {\r\n        if (\"exponential\" === format) {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n        return getFormatter(this._normalizeFormatConfig(format, formatConfig, value))(value)\r\n    },\r\n    _normalizeFormatConfig: function(format, formatConfig, value) {\r\n        var config;\r\n        if (\"decimal\" === format) {\r\n            config = {\r\n                minimumIntegerDigits: formatConfig.precision || void 0,\r\n                useGrouping: false,\r\n                maximumFractionDigits: String(value).length,\r\n                round: value < 0 ? \"ceil\" : \"floor\"\r\n            }\r\n        } else {\r\n            config = this._getPrecisionConfig(formatConfig.precision)\r\n        }\r\n        if (\"percent\" === format) {\r\n            config.style = \"percent\"\r\n        } else if (\"currency\" === format) {\r\n            var _formatConfig$useCurr;\r\n            var useAccountingStyle = null !== (_formatConfig$useCurr = formatConfig.useCurrencyAccountingStyle) && void 0 !== _formatConfig$useCurr ? _formatConfig$useCurr : dxConfig().defaultUseCurrencyAccountingStyle;\r\n            config.style = \"currency\";\r\n            config.currency = formatConfig.currency || dxConfig().defaultCurrency;\r\n            config.currencySign = CURRENCY_STYLES[+useAccountingStyle]\r\n        }\r\n        return config\r\n    },\r\n    _getPrecisionConfig: function(precision) {\r\n        var config;\r\n        if (null === precision) {\r\n            config = {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 20\r\n            }\r\n        } else {\r\n            config = {\r\n                minimumFractionDigits: precision || 0,\r\n                maximumFractionDigits: precision || 0\r\n            }\r\n        }\r\n        return config\r\n    },\r\n    format: function(value, _format) {\r\n        if (\"number\" !== typeof value) {\r\n            return value\r\n        }\r\n        _format = this._normalizeFormat(_format);\r\n        if (\"default\" === _format.currency) {\r\n            _format.currency = dxConfig().defaultCurrency\r\n        }\r\n        if (!_format || \"function\" !== typeof _format && !_format.type && !_format.formatter) {\r\n            return getFormatter(_format)(value)\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _getCurrencySymbolInfo: function(currency) {\r\n        var formatter = getCurrencyFormatter(currency);\r\n        return this._extractCurrencySymbolInfo(formatter.format(0))\r\n    },\r\n    _extractCurrencySymbolInfo: function(currencyValueString) {\r\n        var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];\r\n        var position = match[1] ? \"before\" : \"after\";\r\n        var symbol = match[1] || match[4] || \"\";\r\n        var delimiter = match[2] || match[3] || \"\";\r\n        return {\r\n            position: position,\r\n            symbol: symbol,\r\n            delimiter: delimiter\r\n        }\r\n    },\r\n    getCurrencySymbol: function(currency) {\r\n        if (!currency) {\r\n            currency = dxConfig().defaultCurrency\r\n        }\r\n        var symbolInfo = this._getCurrencySymbolInfo(currency);\r\n        return {\r\n            symbol: symbolInfo.symbol\r\n        }\r\n    },\r\n    getOpenXmlCurrencyFormat: function(currency) {\r\n        var targetCurrency = currency || dxConfig().defaultCurrency;\r\n        var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;\r\n        var closestAccountingFormat = localizationCoreUtils.getValueByClosestLocale(locale => accountingFormats[locale]);\r\n        return openXmlCurrencyFormat(currencySymbol, closestAccountingFormat)\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}