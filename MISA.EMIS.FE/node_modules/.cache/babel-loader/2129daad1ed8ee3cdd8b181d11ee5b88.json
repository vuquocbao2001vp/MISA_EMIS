{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_cell_based.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport holdEvent from \"../../events/hold\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { deferRender } from \"../../core/utils/common\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { EDIT_MODE_BATCH, EDIT_MODE_CELL, TARGET_COMPONENT_NAME } from \"./ui.grid_core.editing_constants\";\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar CELL_MODIFIED_CLASS = \"dx-cell-modified\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar ROW_REMOVED = \"dx-row-removed\";\nvar EDITING_EDITROWKEY_OPTION_NAME = \"editing.editRowKey\";\nvar EDITING_EDITCOLUMNNAME_OPTION_NAME = \"editing.editColumnName\";\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\nexport default {\n  extenders: {\n    controllers: {\n      editing: {\n        init: function () {\n          var needCreateHandlers = !this._saveEditorHandler;\n          this.callBase.apply(this, arguments);\n\n          if (needCreateHandlers) {\n            var $pointerDownTarget;\n            var isResizing;\n\n            this._pointerUpEditorHandler = () => {\n              var _this$getController;\n\n              isResizing = null === (_this$getController = this.getController(\"columnsResizer\")) || void 0 === _this$getController ? void 0 : _this$getController.isResizing();\n            };\n\n            this._pointerDownEditorHandler = e => $pointerDownTarget = $(e.target);\n\n            this._saveEditorHandler = this.createAction(function (e) {\n              var event = e.event;\n              var $target = $(event.target);\n              var targetComponent = event[TARGET_COMPONENT_NAME];\n              var component = this.component;\n\n              if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\n                return;\n              }\n\n              function checkEditorPopup($element) {\n                if (!$element) {\n                  return false;\n                }\n\n                var $dropDownEditorOverlay = $element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS));\n                var $componentElement = component.$element();\n                return $dropDownEditorOverlay.length > 0 && 0 === $componentElement.closest($dropDownEditorOverlay).length;\n              }\n\n              if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {\n                var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\n                var isDomElement = !!$target.closest(getWindow().document).length;\n                var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;\n                var isAddRowButton = !!$target.closest(\".\".concat(this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\n                var isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n                var isCellEditMode = this.isCellEditMode();\n\n                if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isDomElement || isAnotherComponent)) {\n                  this._closeEditItem.bind(this)($target);\n                }\n              }\n            });\n            eventsEngine.on(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n            eventsEngine.on(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n            eventsEngine.on(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n          }\n        },\n        isCellEditMode: function () {\n          return this.option(\"editing.mode\") === EDIT_MODE_CELL;\n        },\n        isBatchEditMode: function () {\n          return this.option(\"editing.mode\") === EDIT_MODE_BATCH;\n        },\n        isCellOrBatchEditMode: function () {\n          return this.isCellEditMode() || this.isBatchEditMode();\n        },\n        _needToCloseEditableCell: function ($targetElement) {\n          var $element = this.component.$element();\n          var result = this.isEditing();\n          var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\n\n          if (isCurrentComponentElement) {\n            var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\n\n            if (isDataRow) {\n              var rowsView = this.getView(\"rowsView\");\n              var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\n              var rowIndex = rowsView.getRowIndex($targetCell.parent());\n              var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\n\n              var visibleColumns = this._columnsController.getVisibleColumns();\n\n              var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\n              result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex);\n            }\n          }\n\n          return result || this.callBase.apply(this, arguments);\n        },\n        _closeEditItem: function ($targetElement) {\n          if (this._needToCloseEditableCell($targetElement)) {\n            this.closeEditCell();\n          }\n        },\n        _focusEditorIfNeed: function () {\n          if (this._needFocusEditor && this.isCellOrBatchEditMode()) {\n            var _this$_rowsView;\n\n            var editColumnIndex = this._getVisibleEditColumnIndex();\n\n            var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n\n            if ($cell && !$cell.find(\":focus\").length) {\n              this._focusEditingCell(() => {\n                this._editCellInProgress = false;\n              }, $cell, true);\n            } else {\n              this._editCellInProgress = false;\n            }\n\n            this._needFocusEditor = false;\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        isEditing: function () {\n          if (this.isCellOrBatchEditMode()) {\n            var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n            var isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\n            return isEditRowKeyDefined && isEditColumnNameDefined;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _handleEditColumnNameChange: function (args) {\n          var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\n\n          if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {\n            var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\n\n            var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\n\n            this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex);\n          }\n        },\n        _addRow: function (parentKey, deferred) {\n          if (this.isCellEditMode() && this.hasChanges()) {\n            var _deferred = new Deferred();\n\n            this.saveEditData().done(() => {\n              if (!this.hasChanges()) {\n                this.addRow(parentKey).done(_deferred.resolve).fail(_deferred.reject);\n              } else {\n                _deferred.reject(\"cancel\");\n              }\n            });\n            return _deferred.promise();\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        editCell: function (rowIndex, columnIndex) {\n          return this._editCell({\n            rowIndex: rowIndex,\n            columnIndex: columnIndex\n          });\n        },\n        _editCell: function (options) {\n          var d = new Deferred();\n          var coreResult;\n          this.executeOperation(d, () => {\n            coreResult = this._editCellCore(options);\n            when(coreResult).done(d.resolve).fail(d.reject);\n          });\n          return void 0 !== coreResult ? coreResult : d.promise();\n        },\n        _editCellCore: function (options) {\n          var dataController = this._dataController;\n          var isEditByOptionChanged = isDefined(options.oldColumnIndex) || isDefined(options.oldRowIndex);\n\n          var {\n            columnIndex: columnIndex,\n            rowIndex: rowIndex,\n            column: column,\n            item: item\n          } = this._getNormalizedEditCellOptions(options);\n\n          var params = {\n            data: null === item || void 0 === item ? void 0 : item.data,\n            cancel: false,\n            column: column\n          };\n\n          if (void 0 === item.key) {\n            this._dataController.fireError(\"E1043\");\n\n            return;\n          }\n\n          if (column && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {\n            if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\n              return true;\n            }\n\n            var editRowIndex = rowIndex + dataController.getRowIndexOffset();\n            return when(this._beforeEditCell(rowIndex, columnIndex, item)).done(cancel => {\n              if (cancel) {\n                return;\n              }\n\n              if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {\n                this._processCanceledEditingCell();\n              }\n            });\n          }\n\n          return false;\n        },\n        _beforeEditCell: function (rowIndex, columnIndex, item) {\n          if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {\n            var d = new Deferred();\n            this.saveEditData().always(() => {\n              d.resolve(this.hasChanges());\n            });\n            return d;\n          }\n        },\n        publicMethods: function () {\n          var publicMethods = this.callBase.apply(this, arguments);\n          return publicMethods.concat([\"editCell\", \"closeEditCell\"]);\n        },\n        _getNormalizedEditCellOptions: function (_ref) {\n          var {\n            oldColumnIndex: oldColumnIndex,\n            oldRowIndex: oldRowIndex,\n            columnIndex: columnIndex,\n            rowIndex: rowIndex\n          } = _ref;\n          var columnsController = this._columnsController;\n          var visibleColumns = columnsController.getVisibleColumns();\n\n          var items = this._dataController.items();\n\n          var item = items[rowIndex];\n          var oldColumn;\n\n          if (isDefined(oldColumnIndex)) {\n            oldColumn = visibleColumns[oldColumnIndex];\n          } else {\n            oldColumn = this._getEditColumn();\n          }\n\n          if (!isDefined(oldRowIndex)) {\n            oldRowIndex = this._getVisibleEditRowIndex();\n          }\n\n          if (isString(columnIndex)) {\n            columnIndex = columnsController.columnOption(columnIndex, \"index\");\n            columnIndex = columnsController.getVisibleIndex(columnIndex);\n          }\n\n          var column = visibleColumns[columnIndex];\n          return {\n            oldColumn: oldColumn,\n            columnIndex: columnIndex,\n            oldRowIndex: oldRowIndex,\n            rowIndex: rowIndex,\n            column: column,\n            item: item\n          };\n        },\n        _prepareEditCell: function (params, item, editColumnIndex, editRowIndex) {\n          if (!item.isNewRow) {\n            params.key = item.key;\n          }\n\n          if (this._isEditingStart(params)) {\n            return false;\n          }\n\n          this._pageIndex = this._dataController.pageIndex();\n\n          this._setEditRowKey(item.key);\n\n          this._setEditColumnNameByIndex(editColumnIndex);\n\n          if (!params.column.showEditorAlways) {\n            var _item$oldData;\n\n            this._addInternalData({\n              key: item.key,\n              oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\n            });\n          }\n\n          return true;\n        },\n        closeEditCell: function (isError, withoutSaveEditData) {\n          var result = when();\n\n          var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n          if (this.isCellOrBatchEditMode()) {\n            var deferred = new Deferred();\n            result = new Deferred();\n            this.executeOperation(deferred, () => {\n              this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve);\n            });\n          }\n\n          return result.promise();\n        },\n        _closeEditCellCore: function (isError, oldEditRowIndex, withoutSaveEditData) {\n          var dataController = this._dataController;\n          var deferred = new Deferred();\n          var promise = deferred.promise();\n\n          if (this.isCellEditMode() && this.hasChanges()) {\n            if (!withoutSaveEditData) {\n              this.saveEditData().done(error => {\n                if (!this.hasChanges()) {\n                  this.closeEditCell(!!error).always(deferred.resolve);\n                  return;\n                }\n\n                deferred.resolve();\n              });\n              return promise;\n            }\n          } else {\n            this._resetEditRowKey();\n\n            this._resetEditColumnName();\n\n            if (oldEditRowIndex >= 0) {\n              var rowIndices = [oldEditRowIndex];\n\n              this._beforeCloseEditCellInBatchMode(rowIndices);\n\n              if (!isError) {\n                dataController.updateItems({\n                  changeType: \"update\",\n                  rowIndices: rowIndices\n                });\n              }\n            }\n          }\n\n          deferred.resolve();\n          return promise;\n        },\n        _resetModifiedClassCells: function (changes) {\n          if (this.isBatchEditMode()) {\n            var columnsCount = this._columnsController.getVisibleColumns().length;\n\n            changes.forEach(_ref2 => {\n              var {\n                key: key\n              } = _ref2;\n\n              var rowIndex = this._dataController.getRowIndexByKey(key);\n\n              if (-1 !== rowIndex) {\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                  this._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED_CLASS);\n                }\n              }\n            });\n          }\n        },\n        _prepareChange: function (options, value, text) {\n          var $cellElement = $(options.cellElement);\n\n          if (this.isBatchEditMode() && void 0 !== options.key) {\n            this._applyModified($cellElement, options);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _cancelSaving: function () {\n          var dataController = this._dataController;\n\n          if (this.isCellOrBatchEditMode()) {\n            if (this.isBatchEditMode()) {\n              this._resetEditIndices();\n            }\n\n            dataController.updateItems();\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        optionChanged: function (args) {\n          var fullName = args.fullName;\n\n          if (\"editing\" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\n            this._handleEditColumnNameChange(args);\n\n            args.handled = true;\n          } else {\n            this.callBase(args);\n          }\n        },\n        _editCellFromOptionChanged: function (columnIndex, oldColumnIndex, oldRowIndex) {\n          var columns = this._columnsController.getVisibleColumns();\n\n          if (columnIndex > -1) {\n            deferRender(() => {\n              this._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex);\n            });\n          }\n        },\n        _handleEditRowKeyChange: function (args) {\n          if (this.isCellOrBatchEditMode()) {\n            var columnIndex = this._getVisibleEditColumnIndex();\n\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n\n            if (isDefined(args.value) && args.value !== args.previousValue) {\n              var _this$_editCellFromOp;\n\n              null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp ? void 0 : _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex);\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        deleteRow: function (rowIndex) {\n          if (this.isCellEditMode() && this.isEditing()) {\n            var isNewRow = this._dataController.items()[rowIndex].isNewRow;\n\n            var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n\n            this.closeEditCell(null, isNewRow).always(() => {\n              rowIndex = this._dataController.getRowIndexByKey(rowKey);\n\n              this._checkAndDeleteRow(rowIndex);\n            });\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _checkAndDeleteRow: function (rowIndex) {\n          if (this.isBatchEditMode()) {\n            this._deleteRowCore(rowIndex);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _refreshCore: function (params) {\n          var {\n            isPageChanged: isPageChanged\n          } = null !== params && void 0 !== params ? params : {};\n          var needResetIndexes = this.isBatchEditMode() || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\n\n          if (this.isCellOrBatchEditMode()) {\n            if (needResetIndexes) {\n              this._resetEditColumnName();\n\n              this._resetEditRowKey();\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _allowRowAdding: function (params) {\n          if (this.isBatchEditMode()) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _afterDeleteRow: function (rowIndex, oldEditRowIndex) {\n          var dataController = this._dataController;\n\n          if (this.isBatchEditMode()) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [oldEditRowIndex, rowIndex]\n            });\n            return new Deferred().resolve();\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function (row, forceUpdateRow, isCustomSetCellValue) {\n          if (this.isCellOrBatchEditMode()) {\n            this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _isDefaultButtonVisible: function (button, options) {\n          if (this.isCellOrBatchEditMode()) {\n            var isBatchMode = this.isBatchEditMode();\n\n            switch (button.name) {\n              case \"save\":\n              case \"cancel\":\n              case \"edit\":\n                return false;\n\n              case \"delete\":\n                return this.callBase.apply(this, arguments) && (!isBatchMode || !options.row.removed);\n\n              case \"undelete\":\n                return isBatchMode && this.allowDeleting(options) && options.row.removed;\n\n              default:\n                return this.callBase.apply(this, arguments);\n            }\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isRowDeleteAllowed: function () {\n          var callBase = this.callBase.apply(this, arguments);\n          return callBase || this.isBatchEditMode();\n        },\n        _beforeEndSaving: function (changes) {\n          if (this.isCellEditMode()) {\n            var _changes$;\n\n            if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\n              this.callBase.apply(this, arguments);\n            }\n          } else {\n            if (this.isBatchEditMode()) {\n              this._resetModifiedClassCells(changes);\n            }\n\n            this.callBase.apply(this, arguments);\n          }\n        },\n        prepareEditButtons: function (headerPanel) {\n          var editingOptions = this.option(\"editing\") || {};\n          var buttonItems = this.callBase.apply(this, arguments);\n\n          if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && this.isBatchEditMode()) {\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"save\", \"saveEditData\", 21));\n            buttonItems.push(this.prepareButtonItem(headerPanel, \"revert\", \"cancelEditData\", 22));\n          }\n\n          return buttonItems;\n        },\n        _saveEditDataInner: function () {\n          var _deferred2;\n\n          var editRow = this._dataController.getVisibleRows()[this.getEditRowIndex()];\n\n          var editColumn = this._getEditColumn();\n\n          var showEditorAlways = null === editColumn || void 0 === editColumn ? void 0 : editColumn.showEditorAlways;\n          var isUpdateInCellMode = this.isCellEditMode() && !(null !== editRow && void 0 !== editRow && editRow.isNewRow);\n          var deferred;\n\n          if (isUpdateInCellMode && showEditorAlways) {\n            deferred = new Deferred();\n            this.addDeferred(deferred);\n          }\n\n          return this.callBase.apply(this, arguments).always(null === (_deferred2 = deferred) || void 0 === _deferred2 ? void 0 : _deferred2.resolve);\n        },\n        _applyChange: function (options, params, forceUpdateRow) {\n          var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\n          var showEditorAlways = options.column.showEditorAlways;\n          var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n          var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);\n\n          if (focusPreviousEditingCell) {\n            this._focusEditingCell();\n\n            this._updateEditRow(options.row, true, isCustomSetCellValue);\n\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _applyChangeCore: function (options, forceUpdateRow) {\n          var showEditorAlways = options.column.showEditorAlways;\n          var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\n\n          if (showEditorAlways && !forceUpdateRow) {\n            if (isUpdateInCellMode) {\n              this._setEditRowKey(options.row.key, true);\n\n              this._setEditColumnNameByIndex(options.columnIndex, true);\n\n              return this.saveEditData();\n            } else if (this.isBatchEditMode()) {\n              forceUpdateRow = this._needUpdateRow(options.column);\n              return this.callBase(options, forceUpdateRow);\n            }\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _processDataItemCore: function (item, _ref3) {\n          var {\n            data: data,\n            type: type\n          } = _ref3;\n\n          if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {\n            item.data = createObjectWithChanges(item.data, data);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _processRemoveCore: function (changes, editIndex, processIfBatch) {\n          if (this.isBatchEditMode() && !processIfBatch) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _processRemoveIfError: function () {\n          if (this.isBatchEditMode()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _beforeFocusElementInRow: function (rowIndex) {\n          this.callBase.apply(this, arguments);\n          var editRowIndex = rowIndex >= 0 ? rowIndex : 0;\n          var columnIndex = this.getFirstEditableColumnIndex();\n          columnIndex >= 0 && this.editCell(editRowIndex, columnIndex);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n          var editingController = this._editingController;\n\n          if (editingController.isCellOrBatchEditMode() && this.option(\"editing.allowUpdating\")) {\n            eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", this.createAction(() => {\n              if (editingController.isEditing()) {\n                editingController.closeEditCell();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var editingController = this._editingController;\n            var isRowRemoved = !!row.removed;\n\n            if (editingController.isBatchEditMode()) {\n              isRowRemoved && $row.addClass(ROW_REMOVED);\n            }\n          }\n\n          return $row;\n        }\n      },\n      headerPanel: {\n        isVisible: function () {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || editingOptions && (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["$","domAdapter","getWindow","eventsEngine","isDefined","isString","name","clickEventName","pointerEvents","addNamespace","holdEvent","when","Deferred","deferRender","createObjectWithChanges","EDIT_MODE_BATCH","EDIT_MODE_CELL","TARGET_COMPONENT_NAME","FOCUS_OVERLAY_CLASS","ADD_ROW_BUTTON_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","EDITOR_CELL_CLASS","ROW_CLASS","CELL_MODIFIED_CLASS","DATA_ROW_CLASS","ROW_REMOVED","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","DATA_EDIT_DATA_REMOVE_TYPE","extenders","controllers","editing","init","needCreateHandlers","_saveEditorHandler","callBase","apply","arguments","$pointerDownTarget","isResizing","_pointerUpEditorHandler","_this$getController","getController","_pointerDownEditorHandler","e","target","createAction","event","$target","targetComponent","component","is","checkEditorPopup","$element","$dropDownEditorOverlay","closest","concat","$componentElement","length","isCellOrBatchEditMode","_editCellInProgress","isEditorPopup","isDomElement","document","isAnotherComponent","_disposed","isAddRowButton","addWidgetPrefix","isFocusOverlay","hasClass","isCellEditMode","isEditing","_closeEditItem","bind","on","getDocument","up","down","option","isBatchEditMode","_needToCloseEditableCell","$targetElement","result","isCurrentComponentElement","isDataRow","rowsView","getView","$targetCell","rowIndex","getRowIndex","parent","columnIndex","getCellElements","index","visibleColumns","_columnsController","getVisibleColumns","allowEditing","isEditCell","closeEditCell","_focusEditorIfNeed","_needFocusEditor","_this$_rowsView","editColumnIndex","_getVisibleEditColumnIndex","$cell","_rowsView","_getCellElement","_getVisibleEditRowIndex","find","_focusEditingCell","isEditRowKeyDefined","isEditColumnNameDefined","_handleEditColumnNameChange","args","oldRowIndex","previousValue","value","getVisibleColumnIndex","oldColumnIndex","_editCellFromOptionChanged","_addRow","parentKey","deferred","hasChanges","_deferred","saveEditData","done","addRow","resolve","fail","reject","promise","editCell","_editCell","options","d","coreResult","executeOperation","_editCellCore","dataController","_dataController","isEditByOptionChanged","column","item","_getNormalizedEditCellOptions","params","data","cancel","key","fireError","rowType","removed","editRowIndex","getRowIndexOffset","_beforeEditCell","_prepareEditCell","_processCanceledEditingCell","isNewRow","always","publicMethods","_ref","columnsController","items","oldColumn","_getEditColumn","columnOption","getVisibleIndex","_isEditingStart","_pageIndex","pageIndex","_setEditRowKey","_setEditColumnNameByIndex","showEditorAlways","_item$oldData","_addInternalData","oldData","isError","withoutSaveEditData","oldEditRowIndex","_closeEditCellCore","error","_resetEditRowKey","_resetEditColumnName","rowIndices","_beforeCloseEditCellInBatchMode","updateItems","changeType","_resetModifiedClassCells","changes","columnsCount","forEach","_ref2","getRowIndexByKey","removeClass","_prepareChange","text","$cellElement","cellElement","_applyModified","_cancelSaving","_resetEditIndices","optionChanged","fullName","handled","columns","_repaintEditCell","_handleEditRowKeyChange","oldRowIndexCorrection","_getEditRowIndexCorrection","_this$_editCellFromOp","call","deleteRow","rowKey","getKeyByRowIndex","_checkAndDeleteRow","_deleteRowCore","_refreshCore","isPageChanged","needResetIndexes","_allowRowAdding","_afterDeleteRow","_updateEditRow","row","forceUpdateRow","isCustomSetCellValue","_updateRowImmediately","_isDefaultButtonVisible","button","isBatchMode","allowDeleting","_isRowDeleteAllowed","_beforeEndSaving","_changes$","type","prepareEditButtons","headerPanel","editingOptions","buttonItems","allowUpdating","allowAdding","push","prepareButtonItem","_saveEditDataInner","_deferred2","editRow","getVisibleRows","getEditRowIndex","editColumn","isUpdateInCellMode","addDeferred","_applyChange","setCellValue","defaultSetCellValue","focusPreviousEditingCell","hasEditData","_applyChangeCore","_needUpdateRow","_processDataItemCore","_ref3","_processRemoveCore","editIndex","processIfBatch","_processRemoveIfError","_beforeFocusElementInRow","getFirstEditableColumnIndex","views","_createTable","$table","editingController","_editingController","_createRow","$row","isRowRemoved","addClass","isVisible","mode"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_cell_based.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_cell_based.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport holdEvent from \"../../events/hold\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    deferRender\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    EDIT_MODE_BATCH,\r\n    EDIT_MODE_CELL,\r\n    TARGET_COMPONENT_NAME\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\r\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\r\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar CELL_MODIFIED_CLASS = \"dx-cell-modified\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar ROW_REMOVED = \"dx-row-removed\";\r\nvar EDITING_EDITROWKEY_OPTION_NAME = \"editing.editRowKey\";\r\nvar EDITING_EDITCOLUMNNAME_OPTION_NAME = \"editing.editColumnName\";\r\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nexport default {\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                init: function() {\r\n                    var needCreateHandlers = !this._saveEditorHandler;\r\n                    this.callBase.apply(this, arguments);\r\n                    if (needCreateHandlers) {\r\n                        var $pointerDownTarget;\r\n                        var isResizing;\r\n                        this._pointerUpEditorHandler = () => {\r\n                            var _this$getController;\r\n                            isResizing = null === (_this$getController = this.getController(\"columnsResizer\")) || void 0 === _this$getController ? void 0 : _this$getController.isResizing()\r\n                        };\r\n                        this._pointerDownEditorHandler = e => $pointerDownTarget = $(e.target);\r\n                        this._saveEditorHandler = this.createAction((function(e) {\r\n                            var event = e.event;\r\n                            var $target = $(event.target);\r\n                            var targetComponent = event[TARGET_COMPONENT_NAME];\r\n                            var component = this.component;\r\n                            if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\r\n                                return\r\n                            }\r\n\r\n                            function checkEditorPopup($element) {\r\n                                if (!$element) {\r\n                                    return false\r\n                                }\r\n                                var $dropDownEditorOverlay = $element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS));\r\n                                var $componentElement = component.$element();\r\n                                return $dropDownEditorOverlay.length > 0 && 0 === $componentElement.closest($dropDownEditorOverlay).length\r\n                            }\r\n                            if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {\r\n                                var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\r\n                                var isDomElement = !!$target.closest(getWindow().document).length;\r\n                                var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;\r\n                                var isAddRowButton = !!$target.closest(\".\".concat(this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\r\n                                var isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\r\n                                var isCellEditMode = this.isCellEditMode();\r\n                                if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isDomElement || isAnotherComponent)) {\r\n                                    this._closeEditItem.bind(this)($target)\r\n                                }\r\n                            }\r\n                        }));\r\n                        eventsEngine.on(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n                        eventsEngine.on(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n                        eventsEngine.on(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n                    }\r\n                },\r\n                isCellEditMode: function() {\r\n                    return this.option(\"editing.mode\") === EDIT_MODE_CELL\r\n                },\r\n                isBatchEditMode: function() {\r\n                    return this.option(\"editing.mode\") === EDIT_MODE_BATCH\r\n                },\r\n                isCellOrBatchEditMode: function() {\r\n                    return this.isCellEditMode() || this.isBatchEditMode()\r\n                },\r\n                _needToCloseEditableCell: function($targetElement) {\r\n                    var $element = this.component.$element();\r\n                    var result = this.isEditing();\r\n                    var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\r\n                    if (isCurrentComponentElement) {\r\n                        var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\r\n                        if (isDataRow) {\r\n                            var rowsView = this.getView(\"rowsView\");\r\n                            var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\r\n                            var rowIndex = rowsView.getRowIndex($targetCell.parent());\r\n                            var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\r\n                            var visibleColumns = this._columnsController.getVisibleColumns();\r\n                            var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\r\n                            result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex)\r\n                        }\r\n                    }\r\n                    return result || this.callBase.apply(this, arguments)\r\n                },\r\n                _closeEditItem: function($targetElement) {\r\n                    if (this._needToCloseEditableCell($targetElement)) {\r\n                        this.closeEditCell()\r\n                    }\r\n                },\r\n                _focusEditorIfNeed: function() {\r\n                    if (this._needFocusEditor && this.isCellOrBatchEditMode()) {\r\n                        var _this$_rowsView;\r\n                        var editColumnIndex = this._getVisibleEditColumnIndex();\r\n                        var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n                        if ($cell && !$cell.find(\":focus\").length) {\r\n                            this._focusEditingCell(() => {\r\n                                this._editCellInProgress = false\r\n                            }, $cell, true)\r\n                        } else {\r\n                            this._editCellInProgress = false\r\n                        }\r\n                        this._needFocusEditor = false\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                isEditing: function() {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n                        var isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\r\n                        return isEditRowKeyDefined && isEditColumnNameDefined\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _handleEditColumnNameChange: function(args) {\r\n                    var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\r\n                    if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {\r\n                        var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\r\n                        var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\r\n                        this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex)\r\n                    }\r\n                },\r\n                _addRow: function(parentKey, deferred) {\r\n                    if (this.isCellEditMode() && this.hasChanges()) {\r\n                        var _deferred = new Deferred;\r\n                        this.saveEditData().done(() => {\r\n                            if (!this.hasChanges()) {\r\n                                this.addRow(parentKey).done(_deferred.resolve).fail(_deferred.reject)\r\n                            } else {\r\n                                _deferred.reject(\"cancel\")\r\n                            }\r\n                        });\r\n                        return _deferred.promise()\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                editCell: function(rowIndex, columnIndex) {\r\n                    return this._editCell({\r\n                        rowIndex: rowIndex,\r\n                        columnIndex: columnIndex\r\n                    })\r\n                },\r\n                _editCell: function(options) {\r\n                    var d = new Deferred;\r\n                    var coreResult;\r\n                    this.executeOperation(d, () => {\r\n                        coreResult = this._editCellCore(options);\r\n                        when(coreResult).done(d.resolve).fail(d.reject)\r\n                    });\r\n                    return void 0 !== coreResult ? coreResult : d.promise()\r\n                },\r\n                _editCellCore: function(options) {\r\n                    var dataController = this._dataController;\r\n                    var isEditByOptionChanged = isDefined(options.oldColumnIndex) || isDefined(options.oldRowIndex);\r\n                    var {\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex,\r\n                        column: column,\r\n                        item: item\r\n                    } = this._getNormalizedEditCellOptions(options);\r\n                    var params = {\r\n                        data: null === item || void 0 === item ? void 0 : item.data,\r\n                        cancel: false,\r\n                        column: column\r\n                    };\r\n                    if (void 0 === item.key) {\r\n                        this._dataController.fireError(\"E1043\");\r\n                        return\r\n                    }\r\n                    if (column && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {\r\n                        if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\r\n                            return true\r\n                        }\r\n                        var editRowIndex = rowIndex + dataController.getRowIndexOffset();\r\n                        return when(this._beforeEditCell(rowIndex, columnIndex, item)).done(cancel => {\r\n                            if (cancel) {\r\n                                return\r\n                            }\r\n                            if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {\r\n                                this._processCanceledEditingCell()\r\n                            }\r\n                        })\r\n                    }\r\n                    return false\r\n                },\r\n                _beforeEditCell: function(rowIndex, columnIndex, item) {\r\n                    if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {\r\n                        var d = new Deferred;\r\n                        this.saveEditData().always(() => {\r\n                            d.resolve(this.hasChanges())\r\n                        });\r\n                        return d\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    var publicMethods = this.callBase.apply(this, arguments);\r\n                    return publicMethods.concat([\"editCell\", \"closeEditCell\"])\r\n                },\r\n                _getNormalizedEditCellOptions: function(_ref) {\r\n                    var {\r\n                        oldColumnIndex: oldColumnIndex,\r\n                        oldRowIndex: oldRowIndex,\r\n                        columnIndex: columnIndex,\r\n                        rowIndex: rowIndex\r\n                    } = _ref;\r\n                    var columnsController = this._columnsController;\r\n                    var visibleColumns = columnsController.getVisibleColumns();\r\n                    var items = this._dataController.items();\r\n                    var item = items[rowIndex];\r\n                    var oldColumn;\r\n                    if (isDefined(oldColumnIndex)) {\r\n                        oldColumn = visibleColumns[oldColumnIndex]\r\n                    } else {\r\n                        oldColumn = this._getEditColumn()\r\n                    }\r\n                    if (!isDefined(oldRowIndex)) {\r\n                        oldRowIndex = this._getVisibleEditRowIndex()\r\n                    }\r\n                    if (isString(columnIndex)) {\r\n                        columnIndex = columnsController.columnOption(columnIndex, \"index\");\r\n                        columnIndex = columnsController.getVisibleIndex(columnIndex)\r\n                    }\r\n                    var column = visibleColumns[columnIndex];\r\n                    return {\r\n                        oldColumn: oldColumn,\r\n                        columnIndex: columnIndex,\r\n                        oldRowIndex: oldRowIndex,\r\n                        rowIndex: rowIndex,\r\n                        column: column,\r\n                        item: item\r\n                    }\r\n                },\r\n                _prepareEditCell: function(params, item, editColumnIndex, editRowIndex) {\r\n                    if (!item.isNewRow) {\r\n                        params.key = item.key\r\n                    }\r\n                    if (this._isEditingStart(params)) {\r\n                        return false\r\n                    }\r\n                    this._pageIndex = this._dataController.pageIndex();\r\n                    this._setEditRowKey(item.key);\r\n                    this._setEditColumnNameByIndex(editColumnIndex);\r\n                    if (!params.column.showEditorAlways) {\r\n                        var _item$oldData;\r\n                        this._addInternalData({\r\n                            key: item.key,\r\n                            oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\r\n                        })\r\n                    }\r\n                    return true\r\n                },\r\n                closeEditCell: function(isError, withoutSaveEditData) {\r\n                    var result = when();\r\n                    var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var deferred = new Deferred;\r\n                        result = new Deferred;\r\n                        this.executeOperation(deferred, () => {\r\n                            this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve)\r\n                        })\r\n                    }\r\n                    return result.promise()\r\n                },\r\n                _closeEditCellCore: function(isError, oldEditRowIndex, withoutSaveEditData) {\r\n                    var dataController = this._dataController;\r\n                    var deferred = new Deferred;\r\n                    var promise = deferred.promise();\r\n                    if (this.isCellEditMode() && this.hasChanges()) {\r\n                        if (!withoutSaveEditData) {\r\n                            this.saveEditData().done(error => {\r\n                                if (!this.hasChanges()) {\r\n                                    this.closeEditCell(!!error).always(deferred.resolve);\r\n                                    return\r\n                                }\r\n                                deferred.resolve()\r\n                            });\r\n                            return promise\r\n                        }\r\n                    } else {\r\n                        this._resetEditRowKey();\r\n                        this._resetEditColumnName();\r\n                        if (oldEditRowIndex >= 0) {\r\n                            var rowIndices = [oldEditRowIndex];\r\n                            this._beforeCloseEditCellInBatchMode(rowIndices);\r\n                            if (!isError) {\r\n                                dataController.updateItems({\r\n                                    changeType: \"update\",\r\n                                    rowIndices: rowIndices\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    deferred.resolve();\r\n                    return promise\r\n                },\r\n                _resetModifiedClassCells: function(changes) {\r\n                    if (this.isBatchEditMode()) {\r\n                        var columnsCount = this._columnsController.getVisibleColumns().length;\r\n                        changes.forEach(_ref2 => {\r\n                            var {\r\n                                key: key\r\n                            } = _ref2;\r\n                            var rowIndex = this._dataController.getRowIndexByKey(key);\r\n                            if (-1 !== rowIndex) {\r\n                                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\r\n                                    this._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED_CLASS)\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                _prepareChange: function(options, value, text) {\r\n                    var $cellElement = $(options.cellElement);\r\n                    if (this.isBatchEditMode() && void 0 !== options.key) {\r\n                        this._applyModified($cellElement, options)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _cancelSaving: function() {\r\n                    var dataController = this._dataController;\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        if (this.isBatchEditMode()) {\r\n                            this._resetEditIndices()\r\n                        }\r\n                        dataController.updateItems()\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    if (\"editing\" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\r\n                        this._handleEditColumnNameChange(args);\r\n                        args.handled = true\r\n                    } else {\r\n                        this.callBase(args)\r\n                    }\r\n                },\r\n                _editCellFromOptionChanged: function(columnIndex, oldColumnIndex, oldRowIndex) {\r\n                    var columns = this._columnsController.getVisibleColumns();\r\n                    if (columnIndex > -1) {\r\n                        deferRender(() => {\r\n                            this._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex)\r\n                        })\r\n                    }\r\n                },\r\n                _handleEditRowKeyChange: function(args) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var columnIndex = this._getVisibleEditColumnIndex();\r\n                        var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n                        var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n                        if (isDefined(args.value) && args.value !== args.previousValue) {\r\n                            var _this$_editCellFromOp;\r\n                            null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp ? void 0 : _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex)\r\n                        }\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                deleteRow: function(rowIndex) {\r\n                    if (this.isCellEditMode() && this.isEditing()) {\r\n                        var isNewRow = this._dataController.items()[rowIndex].isNewRow;\r\n                        var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                        this.closeEditCell(null, isNewRow).always(() => {\r\n                            rowIndex = this._dataController.getRowIndexByKey(rowKey);\r\n                            this._checkAndDeleteRow(rowIndex)\r\n                        })\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _checkAndDeleteRow: function(rowIndex) {\r\n                    if (this.isBatchEditMode()) {\r\n                        this._deleteRowCore(rowIndex)\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _refreshCore: function(params) {\r\n                    var {\r\n                        isPageChanged: isPageChanged\r\n                    } = null !== params && void 0 !== params ? params : {};\r\n                    var needResetIndexes = this.isBatchEditMode() || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        if (needResetIndexes) {\r\n                            this._resetEditColumnName();\r\n                            this._resetEditRowKey()\r\n                        }\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _allowRowAdding: function(params) {\r\n                    if (this.isBatchEditMode()) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _afterDeleteRow: function(rowIndex, oldEditRowIndex) {\r\n                    var dataController = this._dataController;\r\n                    if (this.isBatchEditMode()) {\r\n                        dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [oldEditRowIndex, rowIndex]\r\n                        });\r\n                        return (new Deferred).resolve()\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _isDefaultButtonVisible: function(button, options) {\r\n                    if (this.isCellOrBatchEditMode()) {\r\n                        var isBatchMode = this.isBatchEditMode();\r\n                        switch (button.name) {\r\n                            case \"save\":\r\n                            case \"cancel\":\r\n                            case \"edit\":\r\n                                return false;\r\n                            case \"delete\":\r\n                                return this.callBase.apply(this, arguments) && (!isBatchMode || !options.row.removed);\r\n                            case \"undelete\":\r\n                                return isBatchMode && this.allowDeleting(options) && options.row.removed;\r\n                            default:\r\n                                return this.callBase.apply(this, arguments)\r\n                        }\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isRowDeleteAllowed: function() {\r\n                    var callBase = this.callBase.apply(this, arguments);\r\n                    return callBase || this.isBatchEditMode()\r\n                },\r\n                _beforeEndSaving: function(changes) {\r\n                    if (this.isCellEditMode()) {\r\n                        var _changes$;\r\n                        if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\r\n                            this.callBase.apply(this, arguments)\r\n                        }\r\n                    } else {\r\n                        if (this.isBatchEditMode()) {\r\n                            this._resetModifiedClassCells(changes)\r\n                        }\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                prepareEditButtons: function(headerPanel) {\r\n                    var editingOptions = this.option(\"editing\") || {};\r\n                    var buttonItems = this.callBase.apply(this, arguments);\r\n                    if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && this.isBatchEditMode()) {\r\n                        buttonItems.push(this.prepareButtonItem(headerPanel, \"save\", \"saveEditData\", 21));\r\n                        buttonItems.push(this.prepareButtonItem(headerPanel, \"revert\", \"cancelEditData\", 22))\r\n                    }\r\n                    return buttonItems\r\n                },\r\n                _saveEditDataInner: function() {\r\n                    var _deferred2;\r\n                    var editRow = this._dataController.getVisibleRows()[this.getEditRowIndex()];\r\n                    var editColumn = this._getEditColumn();\r\n                    var showEditorAlways = null === editColumn || void 0 === editColumn ? void 0 : editColumn.showEditorAlways;\r\n                    var isUpdateInCellMode = this.isCellEditMode() && !(null !== editRow && void 0 !== editRow && editRow.isNewRow);\r\n                    var deferred;\r\n                    if (isUpdateInCellMode && showEditorAlways) {\r\n                        deferred = new Deferred;\r\n                        this.addDeferred(deferred)\r\n                    }\r\n                    return this.callBase.apply(this, arguments).always(null === (_deferred2 = deferred) || void 0 === _deferred2 ? void 0 : _deferred2.resolve)\r\n                },\r\n                _applyChange: function(options, params, forceUpdateRow) {\r\n                    var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\r\n                    var showEditorAlways = options.column.showEditorAlways;\r\n                    var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n                    var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);\r\n                    if (focusPreviousEditingCell) {\r\n                        this._focusEditingCell();\r\n                        this._updateEditRow(options.row, true, isCustomSetCellValue);\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _applyChangeCore: function(options, forceUpdateRow) {\r\n                    var showEditorAlways = options.column.showEditorAlways;\r\n                    var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;\r\n                    if (showEditorAlways && !forceUpdateRow) {\r\n                        if (isUpdateInCellMode) {\r\n                            this._setEditRowKey(options.row.key, true);\r\n                            this._setEditColumnNameByIndex(options.columnIndex, true);\r\n                            return this.saveEditData()\r\n                        } else if (this.isBatchEditMode()) {\r\n                            forceUpdateRow = this._needUpdateRow(options.column);\r\n                            return this.callBase(options, forceUpdateRow)\r\n                        }\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _processDataItemCore: function(item, _ref3) {\r\n                    var {\r\n                        data: data,\r\n                        type: type\r\n                    } = _ref3;\r\n                    if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                        item.data = createObjectWithChanges(item.data, data)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _processRemoveCore: function(changes, editIndex, processIfBatch) {\r\n                    if (this.isBatchEditMode() && !processIfBatch) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _processRemoveIfError: function() {\r\n                    if (this.isBatchEditMode()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _beforeFocusElementInRow: function(rowIndex) {\r\n                    this.callBase.apply(this, arguments);\r\n                    var editRowIndex = rowIndex >= 0 ? rowIndex : 0;\r\n                    var columnIndex = this.getFirstEditableColumnIndex();\r\n                    columnIndex >= 0 && this.editCell(editRowIndex, columnIndex)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    var editingController = this._editingController;\r\n                    if (editingController.isCellOrBatchEditMode() && this.option(\"editing.allowUpdating\")) {\r\n                        eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", this.createAction(() => {\r\n                            if (editingController.isEditing()) {\r\n                                editingController.closeEditCell()\r\n                            }\r\n                        }))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var editingController = this._editingController;\r\n                        var isRowRemoved = !!row.removed;\r\n                        if (editingController.isBatchEditMode()) {\r\n                            isRowRemoved && $row.addClass(ROW_REMOVED)\r\n                        }\r\n                    }\r\n                    return $row\r\n                }\r\n            },\r\n            headerPanel: {\r\n                isVisible: function() {\r\n                    var editingOptions = this.getController(\"editing\").option(\"editing\");\r\n                    return this.callBase() || editingOptions && (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}