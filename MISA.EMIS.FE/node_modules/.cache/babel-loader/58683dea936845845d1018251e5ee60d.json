{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport Guid from \"../../core/guid\";\nimport modules from \"./ui.grid_core.modules\";\nimport Form from \"../form\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isMaterial } from \"../themes\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport messageLocalization from \"../../localization/message\";\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\nvar ROWS_VIEW = \"rowsView\";\nvar FOOTER_VIEW = \"footerView\";\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\nvar COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\n\nfunction getColumnId(that, column) {\n  return that._columnsController.getColumnId(column);\n}\n\nfunction getDataCellElements($row) {\n  return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\");\n}\n\nfunction adaptiveCellTemplate(container, options) {\n  var $adaptiveColumnButton;\n  var $container = $(container);\n  var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\n\n  if (\"data\" === options.rowType) {\n    $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\n    eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(function () {\n      adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key);\n    }));\n    $adaptiveColumnButton.appendTo($container);\n  } else {\n    gridCoreUtils.setEmptyText($container);\n  }\n}\n\nvar AdaptiveColumnsController = modules.ViewController.inherit({\n  _isRowEditMode: function () {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_ROW;\n  },\n  _isItemModified: function (item, cellOptions) {\n    var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n    var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\n\n    var row = this._dataController.items()[rowIndex + 1];\n\n    return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex]);\n  },\n  _renderFormViewTemplate: function (item, cellOptions, $container) {\n    var column = item.column;\n    var focusAction = this.createAction(function () {\n      eventsEngine.trigger($container, clickEventName);\n    });\n    var rowData = cellOptions.row.data;\n    var value = column.calculateCellValue(rowData);\n    var displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, cellOptions.rowType);\n    var text = gridCoreUtils.formatValue(displayValue, column);\n\n    var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\n\n    var rowsView = this._rowsView;\n\n    if (column.allowEditing && this.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\n      $container.attr(\"tabIndex\", this.option(\"tabIndex\"));\n\n      if (isCellOrBatchEditMode) {\n        eventsEngine.off($container, \"focus\", focusAction);\n        eventsEngine.on($container, \"focus\", focusAction);\n      }\n    }\n\n    if (column.cellTemplate) {\n      var templateOptions = extend({}, cellOptions, {\n        value: value,\n        displayValue: displayValue,\n        text: text,\n        column: column\n      });\n      var isDomElement = !!$container.closest(getWindow().document).length;\n      rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(() => {\n        rowsView._cellPrepared($container, cellOptions);\n      });\n    } else {\n      var container = $container.get(0);\n\n      if (column.encodeHtml) {\n        container.textContent = text;\n      } else {\n        container.innerHTML = text;\n      }\n\n      $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\n\n      if (!isDefined(text) || \"\" === text) {\n        $container.html(\"&nbsp;\");\n      }\n\n      if (!this._isRowEditMode()) {\n        if (this._isItemModified(item, cellOptions)) {\n          $container.addClass(FORM_ITEM_MODIFIED);\n        }\n      }\n\n      rowsView._cellPrepared($container, cellOptions);\n    }\n  },\n  _getTemplate: function (item, cellOptions) {\n    var that = this;\n    var column = item.column;\n    var editingController = this.getController(\"editing\");\n    return function (options, container) {\n      var $container = $(container);\n\n      var columnIndex = that._columnsController.getVisibleIndex(column.index);\n\n      var templateOptions = extend({}, cellOptions);\n\n      var renderFormTemplate = function () {\n        var isItemEdited = that._isItemEdited(item);\n\n        templateOptions.value = cellOptions.row.values[columnIndex];\n\n        if (isItemEdited || column.showEditorAlways) {\n          editingController.renderFormEditTemplate(templateOptions, item, options, $container, !isItemEdited);\n        } else {\n          templateOptions.column = column;\n          templateOptions.columnIndex = columnIndex;\n\n          that._renderFormViewTemplate(item, templateOptions, $container);\n        }\n      };\n\n      renderFormTemplate();\n      templateOptions.watch && templateOptions.watch(function () {\n        return {\n          isItemEdited: that._isItemEdited(item),\n          value: cellOptions.row.values[columnIndex]\n        };\n      }, function () {\n        $container.contents().remove();\n        $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\n        renderFormTemplate();\n      });\n    };\n  },\n  _isVisibleColumnsValid: function (visibleColumns) {\n    if (visibleColumns < 2) {\n      return false;\n    }\n\n    if (visibleColumns.length - function () {\n      var result = 0;\n\n      for (var j = 0; j < visibleColumns.length; j++) {\n        var visibleColumn = visibleColumns[j];\n\n        if (visibleColumn.command) {\n          result++;\n        }\n      }\n\n      return result;\n    }() <= 1) {\n      return false;\n    }\n\n    return true;\n  },\n  _calculatePercentWidths: function (widths, visibleColumns) {\n    var that = this;\n    var percentWidths = 0;\n    visibleColumns.forEach(function (item, index) {\n      if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\n        percentWidths += that._getItemPercentWidth(item);\n      }\n    });\n    return percentWidths;\n  },\n  _isPercentWidth: function (width) {\n    return isString(width) && \"%\" === width.slice(-1);\n  },\n  _isColumnHidden: function (column) {\n    return this._hiddenColumns.filter(function (hiddenColumn) {\n      return hiddenColumn.index === column.index;\n    }).length > 0;\n  },\n  _getAverageColumnsWidth: function (containerWidth, columns, columnsCanFit) {\n    var that = this;\n    var fixedColumnsWidth = 0;\n    var columnsWithoutFixedWidthCount = 0;\n    columns.forEach(function (column) {\n      if (!that._isColumnHidden(column)) {\n        var width = column.width;\n\n        if (isDefined(width) && !isNaN(parseFloat(width))) {\n          fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\n            visibleIndex: column.visibleIndex,\n            columnsCount: columns.length,\n            columnsCanFit: columnsCanFit,\n            bestFitWidth: column.bestFitWidth,\n            columnWidth: width,\n            containerWidth: containerWidth\n          }) : parseFloat(width);\n        } else {\n          columnsWithoutFixedWidthCount++;\n        }\n      }\n    });\n    return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount;\n  },\n  _calculateColumnWidth: function (column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    var columnsCount = contentColumns.length;\n    var colWidth;\n\n    if (widthOption && \"auto\" !== widthOption) {\n      if (this._isPercentWidth(widthOption)) {\n        colWidth = this._calculatePercentWidth({\n          visibleIndex: column.visibleIndex,\n          columnsCount: columnsCount,\n          columnsCanFit: columnsCanFit,\n          bestFitWidth: bestFitWidth,\n          columnWidth: widthOption,\n          containerWidth: containerWidth\n        });\n      } else {\n        return parseFloat(widthOption);\n      }\n    } else {\n      var columnAutoWidth = this.option(\"columnAutoWidth\");\n      colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit);\n    }\n\n    return colWidth;\n  },\n  _calculatePercentWidth: function (options) {\n    var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\n    var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\n    var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\n    return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth;\n  },\n  _getNotTruncatedColumnWidth: function (column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\n      return parseFloat(widthOption);\n    }\n\n    var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\n\n    return colWidth < bestFitWidth ? null : colWidth;\n  },\n  _getItemPercentWidth: function (item) {\n    var result = 0;\n\n    if (item.width && this._isPercentWidth(item.width)) {\n      result = parseFloat(item.width);\n    }\n\n    return result;\n  },\n  _getCommandColumnsWidth: function () {\n    var that = this;\n\n    var columns = that._columnsController.getVisibleColumns();\n\n    var colWidth = 0;\n    each(columns, function (index, column) {\n      if (column.index < 0 || column.command) {\n        colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0;\n      }\n    });\n    return colWidth;\n  },\n  _isItemEdited: function (item) {\n    if (this.isFormOrPopupEditMode()) {\n      return false;\n    }\n\n    if (this._isRowEditMode()) {\n      var editRowKey = this.option(\"editing.editRowKey\");\n\n      if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\n        return true;\n      }\n    } else {\n      var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n\n      var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n      return this._editingController.isEditCell(rowIndex, columnIndex);\n    }\n  },\n  _getFormItemsByHiddenColumns: function (hiddenColumns) {\n    var items = [];\n    each(hiddenColumns, function (_, column) {\n      items.push({\n        column: column,\n        name: column.name,\n        dataField: column.dataField,\n        visibleIndex: column.visibleIndex\n      });\n    });\n    return items;\n  },\n  _getAdaptiveColumnVisibleIndex: function (visibleColumns) {\n    for (var i = 0; i < visibleColumns.length; i++) {\n      var column = visibleColumns[i];\n\n      if (column.command === ADAPTIVE_COLUMN_NAME) {\n        return i;\n      }\n    }\n  },\n  _hideAdaptiveColumn: function (resultWidths, visibleColumns) {\n    var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\n\n    if (isDefined(visibleIndex)) {\n      resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n      this._hideVisibleColumn({\n        isCommandColumn: true,\n        visibleIndex: visibleIndex\n      });\n    }\n  },\n  _showHiddenCellsInView: function (_ref) {\n    var {\n      $cells: $cells,\n      isCommandColumn: isCommandColumn\n    } = _ref;\n    var cssClassNameToRemove = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cells.removeClass(cssClassNameToRemove);\n  },\n  _showHiddenColumns: function () {\n    for (var i = 0; i < COLUMN_VIEWS.length; i++) {\n      var view = this.getView(COLUMN_VIEWS[i]);\n\n      if (view && view.isVisible() && view.element()) {\n        var viewName = view.name;\n        var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCommandCells,\n          isCommandColumn: true\n        });\n\n        var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCells\n        });\n      }\n    }\n  },\n  _isCellValid: function ($cell) {\n    return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS);\n  },\n  _hideVisibleColumn: function (_ref2) {\n    var {\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref2;\n    var that = this;\n    COLUMN_VIEWS.forEach(function (viewName) {\n      var view = that.getView(viewName);\n      view && that._hideVisibleColumnInView({\n        view: view,\n        isCommandColumn: isCommandColumn,\n        visibleIndex: visibleIndex\n      });\n    });\n  },\n  _hideVisibleColumnInView: function (_ref3) {\n    var {\n      view: view,\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref3;\n    var viewName = view.name;\n    var $cellElement;\n\n    var column = this._columnsController.getVisibleColumns()[visibleIndex];\n\n    var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\n\n    if (view && view.isVisible() && column) {\n      var rowsCount = view.getRowsCount();\n\n      var $rowElements = view._getRowElements();\n\n      for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\n        var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\n\n        if (!cancelClassAdding) {\n          var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\n\n          if (currentVisibleIndex >= 0) {\n            var $rowElement = $rowElements.eq(rowIndex);\n            $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\n            this._isCellValid($cellElement) && this._hideVisibleCellInView({\n              viewName: viewName,\n              isCommandColumn: isCommandColumn,\n              $cell: $cellElement\n            });\n          }\n        }\n      }\n    }\n  },\n\n  _findCellElementInRow($rowElement, visibleColumnIndex) {\n    var $rowCells = $rowElement.children();\n    var visibleIndex = visibleColumnIndex;\n    var cellIsInsideGroup = false;\n\n    if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\n      var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\n      var colSpan = $groupCell.attr(\"colspan\");\n\n      if ($groupCell.length && isDefined(colSpan)) {\n        var groupCellLength = parseInt(colSpan);\n        var endGroupIndex = $groupCell.index() + groupCellLength - 1;\n\n        if (visibleColumnIndex > endGroupIndex) {\n          visibleIndex = visibleColumnIndex - groupCellLength + 1;\n        } else {\n          cellIsInsideGroup = true;\n        }\n      }\n    }\n\n    var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\n    return $cellElement;\n  },\n\n  _hideVisibleCellInView: function (_ref4) {\n    var {\n      $cell: $cell,\n      isCommandColumn: isCommandColumn\n    } = _ref4;\n    var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cell.addClass(cssClassNameToAdd);\n  },\n  _getEditMode: function () {\n    return this._editingController.getEditMode();\n  },\n  isFormOrPopupEditMode: function () {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP;\n  },\n  hideRedundantColumns: function (resultWidths, visibleColumns, hiddenQueue) {\n    this._hiddenColumns = [];\n\n    if (this._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\n      var totalWidth = 0;\n      var $rootElement = this.component.$element();\n\n      var rootElementWidth = getWidth($rootElement) - this._getCommandColumnsWidth();\n\n      var getVisibleContentColumns = function () {\n        return visibleColumns.filter(item => !item.command && 0 === this._hiddenColumns.filter(i => i.index === item.index).length);\n      }.bind(this);\n\n      var visibleContentColumns = getVisibleContentColumns();\n      var contentColumnsCount = visibleContentColumns.length;\n      var i;\n      var hasHiddenColumns;\n      var needHideColumn;\n\n      do {\n        needHideColumn = false;\n        totalWidth = 0;\n\n        var percentWidths = this._calculatePercentWidths(resultWidths, visibleColumns);\n\n        var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\n\n        for (i = 0; i < visibleColumns.length; i++) {\n          var visibleColumn = visibleColumns[i];\n\n          var columnWidth = this._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          var columnId = getColumnId(this, visibleColumn);\n\n          var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n          var minWidth = this._columnsController.columnOption(columnId, \"minWidth\");\n\n          var columnBestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n          if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\n            hasHiddenColumns = true;\n            continue;\n          }\n\n          if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\n            needHideColumn = true;\n            break;\n          }\n\n          if (!widthOption || \"auto\" === widthOption) {\n            columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0);\n          }\n\n          if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\n            totalWidth += columnWidth;\n          }\n        }\n\n        needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\n\n        if (needHideColumn) {\n          var column = hiddenQueue.pop();\n\n          var visibleIndex = this._columnsController.getVisibleIndex(column.index);\n\n          rootElementWidth += this._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          this._hideVisibleColumn({\n            visibleIndex: visibleIndex\n          });\n\n          resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n          this._hiddenColumns.push(column);\n\n          visibleContentColumns = getVisibleContentColumns();\n        }\n      } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\n\n      if (contentColumnsCount === visibleContentColumns.length) {\n        this._hideAdaptiveColumn(resultWidths, visibleColumns);\n      }\n    } else {\n      this._hideAdaptiveColumn(resultWidths, visibleColumns);\n    }\n  },\n  getItemContentByColumnIndex: function (visibleColumnIndex) {\n    var $itemContent;\n\n    for (var i = 0; i < this._$itemContents.length; i++) {\n      $itemContent = this._$itemContents.eq(i);\n      var item = $itemContent.data(\"dx-form-item\");\n\n      if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\n        return $itemContent;\n      }\n    }\n  },\n  toggleExpandAdaptiveDetailRow: function (key, alwaysExpanded) {\n    if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\n      this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded);\n    }\n  },\n  createFormByHiddenColumns: function (container, options) {\n    var that = this;\n    var $container = $(container);\n    var userFormOptions = {\n      items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\n      formID: \"dx-\" + new Guid()\n    };\n    var defaultFormOptions = isMaterial() ? {\n      colCount: 2\n    } : {};\n    this.executeAction(\"onAdaptiveDetailRowPreparing\", {\n      formOptions: userFormOptions\n    });\n    that._$itemContents = null;\n    that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\n      customizeItem: function (item) {\n        var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\n\n        if (column) {\n          item.label = item.label || {};\n          item.label.text = item.label.text || column.caption;\n          item.column = column;\n          item.template = that._getTemplate(item, options, that.updateForm.bind(that));\n        }\n\n        userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item);\n      },\n      onContentReady: function (e) {\n        userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\n        that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS);\n      }\n    }));\n  },\n  hasAdaptiveDetailRowExpanded: function () {\n    return isDefined(this._dataController.adaptiveExpandedKey());\n  },\n  updateForm: function (hiddenColumns) {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      if (this._form && isDefined(this._form._contentReadyAction)) {\n        if (hiddenColumns && hiddenColumns.length) {\n          this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns));\n        } else {\n          this._form.repaint();\n        }\n      }\n    }\n  },\n  updateHidingQueue: function (columns) {\n    var hideableColumns = columns.filter(function (column) {\n      return column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0);\n    });\n    var columnsHasHidingPriority;\n    var i;\n    this._hidingColumnsQueue = [];\n\n    if (this.option(\"allowColumnResizing\") && \"widget\" === this.option(\"columnResizingMode\")) {\n      return this._hidingColumnsQueue;\n    }\n\n    for (i = 0; i < hideableColumns.length; i++) {\n      if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\n        columnsHasHidingPriority = true;\n        this._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i];\n      }\n    }\n\n    if (columnsHasHidingPriority) {\n      this._hidingColumnsQueue.reverse();\n    } else if (this.option(\"columnHidingEnabled\")) {\n      for (i = 0; i < hideableColumns.length; i++) {\n        var visibleIndex = this._columnsController.getVisibleIndex(hideableColumns[i].index);\n\n        this._hidingColumnsQueue[visibleIndex] = hideableColumns[i];\n      }\n    }\n\n    this._hidingColumnsQueue = this._hidingColumnsQueue.filter(Object);\n    return this._hidingColumnsQueue;\n  },\n  getHiddenColumns: function () {\n    return this._hiddenColumns;\n  },\n  hasHiddenColumns: function () {\n    return this._hiddenColumns.length > 0;\n  },\n  getHidingColumnsQueue: function () {\n    return this._hidingColumnsQueue;\n  },\n  init: function () {\n    var that = this;\n    that._columnsController = that.getController(\"columns\");\n    that._dataController = that.getController(\"data\");\n    that._rowsView = that.getView(\"rowsView\");\n\n    that._columnsController.addCommandColumn({\n      type: ADAPTIVE_COLUMN_NAME,\n      command: ADAPTIVE_COLUMN_NAME,\n      visible: true,\n      adaptiveHidden: true,\n      cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\n      alignment: \"center\",\n      width: \"auto\",\n      cellTemplate: adaptiveCellTemplate,\n      fixedPosition: \"right\"\n    });\n\n    that._columnsController.columnsChanged.add(function () {\n      var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\n\n      that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true);\n    });\n\n    that._editingController = that.getController(\"editing\");\n    that._hidingColumnsQueue = [];\n    that._hiddenColumns = [];\n    that.createAction(\"onAdaptiveDetailRowPreparing\");\n    that.callBase();\n  },\n  optionChanged: function (args) {\n    if (\"columnHidingEnabled\" === args.name) {\n      this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value);\n    }\n\n    this.callBase(args);\n  },\n  publicMethods: function () {\n    return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"];\n  },\n  isAdaptiveDetailRowExpanded: function (key) {\n    return this._dataController.adaptiveExpandedKey() && equalByValue(this._dataController.adaptiveExpandedKey(), key);\n  },\n  expandAdaptiveDetailRow: function (key) {\n    if (!this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow(key);\n    }\n  },\n  collapseAdaptiveDetailRow: function () {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow();\n    }\n  },\n  updateCommandAdaptiveAriaLabel: function (key, label) {\n    var rowIndex = this._dataController.getRowIndexByKey(key);\n\n    if (-1 === rowIndex) {\n      return;\n    }\n\n    var $row = $(this.component.getRowElement(rowIndex));\n    this.setCommandAdaptiveAriaLabel($row, label);\n  },\n  setCommandAdaptiveAriaLabel: function ($row, labelName) {\n    var $adaptiveCommand = $row.find(\".dx-command-adaptive\");\n    $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName));\n  }\n});\nexport var adaptivityModule = {\n  defaultOptions: function () {\n    return {\n      columnHidingEnabled: false,\n      onAdaptiveDetailRowPreparing: null\n    };\n  },\n  controllers: {\n    adaptiveColumns: AdaptiveColumnsController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _getCellTemplate: function (options) {\n          var that = this;\n          var column = options.column;\n\n          if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\n            return function (container, options) {\n              that._adaptiveColumnsController.createFormByHiddenColumns($(container), options);\n            };\n          }\n\n          return that.callBase(options);\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\n            $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS);\n          }\n\n          return $row;\n        },\n        _renderCells: function ($row, options) {\n          this.callBase($row, options);\n          var adaptiveColumnsController = this._adaptiveColumnsController;\n          var hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\n          var hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\n\n          if (hidingColumnsQueueLength && !hiddenColumnsLength) {\n            getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS);\n          }\n\n          if (\"data\" === options.row.rowType) {\n            adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME);\n          }\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n\n          if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\n            var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\n            return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n          } else {\n            return this.callBase($element);\n          }\n        },\n        _cellPrepared: function ($cell, options) {\n          this.callBase.apply(this, arguments);\n\n          if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n          }\n        },\n        _getCellElement: function (rowIndex, columnIdentifier) {\n          var item = this._dataController.items()[rowIndex];\n\n          if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\n            return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier);\n          } else {\n            return this.callBase.apply(this, arguments);\n          }\n        },\n        getContextMenuItems: function (options) {\n          if (options.row && \"detailAdaptive\" === options.row.rowType) {\n            var view = this.component.getView(\"columnHeadersView\");\n            var formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\n            options.column = formItem ? formItem.column : options.column;\n            return view.getContextMenuItems && view.getContextMenuItems(options);\n          }\n\n          return this.callBase && this.callBase(options);\n        },\n        isClickableElement: function ($target) {\n          var isClickable = this.callBase ? this.callBase($target) : false;\n          return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length;\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    },\n    controllers: {\n      export: {\n        _updateColumnWidth: function (column, width) {\n          this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width);\n        }\n      },\n      columnsResizer: {\n        _pointCreated: function (point, cellsLength, columns) {\n          var result = this.callBase(point, cellsLength, columns);\n          var currentColumn = columns[point.columnIndex] || {};\n\n          var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\n\n          var nextColumn = columns[nextColumnIndex] || {};\n          var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\n          var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\n          return result || hasAdaptiveHiddenWidth;\n        },\n        _getNextColumnIndex: function (currentColumnIndex) {\n          var visibleColumns = this._columnsController.getVisibleColumns();\n\n          var index = this.callBase(currentColumnIndex);\n\n          while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            index++;\n          }\n\n          return index;\n        }\n      },\n      draggingHeader: {\n        _pointCreated: function (point, columns, location, sourceColumn) {\n          var result = this.callBase(point, columns, location, sourceColumn);\n          var column = columns[point.columnIndex - 1] || {};\n          var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\n          return result || hasAdaptiveHiddenWidth;\n        }\n      },\n      editing: {\n        _isRowEditMode: function () {\n          return this.getEditMode() === EDIT_MODE_ROW;\n        },\n        _getFormEditItemTemplate: function (cellOptions, column) {\n          if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\n            cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\n            return this.getColumnTemplate(cellOptions);\n          }\n\n          return this.callBase(cellOptions, column);\n        },\n        _closeEditItem: function ($targetElement) {\n          var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n          var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n          var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\n\n          var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n\n          if (!this.isEditCell(rowIndex, columnIndex)) {\n            this.callBase($targetElement);\n          }\n        },\n        _beforeUpdateItems: function (rowIndices, rowIndex) {\n          if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            var items = this._dataController.items();\n\n            var item = items[rowIndex];\n            var oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\n            this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\n\n            if (oldExpandRowIndex >= 0) {\n              rowIndices.push(oldExpandRowIndex + 1);\n            }\n\n            rowIndices.push(rowIndex + 1);\n\n            this._dataController.adaptiveExpandedKey(item.key);\n          }\n        },\n        _afterInsertRow: function (key) {\n          this.callBase.apply(this, arguments);\n\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\n\n            this._isForceRowAdaptiveExpand = true;\n          }\n        },\n        _collapseAdaptiveDetailRow: function () {\n          if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n\n            this._isForceRowAdaptiveExpand = false;\n          }\n        },\n        _cancelEditAdaptiveDetailRow: function () {\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._collapseAdaptiveDetailRow();\n          }\n        },\n        _afterSaveEditData: function () {\n          this.callBase.apply(this, arguments);\n          var deferred = new Deferred();\n\n          if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            when(this.getController(\"validating\").validate(true)).done(isValid => {\n              if (isValid) {\n                this._cancelEditAdaptiveDetailRow();\n              }\n\n              deferred.resolve();\n            });\n          } else {\n            deferred.resolve();\n          }\n\n          return deferred.promise();\n        },\n        _beforeCancelEditData: function () {\n          this.callBase();\n\n          this._cancelEditAdaptiveDetailRow();\n        },\n        _getRowIndicesForCascadeUpdating: function (row) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\n            rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        _beforeCloseEditCellInBatchMode: function (rowIndices) {\n          var expandedKey = this._dataController._adaptiveExpandedKey;\n\n          if (expandedKey) {\n            var rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\n\n            if (rowIndex > -1) {\n              rowIndices.unshift(rowIndex);\n            }\n          }\n        },\n        editRow: function (rowIndex) {\n          if (this._adaptiveController.isFormOrPopupEditMode()) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        deleteRow: function (rowIndex) {\n          var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n\n          if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      },\n      resizing: {\n        _needBestFit: function () {\n          return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length;\n        },\n        _correctColumnWidths: function (resultWidths, visibleColumns) {\n          var adaptiveController = this._adaptiveColumnsController;\n          var oldHiddenColumns = adaptiveController.getHiddenColumns();\n          var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\n          adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\n          var hiddenColumns = adaptiveController.getHiddenColumns();\n\n          if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\n            if (oldHiddenColumns.length !== hiddenColumns.length) {\n              adaptiveController.updateForm(hiddenColumns);\n            }\n          }\n\n          !hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\n          return this.callBase.apply(this, arguments);\n        },\n        _toggleBestFitMode: function (isBestFit) {\n          isBestFit && this._adaptiveColumnsController._showHiddenColumns();\n          this.callBase(isBestFit);\n        },\n        _needStretch: function () {\n          var adaptiveColumnsController = this._adaptiveColumnsController;\n          return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns();\n        },\n        init: function () {\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          this.callBase();\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._updateScrollableTimeoutID);\n        }\n      },\n      data: {\n        _processItems: function (items, change) {\n          var changeType = change.changeType;\n          items = this.callBase.apply(this, arguments);\n\n          if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\n            return items;\n          }\n\n          var expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\n          var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n\n          if (expandRowIndex >= 0) {\n            var item = items[expandRowIndex];\n            items.splice(expandRowIndex + 1, 0, {\n              visible: true,\n              rowType: ADAPTIVE_ROW_TYPE,\n              key: item.key,\n              data: item.data,\n              node: item.node,\n              modifiedValues: item.modifiedValues,\n              isNewRow: item.isNewRow,\n              values: item.values\n            });\n          } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\n            this._adaptiveExpandedKey = void 0;\n          }\n\n          return items;\n        },\n        _getRowIndicesForExpand: function (key) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\n            var lastRowIndex = rowIndices[rowIndices.length - 1];\n            rowIndices.push(lastRowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        adaptiveExpandedKey: function (value) {\n          if (isDefined(value)) {\n            this._adaptiveExpandedKey = value;\n          } else {\n            return this._adaptiveExpandedKey;\n          }\n        },\n        toggleExpandAdaptiveDetailRow: function (key, alwaysExpanded) {\n          var oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\n          var newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\n\n          if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\n            key = void 0;\n            newExpandLoadedRowIndex = -1;\n          }\n\n          var oldKey = this._adaptiveExpandedKey;\n          this._adaptiveExpandedKey = key;\n\n          if (oldExpandLoadedRowIndex >= 0) {\n            oldExpandLoadedRowIndex++;\n          }\n\n          if (newExpandLoadedRowIndex >= 0) {\n            newExpandLoadedRowIndex++;\n          }\n\n          var rowIndexDelta = this.getRowIndexDelta();\n          this.updateItems({\n            allowInvisibleRowIndices: true,\n            changeType: \"update\",\n            rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\n          });\n          var adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\n          adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME);\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveExpandedKey = void 0;\n        }\n      },\n      editorFactory: {\n        _getFocusCellSelector: function () {\n          return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\";\n        },\n        _getTooltipsSelector: function () {\n          return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n        }\n      },\n      columns: {\n        _isColumnVisible: function (column) {\n          return this.callBase(column) && !column.adaptiveHidden;\n        }\n      },\n      keyboardNavigation: {\n        _isCellValid: function ($cell) {\n          return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n        },\n        _processNextCellInMasterDetail: function ($nextCell) {\n          this.callBase($nextCell);\n\n          var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\n\n          if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\n            eventsEngine.on($nextCell, \"focus\", function focusHandler() {\n              eventsEngine.off($nextCell, \"focus\", focusHandler);\n              eventsEngine.trigger($nextCell, \"dxclick\");\n            });\n          }\n        },\n        _handleTabKeyOnMasterDetailCell: function (eventTarget, direction) {\n          var result = this.callBase(eventTarget, direction);\n\n          var $currentCell = this._getFocusedCell();\n\n          var $row = $currentCell && $currentCell.parent();\n\n          if (!result && $row && $row.length) {\n            var $dataCells = getDataCellElements($row);\n            var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\n            var rowIndex = $row.get(0).rowIndex;\n            var adaptiveController = this._adaptiveController;\n\n            var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\n\n            var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\n            return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals;\n          }\n\n          return result;\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["getWidth","$","eventsEngine","addNamespace","name","clickEventName","isDefined","isString","Guid","modules","Form","gridCoreUtils","isMaterial","getWindow","equalByValue","each","extend","Deferred","when","messageLocalization","COLUMN_HEADERS_VIEW","ROWS_VIEW","FOOTER_VIEW","COLUMN_VIEWS","ADAPTIVE_NAMESPACE","HIDDEN_COLUMNS_WIDTH","ADAPTIVE_ROW_TYPE","FORM_ITEM_CONTENT_CLASS","FORM_ITEM_MODIFIED","HIDDEN_COLUMN_CLASS","ADAPTIVE_COLUMN_BUTTON_CLASS","ADAPTIVE_COLUMN_NAME_CLASS","COMMAND_ADAPTIVE_HIDDEN_CLASS","ADAPTIVE_DETAIL_ROW_CLASS","ADAPTIVE_ITEM_TEXT_CLASS","MASTER_DETAIL_CELL_CLASS","LAST_DATA_CELL_CLASS","ADAPTIVE_COLUMN_NAME","EDIT_MODE_BATCH","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_POPUP","REVERT_TOOLTIP_CLASS","GROUP_CELL_CLASS","GROUP_ROW_CLASS","EXPAND_ARIA_NAME","COLLAPSE_ARIA_NAME","LEGACY_SCROLLING_MODE","getColumnId","that","column","_columnsController","getDataCellElements","$row","find","adaptiveCellTemplate","container","options","$adaptiveColumnButton","$container","adaptiveColumnsController","component","getController","rowType","addClass","addWidgetPrefix","on","createAction","toggleExpandAdaptiveDetailRow","key","appendTo","setEmptyText","AdaptiveColumnsController","ViewController","inherit","_isRowEditMode","editMode","_getEditMode","_isItemModified","item","cellOptions","columnIndex","getVisibleIndex","index","rowIndex","_dataController","getRowIndexByKey","row","items","modifiedValues","_renderFormViewTemplate","focusAction","trigger","rowData","data","value","calculateCellValue","displayValue","getDisplayValue","text","formatValue","isCellOrBatchEditMode","_editingController","rowsView","_rowsView","allowEditing","isKeyboardEnabled","attr","option","off","cellTemplate","templateOptions","isDomElement","closest","document","length","renderTemplate","done","_cellPrepared","get","encodeHtml","textContent","innerHTML","html","_getTemplate","editingController","renderFormTemplate","isItemEdited","_isItemEdited","values","showEditorAlways","renderFormEditTemplate","watch","contents","remove","removeClass","_isVisibleColumnsValid","visibleColumns","result","j","visibleColumn","command","_calculatePercentWidths","widths","percentWidths","forEach","_getItemPercentWidth","_isPercentWidth","width","slice","_isColumnHidden","_hiddenColumns","filter","hiddenColumn","_getAverageColumnsWidth","containerWidth","columns","columnsCanFit","fixedColumnsWidth","columnsWithoutFixedWidthCount","isNaN","parseFloat","_calculatePercentWidth","visibleIndex","columnsCount","bestFitWidth","columnWidth","_calculateColumnWidth","contentColumns","columnId","widthOption","columnOption","colWidth","columnAutoWidth","columnFitted","partialWidth","resultWidth","_getNotTruncatedColumnWidth","_getCommandColumnsWidth","getVisibleColumns","isFormOrPopupEditMode","editRowKey","adaptiveExpandedKey","isEditCell","_getFormItemsByHiddenColumns","hiddenColumns","_","push","dataField","_getAdaptiveColumnVisibleIndex","i","_hideAdaptiveColumn","resultWidths","_hideVisibleColumn","isCommandColumn","_showHiddenCellsInView","_ref","$cells","cssClassNameToRemove","_showHiddenColumns","view","getView","isVisible","element","viewName","$hiddenCommandCells","$hiddenCells","_isCellValid","$cell","hasClass","_ref2","_hideVisibleColumnInView","_ref3","$cellElement","editFormRowIndex","getEditFormRowIndex","rowsCount","getRowsCount","$rowElements","_getRowElements","cancelClassAdding","currentVisibleIndex","$rowElement","eq","_findCellElementInRow","_hideVisibleCellInView","visibleColumnIndex","$rowCells","children","cellIsInsideGroup","$groupCell","concat","colSpan","groupCellLength","parseInt","endGroupIndex","_ref4","cssClassNameToAdd","getEditMode","hideRedundantColumns","hiddenQueue","totalWidth","$rootElement","$element","rootElementWidth","getVisibleContentColumns","bind","visibleContentColumns","contentColumnsCount","hasHiddenColumns","needHideColumn","minWidth","columnBestFitWidth","fixed","Math","max","pop","getItemContentByColumnIndex","$itemContent","_$itemContents","alwaysExpanded","isEditing","createFormByHiddenColumns","userFormOptions","formID","defaultFormOptions","colCount","executeAction","formOptions","_form","_createComponent","customizeItem","label","caption","template","updateForm","call","onContentReady","e","hasAdaptiveDetailRowExpanded","_contentReadyAction","repaint","updateHidingQueue","hideableColumns","visible","type","groupIndex","columnsHasHidingPriority","_hidingColumnsQueue","hidingPriority","reverse","Object","getHiddenColumns","getHidingColumnsQueue","init","addCommandColumn","adaptiveHidden","cssClass","alignment","fixedPosition","columnsChanged","add","isAdaptiveVisible","getColumns","callBase","optionChanged","args","publicMethods","isAdaptiveDetailRowExpanded","expandAdaptiveDetailRow","collapseAdaptiveDetailRow","updateCommandAdaptiveAriaLabel","getRowElement","setCommandAdaptiveAriaLabel","labelName","$adaptiveCommand","format","adaptivityModule","defaultOptions","columnHidingEnabled","onAdaptiveDetailRowPreparing","controllers","adaptiveColumns","extenders","views","_getCellTemplate","_adaptiveColumnsController","_createRow","apply","arguments","_renderCells","hidingColumnsQueueLength","hiddenColumnsLength","last","_getColumnIndexByElementCore","formItem","first","visibleWidth","_getCellElement","columnIdentifier","getContextMenuItems","targetElement","next","isClickableElement","$target","isClickable","export","_updateColumnWidth","columnsResizer","_pointCreated","point","cellsLength","currentColumn","nextColumnIndex","_getNextColumnIndex","nextColumn","hasHiddenColumnsOnly","hasAdaptiveHiddenWidth","currentColumnIndex","draggingHeader","location","sourceColumn","editing","_getFormEditItemTemplate","getColumnTemplate","_closeEditItem","$targetElement","$itemContents","_beforeUpdateItems","rowIndices","_adaptiveController","oldExpandRowIndex","getIndexByKey","_isForceRowAdaptiveExpand","_afterInsertRow","isRowEditMode","_collapseAdaptiveDetailRow","_cancelEditAdaptiveDetailRow","_afterSaveEditData","deferred","validate","isValid","resolve","promise","_beforeCancelEditData","_getRowIndicesForCascadeUpdating","_beforeCloseEditCellInBatchMode","expandedKey","_adaptiveExpandedKey","unshift","editRow","deleteRow","rowKey","getKeyByRowIndex","resizing","_needBestFit","_correctColumnWidths","adaptiveController","oldHiddenColumns","hidingColumnsQueue","_toggleBestFitMode","isBestFit","_needStretch","dispose","clearTimeout","_updateScrollableTimeoutID","_processItems","change","changeType","expandRowIndex","newMode","splice","node","isNewRow","repaintChangesOnly","_getRowIndicesForExpand","lastRowIndex","oldExpandLoadedRowIndex","_items","newExpandLoadedRowIndex","oldKey","rowIndexDelta","getRowIndexDelta","updateItems","allowInvisibleRowIndices","editorFactory","_getFocusCellSelector","_getTooltipsSelector","_isColumnVisible","keyboardNavigation","_processNextCellInMasterDetail","$nextCell","isCellOrBatchMode","_isInsideEditForm","focusHandler","_handleTabKeyOnMasterDetailCell","eventTarget","direction","$currentCell","_getFocusedCell","parent","$dataCells","$targetCell","isCellElementsEquals"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.adaptivity.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport Guid from \"../../core/guid\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport Form from \"../form\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    isMaterial\r\n} from \"../themes\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport messageLocalization from \"../../localization/message\";\r\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\nvar ROWS_VIEW = \"rowsView\";\r\nvar FOOTER_VIEW = \"footerView\";\r\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\r\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\r\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\r\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\r\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\r\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\r\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\r\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\r\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\r\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\r\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\r\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\r\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\r\nvar COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\r\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\n\r\nfunction getColumnId(that, column) {\r\n    return that._columnsController.getColumnId(column)\r\n}\r\n\r\nfunction getDataCellElements($row) {\r\n    return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\")\r\n}\r\n\r\nfunction adaptiveCellTemplate(container, options) {\r\n    var $adaptiveColumnButton;\r\n    var $container = $(container);\r\n    var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\r\n    if (\"data\" === options.rowType) {\r\n        $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\r\n        eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction((function() {\r\n            adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key)\r\n        })));\r\n        $adaptiveColumnButton.appendTo($container)\r\n    } else {\r\n        gridCoreUtils.setEmptyText($container)\r\n    }\r\n}\r\nvar AdaptiveColumnsController = modules.ViewController.inherit({\r\n    _isRowEditMode: function() {\r\n        var editMode = this._getEditMode();\r\n        return editMode === EDIT_MODE_ROW\r\n    },\r\n    _isItemModified: function(item, cellOptions) {\r\n        var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n        var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\r\n        var row = this._dataController.items()[rowIndex + 1];\r\n        return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex])\r\n    },\r\n    _renderFormViewTemplate: function(item, cellOptions, $container) {\r\n        var column = item.column;\r\n        var focusAction = this.createAction((function() {\r\n            eventsEngine.trigger($container, clickEventName)\r\n        }));\r\n        var rowData = cellOptions.row.data;\r\n        var value = column.calculateCellValue(rowData);\r\n        var displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, cellOptions.rowType);\r\n        var text = gridCoreUtils.formatValue(displayValue, column);\r\n        var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\r\n        var rowsView = this._rowsView;\r\n        if (column.allowEditing && this.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\r\n            $container.attr(\"tabIndex\", this.option(\"tabIndex\"));\r\n            if (isCellOrBatchEditMode) {\r\n                eventsEngine.off($container, \"focus\", focusAction);\r\n                eventsEngine.on($container, \"focus\", focusAction)\r\n            }\r\n        }\r\n        if (column.cellTemplate) {\r\n            var templateOptions = extend({}, cellOptions, {\r\n                value: value,\r\n                displayValue: displayValue,\r\n                text: text,\r\n                column: column\r\n            });\r\n            var isDomElement = !!$container.closest(getWindow().document).length;\r\n            rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(() => {\r\n                rowsView._cellPrepared($container, cellOptions)\r\n            })\r\n        } else {\r\n            var container = $container.get(0);\r\n            if (column.encodeHtml) {\r\n                container.textContent = text\r\n            } else {\r\n                container.innerHTML = text\r\n            }\r\n            $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\r\n            if (!isDefined(text) || \"\" === text) {\r\n                $container.html(\"&nbsp;\")\r\n            }\r\n            if (!this._isRowEditMode()) {\r\n                if (this._isItemModified(item, cellOptions)) {\r\n                    $container.addClass(FORM_ITEM_MODIFIED)\r\n                }\r\n            }\r\n            rowsView._cellPrepared($container, cellOptions)\r\n        }\r\n    },\r\n    _getTemplate: function(item, cellOptions) {\r\n        var that = this;\r\n        var column = item.column;\r\n        var editingController = this.getController(\"editing\");\r\n        return function(options, container) {\r\n            var $container = $(container);\r\n            var columnIndex = that._columnsController.getVisibleIndex(column.index);\r\n            var templateOptions = extend({}, cellOptions);\r\n            var renderFormTemplate = function() {\r\n                var isItemEdited = that._isItemEdited(item);\r\n                templateOptions.value = cellOptions.row.values[columnIndex];\r\n                if (isItemEdited || column.showEditorAlways) {\r\n                    editingController.renderFormEditTemplate(templateOptions, item, options, $container, !isItemEdited)\r\n                } else {\r\n                    templateOptions.column = column;\r\n                    templateOptions.columnIndex = columnIndex;\r\n                    that._renderFormViewTemplate(item, templateOptions, $container)\r\n                }\r\n            };\r\n            renderFormTemplate();\r\n            templateOptions.watch && templateOptions.watch((function() {\r\n                return {\r\n                    isItemEdited: that._isItemEdited(item),\r\n                    value: cellOptions.row.values[columnIndex]\r\n                }\r\n            }), (function() {\r\n                $container.contents().remove();\r\n                $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\r\n                renderFormTemplate()\r\n            }))\r\n        }\r\n    },\r\n    _isVisibleColumnsValid: function(visibleColumns) {\r\n        if (visibleColumns < 2) {\r\n            return false\r\n        }\r\n        if (visibleColumns.length - function() {\r\n                var result = 0;\r\n                for (var j = 0; j < visibleColumns.length; j++) {\r\n                    var visibleColumn = visibleColumns[j];\r\n                    if (visibleColumn.command) {\r\n                        result++\r\n                    }\r\n                }\r\n                return result\r\n            }() <= 1) {\r\n            return false\r\n        }\r\n        return true\r\n    },\r\n    _calculatePercentWidths: function(widths, visibleColumns) {\r\n        var that = this;\r\n        var percentWidths = 0;\r\n        visibleColumns.forEach((function(item, index) {\r\n            if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\r\n                percentWidths += that._getItemPercentWidth(item)\r\n            }\r\n        }));\r\n        return percentWidths\r\n    },\r\n    _isPercentWidth: function(width) {\r\n        return isString(width) && \"%\" === width.slice(-1)\r\n    },\r\n    _isColumnHidden: function(column) {\r\n        return this._hiddenColumns.filter((function(hiddenColumn) {\r\n            return hiddenColumn.index === column.index\r\n        })).length > 0\r\n    },\r\n    _getAverageColumnsWidth: function(containerWidth, columns, columnsCanFit) {\r\n        var that = this;\r\n        var fixedColumnsWidth = 0;\r\n        var columnsWithoutFixedWidthCount = 0;\r\n        columns.forEach((function(column) {\r\n            if (!that._isColumnHidden(column)) {\r\n                var width = column.width;\r\n                if (isDefined(width) && !isNaN(parseFloat(width))) {\r\n                    fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\r\n                        visibleIndex: column.visibleIndex,\r\n                        columnsCount: columns.length,\r\n                        columnsCanFit: columnsCanFit,\r\n                        bestFitWidth: column.bestFitWidth,\r\n                        columnWidth: width,\r\n                        containerWidth: containerWidth\r\n                    }) : parseFloat(width)\r\n                } else {\r\n                    columnsWithoutFixedWidthCount++\r\n                }\r\n            }\r\n        }));\r\n        return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount\r\n    },\r\n    _calculateColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {\r\n        var columnId = getColumnId(this, column);\r\n        var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        var columnsCount = contentColumns.length;\r\n        var colWidth;\r\n        if (widthOption && \"auto\" !== widthOption) {\r\n            if (this._isPercentWidth(widthOption)) {\r\n                colWidth = this._calculatePercentWidth({\r\n                    visibleIndex: column.visibleIndex,\r\n                    columnsCount: columnsCount,\r\n                    columnsCanFit: columnsCanFit,\r\n                    bestFitWidth: bestFitWidth,\r\n                    columnWidth: widthOption,\r\n                    containerWidth: containerWidth\r\n                })\r\n            } else {\r\n                return parseFloat(widthOption)\r\n            }\r\n        } else {\r\n            var columnAutoWidth = this.option(\"columnAutoWidth\");\r\n            colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit)\r\n        }\r\n        return colWidth\r\n    },\r\n    _calculatePercentWidth: function(options) {\r\n        var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\r\n        var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\r\n        var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\r\n        return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth\r\n    },\r\n    _getNotTruncatedColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {\r\n        var columnId = getColumnId(this, column);\r\n        var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\r\n            return parseFloat(widthOption)\r\n        }\r\n        var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\r\n        return colWidth < bestFitWidth ? null : colWidth\r\n    },\r\n    _getItemPercentWidth: function(item) {\r\n        var result = 0;\r\n        if (item.width && this._isPercentWidth(item.width)) {\r\n            result = parseFloat(item.width)\r\n        }\r\n        return result\r\n    },\r\n    _getCommandColumnsWidth: function() {\r\n        var that = this;\r\n        var columns = that._columnsController.getVisibleColumns();\r\n        var colWidth = 0;\r\n        each(columns, (function(index, column) {\r\n            if (column.index < 0 || column.command) {\r\n                colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0\r\n            }\r\n        }));\r\n        return colWidth\r\n    },\r\n    _isItemEdited: function(item) {\r\n        if (this.isFormOrPopupEditMode()) {\r\n            return false\r\n        }\r\n        if (this._isRowEditMode()) {\r\n            var editRowKey = this.option(\"editing.editRowKey\");\r\n            if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\r\n                return true\r\n            }\r\n        } else {\r\n            var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n            var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n            return this._editingController.isEditCell(rowIndex, columnIndex)\r\n        }\r\n    },\r\n    _getFormItemsByHiddenColumns: function(hiddenColumns) {\r\n        var items = [];\r\n        each(hiddenColumns, (function(_, column) {\r\n            items.push({\r\n                column: column,\r\n                name: column.name,\r\n                dataField: column.dataField,\r\n                visibleIndex: column.visibleIndex\r\n            })\r\n        }));\r\n        return items\r\n    },\r\n    _getAdaptiveColumnVisibleIndex: function(visibleColumns) {\r\n        for (var i = 0; i < visibleColumns.length; i++) {\r\n            var column = visibleColumns[i];\r\n            if (column.command === ADAPTIVE_COLUMN_NAME) {\r\n                return i\r\n            }\r\n        }\r\n    },\r\n    _hideAdaptiveColumn: function(resultWidths, visibleColumns) {\r\n        var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\r\n        if (isDefined(visibleIndex)) {\r\n            resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\r\n            this._hideVisibleColumn({\r\n                isCommandColumn: true,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }\r\n    },\r\n    _showHiddenCellsInView: function(_ref) {\r\n        var {\r\n            $cells: $cells,\r\n            isCommandColumn: isCommandColumn\r\n        } = _ref;\r\n        var cssClassNameToRemove = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\r\n        $cells.removeClass(cssClassNameToRemove)\r\n    },\r\n    _showHiddenColumns: function() {\r\n        for (var i = 0; i < COLUMN_VIEWS.length; i++) {\r\n            var view = this.getView(COLUMN_VIEWS[i]);\r\n            if (view && view.isVisible() && view.element()) {\r\n                var viewName = view.name;\r\n                var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCommandCells,\r\n                    isCommandColumn: true\r\n                });\r\n                var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCells\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _isCellValid: function($cell) {\r\n        return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS)\r\n    },\r\n    _hideVisibleColumn: function(_ref2) {\r\n        var {\r\n            isCommandColumn: isCommandColumn,\r\n            visibleIndex: visibleIndex\r\n        } = _ref2;\r\n        var that = this;\r\n        COLUMN_VIEWS.forEach((function(viewName) {\r\n            var view = that.getView(viewName);\r\n            view && that._hideVisibleColumnInView({\r\n                view: view,\r\n                isCommandColumn: isCommandColumn,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }))\r\n    },\r\n    _hideVisibleColumnInView: function(_ref3) {\r\n        var {\r\n            view: view,\r\n            isCommandColumn: isCommandColumn,\r\n            visibleIndex: visibleIndex\r\n        } = _ref3;\r\n        var viewName = view.name;\r\n        var $cellElement;\r\n        var column = this._columnsController.getVisibleColumns()[visibleIndex];\r\n        var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\r\n        if (view && view.isVisible() && column) {\r\n            var rowsCount = view.getRowsCount();\r\n            var $rowElements = view._getRowElements();\r\n            for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\r\n                var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\r\n                if (!cancelClassAdding) {\r\n                    var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\r\n                    if (currentVisibleIndex >= 0) {\r\n                        var $rowElement = $rowElements.eq(rowIndex);\r\n                        $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\r\n                        this._isCellValid($cellElement) && this._hideVisibleCellInView({\r\n                            viewName: viewName,\r\n                            isCommandColumn: isCommandColumn,\r\n                            $cell: $cellElement\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _findCellElementInRow($rowElement, visibleColumnIndex) {\r\n        var $rowCells = $rowElement.children();\r\n        var visibleIndex = visibleColumnIndex;\r\n        var cellIsInsideGroup = false;\r\n        if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\r\n            var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\r\n            var colSpan = $groupCell.attr(\"colspan\");\r\n            if ($groupCell.length && isDefined(colSpan)) {\r\n                var groupCellLength = parseInt(colSpan);\r\n                var endGroupIndex = $groupCell.index() + groupCellLength - 1;\r\n                if (visibleColumnIndex > endGroupIndex) {\r\n                    visibleIndex = visibleColumnIndex - groupCellLength + 1\r\n                } else {\r\n                    cellIsInsideGroup = true\r\n                }\r\n            }\r\n        }\r\n        var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\r\n        return $cellElement\r\n    },\r\n    _hideVisibleCellInView: function(_ref4) {\r\n        var {\r\n            $cell: $cell,\r\n            isCommandColumn: isCommandColumn\r\n        } = _ref4;\r\n        var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\r\n        $cell.addClass(cssClassNameToAdd)\r\n    },\r\n    _getEditMode: function() {\r\n        return this._editingController.getEditMode()\r\n    },\r\n    isFormOrPopupEditMode: function() {\r\n        var editMode = this._getEditMode();\r\n        return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP\r\n    },\r\n    hideRedundantColumns: function(resultWidths, visibleColumns, hiddenQueue) {\r\n        this._hiddenColumns = [];\r\n        if (this._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\r\n            var totalWidth = 0;\r\n            var $rootElement = this.component.$element();\r\n            var rootElementWidth = getWidth($rootElement) - this._getCommandColumnsWidth();\r\n            var getVisibleContentColumns = function() {\r\n                return visibleColumns.filter(item => !item.command && 0 === this._hiddenColumns.filter(i => i.index === item.index).length)\r\n            }.bind(this);\r\n            var visibleContentColumns = getVisibleContentColumns();\r\n            var contentColumnsCount = visibleContentColumns.length;\r\n            var i;\r\n            var hasHiddenColumns;\r\n            var needHideColumn;\r\n            do {\r\n                needHideColumn = false;\r\n                totalWidth = 0;\r\n                var percentWidths = this._calculatePercentWidths(resultWidths, visibleColumns);\r\n                var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\r\n                for (i = 0; i < visibleColumns.length; i++) {\r\n                    var visibleColumn = visibleColumns[i];\r\n                    var columnWidth = this._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    var columnId = getColumnId(this, visibleColumn);\r\n                    var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n                    var minWidth = this._columnsController.columnOption(columnId, \"minWidth\");\r\n                    var columnBestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n                    if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\r\n                        hasHiddenColumns = true;\r\n                        continue\r\n                    }\r\n                    if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\r\n                        needHideColumn = true;\r\n                        break\r\n                    }\r\n                    if (!widthOption || \"auto\" === widthOption) {\r\n                        columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0)\r\n                    }\r\n                    if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\r\n                        totalWidth += columnWidth\r\n                    }\r\n                }\r\n                needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\r\n                if (needHideColumn) {\r\n                    var column = hiddenQueue.pop();\r\n                    var visibleIndex = this._columnsController.getVisibleIndex(column.index);\r\n                    rootElementWidth += this._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    this._hideVisibleColumn({\r\n                        visibleIndex: visibleIndex\r\n                    });\r\n                    resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\r\n                    this._hiddenColumns.push(column);\r\n                    visibleContentColumns = getVisibleContentColumns()\r\n                }\r\n            } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\r\n            if (contentColumnsCount === visibleContentColumns.length) {\r\n                this._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n            }\r\n        } else {\r\n            this._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n        }\r\n    },\r\n    getItemContentByColumnIndex: function(visibleColumnIndex) {\r\n        var $itemContent;\r\n        for (var i = 0; i < this._$itemContents.length; i++) {\r\n            $itemContent = this._$itemContents.eq(i);\r\n            var item = $itemContent.data(\"dx-form-item\");\r\n            if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\r\n                return $itemContent\r\n            }\r\n        }\r\n    },\r\n    toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {\r\n        if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\r\n            this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded)\r\n        }\r\n    },\r\n    createFormByHiddenColumns: function(container, options) {\r\n        var that = this;\r\n        var $container = $(container);\r\n        var userFormOptions = {\r\n            items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\r\n            formID: \"dx-\" + new Guid\r\n        };\r\n        var defaultFormOptions = isMaterial() ? {\r\n            colCount: 2\r\n        } : {};\r\n        this.executeAction(\"onAdaptiveDetailRowPreparing\", {\r\n            formOptions: userFormOptions\r\n        });\r\n        that._$itemContents = null;\r\n        that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\r\n            customizeItem: function(item) {\r\n                var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\r\n                if (column) {\r\n                    item.label = item.label || {};\r\n                    item.label.text = item.label.text || column.caption;\r\n                    item.column = column;\r\n                    item.template = that._getTemplate(item, options, that.updateForm.bind(that))\r\n                }\r\n                userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item)\r\n            },\r\n            onContentReady: function(e) {\r\n                userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\r\n                that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS)\r\n            }\r\n        }))\r\n    },\r\n    hasAdaptiveDetailRowExpanded: function() {\r\n        return isDefined(this._dataController.adaptiveExpandedKey())\r\n    },\r\n    updateForm: function(hiddenColumns) {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            if (this._form && isDefined(this._form._contentReadyAction)) {\r\n                if (hiddenColumns && hiddenColumns.length) {\r\n                    this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns))\r\n                } else {\r\n                    this._form.repaint()\r\n                }\r\n            }\r\n        }\r\n    },\r\n    updateHidingQueue: function(columns) {\r\n        var hideableColumns = columns.filter((function(column) {\r\n            return column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0)\r\n        }));\r\n        var columnsHasHidingPriority;\r\n        var i;\r\n        this._hidingColumnsQueue = [];\r\n        if (this.option(\"allowColumnResizing\") && \"widget\" === this.option(\"columnResizingMode\")) {\r\n            return this._hidingColumnsQueue\r\n        }\r\n        for (i = 0; i < hideableColumns.length; i++) {\r\n            if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\r\n                columnsHasHidingPriority = true;\r\n                this._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i]\r\n            }\r\n        }\r\n        if (columnsHasHidingPriority) {\r\n            this._hidingColumnsQueue.reverse()\r\n        } else if (this.option(\"columnHidingEnabled\")) {\r\n            for (i = 0; i < hideableColumns.length; i++) {\r\n                var visibleIndex = this._columnsController.getVisibleIndex(hideableColumns[i].index);\r\n                this._hidingColumnsQueue[visibleIndex] = hideableColumns[i]\r\n            }\r\n        }\r\n        this._hidingColumnsQueue = this._hidingColumnsQueue.filter(Object);\r\n        return this._hidingColumnsQueue\r\n    },\r\n    getHiddenColumns: function() {\r\n        return this._hiddenColumns\r\n    },\r\n    hasHiddenColumns: function() {\r\n        return this._hiddenColumns.length > 0\r\n    },\r\n    getHidingColumnsQueue: function() {\r\n        return this._hidingColumnsQueue\r\n    },\r\n    init: function() {\r\n        var that = this;\r\n        that._columnsController = that.getController(\"columns\");\r\n        that._dataController = that.getController(\"data\");\r\n        that._rowsView = that.getView(\"rowsView\");\r\n        that._columnsController.addCommandColumn({\r\n            type: ADAPTIVE_COLUMN_NAME,\r\n            command: ADAPTIVE_COLUMN_NAME,\r\n            visible: true,\r\n            adaptiveHidden: true,\r\n            cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\r\n            alignment: \"center\",\r\n            width: \"auto\",\r\n            cellTemplate: adaptiveCellTemplate,\r\n            fixedPosition: \"right\"\r\n        });\r\n        that._columnsController.columnsChanged.add((function() {\r\n            var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\r\n            that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true)\r\n        }));\r\n        that._editingController = that.getController(\"editing\");\r\n        that._hidingColumnsQueue = [];\r\n        that._hiddenColumns = [];\r\n        that.createAction(\"onAdaptiveDetailRowPreparing\");\r\n        that.callBase()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"columnHidingEnabled\" === args.name) {\r\n            this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value)\r\n        }\r\n        this.callBase(args)\r\n    },\r\n    publicMethods: function() {\r\n        return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"]\r\n    },\r\n    isAdaptiveDetailRowExpanded: function(key) {\r\n        return this._dataController.adaptiveExpandedKey() && equalByValue(this._dataController.adaptiveExpandedKey(), key)\r\n    },\r\n    expandAdaptiveDetailRow: function(key) {\r\n        if (!this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow(key)\r\n        }\r\n    },\r\n    collapseAdaptiveDetailRow: function() {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow()\r\n        }\r\n    },\r\n    updateCommandAdaptiveAriaLabel: function(key, label) {\r\n        var rowIndex = this._dataController.getRowIndexByKey(key);\r\n        if (-1 === rowIndex) {\r\n            return\r\n        }\r\n        var $row = $(this.component.getRowElement(rowIndex));\r\n        this.setCommandAdaptiveAriaLabel($row, label)\r\n    },\r\n    setCommandAdaptiveAriaLabel: function($row, labelName) {\r\n        var $adaptiveCommand = $row.find(\".dx-command-adaptive\");\r\n        $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName))\r\n    }\r\n});\r\nexport var adaptivityModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            columnHidingEnabled: false,\r\n            onAdaptiveDetailRowPreparing: null\r\n        }\r\n    },\r\n    controllers: {\r\n        adaptiveColumns: AdaptiveColumnsController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                _getCellTemplate: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\r\n                        return function(container, options) {\r\n                            that._adaptiveColumnsController.createFormByHiddenColumns($(container), options)\r\n                        }\r\n                    }\r\n                    return that.callBase(options)\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\r\n                        $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS)\r\n                    }\r\n                    return $row\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    this.callBase($row, options);\r\n                    var adaptiveColumnsController = this._adaptiveColumnsController;\r\n                    var hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\r\n                    var hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\r\n                    if (hidingColumnsQueueLength && !hiddenColumnsLength) {\r\n                        getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS)\r\n                    }\r\n                    if (\"data\" === options.row.rowType) {\r\n                        adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME)\r\n                    }\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\r\n                    if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\r\n                        var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\r\n                        return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index)\r\n                    } else {\r\n                        return this.callBase($element)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\r\n                        $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))\r\n                    }\r\n                },\r\n                _getCellElement: function(rowIndex, columnIdentifier) {\r\n                    var item = this._dataController.items()[rowIndex];\r\n                    if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\r\n                        return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier)\r\n                    } else {\r\n                        return this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                getContextMenuItems: function(options) {\r\n                    if (options.row && \"detailAdaptive\" === options.row.rowType) {\r\n                        var view = this.component.getView(\"columnHeadersView\");\r\n                        var formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\r\n                        options.column = formItem ? formItem.column : options.column;\r\n                        return view.getContextMenuItems && view.getContextMenuItems(options)\r\n                    }\r\n                    return this.callBase && this.callBase(options)\r\n                },\r\n                isClickableElement: function($target) {\r\n                    var isClickable = this.callBase ? this.callBase($target) : false;\r\n                    return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            export: {\r\n                _updateColumnWidth: function(column, width) {\r\n                    this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width)\r\n                }\r\n            },\r\n            columnsResizer: {\r\n                _pointCreated: function(point, cellsLength, columns) {\r\n                    var result = this.callBase(point, cellsLength, columns);\r\n                    var currentColumn = columns[point.columnIndex] || {};\r\n                    var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\r\n                    var nextColumn = columns[nextColumnIndex] || {};\r\n                    var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\r\n                    var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                },\r\n                _getNextColumnIndex: function(currentColumnIndex) {\r\n                    var visibleColumns = this._columnsController.getVisibleColumns();\r\n                    var index = this.callBase(currentColumnIndex);\r\n                    while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\r\n                        index++\r\n                    }\r\n                    return index\r\n                }\r\n            },\r\n            draggingHeader: {\r\n                _pointCreated: function(point, columns, location, sourceColumn) {\r\n                    var result = this.callBase(point, columns, location, sourceColumn);\r\n                    var column = columns[point.columnIndex - 1] || {};\r\n                    var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                }\r\n            },\r\n            editing: {\r\n                _isRowEditMode: function() {\r\n                    return this.getEditMode() === EDIT_MODE_ROW\r\n                },\r\n                _getFormEditItemTemplate: function(cellOptions, column) {\r\n                    if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\r\n                        cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\r\n                        return this.getColumnTemplate(cellOptions)\r\n                    }\r\n                    return this.callBase(cellOptions, column)\r\n                },\r\n                _closeEditItem: function($targetElement) {\r\n                    var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\r\n                    var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n                    var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\r\n                    var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\r\n                    if (!this.isEditCell(rowIndex, columnIndex)) {\r\n                        this.callBase($targetElement)\r\n                    }\r\n                },\r\n                _beforeUpdateItems: function(rowIndices, rowIndex) {\r\n                    if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        var items = this._dataController.items();\r\n                        var item = items[rowIndex];\r\n                        var oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\r\n                        this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\r\n                        if (oldExpandRowIndex >= 0) {\r\n                            rowIndices.push(oldExpandRowIndex + 1)\r\n                        }\r\n                        rowIndices.push(rowIndex + 1);\r\n                        this._dataController.adaptiveExpandedKey(item.key)\r\n                    }\r\n                },\r\n                _afterInsertRow: function(key) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\r\n                        this._isForceRowAdaptiveExpand = true\r\n                    }\r\n                },\r\n                _collapseAdaptiveDetailRow: function() {\r\n                    if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow();\r\n                        this._isForceRowAdaptiveExpand = false\r\n                    }\r\n                },\r\n                _cancelEditAdaptiveDetailRow: function() {\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._collapseAdaptiveDetailRow()\r\n                    }\r\n                },\r\n                _afterSaveEditData: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    var deferred = new Deferred;\r\n                    if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        when(this.getController(\"validating\").validate(true)).done(isValid => {\r\n                            if (isValid) {\r\n                                this._cancelEditAdaptiveDetailRow()\r\n                            }\r\n                            deferred.resolve()\r\n                        })\r\n                    } else {\r\n                        deferred.resolve()\r\n                    }\r\n                    return deferred.promise()\r\n                },\r\n                _beforeCancelEditData: function() {\r\n                    this.callBase();\r\n                    this._cancelEditAdaptiveDetailRow()\r\n                },\r\n                _getRowIndicesForCascadeUpdating: function(row) {\r\n                    var rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\r\n                        rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _beforeCloseEditCellInBatchMode: function(rowIndices) {\r\n                    var expandedKey = this._dataController._adaptiveExpandedKey;\r\n                    if (expandedKey) {\r\n                        var rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\r\n                        if (rowIndex > -1) {\r\n                            rowIndices.unshift(rowIndex)\r\n                        }\r\n                    }\r\n                },\r\n                editRow: function(rowIndex) {\r\n                    if (this._adaptiveController.isFormOrPopupEditMode()) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                deleteRow: function(rowIndex) {\r\n                    var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                    if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            },\r\n            resizing: {\r\n                _needBestFit: function() {\r\n                    return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length\r\n                },\r\n                _correctColumnWidths: function(resultWidths, visibleColumns) {\r\n                    var adaptiveController = this._adaptiveColumnsController;\r\n                    var oldHiddenColumns = adaptiveController.getHiddenColumns();\r\n                    var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\r\n                    adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\r\n                    var hiddenColumns = adaptiveController.getHiddenColumns();\r\n                    if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\r\n                        if (oldHiddenColumns.length !== hiddenColumns.length) {\r\n                            adaptiveController.updateForm(hiddenColumns)\r\n                        }\r\n                    }!hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _toggleBestFitMode: function(isBestFit) {\r\n                    isBestFit && this._adaptiveColumnsController._showHiddenColumns();\r\n                    this.callBase(isBestFit)\r\n                },\r\n                _needStretch: function() {\r\n                    var adaptiveColumnsController = this._adaptiveColumnsController;\r\n                    return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns()\r\n                },\r\n                init: function() {\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n                    this.callBase()\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._updateScrollableTimeoutID)\r\n                }\r\n            },\r\n            data: {\r\n                _processItems: function(items, change) {\r\n                    var changeType = change.changeType;\r\n                    items = this.callBase.apply(this, arguments);\r\n                    if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\r\n                        return items\r\n                    }\r\n                    var expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\r\n                    var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n                    if (expandRowIndex >= 0) {\r\n                        var item = items[expandRowIndex];\r\n                        items.splice(expandRowIndex + 1, 0, {\r\n                            visible: true,\r\n                            rowType: ADAPTIVE_ROW_TYPE,\r\n                            key: item.key,\r\n                            data: item.data,\r\n                            node: item.node,\r\n                            modifiedValues: item.modifiedValues,\r\n                            isNewRow: item.isNewRow,\r\n                            values: item.values\r\n                        })\r\n                    } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\r\n                        this._adaptiveExpandedKey = void 0\r\n                    }\r\n                    return items\r\n                },\r\n                _getRowIndicesForExpand: function(key) {\r\n                    var rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\r\n                        var lastRowIndex = rowIndices[rowIndices.length - 1];\r\n                        rowIndices.push(lastRowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                adaptiveExpandedKey: function(value) {\r\n                    if (isDefined(value)) {\r\n                        this._adaptiveExpandedKey = value\r\n                    } else {\r\n                        return this._adaptiveExpandedKey\r\n                    }\r\n                },\r\n                toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {\r\n                    var oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\r\n                    var newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\r\n                    if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\r\n                        key = void 0;\r\n                        newExpandLoadedRowIndex = -1\r\n                    }\r\n                    var oldKey = this._adaptiveExpandedKey;\r\n                    this._adaptiveExpandedKey = key;\r\n                    if (oldExpandLoadedRowIndex >= 0) {\r\n                        oldExpandLoadedRowIndex++\r\n                    }\r\n                    if (newExpandLoadedRowIndex >= 0) {\r\n                        newExpandLoadedRowIndex++\r\n                    }\r\n                    var rowIndexDelta = this.getRowIndexDelta();\r\n                    this.updateItems({\r\n                        allowInvisibleRowIndices: true,\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\r\n                    });\r\n                    var adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n                    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\r\n                    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME)\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveExpandedKey = void 0\r\n                }\r\n            },\r\n            editorFactory: {\r\n                _getFocusCellSelector: function() {\r\n                    return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\"\r\n                },\r\n                _getTooltipsSelector: function() {\r\n                    return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)\r\n                }\r\n            },\r\n            columns: {\r\n                _isColumnVisible: function(column) {\r\n                    return this.callBase(column) && !column.adaptiveHidden\r\n                }\r\n            },\r\n            keyboardNavigation: {\r\n                _isCellValid: function($cell) {\r\n                    return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))\r\n                },\r\n                _processNextCellInMasterDetail: function($nextCell) {\r\n                    this.callBase($nextCell);\r\n                    var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\r\n                    if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\r\n                        eventsEngine.on($nextCell, \"focus\", (function focusHandler() {\r\n                            eventsEngine.off($nextCell, \"focus\", focusHandler);\r\n                            eventsEngine.trigger($nextCell, \"dxclick\")\r\n                        }))\r\n                    }\r\n                },\r\n                _handleTabKeyOnMasterDetailCell: function(eventTarget, direction) {\r\n                    var result = this.callBase(eventTarget, direction);\r\n                    var $currentCell = this._getFocusedCell();\r\n                    var $row = $currentCell && $currentCell.parent();\r\n                    if (!result && $row && $row.length) {\r\n                        var $dataCells = getDataCellElements($row);\r\n                        var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\r\n                        var rowIndex = $row.get(0).rowIndex;\r\n                        var adaptiveController = this._adaptiveController;\r\n                        var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\r\n                        var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\r\n                        return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals\r\n                    }\r\n                    return result\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}