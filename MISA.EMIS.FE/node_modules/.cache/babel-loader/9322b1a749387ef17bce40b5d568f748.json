{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isFunction } from \"../../core/utils/type\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { getWindow, hasWindow } from \"../../core/utils/window\";\nimport Widget from \"../widget/ui.widget\";\nimport Popup from \"../popup\";\nimport Drawer from \"../drawer/ui.drawer\";\nimport { NotificationManager, NotificationManagerStub, MANAGER_ID_NAME } from \"./ui.file_manager.notification_manager\";\nvar window = getWindow();\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 1e3;\nvar FILE_MANAGER_NOTIFICATION_CLASS = \"dx-filemanager-notification\";\nvar FILE_MANAGER_NOTIFICATION_DRAWER_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-drawer\");\nvar FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS, \"-panel\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup\");\nvar FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup-error\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common\");\nvar FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-separator\");\nvar FILE_MANAGER_NOTIFICATION_DETAILS_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-details\");\nvar FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common-no-item\");\nexport default class FileManagerNotificationControl extends Widget {\n  _initMarkup() {\n    super._initMarkup();\n\n    this._initActions();\n\n    this._isInAdaptiveState = this._isSmallScreen();\n    this._managerMap = {};\n    this._notificationManagerStubId = null;\n\n    this._setNotificationManager();\n\n    var $progressPanelContainer = this.option(\"progressPanelContainer\");\n    var $progressDrawer = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS).appendTo($progressPanelContainer);\n    $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS).appendTo($progressDrawer);\n    var drawerOptions = extend({\n      opened: false,\n      position: \"right\",\n      template: container => this._ensureProgressPanelCreated(container)\n    }, this._getProgressDrawerAdaptiveOptions());\n    this._progressDrawer = this._createComponent($progressDrawer, Drawer, drawerOptions);\n    var $drawerContent = $progressDrawer.find(\".\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS)).first();\n    var contentRenderer = this.option(\"contentTemplate\");\n\n    if (isFunction(contentRenderer)) {\n      contentRenderer($drawerContent, this);\n    }\n  }\n\n  _setNotificationManager(options) {\n    options = extend({\n      onActionProgressStatusChanged: this._raiseActionProgress.bind(this)\n    }, options);\n\n    if (!this._notificationManagerStubId) {\n      var stubManager = new NotificationManagerStub(options);\n      this._notificationManagerStubId = stubManager.getId();\n      this._managerMap[this._notificationManagerStubId] = stubManager;\n    }\n\n    if (!this._isProgressDrawerDisabled()) {\n      var notificationManagerComponent = this._getProgressManagerComponent();\n\n      options.isActual = true;\n      var defaultManager = new notificationManagerComponent(options);\n      this._managerMap[defaultManager.getId()] = defaultManager;\n    }\n  }\n\n  _getNotificationManager(operationInfo) {\n    var actualManagerId = (null === operationInfo || void 0 === operationInfo ? void 0 : operationInfo[MANAGER_ID_NAME]) || this._getActualNotificationManagerId();\n\n    return this._managerMap[actualManagerId] || this._managerMap[this._notificationManagerStubId];\n  }\n\n  _clearManagerMap() {\n    var stubManager = this._managerMap[this._notificationManagerStubId];\n    delete this._managerMap;\n    this._managerMap = {\n      [this._notificationManagerStubId]: stubManager\n    };\n  }\n\n  _getActualNotificationManagerId() {\n    return Object.keys(this._managerMap).filter(managerId => this._managerMap[managerId].isActual())[0];\n  }\n\n  tryShowProgressPanel() {\n    var promise = new Deferred();\n\n    var notificationManager = this._getNotificationManager();\n\n    if (notificationManager.isActionProgressStatusDefault() || this._isProgressDrawerOpened() || this._isProgressDrawerDisabled()) {\n      return promise.resolve().promise();\n    }\n\n    setTimeout(() => {\n      this._progressDrawer.show().done(promise.resolve);\n\n      this._hidePopup();\n\n      notificationManager.tryHideActionProgress();\n    });\n    return promise.promise();\n  }\n\n  addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\n    var notificationManager = this._getNotificationManager();\n\n    return notificationManager.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate);\n  }\n\n  addOperationDetails(operationInfo, details, showCloseButton) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.addOperationDetails(operationInfo, details, showCloseButton);\n  }\n\n  updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress);\n  }\n\n  completeOperationItem(operationInfo, itemIndex, commonProgress) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.completeOperationItem(operationInfo, itemIndex, commonProgress);\n  }\n\n  completeOperation(operationInfo, commonText, isError, statusText) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    if (!isError) {\n      this._showPopup(commonText);\n    }\n\n    notificationManager.completeOperation(operationInfo, commonText, isError, statusText);\n\n    if (!this._isProgressDrawerOpened() || !notificationManager.hasNoOperations()) {\n      notificationManager.updateActionProgressStatus(operationInfo);\n    } else {\n      notificationManager.tryHideActionProgress();\n    }\n  }\n\n  completeSingleOperationWithError(operationInfo, errorInfo) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.completeSingleOperationWithError(operationInfo, errorInfo);\n\n    this._showPopupError(errorInfo);\n  }\n\n  addOperationDetailsError(operationInfo, errorInfo) {\n    var notificationManager = this._getNotificationManager(operationInfo);\n\n    notificationManager.addOperationDetailsError(operationInfo, errorInfo);\n\n    this._showPopupError(errorInfo);\n  }\n\n  _hideProgressPanel() {\n    setTimeout(() => this._progressDrawer.hide());\n  }\n\n  _isSmallScreen() {\n    if (!hasWindow()) {\n      return false;\n    }\n\n    return getWidth(window) <= ADAPTIVE_STATE_SCREEN_WIDTH;\n  }\n\n  _dimensionChanged(dimension) {\n    if (!(dimension && \"height\" === dimension)) {\n      this._checkAdaptiveState();\n    }\n  }\n\n  _checkAdaptiveState() {\n    var oldState = this._isInAdaptiveState;\n    this._isInAdaptiveState = this._isSmallScreen();\n\n    if (oldState !== this._isInAdaptiveState && this._progressDrawer) {\n      var notificationManager = this._getNotificationManager();\n\n      if (notificationManager.handleDimensionChanged()) {\n        var options = this._getProgressDrawerAdaptiveOptions();\n\n        this._progressDrawer.option(options);\n      }\n    }\n  }\n\n  _getProgressDrawerAdaptiveOptions() {\n    if (this._isInAdaptiveState) {\n      return {\n        openedStateMode: \"overlap\",\n        shading: true,\n        hideOnOutsideClick: true\n      };\n    } else {\n      return {\n        openedStateMode: \"shrink\",\n        shading: false,\n        hideOnOutsideClick: false\n      };\n    }\n  }\n\n  _ensureProgressPanelCreated(container) {\n    var notificationManager = this._getNotificationManager();\n\n    notificationManager.ensureProgressPanelCreated(container, {\n      onOperationCanceled: _ref => {\n        var {\n          info: info\n        } = _ref;\n        return this._raiseOperationCanceled(info);\n      },\n      onOperationItemCanceled: _ref2 => {\n        var {\n          item: item,\n          itemIndex: itemIndex\n        } = _ref2;\n        return this._raiseOperationItemCanceled(item, itemIndex);\n      },\n      onPanelClosed: () => this._hideProgressPanel()\n    });\n  }\n\n  _getProgressManagerComponent() {\n    return NotificationManager;\n  }\n\n  _isProgressDrawerDisabled() {\n    return !this.option(\"showProgressPanel\");\n  }\n\n  _isProgressDrawerOpened() {\n    return this._progressDrawer.option(\"opened\");\n  }\n\n  _hidePopup(forceHide) {\n    if (!this.option(\"showNotificationPopup\") && !forceHide) {\n      return;\n    }\n\n    this._getNotificationPopup().hide();\n  }\n\n  _showPopup(content, errorMode) {\n    if (this._isProgressDrawerOpened() || !this.option(\"showNotificationPopup\")) {\n      return;\n    }\n\n    this._getNotificationPopup().$wrapper().toggleClass(FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS, !!errorMode);\n\n    this._getNotificationPopup().option(\"contentTemplate\", content);\n\n    if (!this._getNotificationPopup().option(\"visible\")) {\n      this._getNotificationPopup().show();\n    }\n  }\n\n  _showPopupError(errorInfo) {\n    if (!this.option(\"showNotificationPopup\")) {\n      return;\n    }\n\n    var notificationManager = this._getNotificationManager();\n\n    var $content = $(\"<div>\");\n    var $message = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_COMMON_CLASS).text(errorInfo.commonErrorText);\n    var $separator = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS);\n    $(\"<div>\").appendTo($separator);\n    var $details = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DETAILS_CLASS);\n\n    if (errorInfo.item) {\n      notificationManager.createErrorDetailsProgressBox($details, errorInfo.item, errorInfo.detailErrorText);\n    } else {\n      $message.addClass(FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS);\n      notificationManager.renderError($details, errorInfo.detailErrorText);\n    }\n\n    $content.append($message, $separator, $details);\n\n    this._showPopup($content, true);\n  }\n\n  _getNotificationPopup() {\n    if (!this._notificationPopup) {\n      var $popup = $(\"<div>\").appendTo(this.$element());\n      this._notificationPopup = this._createComponent($popup, Popup, {\n        container: this.$element(),\n        wrapperAttr: {\n          class: FILE_MANAGER_NOTIFICATION_POPUP_CLASS\n        },\n        width: \"auto\",\n        height: \"auto\",\n        showTitle: false,\n        dragEnabled: false,\n        shading: false,\n        visible: false,\n        hideOnOutsideClick: true,\n        animation: {\n          duration: 0\n        },\n        position: {\n          my: \"right top\",\n          at: \"right top\",\n          of: this.option(\"positionTarget\"),\n          offset: \"-10 -5\"\n        }\n      });\n    }\n\n    return this._notificationPopup;\n  }\n\n  _raiseActionProgress(message, status) {\n    this._actions.onActionProgress({\n      message: message,\n      status: status\n    });\n  }\n\n  _raiseOperationCanceled(info) {\n    this._actions.onOperationCanceled({\n      info: info\n    });\n  }\n\n  _raiseOperationItemCanceled(item, index) {\n    this._actions.onOperationItemCanceled({\n      item: item,\n      itemIndex: index\n    });\n  }\n\n  _initActions() {\n    this._actions = {\n      onActionProgress: this._createActionByOption(\"onActionProgress\"),\n      onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\n      onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\")\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      progressPanelContainer: null,\n      contentTemplate: null,\n      onActionProgress: null,\n      onOperationCanceled: null,\n      onOperationItemCanceled: null,\n      showProgressPanel: true,\n      showNotificationPopup: true\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"progressPanelContainer\":\n      case \"contentTemplate\":\n        break;\n\n      case \"showProgressPanel\":\n        this._setNotificationManager();\n\n        this._getNotificationManager().updateActionProgressStatus();\n\n        if (!args.value) {\n          this._hideProgressPanel();\n\n          this._clearManagerMap();\n        }\n\n        this._progressDrawer.repaint();\n\n        break;\n\n      case \"showNotificationPopup\":\n        if (!args.value) {\n          this._hidePopup(true);\n        }\n\n        break;\n\n      case \"onActionProgress\":\n      case \"onOperationCanceled\":\n      case \"onOperationItemCanceled\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}","map":{"version":3,"names":["getWidth","$","extend","isFunction","Deferred","getWindow","hasWindow","Widget","Popup","Drawer","NotificationManager","NotificationManagerStub","MANAGER_ID_NAME","window","ADAPTIVE_STATE_SCREEN_WIDTH","FILE_MANAGER_NOTIFICATION_CLASS","FILE_MANAGER_NOTIFICATION_DRAWER_CLASS","concat","FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS","FILE_MANAGER_NOTIFICATION_POPUP_CLASS","FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS","FILE_MANAGER_NOTIFICATION_COMMON_CLASS","FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS","FILE_MANAGER_NOTIFICATION_DETAILS_CLASS","FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS","FileManagerNotificationControl","_initMarkup","_initActions","_isInAdaptiveState","_isSmallScreen","_managerMap","_notificationManagerStubId","_setNotificationManager","$progressPanelContainer","option","$progressDrawer","addClass","appendTo","drawerOptions","opened","position","template","container","_ensureProgressPanelCreated","_getProgressDrawerAdaptiveOptions","_progressDrawer","_createComponent","$drawerContent","find","first","contentRenderer","options","onActionProgressStatusChanged","_raiseActionProgress","bind","stubManager","getId","_isProgressDrawerDisabled","notificationManagerComponent","_getProgressManagerComponent","isActual","defaultManager","_getNotificationManager","operationInfo","actualManagerId","_getActualNotificationManagerId","_clearManagerMap","Object","keys","filter","managerId","tryShowProgressPanel","promise","notificationManager","isActionProgressStatusDefault","_isProgressDrawerOpened","resolve","setTimeout","show","done","_hidePopup","tryHideActionProgress","addOperation","processingMessage","allowCancel","allowProgressAutoUpdate","addOperationDetails","details","showCloseButton","updateOperationItemProgress","itemIndex","itemProgress","commonProgress","completeOperationItem","completeOperation","commonText","isError","statusText","_showPopup","hasNoOperations","updateActionProgressStatus","completeSingleOperationWithError","errorInfo","_showPopupError","addOperationDetailsError","_hideProgressPanel","hide","_dimensionChanged","dimension","_checkAdaptiveState","oldState","handleDimensionChanged","openedStateMode","shading","hideOnOutsideClick","ensureProgressPanelCreated","onOperationCanceled","_ref","info","_raiseOperationCanceled","onOperationItemCanceled","_ref2","item","_raiseOperationItemCanceled","onPanelClosed","forceHide","_getNotificationPopup","content","errorMode","$wrapper","toggleClass","$content","$message","text","commonErrorText","$separator","$details","createErrorDetailsProgressBox","detailErrorText","renderError","append","_notificationPopup","$popup","$element","wrapperAttr","class","width","height","showTitle","dragEnabled","visible","animation","duration","my","at","of","offset","message","status","_actions","onActionProgress","index","_createActionByOption","_getDefaultOptions","progressPanelContainer","contentTemplate","showProgressPanel","showNotificationPopup","_optionChanged","args","name","value","repaint"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.notification.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.notification.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Popup from \"../popup\";\r\nimport Drawer from \"../drawer/ui.drawer\";\r\nimport {\r\n    NotificationManager,\r\n    NotificationManagerStub,\r\n    MANAGER_ID_NAME\r\n} from \"./ui.file_manager.notification_manager\";\r\nvar window = getWindow();\r\nvar ADAPTIVE_STATE_SCREEN_WIDTH = 1e3;\r\nvar FILE_MANAGER_NOTIFICATION_CLASS = \"dx-filemanager-notification\";\r\nvar FILE_MANAGER_NOTIFICATION_DRAWER_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-drawer\");\r\nvar FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS, \"-panel\");\r\nvar FILE_MANAGER_NOTIFICATION_POPUP_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup\");\r\nvar FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-popup-error\");\r\nvar FILE_MANAGER_NOTIFICATION_COMMON_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common\");\r\nvar FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-separator\");\r\nvar FILE_MANAGER_NOTIFICATION_DETAILS_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-details\");\r\nvar FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS = \"\".concat(FILE_MANAGER_NOTIFICATION_CLASS, \"-common-no-item\");\r\nexport default class FileManagerNotificationControl extends Widget {\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._initActions();\r\n        this._isInAdaptiveState = this._isSmallScreen();\r\n        this._managerMap = {};\r\n        this._notificationManagerStubId = null;\r\n        this._setNotificationManager();\r\n        var $progressPanelContainer = this.option(\"progressPanelContainer\");\r\n        var $progressDrawer = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_CLASS).appendTo($progressPanelContainer);\r\n        $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS).appendTo($progressDrawer);\r\n        var drawerOptions = extend({\r\n            opened: false,\r\n            position: \"right\",\r\n            template: container => this._ensureProgressPanelCreated(container)\r\n        }, this._getProgressDrawerAdaptiveOptions());\r\n        this._progressDrawer = this._createComponent($progressDrawer, Drawer, drawerOptions);\r\n        var $drawerContent = $progressDrawer.find(\".\".concat(FILE_MANAGER_NOTIFICATION_DRAWER_PANEL_CLASS)).first();\r\n        var contentRenderer = this.option(\"contentTemplate\");\r\n        if (isFunction(contentRenderer)) {\r\n            contentRenderer($drawerContent, this)\r\n        }\r\n    }\r\n    _setNotificationManager(options) {\r\n        options = extend({\r\n            onActionProgressStatusChanged: this._raiseActionProgress.bind(this)\r\n        }, options);\r\n        if (!this._notificationManagerStubId) {\r\n            var stubManager = new NotificationManagerStub(options);\r\n            this._notificationManagerStubId = stubManager.getId();\r\n            this._managerMap[this._notificationManagerStubId] = stubManager\r\n        }\r\n        if (!this._isProgressDrawerDisabled()) {\r\n            var notificationManagerComponent = this._getProgressManagerComponent();\r\n            options.isActual = true;\r\n            var defaultManager = new notificationManagerComponent(options);\r\n            this._managerMap[defaultManager.getId()] = defaultManager\r\n        }\r\n    }\r\n    _getNotificationManager(operationInfo) {\r\n        var actualManagerId = (null === operationInfo || void 0 === operationInfo ? void 0 : operationInfo[MANAGER_ID_NAME]) || this._getActualNotificationManagerId();\r\n        return this._managerMap[actualManagerId] || this._managerMap[this._notificationManagerStubId]\r\n    }\r\n    _clearManagerMap() {\r\n        var stubManager = this._managerMap[this._notificationManagerStubId];\r\n        delete this._managerMap;\r\n        this._managerMap = {\r\n            [this._notificationManagerStubId]: stubManager\r\n        }\r\n    }\r\n    _getActualNotificationManagerId() {\r\n        return Object.keys(this._managerMap).filter(managerId => this._managerMap[managerId].isActual())[0]\r\n    }\r\n    tryShowProgressPanel() {\r\n        var promise = new Deferred;\r\n        var notificationManager = this._getNotificationManager();\r\n        if (notificationManager.isActionProgressStatusDefault() || this._isProgressDrawerOpened() || this._isProgressDrawerDisabled()) {\r\n            return promise.resolve().promise()\r\n        }\r\n        setTimeout(() => {\r\n            this._progressDrawer.show().done(promise.resolve);\r\n            this._hidePopup();\r\n            notificationManager.tryHideActionProgress()\r\n        });\r\n        return promise.promise()\r\n    }\r\n    addOperation(processingMessage, allowCancel, allowProgressAutoUpdate) {\r\n        var notificationManager = this._getNotificationManager();\r\n        return notificationManager.addOperation(processingMessage, allowCancel, allowProgressAutoUpdate)\r\n    }\r\n    addOperationDetails(operationInfo, details, showCloseButton) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.addOperationDetails(operationInfo, details, showCloseButton)\r\n    }\r\n    updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.updateOperationItemProgress(operationInfo, itemIndex, itemProgress, commonProgress)\r\n    }\r\n    completeOperationItem(operationInfo, itemIndex, commonProgress) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.completeOperationItem(operationInfo, itemIndex, commonProgress)\r\n    }\r\n    completeOperation(operationInfo, commonText, isError, statusText) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        if (!isError) {\r\n            this._showPopup(commonText)\r\n        }\r\n        notificationManager.completeOperation(operationInfo, commonText, isError, statusText);\r\n        if (!this._isProgressDrawerOpened() || !notificationManager.hasNoOperations()) {\r\n            notificationManager.updateActionProgressStatus(operationInfo)\r\n        } else {\r\n            notificationManager.tryHideActionProgress()\r\n        }\r\n    }\r\n    completeSingleOperationWithError(operationInfo, errorInfo) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.completeSingleOperationWithError(operationInfo, errorInfo);\r\n        this._showPopupError(errorInfo)\r\n    }\r\n    addOperationDetailsError(operationInfo, errorInfo) {\r\n        var notificationManager = this._getNotificationManager(operationInfo);\r\n        notificationManager.addOperationDetailsError(operationInfo, errorInfo);\r\n        this._showPopupError(errorInfo)\r\n    }\r\n    _hideProgressPanel() {\r\n        setTimeout(() => this._progressDrawer.hide())\r\n    }\r\n    _isSmallScreen() {\r\n        if (!hasWindow()) {\r\n            return false\r\n        }\r\n        return getWidth(window) <= ADAPTIVE_STATE_SCREEN_WIDTH\r\n    }\r\n    _dimensionChanged(dimension) {\r\n        if (!(dimension && \"height\" === dimension)) {\r\n            this._checkAdaptiveState()\r\n        }\r\n    }\r\n    _checkAdaptiveState() {\r\n        var oldState = this._isInAdaptiveState;\r\n        this._isInAdaptiveState = this._isSmallScreen();\r\n        if (oldState !== this._isInAdaptiveState && this._progressDrawer) {\r\n            var notificationManager = this._getNotificationManager();\r\n            if (notificationManager.handleDimensionChanged()) {\r\n                var options = this._getProgressDrawerAdaptiveOptions();\r\n                this._progressDrawer.option(options)\r\n            }\r\n        }\r\n    }\r\n    _getProgressDrawerAdaptiveOptions() {\r\n        if (this._isInAdaptiveState) {\r\n            return {\r\n                openedStateMode: \"overlap\",\r\n                shading: true,\r\n                hideOnOutsideClick: true\r\n            }\r\n        } else {\r\n            return {\r\n                openedStateMode: \"shrink\",\r\n                shading: false,\r\n                hideOnOutsideClick: false\r\n            }\r\n        }\r\n    }\r\n    _ensureProgressPanelCreated(container) {\r\n        var notificationManager = this._getNotificationManager();\r\n        notificationManager.ensureProgressPanelCreated(container, {\r\n            onOperationCanceled: _ref => {\r\n                var {\r\n                    info: info\r\n                } = _ref;\r\n                return this._raiseOperationCanceled(info)\r\n            },\r\n            onOperationItemCanceled: _ref2 => {\r\n                var {\r\n                    item: item,\r\n                    itemIndex: itemIndex\r\n                } = _ref2;\r\n                return this._raiseOperationItemCanceled(item, itemIndex)\r\n            },\r\n            onPanelClosed: () => this._hideProgressPanel()\r\n        })\r\n    }\r\n    _getProgressManagerComponent() {\r\n        return NotificationManager\r\n    }\r\n    _isProgressDrawerDisabled() {\r\n        return !this.option(\"showProgressPanel\")\r\n    }\r\n    _isProgressDrawerOpened() {\r\n        return this._progressDrawer.option(\"opened\")\r\n    }\r\n    _hidePopup(forceHide) {\r\n        if (!this.option(\"showNotificationPopup\") && !forceHide) {\r\n            return\r\n        }\r\n        this._getNotificationPopup().hide()\r\n    }\r\n    _showPopup(content, errorMode) {\r\n        if (this._isProgressDrawerOpened() || !this.option(\"showNotificationPopup\")) {\r\n            return\r\n        }\r\n        this._getNotificationPopup().$wrapper().toggleClass(FILE_MANAGER_NOTIFICATION_POPUP_ERROR_CLASS, !!errorMode);\r\n        this._getNotificationPopup().option(\"contentTemplate\", content);\r\n        if (!this._getNotificationPopup().option(\"visible\")) {\r\n            this._getNotificationPopup().show()\r\n        }\r\n    }\r\n    _showPopupError(errorInfo) {\r\n        if (!this.option(\"showNotificationPopup\")) {\r\n            return\r\n        }\r\n        var notificationManager = this._getNotificationManager();\r\n        var $content = $(\"<div>\");\r\n        var $message = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_COMMON_CLASS).text(errorInfo.commonErrorText);\r\n        var $separator = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_SEPARATOR_CLASS);\r\n        $(\"<div>\").appendTo($separator);\r\n        var $details = $(\"<div>\").addClass(FILE_MANAGER_NOTIFICATION_DETAILS_CLASS);\r\n        if (errorInfo.item) {\r\n            notificationManager.createErrorDetailsProgressBox($details, errorInfo.item, errorInfo.detailErrorText)\r\n        } else {\r\n            $message.addClass(FILE_MANAGER_NOTIFICATION_COMMON_NO_ITEM_CLASS);\r\n            notificationManager.renderError($details, errorInfo.detailErrorText)\r\n        }\r\n        $content.append($message, $separator, $details);\r\n        this._showPopup($content, true)\r\n    }\r\n    _getNotificationPopup() {\r\n        if (!this._notificationPopup) {\r\n            var $popup = $(\"<div>\").appendTo(this.$element());\r\n            this._notificationPopup = this._createComponent($popup, Popup, {\r\n                container: this.$element(),\r\n                wrapperAttr: {\r\n                    class: FILE_MANAGER_NOTIFICATION_POPUP_CLASS\r\n                },\r\n                width: \"auto\",\r\n                height: \"auto\",\r\n                showTitle: false,\r\n                dragEnabled: false,\r\n                shading: false,\r\n                visible: false,\r\n                hideOnOutsideClick: true,\r\n                animation: {\r\n                    duration: 0\r\n                },\r\n                position: {\r\n                    my: \"right top\",\r\n                    at: \"right top\",\r\n                    of: this.option(\"positionTarget\"),\r\n                    offset: \"-10 -5\"\r\n                }\r\n            })\r\n        }\r\n        return this._notificationPopup\r\n    }\r\n    _raiseActionProgress(message, status) {\r\n        this._actions.onActionProgress({\r\n            message: message,\r\n            status: status\r\n        })\r\n    }\r\n    _raiseOperationCanceled(info) {\r\n        this._actions.onOperationCanceled({\r\n            info: info\r\n        })\r\n    }\r\n    _raiseOperationItemCanceled(item, index) {\r\n        this._actions.onOperationItemCanceled({\r\n            item: item,\r\n            itemIndex: index\r\n        })\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onActionProgress: this._createActionByOption(\"onActionProgress\"),\r\n            onOperationCanceled: this._createActionByOption(\"onOperationCanceled\"),\r\n            onOperationItemCanceled: this._createActionByOption(\"onOperationItemCanceled\")\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            progressPanelContainer: null,\r\n            contentTemplate: null,\r\n            onActionProgress: null,\r\n            onOperationCanceled: null,\r\n            onOperationItemCanceled: null,\r\n            showProgressPanel: true,\r\n            showNotificationPopup: true\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"progressPanelContainer\":\r\n            case \"contentTemplate\":\r\n                break;\r\n            case \"showProgressPanel\":\r\n                this._setNotificationManager();\r\n                this._getNotificationManager().updateActionProgressStatus();\r\n                if (!args.value) {\r\n                    this._hideProgressPanel();\r\n                    this._clearManagerMap()\r\n                }\r\n                this._progressDrawer.repaint();\r\n                break;\r\n            case \"showNotificationPopup\":\r\n                if (!args.value) {\r\n                    this._hidePopup(true)\r\n                }\r\n                break;\r\n            case \"onActionProgress\":\r\n            case \"onOperationCanceled\":\r\n            case \"onOperationItemCanceled\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}