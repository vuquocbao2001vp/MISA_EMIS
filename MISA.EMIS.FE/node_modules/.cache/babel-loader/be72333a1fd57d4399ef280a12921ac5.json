{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { setWidth, getOuterHeight, getOuterWidth, setOuterHeight, getHeight, getWidth } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport messageLocalization from \"../../../localization/message\";\nimport { noop } from \"../../../core/utils/common\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { addNamespace, isMouseEvent } from \"../../../events/utils/index\";\nimport pointerEvents from \"../../../events/pointer\";\nimport errors from \"../../widget/ui.errors\";\nimport { name as clickEventName } from \"../../../events/click\";\nimport { name as contextMenuEventName } from \"../../../events/contextmenu\";\nimport { enter as dragEventEnter, leave as dragEventLeave, drop as dragEventDrop } from \"../../../events/drag\";\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\nimport tableCreatorModule from \"../table_creator\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\nimport { APPOINTMENT_SETTINGS_KEY } from \"../constants\";\nimport { FIXED_CONTAINER_CLASS, VIRTUAL_CELL_CLASS, TIME_PANEL_CLASS, DATE_TABLE_CLASS, DATE_TABLE_ROW_CLASS, GROUP_ROW_CLASS, GROUP_HEADER_CONTENT_CLASS, VERTICAL_GROUP_COUNT_CLASSES } from \"../classes\";\nimport WidgetObserver from \"../base/widgetObserver\";\nimport { resetPosition, locate } from \"../../../animation/translator\";\nimport { VirtualScrollingDispatcher, VirtualScrollingRenderer } from \"./ui.scheduler.virtual_scrolling\";\nimport ViewDataProvider from \"./view_model/view_data_provider\";\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\nimport dxrAllDayPanelTable from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/table.j\";\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\nimport CellsSelectionState from \"./cells_selection_state\";\nimport { Cache } from \"./cache\";\nimport { CellsSelectionController } from \"./cells_selection_controller\";\nimport { calculateViewStartDate, getViewStartByOptions, validateDayHours, getStartViewDateTimeOffset, isDateAndTimeView, calculateIsGroupedAllDayPanel, getCellDuration } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { createResourcesTree, getCellGroups, getGroupsObjectFromGroupsArray, getGroupCount } from \"../resources/utils\";\nimport { ScrollSemaphore } from \"../../../renovation/ui/scheduler/utils/semaphore/scrollSemaphore\";\nimport { getCellWidth, getCellHeight, getAllDayHeight, getMaxAllowedPosition, PositionHelper } from \"./helpers/positionHelper\";\nimport { utils } from \"../utils\";\nimport { compileGetter } from \"../../../core/utils/data\";\nvar abstract = WidgetObserver.abstract;\nvar toMs = dateUtils.dateToMilliseconds;\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\nvar DragEventNames = {\n  ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\n  DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\n  LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\n};\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\nvar CELL_DATA = \"dxCellData\";\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\nvar DAY_MS = toMs(\"day\");\nvar HOUR_MS = toMs(\"hour\");\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\n\nclass SchedulerWorkSpace extends WidgetObserver {\n  get viewDataProvider() {\n    if (!this._viewDataProvider) {\n      this._viewDataProvider = new ViewDataProvider(this.type);\n    }\n\n    return this._viewDataProvider;\n  }\n\n  get cache() {\n    if (!this._cache) {\n      this._cache = new Cache();\n    }\n\n    return this._cache;\n  }\n\n  get cellsSelectionState() {\n    if (!this._cellsSelectionState) {\n      this._cellsSelectionState = new CellsSelectionState(this.viewDataProvider);\n      var selectedCellsOption = this.option(\"selectedCellData\");\n\n      if ((null === selectedCellsOption || void 0 === selectedCellsOption ? void 0 : selectedCellsOption.length) > 0) {\n        var validSelectedCells = selectedCellsOption.map(selectedCell => {\n          var groups = selectedCell.groups;\n\n          if (!groups || 0 === this._getGroupCount()) {\n            return _extends({}, selectedCell, {\n              groupIndex: 0\n            });\n          }\n\n          var groupIndex = this._getGroupIndexByResourceId(groups);\n\n          return _extends({}, selectedCell, {\n            groupIndex: groupIndex\n          });\n        });\n\n        this._cellsSelectionState.setSelectedCellsByData(validSelectedCells);\n      }\n    }\n\n    return this._cellsSelectionState;\n  }\n\n  get cellsSelectionController() {\n    if (!this._cellsSelectionController) {\n      this._cellsSelectionController = new CellsSelectionController();\n    }\n\n    return this._cellsSelectionController;\n  }\n\n  get isAllDayPanelVisible() {\n    return this._isShowAllDayPanel() && this.supportAllDayRow();\n  }\n\n  get verticalGroupTableClass() {\n    return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS;\n  }\n\n  get viewDirection() {\n    return \"vertical\";\n  }\n\n  get renovatedHeaderPanelComponent() {\n    return dxrDateHeader;\n  }\n\n  get timeZoneCalculator() {\n    return this.option(\"timeZoneCalculator\");\n  }\n\n  get isDefaultDraggingMode() {\n    return \"default\" === this.option(\"draggingMode\");\n  }\n\n  _supportedKeys() {\n    var clickHandler = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var selectedCells = this.cellsSelectionState.getSelectedCells();\n\n      if (null !== selectedCells && void 0 !== selectedCells && selectedCells.length) {\n        var selectedCellsElement = selectedCells.map(cellData => this._getCellByData(cellData)).filter(cell => !!cell);\n        e.target = selectedCellsElement;\n        this._showPopup = true;\n\n        this._cellClickAction({\n          event: e,\n          cellElement: $(selectedCellsElement),\n          cellData: selectedCells[0]\n        });\n      }\n    };\n\n    var onArrowPressed = (e, key) => {\n      var _this$cellsSelectionS;\n\n      e.preventDefault();\n      e.stopPropagation();\n      var focusedCellData = null === (_this$cellsSelectionS = this.cellsSelectionState.focusedCell) || void 0 === _this$cellsSelectionS ? void 0 : _this$cellsSelectionS.cellData;\n\n      if (focusedCellData) {\n        var isAllDayPanelCell = focusedCellData.allDay && !this._isVerticalGroupedWorkSpace();\n        var isMultiSelection = e.shiftKey;\n        var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\n\n        var isRTL = this._isRTL();\n\n        var groupCount = this._getGroupCount();\n\n        var isGroupedByDate = this.isGroupedByDate();\n\n        var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\n\n        var focusedCellPosition = this.viewDataProvider.findCellPositionInMap(_extends({}, focusedCellData, {\n          isAllDay: focusedCellData.allDay\n        }));\n        var edgeIndices = isHorizontalGrouping && isMultiSelection && !isGroupedByDate ? this.viewDataProvider.getGroupEdgeIndices(focusedCellData.groupIndex, isAllDayPanelCell) : this.viewDataProvider.getViewEdgeIndices(isAllDayPanelCell);\n        var nextCellData = this.cellsSelectionController.handleArrowClick({\n          focusedCellPosition: focusedCellPosition,\n          edgeIndices: edgeIndices,\n          isRTL: isRTL,\n          isGroupedByDate: isGroupedByDate,\n          groupCount: groupCount,\n          isMultiSelection: isMultiSelection,\n          isMultiSelectionAllowed: isMultiSelectionAllowed,\n          viewType: this.type,\n          key: key,\n          getCellDataByPosition: this.viewDataProvider.getCellData.bind(this.viewDataProvider),\n          isAllDayPanelCell: isAllDayPanelCell,\n          focusedCellData: focusedCellData\n        });\n\n        this._processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection && isMultiSelectionAllowed);\n      }\n    };\n\n    return extend(super._supportedKeys(), {\n      enter: clickHandler,\n      space: clickHandler,\n      downArrow: e => {\n        onArrowPressed(e, \"down\");\n      },\n      upArrow: e => {\n        onArrowPressed(e, \"up\");\n      },\n      rightArrow: e => {\n        onArrowPressed(e, \"right\");\n      },\n      leftArrow: e => {\n        onArrowPressed(e, \"left\");\n      }\n    });\n  }\n\n  _isRTL() {\n    return this.option(\"rtlEnabled\");\n  }\n\n  _moveToCell($cell, isMultiSelection) {\n    if (!isDefined($cell) || !$cell.length) {\n      return;\n    }\n\n    var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\n\n    var currentCellData = this._getFullCellData($cell);\n\n    var focusedCellData = this.cellsSelectionState.focusedCell.cellData;\n    var nextFocusedCellData = this.cellsSelectionController.moveToCell({\n      isMultiSelection: isMultiSelection,\n      isMultiSelectionAllowed: isMultiSelectionAllowed,\n      currentCellData: currentCellData,\n      focusedCellData: focusedCellData,\n      isVirtualCell: $cell.hasClass(VIRTUAL_CELL_CLASS)\n    });\n\n    this._processNextSelectedCell(nextFocusedCellData, focusedCellData, isMultiSelectionAllowed && isMultiSelection);\n  }\n\n  _processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection) {\n    var nextCellPosition = this.viewDataProvider.findCellPositionInMap({\n      startDate: nextCellData.startDate,\n      groupIndex: nextCellData.groupIndex,\n      isAllDay: nextCellData.allDay,\n      index: nextCellData.index\n    });\n\n    if (!this.viewDataProvider.isSameCell(focusedCellData, nextCellData)) {\n      var $cell = nextCellData.allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(nextCellPosition.columnIndex) : this._dom_getDateCell(nextCellPosition);\n      var isNextCellAllDay = nextCellData.allDay;\n\n      this._setSelectedCellsStateAndUpdateSelection(isNextCellAllDay, nextCellPosition, isMultiSelection, $cell);\n\n      this._dateTableScrollable.scrollToElement($cell);\n    }\n  }\n\n  _setSelectedCellsStateAndUpdateSelection(isAllDay, cellPosition, isMultiSelection, $nextFocusedCell) {\n    var nextCellCoordinates = {\n      rowIndex: cellPosition.rowIndex,\n      columnIndex: cellPosition.columnIndex,\n      allDay: isAllDay\n    };\n    this.cellsSelectionState.setFocusedCell(nextCellCoordinates.rowIndex, nextCellCoordinates.columnIndex, isAllDay);\n\n    if (isMultiSelection) {\n      this.cellsSelectionState.setSelectedCells(nextCellCoordinates);\n    } else {\n      this.cellsSelectionState.setSelectedCells(nextCellCoordinates, nextCellCoordinates);\n    }\n\n    this.updateCellsSelection();\n\n    this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells(), $nextFocusedCell);\n  }\n\n  _hasAllDayClass($cell) {\n    return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\n  }\n\n  _focusInHandler(e) {\n    if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\n      delete this._isCellClick;\n      delete this._contextMenuHandled;\n\n      super._focusInHandler.apply(this, arguments);\n\n      this.cellsSelectionState.restoreSelectedAndFocusedCells();\n\n      if (!this.cellsSelectionState.focusedCell) {\n        var cellCoordinates = {\n          columnIndex: 0,\n          rowIndex: 0,\n          allDay: this._isVerticalGroupedWorkSpace() && this.isAllDayPanelVisible\n        };\n        this.cellsSelectionState.setFocusedCell(cellCoordinates.rowIndex, cellCoordinates.columnIndex, cellCoordinates.allDay);\n        this.cellsSelectionState.setSelectedCells(cellCoordinates, cellCoordinates);\n      }\n\n      this.updateCellsSelection();\n\n      this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells());\n    }\n  }\n\n  _focusOutHandler() {\n    super._focusOutHandler.apply(this, arguments);\n\n    if (!this._contextMenuHandled && !this._disposed) {\n      this.cellsSelectionState.releaseSelectedAndFocusedCells();\n      this.viewDataProvider.updateViewData(this.generateRenderOptions());\n      this.updateCellsSelection();\n    }\n  }\n\n  _focusTarget() {\n    return this.$element();\n  }\n\n  _isVerticalGroupedWorkSpace() {\n    return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\");\n  }\n\n  _isHorizontalGroupedWorkSpace() {\n    return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\");\n  }\n\n  _isWorkSpaceWithCount() {\n    return this.option(\"intervalCount\") > 1;\n  }\n\n  _isWorkspaceWithOddCells() {\n    return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling();\n  }\n\n  _getRealGroupOrientation() {\n    return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\";\n  }\n\n  createRAllDayPanelElements() {\n    this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS);\n    this._$allDayTitle = $(\"<div>\").appendTo(this._$headerPanelEmptyCell);\n  }\n\n  _dateTableScrollableConfig() {\n    var config = {\n      useKeyboard: false,\n      bounceEnabled: false,\n      updateManually: true,\n      onScroll: () => {\n        var _this$_groupedStrateg;\n\n        null === (_this$_groupedStrateg = this._groupedStrategy.cache) || void 0 === _this$_groupedStrateg ? void 0 : _this$_groupedStrateg.clear();\n      }\n    };\n\n    if (this._needCreateCrossScrolling()) {\n      config = extend(config, this._createCrossScrollingConfig(config));\n    }\n\n    if (this.isVirtualScrolling() && (this.virtualScrollingDispatcher.horizontalScrollingAllowed || this.virtualScrollingDispatcher.height)) {\n      var currentOnScroll = config.onScroll;\n      config = _extends({}, config, {\n        onScroll: e => {\n          null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll(e);\n          this.virtualScrollingDispatcher.handleOnScrollEvent(null === e || void 0 === e ? void 0 : e.scrollOffset);\n        }\n      });\n    }\n\n    return config;\n  }\n\n  _createCrossScrollingConfig(currentConfig) {\n    var config = {};\n    config.direction = \"both\";\n    var currentOnScroll = currentConfig.onScroll;\n\n    config.onScroll = e => {\n      currentOnScroll();\n\n      this._dataTableSemaphore.take(e.scrollOffset);\n\n      if (this._sideBarSemaphore.isFree(e.scrollOffset)) {\n        var _this$_sidebarScrolla;\n\n        null === (_this$_sidebarScrolla = this._sidebarScrollable) || void 0 === _this$_sidebarScrolla ? void 0 : _this$_sidebarScrolla.scrollTo({\n          top: e.scrollOffset.top\n        });\n      }\n\n      if (this._headerSemaphore.isFree(e.scrollOffset)) {\n        var _this$_headerScrollab;\n\n        null === (_this$_headerScrollab = this._headerScrollable) || void 0 === _this$_headerScrollab ? void 0 : _this$_headerScrollab.scrollTo({\n          left: e.scrollOffset.left\n        });\n      }\n\n      this._dataTableSemaphore.release();\n    };\n\n    config.onEnd = () => {\n      this.option(\"onScrollEnd\")();\n    };\n\n    return config;\n  }\n\n  _headerScrollableConfig() {\n    var config = {\n      useKeyboard: false,\n      showScrollbar: \"never\",\n      direction: \"horizontal\",\n      useNative: false,\n      updateManually: true,\n      bounceEnabled: false,\n      onScroll: e => {\n        this._headerSemaphore.take(e.scrollOffset);\n\n        this._dataTableSemaphore.isFree(e.scrollOffset) && this._dateTableScrollable.scrollTo({\n          left: e.scrollOffset.left\n        });\n\n        this._headerSemaphore.release();\n      }\n    };\n    return config;\n  }\n\n  _visibilityChanged(visible) {\n    this.cache.clear();\n\n    if (visible) {\n      this._updateGroupTableHeight();\n    }\n\n    if (visible && this._needCreateCrossScrolling()) {\n      this._setTableSizes();\n    }\n  }\n\n  _setTableSizes() {\n    this.cache.clear();\n\n    this._attachTableClasses();\n\n    var cellWidth = this.getCellWidth();\n\n    if (cellWidth < this.getCellMinWidth()) {\n      cellWidth = this.getCellMinWidth();\n    }\n\n    var minWidth = this.getWorkSpaceMinWidth();\n\n    var groupCount = this._getGroupCount();\n\n    var totalCellCount = this._getTotalCellCount(groupCount);\n\n    var width = cellWidth * totalCellCount;\n\n    if (width < minWidth) {\n      width = minWidth;\n    }\n\n    setWidth(this._$headerPanel, width);\n    setWidth(this._$dateTable, width);\n\n    if (this._$allDayTable) {\n      setWidth(this._$allDayTable, width);\n    }\n\n    this._attachHeaderTableClasses();\n\n    this._updateGroupTableHeight();\n\n    this._updateScrollable();\n  }\n\n  getWorkSpaceMinWidth() {\n    return this._groupedStrategy.getWorkSpaceMinWidth();\n  }\n\n  _dimensionChanged() {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    if (this.option(\"crossScrollingEnabled\")) {\n      this._setTableSizes();\n    }\n\n    this.updateHeaderEmptyCellWidth();\n\n    this._updateScrollable();\n\n    this.cache.clear();\n  }\n\n  _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\");\n  }\n\n  _getElementClass() {\n    return noop();\n  }\n\n  _getRowCount() {\n    return this.viewDataProvider.getRowCount({\n      intervalCount: this.option(\"intervalCount\"),\n      currentDate: this.option(\"currentDate\"),\n      viewType: this.type,\n      hoursInterval: this.option(\"hoursInterval\"),\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\")\n    });\n  }\n\n  _getCellCount() {\n    return this.viewDataProvider.getCellCount({\n      intervalCount: this.option(\"intervalCount\"),\n      currentDate: this.option(\"currentDate\"),\n      viewType: this.type,\n      hoursInterval: this.option(\"hoursInterval\"),\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\")\n    });\n  }\n\n  isRenovatedRender() {\n    return this.renovatedRenderSupported() && this.option(\"renovateRender\");\n  }\n\n  _isVirtualModeOn() {\n    return \"virtual\" === this.option(\"scrolling.mode\");\n  }\n\n  isVirtualScrolling() {\n    return this.isRenovatedRender() && this._isVirtualModeOn();\n  }\n\n  _initVirtualScrolling() {\n    if (this.virtualScrollingDispatcher) {\n      this.virtualScrollingDispatcher.dispose();\n      this.virtualScrollingDispatcher = null;\n    }\n\n    this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this._getVirtualScrollingDispatcherOptions());\n    this.virtualScrollingDispatcher.attachScrollableEvents();\n    this.renderer = new VirtualScrollingRenderer(this);\n  }\n\n  onDataSourceChanged() {}\n\n  isGroupedAllDayPanel() {\n    return calculateIsGroupedAllDayPanel(this.option(\"groups\"), this.option(\"groupOrientation\"), this.isAllDayPanelVisible);\n  }\n\n  generateRenderOptions(isProvideVirtualCellsWidth) {\n    var _this$_getToday;\n\n    var groupCount = this._getGroupCount();\n\n    var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n\n    var options = _extends({\n      groupByDate: this.option(\"groupByDate\"),\n      startRowIndex: 0,\n      startCellIndex: 0,\n      groupOrientation: groupOrientation,\n      today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\n      groups: this.option(\"groups\"),\n      isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\n      isAllDayPanelVisible: this.isAllDayPanelVisible,\n      selectedCells: this.cellsSelectionState.getSelectedCells(),\n      focusedCell: this.cellsSelectionState.focusedCell,\n      headerCellTextFormat: this._getFormat(),\n      getDateForHeaderText: (_, date) => date,\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\"),\n      cellDuration: this.getCellDuration(),\n      viewType: this.type,\n      intervalCount: this.option(\"intervalCount\"),\n      hoursInterval: this.option(\"hoursInterval\"),\n      currentDate: this.option(\"currentDate\"),\n      startDate: this.option(\"startDate\"),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\")\n    }, this.virtualScrollingDispatcher.getRenderState());\n\n    return options;\n  }\n\n  renovatedRenderSupported() {\n    return true;\n  }\n\n  _updateGroupTableHeight() {\n    if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\n      this._setHorizontalGroupHeaderCellsHeight();\n    }\n  }\n\n  updateHeaderEmptyCellWidth() {\n    if (hasWindow() && this._isRenderHeaderPanelEmptyCell()) {\n      var timePanelWidth = this.getTimePanelWidth();\n      var groupPanelWidth = this.getGroupTableWidth();\n\n      this._$headerPanelEmptyCell.css(\"width\", timePanelWidth + groupPanelWidth);\n    }\n  }\n\n  _isGroupsSpecified(resources) {\n    return this.option(\"groups\").length && resources;\n  }\n\n  _getGroupIndexByResourceId(id) {\n    var groups = this.option(\"groups\");\n    var resourceTree = createResourcesTree(groups);\n\n    if (!resourceTree.length) {\n      return 0;\n    }\n\n    return this._getGroupIndexRecursively(resourceTree, id);\n  }\n\n  _getGroupIndexRecursively(resourceTree, id) {\n    var currentKey = resourceTree[0].name;\n    var currentValue = id[currentKey];\n    return resourceTree.reduce((prevIndex, _ref) => {\n      var {\n        leafIndex: leafIndex,\n        value: value,\n        children: children\n      } = _ref;\n      var areValuesEqual = currentValue === value;\n\n      if (areValuesEqual && void 0 !== leafIndex) {\n        return leafIndex;\n      }\n\n      if (areValuesEqual) {\n        return this._getGroupIndexRecursively(children, id);\n      }\n\n      return prevIndex;\n    }, 0);\n  }\n\n  _getViewStartByOptions() {\n    return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this._getIntervalDuration(), this.option(\"startDate\") ? this._calculateViewStartDate() : void 0);\n  }\n\n  _getIntervalDuration() {\n    return this.viewDataProvider.getIntervalDuration(this.option(\"intervalCount\"));\n  }\n\n  _getHeaderDate() {\n    return this.getStartViewDate();\n  }\n\n  _calculateViewStartDate() {\n    return calculateViewStartDate(this.option(\"startDate\"));\n  }\n\n  _firstDayOfWeek() {\n    return this.viewDataProvider.getFirstDayOfWeek(this.option(\"firstDayOfWeek\"));\n  }\n\n  _attachEvents() {\n    this._createSelectionChangedAction();\n\n    this._attachClickEvent();\n\n    this._attachContextMenuEvent();\n  }\n\n  _attachClickEvent() {\n    var that = this;\n\n    var pointerDownAction = this._createAction(function (e) {\n      that._pointerDownHandler(e.event);\n    });\n\n    this._createCellClickAction();\n\n    var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n    var $element = this.$element();\n    eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\n    eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\n    eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, function (e) {\n      if (isMouseEvent(e) && e.which > 1) {\n        e.preventDefault();\n        return;\n      }\n\n      pointerDownAction({\n        event: e\n      });\n    });\n    eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, function (e) {\n      var $cell = $(e.target);\n\n      that._cellClickAction({\n        event: e,\n        cellElement: getPublicElement($cell),\n        cellData: that.getCellData($cell)\n      });\n    });\n  }\n\n  _createCellClickAction() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\", {\n      afterExecute: e => this._cellClickHandler(e.args[0].event)\n    });\n  }\n\n  _createSelectionChangedAction() {\n    this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n  }\n\n  _cellClickHandler() {\n    if (this._showPopup) {\n      delete this._showPopup;\n\n      this._handleSelectedCellsClick();\n    }\n  }\n\n  _pointerDownHandler(e) {\n    var $target = $(e.target);\n\n    if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\n      this._isCellClick = false;\n      return;\n    }\n\n    this._isCellClick = true;\n\n    if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\n      this._showPopup = true;\n    } else {\n      var cellCoordinates = this._getCoordinatesByCell($target);\n\n      var isAllDayCell = this._hasAllDayClass($target);\n\n      this._setSelectedCellsStateAndUpdateSelection(isAllDayCell, cellCoordinates, false, $target);\n    }\n  }\n\n  _handleSelectedCellsClick() {\n    var selectedCells = this.cellsSelectionState.getSelectedCells();\n    var firstCellData = selectedCells[0];\n    var lastCellData = selectedCells[selectedCells.length - 1];\n    var result = {\n      startDate: firstCellData.startDate,\n      endDate: lastCellData.endDate\n    };\n\n    if (void 0 !== lastCellData.allDay) {\n      result.allDay = lastCellData.allDay;\n    }\n\n    this.option(\"onSelectedCellsClick\")(result, lastCellData.groups);\n  }\n\n  _attachContextMenuEvent() {\n    this._createContextMenuAction();\n\n    var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n    var $element = this.$element();\n    var eventName = addNamespace(contextMenuEventName, this.NAME);\n    eventsEngine.off($element, eventName, cellSelector);\n    eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this));\n  }\n\n  _contextMenuHandler(e) {\n    var $cell = $(e.target);\n\n    this._contextMenuAction({\n      event: e,\n      cellElement: getPublicElement($cell),\n      cellData: this.getCellData($cell)\n    });\n\n    this._contextMenuHandled = true;\n  }\n\n  _createContextMenuAction() {\n    this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\");\n  }\n\n  _getGroupHeaderContainer() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      return this._$groupTable;\n    }\n\n    return this._$thead;\n  }\n\n  _getDateHeaderContainer() {\n    return this._$thead;\n  }\n\n  _getCalculateHeaderCellRepeatCount() {\n    return this._groupedStrategy.calculateHeaderCellRepeatCount();\n  }\n\n  _updateScrollable() {\n    var _this$_headerScrollab2, _this$_sidebarScrolla2;\n\n    this._dateTableScrollable.update();\n\n    null === (_this$_headerScrollab2 = this._headerScrollable) || void 0 === _this$_headerScrollab2 ? void 0 : _this$_headerScrollab2.update();\n    null === (_this$_sidebarScrolla2 = this._sidebarScrollable) || void 0 === _this$_sidebarScrolla2 ? void 0 : _this$_sidebarScrolla2.update();\n  }\n\n  _getTimePanelRowCount() {\n    return this._getCellCountInDay();\n  }\n\n  _getCellCountInDay() {\n    var hoursInterval = this.option(\"hoursInterval\");\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    return this.viewDataProvider.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n  }\n\n  _getTotalCellCount(groupCount) {\n    return this._groupedStrategy.getTotalCellCount(groupCount);\n  }\n\n  _getTotalRowCount(groupCount, includeAllDayPanelRows) {\n    var result = this._groupedStrategy.getTotalRowCount(groupCount);\n\n    if (includeAllDayPanelRows && this.isAllDayPanelVisible) {\n      result += groupCount;\n    }\n\n    return result;\n  }\n\n  _getGroupIndex(rowIndex, columnIndex) {\n    return this._groupedStrategy.getGroupIndex(rowIndex, columnIndex);\n  }\n\n  calculateEndDate(startDate) {\n    var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\n    return viewDataGenerator.calculateEndDate(startDate, viewDataGenerator.getInterval(this.option(\"hoursInterval\")), this.option(\"endDayHour\"));\n  }\n\n  _getGroupCount() {\n    return getGroupCount(this.option(\"groups\"));\n  }\n\n  _attachTablesEvents() {\n    var element = this.$element();\n\n    this._attachDragEvents(element);\n\n    this._attachPointerEvents(element);\n  }\n\n  _detachDragEvents(element) {\n    eventsEngine.off(element, DragEventNames.ENTER);\n    eventsEngine.off(element, DragEventNames.LEAVE);\n    eventsEngine.off(element, DragEventNames.DROP);\n  }\n\n  _attachDragEvents(element) {\n    this._detachDragEvents(element);\n\n    eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\n      checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\n    }, e => {\n      if (!this.preventDefaultDragging) {\n        this.removeDroppableCellClass();\n        $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n      }\n    });\n    eventsEngine.on(element, DragEventNames.LEAVE, () => {\n      if (!this.preventDefaultDragging) {\n        this.removeDroppableCellClass();\n      }\n    });\n    eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => {\n      var _this$dragBehavior, _this$dragBehavior$dr;\n\n      if (!(null !== (_this$dragBehavior = this.dragBehavior) && void 0 !== _this$dragBehavior && _this$dragBehavior.dragBetweenComponentsPromise)) {\n        this.dragBehavior.removeDroppableClasses();\n        return;\n      }\n\n      null === (_this$dragBehavior$dr = this.dragBehavior.dragBetweenComponentsPromise) || void 0 === _this$dragBehavior$dr ? void 0 : _this$dragBehavior$dr.then(() => {\n        this.dragBehavior.removeDroppableClasses();\n      });\n    });\n  }\n\n  _attachPointerEvents(element) {\n    var isPointerDown = false;\n    eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\n    eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\n    eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\n      if (isMouseEvent(e) && 1 === e.which) {\n        isPointerDown = true;\n        this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n        eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\n          isPointerDown = false;\n          this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n        });\n      }\n    });\n    eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\n      if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._moveToCell($(e.target), true);\n      }\n    });\n  }\n\n  _getFormat() {\n    return abstract();\n  }\n\n  getWorkArea() {\n    return this._$dateTableContainer;\n  }\n\n  getScrollable() {\n    return this._dateTableScrollable;\n  }\n\n  getScrollableScrollTop() {\n    return this._dateTableScrollable.scrollTop();\n  }\n\n  getGroupedScrollableScrollTop(allDay) {\n    return this._groupedStrategy.getScrollableScrollTop(allDay);\n  }\n\n  getScrollableScrollLeft() {\n    return this._dateTableScrollable.scrollLeft();\n  }\n\n  getScrollableOuterWidth() {\n    return this._dateTableScrollable.scrollWidth();\n  }\n\n  getScrollableContainer() {\n    return $(this._dateTableScrollable.container());\n  }\n\n  getHeaderPanelHeight() {\n    return this._$headerPanel && getOuterHeight(this._$headerPanel, true);\n  }\n\n  getTimePanelWidth() {\n    return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width;\n  }\n\n  getGroupTableWidth() {\n    return this._$groupTable ? getOuterWidth(this._$groupTable) : 0;\n  }\n\n  getWorkSpaceLeftOffset() {\n    return this._groupedStrategy.getLeftOffset();\n  }\n\n  _getCellCoordinatesByIndex(index) {\n    var columnIndex = Math.floor(index / this._getRowCount());\n    var rowIndex = index - this._getRowCount() * columnIndex;\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  }\n\n  _getDateGenerationOptions() {\n    var _this$viewDataProvide;\n\n    return {\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\"),\n      isWorkView: this.viewDataProvider.viewDataGenerator.isWorkView,\n      interval: null === (_this$viewDataProvide = this.viewDataProvider.viewDataGenerator) || void 0 === _this$viewDataProvide ? void 0 : _this$viewDataProvide.getInterval(this.option(\"hoursInterval\")),\n      startViewDate: this.getStartViewDate(),\n      firstDayOfWeek: this._firstDayOfWeek()\n    };\n  }\n\n  _getIntervalBetween(currentDate, allDay) {\n    var firstViewDate = this.getStartViewDate();\n    var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\n\n    var days = this._getDaysOfInterval(fullInterval, startDayTime);\n\n    var weekendsCount = this._getWeekendsCount(days);\n\n    var result = (days - weekendsCount) * DAY_MS;\n\n    if (!allDay) {\n      var hiddenInterval = this.viewDataProvider.hiddenInterval;\n      var visibleDayDuration = this.getVisibleDayDuration();\n      result = fullInterval - days * hiddenInterval - weekendsCount * visibleDayDuration;\n    }\n\n    return result;\n  }\n\n  _getWeekendsCount() {\n    return 0;\n  }\n\n  _getDaysOfInterval(fullInterval, startDayTime) {\n    return Math.floor((fullInterval + startDayTime) / DAY_MS);\n  }\n\n  _updateIndex(index) {\n    return index * this._getRowCount();\n  }\n\n  _getDroppableCell() {\n    return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS);\n  }\n\n  _getWorkSpaceWidth() {\n    return this.cache.get(\"workspaceWidth\", () => {\n      if (this._needCreateCrossScrolling()) {\n        return getBoundingRect(this._$dateTable.get(0)).width;\n      }\n\n      var totalWidth = getBoundingRect(this.$element().get(0)).width;\n      var timePanelWidth = this.getTimePanelWidth();\n      var groupTableWidth = this.getGroupTableWidth();\n      return totalWidth - timePanelWidth - groupTableWidth;\n    });\n  }\n\n  _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\n    var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\n\n    return this._dom_getDateCell(indexes);\n  }\n\n  _dom_getDateCell(position) {\n    return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.columnIndex);\n  }\n\n  _dom_getAllDayPanelCell(columnIndex) {\n    return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(columnIndex);\n  }\n\n  _getCells(allDay, direction) {\n    var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n\n    if (\"vertical\" === direction) {\n      var result = [];\n\n      for (var i = 1;; i++) {\n        var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\n\n        if (!cells.length) {\n          break;\n        }\n\n        result = result.concat(cells.toArray());\n      }\n\n      return $(result);\n    } else {\n      return this.$element().find(\".\" + cellClass);\n    }\n  }\n\n  _getAllCells(allDay) {\n    if (this._isVerticalGroupedWorkSpace()) {\n      return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"));\n    }\n\n    var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n    return this.$element().find(\".\".concat(cellClass));\n  }\n\n  _setHorizontalGroupHeaderCellsHeight() {\n    var height = getBoundingRect(this._$dateTable.get(0)).height;\n    setOuterHeight(this._$groupTable, height);\n  }\n\n  _getGroupHeaderCells() {\n    return this.$element().find(\".\" + GROUP_HEADER_CLASS);\n  }\n\n  _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\n    var currentDate = date || new Date(this.option(\"currentDate\"));\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n\n    if (hours < startDayHour) {\n      hours = startDayHour;\n    }\n\n    if (hours >= endDayHour) {\n      hours = endDayHour - 1;\n    }\n\n    currentDate.setHours(hours, minutes, 0, 0);\n    var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\n    var {\n      position: position,\n      cellData: cellData\n    } = cell;\n    return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, isDateAndTimeView(this.type), \"vertical\" === this.viewDirection);\n  }\n\n  _isOutsideScrollable(target, event) {\n    var $dateTableScrollableElement = this._dateTableScrollable.$element();\n\n    var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\n    var window = getWindow();\n    var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\n    var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\n    var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\n\n    if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\n      return false;\n    }\n\n    return isOutsideVerticalScrollable || isOutsideHorizontalScrollable;\n  }\n\n  setCellDataCache(cellCoordinates, groupIndex, $cell) {\n    var key = JSON.stringify({\n      rowIndex: cellCoordinates.rowIndex,\n      columnIndex: cellCoordinates.columnIndex,\n      groupIndex: groupIndex\n    });\n    this.cache.set(key, this.getCellData($cell));\n  }\n\n  setCellDataCacheAlias(appointment, geometry) {\n    var key = JSON.stringify({\n      rowIndex: appointment.rowIndex,\n      columnIndex: appointment.columnIndex,\n      groupIndex: appointment.groupIndex\n    });\n    var aliasKey = JSON.stringify({\n      top: geometry.top,\n      left: geometry.left\n    });\n    this.cache.set(aliasKey, this.cache.get(key));\n  }\n\n  supportAllDayRow() {\n    return true;\n  }\n\n  keepOriginalHours() {\n    return false;\n  }\n\n  _filterCellDataFields(cellData) {\n    return extend(true, {}, {\n      startDate: cellData.startDate,\n      endDate: cellData.endDate,\n      groups: cellData.groups,\n      groupIndex: cellData.groupIndex,\n      allDay: cellData.allDay\n    });\n  }\n\n  getCellData($cell) {\n    var cellData = this._getFullCellData($cell) || {};\n    return this._filterCellDataFields(cellData);\n  }\n\n  _getFullCellData($cell) {\n    var currentCell = $cell[0];\n\n    if (currentCell) {\n      return this._getDataByCell($cell);\n    }\n\n    return;\n  }\n\n  _getVirtualRowOffset() {\n    return this.virtualScrollingDispatcher.virtualRowOffset;\n  }\n\n  _getVirtualCellOffset() {\n    return this.virtualScrollingDispatcher.virtualCellOffset;\n  }\n\n  _getDataByCell($cell) {\n    var rowIndex = $cell.parent().index() - this.virtualScrollingDispatcher.topVirtualRowsCount;\n    var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\n    var {\n      viewDataProvider: viewDataProvider\n    } = this;\n\n    var isAllDayCell = this._hasAllDayClass($cell);\n\n    var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\n    return cellData ? cellData : void 0;\n  }\n\n  isGroupedByDate() {\n    return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0;\n  }\n\n  getCellIndexByDate(date, inAllDayRow) {\n    var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\n    var timeInterval = inAllDayRow ? 864e5 : viewDataGenerator.getInterval(this.option(\"hoursInterval\"));\n    var startViewDateOffset = getStartViewDateTimeOffset(this.getStartViewDate(), this.option(\"startDayHour\"));\n    var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + startViewDateOffset;\n    var index = Math.floor(dateTimeStamp / timeInterval);\n\n    if (inAllDayRow) {\n      index = this._updateIndex(index);\n    }\n\n    if (index < 0) {\n      index = 0;\n    }\n\n    return index;\n  }\n\n  getDroppableCellIndex() {\n    var $droppableCell = this._getDroppableCell();\n\n    var $row = $droppableCell.parent();\n    var rowIndex = $row.index();\n    return rowIndex * $row.find(\"td\").length + $droppableCell.index();\n  }\n\n  getDataByDroppableCell() {\n    var cellData = this.getCellData($(this._getDroppableCell()));\n    var allDay = cellData.allDay;\n    var startDate = cellData.startDate;\n    var endDate = cellData.endDate;\n    return {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: allDay,\n      groups: cellData.groups\n    };\n  }\n\n  getDateRange() {\n    return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()];\n  }\n\n  getCellMinWidth() {\n    return DATE_TABLE_MIN_CELL_WIDTH;\n  }\n\n  getRoundedCellWidth(groupIndex, startIndex, cellCount) {\n    if (groupIndex < 0 || !hasWindow()) {\n      return 0;\n    }\n\n    var $row = this.$element().find(\".\".concat(DATE_TABLE_ROW_CLASS)).eq(0);\n    var width = 0;\n    var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\n    var totalCellCount = this._getCellCount() * groupIndex;\n    cellCount = cellCount || this._getCellCount();\n\n    if (!isDefined(startIndex)) {\n      startIndex = totalCellCount;\n    }\n\n    for (var i = startIndex; i < totalCellCount + cellCount; i++) {\n      var element = $($cells).eq(i).get(0);\n      var elementWidth = element ? getBoundingRect(element).width : 0;\n      width += elementWidth;\n    }\n\n    return width / (totalCellCount + cellCount - startIndex);\n  }\n\n  getCellWidth() {\n    return getCellWidth(this.getDOMElementsMetaData());\n  }\n\n  getCellHeight() {\n    return getCellHeight(this.getDOMElementsMetaData());\n  }\n\n  getAllDayHeight() {\n    return getAllDayHeight(this.option(\"showAllDayPanel\"), this._isVerticalGroupedWorkSpace(), this.getDOMElementsMetaData());\n  }\n\n  getMaxAllowedPosition(groupIndex) {\n    return getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.option(\"rtlEnabled\"), this.getDOMElementsMetaData());\n  }\n\n  getAllDayOffset() {\n    return this._groupedStrategy.getAllDayOffset();\n  }\n\n  getCellIndexByCoordinates(coordinates, allDay) {\n    var cellCount = this._getTotalCellCount(this._getGroupCount());\n\n    var cellWidth = Math.floor(this._getWorkSpaceWidth() / cellCount);\n    var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\n    var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\n    var leftIndex = Math.floor((coordinates.left + 5) / cellWidth);\n\n    if (this._isRTL()) {\n      leftIndex = cellCount - leftIndex - 1;\n    }\n\n    return cellCount * topIndex + leftIndex;\n  }\n\n  getStartViewDate() {\n    return this.viewDataProvider.getStartViewDate();\n  }\n\n  getEndViewDate() {\n    return this.viewDataProvider.getLastCellEndDate();\n  }\n\n  getEndViewDateByEndDayHour() {\n    return this.viewDataProvider.getLastViewDateByEndDayHour(this.option(\"endDayHour\"));\n  }\n\n  getCellDuration() {\n    return getCellDuration(this.type, this.option(\"startDayHour\"), this.option(\"endDayHour\"), this.option(\"hoursInterval\"));\n  }\n\n  getIntervalDuration(allDay) {\n    return allDay ? toMs(\"day\") : this.getCellDuration();\n  }\n\n  getVisibleDayDuration() {\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    var hoursInterval = this.option(\"hoursInterval\");\n    return this.viewDataProvider.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval);\n  }\n\n  getGroupBounds(coordinates) {\n    var cellCount = this._getCellCount();\n\n    var $cells = this._getCells();\n\n    var cellWidth = this.getCellWidth();\n    var groupedDataMap = this.viewDataProvider.groupedDataMap;\n\n    var result = this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap);\n\n    if (this._isRTL()) {\n      var startOffset = result.left;\n      result.left = result.right - 2 * cellWidth;\n      result.right = startOffset + 2 * cellWidth;\n    }\n\n    return result;\n  }\n\n  needRecalculateResizableArea() {\n    return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop();\n  }\n\n  getCellDataByCoordinates(coordinates, allDay) {\n    var key = JSON.stringify({\n      top: coordinates.top,\n      left: coordinates.left\n    });\n    return this.cache.get(key, () => {\n      var $cells = this._getCells(allDay);\n\n      var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\n      var $cell = $cells.eq(cellIndex);\n      return this.getCellData($cell);\n    });\n  }\n\n  getVisibleBounds() {\n    var result = {};\n    var $scrollable = this.getScrollable().$element();\n    var cellHeight = this.getCellHeight();\n    var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\n    var totalCellCount = scrolledCellCount + getHeight($scrollable) / cellHeight;\n    result.top = {\n      hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n      minutes: scrolledCellCount % 2 ? 30 : 0\n    };\n    result.bottom = {\n      hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n      minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\n    };\n    return result;\n  }\n\n  updateScrollPosition(date, groups) {\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var newDate = this.timeZoneCalculator.createDate(date, {\n      path: \"toGrid\"\n    });\n    var inAllDayRow = allDay && this.isAllDayPanelVisible;\n\n    if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\n      this.scrollTo(newDate, groups, inAllDayRow, false);\n    }\n  }\n\n  needUpdateScrollPosition(date, groups, inAllDayRow) {\n    var cells = this._getCellsInViewport(inAllDayRow);\n\n    var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\n    var time = date.getTime();\n    var trimmedTime = dateUtils.trimTime(date).getTime();\n    return cells.reduce((currentResult, cell) => {\n      var {\n        startDate: cellStartDate,\n        endDate: cellEndDate,\n        groupIndex: cellGroupIndex\n      } = this.getCellData(cell);\n      var cellStartTime = cellStartDate.getTime();\n      var cellEndTime = cellEndDate.getTime();\n\n      if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\n        return false;\n      }\n\n      return currentResult;\n    }, true);\n  }\n\n  _getCellsInViewport(inAllDayRow) {\n    var $scrollable = this.getScrollable().$element();\n    var cellHeight = this.getCellHeight();\n    var cellWidth = this.getCellWidth();\n\n    var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\n\n    var scrollableScrollTop = this.getScrollableScrollTop();\n    var scrollableScrollLeft = this.getScrollableScrollLeft();\n    var fullScrolledRowCount = scrollableScrollTop / cellHeight - this.virtualScrollingDispatcher.topVirtualRowsCount;\n    var scrolledRowCount = Math.floor(fullScrolledRowCount);\n\n    if (scrollableScrollTop % cellHeight !== 0) {\n      scrolledRowCount += 1;\n    }\n\n    var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\n    var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\n\n    if (scrollableScrollLeft % cellWidth !== 0) {\n      scrolledColumnCount += 1;\n    }\n\n    var rowCount = Math.floor(fullScrolledRowCount + getHeight($scrollable) / cellHeight);\n    var columnCount = Math.floor(fullScrolledColumnCount + getWidth($scrollable) / cellWidth);\n\n    var $cells = this._getAllCells(inAllDayRow);\n\n    var result = [];\n    $cells.each(function (index) {\n      var $cell = $(this);\n      var columnIndex = index % totalColumnCount;\n      var rowIndex = index / totalColumnCount;\n\n      if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\n        result.push($cell);\n      }\n    });\n    return result;\n  }\n\n  scrollToTime(hours, minutes, date) {\n    if (!this._isValidScrollDate(date)) {\n      return;\n    }\n\n    var coordinates = this._getScrollCoordinates(hours, minutes, date);\n\n    var scrollable = this.getScrollable();\n    scrollable.scrollBy({\n      top: coordinates.top - scrollable.scrollTop(),\n      left: 0\n    });\n  }\n\n  scrollTo(date, groups) {\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\n\n    if (!this._isValidScrollDate(date, throwWarning)) {\n      return;\n    }\n\n    var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\n    var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\n\n    var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\n\n    var scrollable = this.getScrollable();\n    var $scrollable = scrollable.$element();\n    var cellWidth = this.getCellWidth();\n    var offset = this.option(\"rtlEnabled\") ? cellWidth : 0;\n    var scrollableHeight = getHeight($scrollable);\n    var scrollableWidth = getWidth($scrollable);\n    var cellHeight = this.getCellHeight();\n    var xShift = (scrollableWidth - cellWidth) / 2;\n    var yShift = (scrollableHeight - cellHeight) / 2;\n    var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\n    var top = coordinates.top - scrollable.scrollTop() - yShift;\n\n    if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\n      top = 0;\n    }\n\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      setTimeout(() => {\n        scrollable.scrollBy({\n          left: left,\n          top: top\n        });\n      });\n    } else {\n      scrollable.scrollBy({\n        left: left,\n        top: top\n      });\n    }\n  }\n\n  _isValidScrollDate(date) {\n    var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\n    var min = this.getStartViewDate();\n    var max = this.getEndViewDate();\n\n    if (date < min || date > max) {\n      throwWarning && errors.log(\"W1008\", date);\n      return false;\n    }\n\n    return true;\n  }\n\n  needApplyCollectorOffset() {\n    return false;\n  }\n\n  removeDroppableCellClass($cellElement) {\n    ($cellElement || this._getDroppableCell()).removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n  }\n\n  _getCoordinatesByCell($cell) {\n    var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\n    var rowIndex = $cell.parent().index();\n\n    var isAllDayCell = this._hasAllDayClass($cell);\n\n    var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\n\n    if (!(isAllDayCell && !isVerticalGrouping)) {\n      rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n    }\n\n    return {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    };\n  }\n\n  _isShowAllDayPanel() {\n    return this.option(\"showAllDayPanel\");\n  }\n\n  _getTimePanelCells() {\n    return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS));\n  }\n\n  _getRDateTableProps() {\n    return {\n      viewData: this.viewDataProvider.viewData,\n      dataCellTemplate: this.option(\"dataCellTemplate\"),\n      addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\n      groupOrientation: this.option(\"groupOrientation\"),\n      addVerticalSizesClassToRows: false\n    };\n  }\n\n  _updateSelectedCellDataOption(selectedCellData) {\n    var correctedSelectedCellData = selectedCellData.map(_ref2 => {\n      var {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groupIndex: groupIndex,\n        groups: groups\n      } = _ref2;\n      return {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groupIndex: groupIndex,\n        groups: groups\n      };\n    });\n    this.option(\"selectedCellData\", correctedSelectedCellData);\n\n    this._selectionChangedAction({\n      selectedCellData: correctedSelectedCellData\n    });\n  }\n\n  _getCellByData(cellData) {\n    var {\n      startDate: startDate,\n      groupIndex: groupIndex,\n      allDay: allDay,\n      index: index\n    } = cellData;\n    var position = this.viewDataProvider.findCellPositionInMap({\n      startDate: startDate,\n      groupIndex: groupIndex,\n      isAllDay: allDay,\n      index: index\n    });\n\n    if (!position) {\n      return;\n    }\n\n    return allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(position.columnIndex) : this._dom_getDateCell(position);\n  }\n\n  getDOMElementsMetaData() {\n    return this.cache.get(\"cellElementsMeta\", () => ({\n      dateTableCellsMeta: this._getDateTableDOMElementsInfo(),\n      allDayPanelCellsMeta: this._getAllDayPanelDOMElementsInfo()\n    }));\n  }\n\n  _getDateTableDOMElementsInfo() {\n    var dateTableCells = this._getAllCells(false);\n\n    if (!dateTableCells.length || !hasWindow()) {\n      return [[{}]];\n    }\n\n    var dateTable = this._getDateTable();\n\n    var dateTableRect = getBoundingRect(dateTable.get(0));\n    var columnsCount = this.viewDataProvider.getColumnsCount();\n    var result = [];\n    dateTableCells.each((index, cell) => {\n      var rowIndex = Math.floor(index / columnsCount);\n\n      if (result.length === rowIndex) {\n        result.push([]);\n      }\n\n      this._addCellMetaData(result[rowIndex], cell, dateTableRect);\n    });\n    return result;\n  }\n\n  _getAllDayPanelDOMElementsInfo() {\n    var result = [];\n\n    if (this.isAllDayPanelVisible && !this._isVerticalGroupedWorkSpace() && hasWindow()) {\n      var allDayCells = this._getAllCells(true);\n\n      if (!allDayCells.length) {\n        return [{}];\n      }\n\n      var allDayAppointmentContainer = this._$allDayPanel;\n      var allDayPanelRect = getBoundingRect(allDayAppointmentContainer.get(0));\n      allDayCells.each((_, cell) => {\n        this._addCellMetaData(result, cell, allDayPanelRect);\n      });\n    }\n\n    return result;\n  }\n\n  _addCellMetaData(cellMetaDataArray, cell, parentRect) {\n    var cellRect = getBoundingRect(cell);\n    cellMetaDataArray.push({\n      left: cellRect.left - parentRect.left,\n      top: cellRect.top - parentRect.top,\n      width: cellRect.width,\n      height: cellRect.height\n    });\n  }\n\n  _oldRender_getAllDayCellData(groupIndex) {\n    return (cell, rowIndex, columnIndex) => {\n      var validColumnIndex = columnIndex % this._getCellCount();\n\n      var options = this._getDateGenerationOptions(true);\n\n      var startDate = this.viewDataProvider.viewDataGenerator.getDateByCellIndices(options, rowIndex, validColumnIndex, this._getCellCountInDay());\n      startDate = dateUtils.trimTime(startDate);\n      var validGroupIndex = groupIndex || 0;\n\n      if (this.isGroupedByDate()) {\n        validGroupIndex = Math.floor(columnIndex % this._getGroupCount());\n      } else if (this._isHorizontalGroupedWorkSpace()) {\n        validGroupIndex = Math.floor(columnIndex / this._getCellCount());\n      }\n\n      var data = {\n        startDate: startDate,\n        endDate: startDate,\n        allDay: true,\n        groupIndex: validGroupIndex\n      };\n      var groupsArray = getCellGroups(validGroupIndex, this.option(\"groups\"));\n\n      if (groupsArray.length) {\n        data.groups = getGroupsObjectFromGroupsArray(groupsArray);\n      }\n\n      return {\n        key: CELL_DATA,\n        value: data\n      };\n    };\n  }\n\n  renderRWorkSpace(componentsToRender) {\n    var components = null !== componentsToRender && void 0 !== componentsToRender ? componentsToRender : {\n      header: true,\n      timePanel: true,\n      dateTable: true,\n      allDayPanel: true\n    };\n    components.header && this.renderRHeaderPanel();\n    components.timePanel && this.renderRTimeTable();\n    components.dateTable && this.renderRDateTable();\n    components.allDayPanel && this.renderRAllDayPanel();\n  }\n\n  renderRDateTable() {\n    utils.renovation.renderComponent(this, this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n  }\n\n  renderRGroupPanel() {\n    var options = {\n      groups: this.option(\"groups\"),\n      groupOrientation: this.option(\"groupOrientation\"),\n      groupByDate: this.isGroupedByDate(),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      className: this.verticalGroupTableClass,\n      groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions())\n    };\n\n    if (this.option(\"groups\").length) {\n      this._attachGroupCountClass();\n\n      utils.renovation.renderComponent(this, this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options);\n    } else {\n      this._detachGroupCountClass();\n    }\n  }\n\n  renderRAllDayPanel() {\n    var visible = this.isAllDayPanelVisible && !this.isGroupedAllDayPanel();\n\n    if (visible) {\n      var _this$virtualScrollin;\n\n      this._toggleAllDayVisibility(false);\n\n      var options = _extends({\n        viewData: this.viewDataProvider.viewData,\n        dataCellTemplate: this.option(\"dataCellTemplate\"),\n        startCellIndex: 0\n      }, (null === (_this$virtualScrollin = this.virtualScrollingDispatcher.horizontalVirtualScrolling) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.getRenderState()) || {});\n\n      utils.renovation.renderComponent(this, this._$allDayTable, dxrAllDayPanelTable, \"renovatedAllDayPanel\", options);\n      utils.renovation.renderComponent(this, this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {});\n    }\n\n    this._toggleAllDayVisibility(true);\n  }\n\n  renderRTimeTable() {\n    utils.renovation.renderComponent(this, this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\n      timePanelData: this.viewDataProvider.timePanelData,\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      groupOrientation: this.option(\"groupOrientation\")\n    });\n  }\n\n  renderRHeaderPanel() {\n    var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n\n    if (this.option(\"groups\").length) {\n      this._attachGroupCountClass();\n    } else {\n      this._detachGroupCountClass();\n    }\n\n    utils.renovation.renderComponent(this, this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\n      dateHeaderData: this.viewDataProvider.dateHeaderData,\n      groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions()),\n      dateCellTemplate: this.option(\"dateCellTemplate\"),\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      groups: this.option(\"groups\"),\n      groupByDate: this.isGroupedByDate(),\n      groupOrientation: this.option(\"groupOrientation\"),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      isRenderDateHeader: isRenderDateHeader\n    });\n  }\n\n  initDragBehavior(scheduler) {\n    if (!this.dragBehavior && scheduler) {\n      this.dragBehavior = new AppointmentDragBehavior(scheduler);\n\n      this._createDragBehavior(this.getWorkArea());\n\n      this._createDragBehavior(this.getAllDayContainer());\n\n      this._createDragBehavior(this._$allDayPanel);\n    }\n  }\n\n  _createDragBehavior($element) {\n    var options = {\n      getItemData: (itemElement, appointments) => appointments._getItemData(itemElement),\n      getItemSettings: $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY)\n    };\n\n    this._createDragBehaviorBase($element, options);\n  }\n\n  _createDragBehaviorBase($element, options) {\n    var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\n    this.dragBehavior.addTo($element, createDragBehaviorConfig(container, this.isDefaultDraggingMode, this.dragBehavior, () => {\n      if (!this.isDefaultDraggingMode) {\n        this.preventDefaultDragging = false;\n      }\n    }, () => {\n      if (!this.isDefaultDraggingMode) {\n        this.preventDefaultDragging = true;\n      }\n    }, () => this._getDroppableCell(), () => this._getDateTables(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), options));\n  }\n\n  _isRenderHeaderPanelEmptyCell() {\n    return this._isVerticalGroupedWorkSpace();\n  }\n\n  _dispose() {\n    super._dispose();\n\n    this.virtualScrollingDispatcher.dispose();\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      currentDate: new Date(),\n      intervalCount: 1,\n      startDate: null,\n      firstDayOfWeek: void 0,\n      startDayHour: 0,\n      endDayHour: 24,\n      hoursInterval: .5,\n      activeStateEnabled: true,\n      hoverStateEnabled: true,\n      groups: [],\n      showAllDayPanel: true,\n      allDayExpanded: false,\n      onCellClick: null,\n      crossScrollingEnabled: false,\n      dataCellTemplate: null,\n      timeCellTemplate: null,\n      resourceCellTemplate: null,\n      dateCellTemplate: null,\n      allowMultipleCellSelection: true,\n      indicatorTime: new Date(),\n      indicatorUpdateInterval: 5 * toMs(\"minute\"),\n      shadeUntilCurrentTime: true,\n      groupOrientation: \"horizontal\",\n      selectedCellData: [],\n      groupByDate: false,\n      scrolling: {\n        mode: \"standard\"\n      },\n      allDayPanelMode: \"all\",\n      renovateRender: true,\n      height: void 0,\n      draggingMode: \"outlook\",\n      onScrollEnd: () => {},\n      getHeaderHeight: void 0,\n      onRenderAppointments: () => {},\n      onShowAllDayPanel: () => {},\n      onSelectedCellsClick: () => {},\n      timeZoneCalculator: void 0,\n      schedulerHeight: void 0,\n      schedulerWidth: void 0\n    });\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"startDayHour\":\n        validateDayHours(args.value, this.option(\"endDayHour\"));\n\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"endDayHour\":\n        validateDayHours(this.option(\"startDayHour\"), args.value);\n\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"dateCellTemplate\":\n      case \"resourceCellTemplate\":\n      case \"dataCellTemplate\":\n      case \"timeCellTemplate\":\n      case \"hoursInterval\":\n      case \"firstDayOfWeek\":\n      case \"currentDate\":\n      case \"startDate\":\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"groups\":\n        this._cleanView();\n\n        this._removeAllDayElements();\n\n        this._initGrouping();\n\n        this.repaint();\n        break;\n\n      case \"groupOrientation\":\n        this._initGroupedStrategy();\n\n        this._createAllDayPanelElements();\n\n        this._removeAllDayElements();\n\n        this._cleanWorkSpace();\n\n        this._toggleGroupByDateClass();\n\n        break;\n\n      case \"showAllDayPanel\":\n        if (this._isVerticalGroupedWorkSpace()) {\n          this._cleanView();\n\n          this._removeAllDayElements();\n\n          this._initGrouping();\n\n          this.repaint();\n        } else if (!this.isRenovatedRender()) {\n          this._toggleAllDayVisibility(true);\n        } else {\n          this.renderWorkSpace();\n        }\n\n        break;\n\n      case \"allDayExpanded\":\n        this._changeAllDayVisibility();\n\n        this._attachTablesEvents();\n\n        this._updateScrollable();\n\n        break;\n\n      case \"onSelectionChanged\":\n        this._createSelectionChangedAction();\n\n        break;\n\n      case \"onCellClick\":\n        this._createCellClickAction();\n\n        break;\n\n      case \"onCellContextMenu\":\n        this._attachContextMenuEvent();\n\n        break;\n\n      case \"intervalCount\":\n        this._cleanWorkSpace();\n\n        this._toggleWorkSpaceCountClass();\n\n        break;\n\n      case \"groupByDate\":\n        this._cleanWorkSpace();\n\n        this._toggleGroupByDateClass();\n\n        break;\n\n      case \"crossScrollingEnabled\":\n        this._toggleHorizontalScrollClass();\n\n        this._dateTableScrollable.option(this._dateTableScrollableConfig());\n\n        break;\n\n      case \"allDayPanelMode\":\n        this.updateShowAllDayPanel();\n        this.updateAppointments();\n        break;\n\n      case \"width\":\n        super._optionChanged(args);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"timeZoneCalculator\":\n      case \"allowMultipleCellSelection\":\n      case \"selectedCellData\":\n        break;\n\n      case \"renovateRender\":\n      case \"scrolling\":\n        this.repaint();\n        break;\n\n      case \"schedulerHeight\":\n      case \"schedulerWidth\":\n        this.virtualScrollingDispatcher.updateDimensions(true);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  updateShowAllDayPanel() {\n    var isHiddenAllDayPanel = \"hidden\" === this.option(\"allDayPanelMode\");\n    this.option(\"onShowAllDayPanel\")(!isHiddenAllDayPanel);\n  }\n\n  _getVirtualScrollingDispatcherOptions() {\n    return {\n      getCellHeight: this.getCellHeight.bind(this),\n      getCellWidth: this.getCellWidth.bind(this),\n      getCellMinWidth: this.getCellMinWidth.bind(this),\n      isRTL: this._isRTL.bind(this),\n      getSchedulerHeight: () => this.option(\"schedulerHeight\"),\n      getSchedulerWidth: () => this.option(\"schedulerWidth\"),\n      getViewHeight: () => this.$element().height ? this.$element().height() : getHeight(this.$element()),\n      getViewWidth: () => this.$element().width ? this.$element().width() : getWidth(this.$element()),\n      getWindowHeight: () => getWindow().innerHeight,\n      getWindowWidth: () => getWindow().innerWidth,\n      getScrolling: () => this.option(\"scrolling\"),\n      getScrollableOuterWidth: this.getScrollableOuterWidth.bind(this),\n      getScrollable: this.getScrollable.bind(this),\n      createAction: this._createAction.bind(this),\n      updateRender: this.updateRender.bind(this),\n      updateGrid: this.updateGrid.bind(this),\n      getGroupCount: this._getGroupCount.bind(this),\n      isVerticalGrouping: this._isVerticalGroupedWorkSpace.bind(this),\n      getTotalRowCount: this._getTotalRowCount.bind(this),\n      getTotalCellCount: this._getTotalCellCount.bind(this)\n    };\n  }\n\n  _cleanWorkSpace() {\n    this._cleanView();\n\n    this._toggleGroupedClass();\n\n    this._toggleWorkSpaceWithOddCells();\n\n    this.virtualScrollingDispatcher.updateDimensions(true);\n\n    this._renderView();\n\n    this.option(\"crossScrollingEnabled\") && this._setTableSizes();\n    this.cache.clear();\n  }\n\n  _init() {\n    this._headerSemaphore = new ScrollSemaphore();\n    this._sideBarSemaphore = new ScrollSemaphore();\n    this._dataTableSemaphore = new ScrollSemaphore();\n    this._viewDataProvider = null;\n    this._cellsSelectionState = null;\n    this._activeStateUnit = CELL_SELECTOR;\n\n    super._init();\n\n    this._initGrouping();\n\n    this._toggleHorizontalScrollClass();\n\n    this._toggleWorkSpaceCountClass();\n\n    this._toggleGroupByDateClass();\n\n    this._toggleWorkSpaceWithOddCells();\n\n    this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass());\n  }\n\n  _initPositionHelper() {\n    this.positionHelper = new PositionHelper({\n      key: this.option(\"key\"),\n      viewDataProvider: this.viewDataProvider,\n      viewStartDayHour: this.option(\"startDayHour\"),\n      viewEndDayHour: this.option(\"endDayHour\"),\n      cellDuration: this.getCellDuration(),\n      groupedStrategy: this._groupedStrategy,\n      isGroupedByDate: this.isGroupedByDate(),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      startViewDate: this.getStartViewDate(),\n      isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\n      groupCount: this._getGroupCount(),\n      isVirtualScrolling: this.isVirtualScrolling(),\n      getDOMMetaDataCallback: this.getDOMElementsMetaData.bind(this)\n    });\n  }\n\n  _initGrouping() {\n    this._initGroupedStrategy();\n\n    this._toggleGroupingDirectionClass();\n\n    this._toggleGroupByDateClass();\n  }\n\n  isVerticalOrientation() {\n    var orientation = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n    return \"vertical\" === orientation;\n  }\n\n  _initGroupedStrategy() {\n    var Strategy = this.isVerticalOrientation() ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\n    this._groupedStrategy = new Strategy(this);\n  }\n\n  _getDefaultGroupStrategy() {\n    return \"horizontal\";\n  }\n\n  _toggleHorizontalScrollClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"));\n  }\n\n  _toggleGroupByDateClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate());\n  }\n\n  _toggleWorkSpaceCountClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount());\n  }\n\n  _toggleWorkSpaceWithOddCells() {\n    this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells());\n  }\n\n  _toggleGroupingDirectionClass() {\n    this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace());\n  }\n\n  _getDateTableCellClass(rowIndex, columnIndex) {\n    var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, columnIndex + 1, rowIndex, columnIndex);\n  }\n\n  _getGroupHeaderClass(i) {\n    var cellClass = GROUP_HEADER_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1);\n  }\n\n  _initWorkSpaceUnits() {\n    this._$headerPanelContainer = $(\"<div>\").addClass(\"dx-scheduler-header-panel-container\");\n    this._$headerTablesContainer = $(\"<div>\").addClass(\"dx-scheduler-header-tables-container\");\n    this._$headerPanel = $(\"<table>\");\n    this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\n    this._$headerPanelEmptyCell = $(\"<div>\").addClass(\"dx-scheduler-header-panel-empty-cell\");\n    this._$allDayTable = $(\"<table>\");\n    this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\n    this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\n    this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\n    this._$sidebarScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-side-bar-scrollable-content\");\n\n    this._initAllDayPanelElements();\n\n    if (this.isRenovatedRender()) {\n      this.createRAllDayPanelElements();\n    } else {\n      this._createAllDayPanelElements();\n    }\n\n    this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\n    this._$dateTable = $(\"<table>\");\n    this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\n    this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS);\n  }\n\n  _initAllDayPanelElements() {\n    this._allDayTitles = [];\n    this._allDayTables = [];\n    this._allDayPanels = [];\n  }\n\n  _initDateTableScrollable() {\n    var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\n    this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig());\n  }\n\n  _createWorkSpaceElements() {\n    if (this.option(\"crossScrollingEnabled\")) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      this._createWorkSpaceStaticElements();\n    }\n  }\n\n  _createWorkSpaceStaticElements() {\n    this._$dateTableContainer.append(this._$dateTable);\n\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._$dateTableContainer.append(this._$allDayContainer);\n\n      this._$dateTableScrollableContent.append(this._$groupTable, this._$timePanel, this._$dateTableContainer);\n\n      this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n\n      this._$headerTablesContainer.append(this._$headerPanel);\n    } else {\n      var _this$_$allDayPanel;\n\n      this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\n\n      this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n\n      this._$headerTablesContainer.append(this._$headerPanel, this._$allDayPanel);\n\n      null === (_this$_$allDayPanel = this._$allDayPanel) || void 0 === _this$_$allDayPanel ? void 0 : _this$_$allDayPanel.append(this._$allDayContainer, this._$allDayTable);\n    }\n\n    this._appendHeaderPanelEmptyCellIfNecessary();\n\n    this._$headerPanelContainer.append(this._$headerTablesContainer);\n\n    this.$element().append(this._$fixedContainer, this._$headerPanelContainer, this._dateTableScrollable.$element());\n  }\n\n  _createWorkSpaceScrollableElements() {\n    this.$element().append(this._$fixedContainer);\n    this._$flexContainer = $(\"<div>\").addClass(\"dx-scheduler-work-space-flex-container\");\n\n    this._createHeaderScrollable();\n\n    this._headerScrollable.$content().append(this._$headerPanel);\n\n    this._appendHeaderPanelEmptyCellIfNecessary();\n\n    this._$headerPanelContainer.append(this._$headerTablesContainer);\n\n    this.$element().append(this._$headerPanelContainer);\n    this.$element().append(this._$flexContainer);\n\n    this._createSidebarScrollable();\n\n    this._$flexContainer.append(this._dateTableScrollable.$element());\n\n    this._$dateTableContainer.append(this._$dateTable);\n\n    this._$dateTableScrollableContent.append(this._$dateTableContainer);\n\n    this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._$dateTableContainer.append(this._$allDayContainer);\n\n      this._$sidebarScrollableContent.append(this._$groupTable, this._$timePanel);\n    } else {\n      var _this$_$allDayPanel2;\n\n      this._headerScrollable.$content().append(this._$allDayPanel);\n\n      null === (_this$_$allDayPanel2 = this._$allDayPanel) || void 0 === _this$_$allDayPanel2 ? void 0 : _this$_$allDayPanel2.append(this._$allDayContainer, this._$allDayTable);\n\n      this._$sidebarScrollableContent.append(this._$timePanel);\n    }\n\n    this._sidebarScrollable.$content().append(this._$sidebarScrollableContent);\n  }\n\n  _appendHeaderPanelEmptyCellIfNecessary() {\n    this._isRenderHeaderPanelEmptyCell() && this._$headerPanelContainer.append(this._$headerPanelEmptyCell);\n  }\n\n  _createHeaderScrollable() {\n    var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this._$headerTablesContainer);\n    this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig());\n  }\n\n  _createSidebarScrollable() {\n    var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this._$flexContainer);\n    this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\n      useKeyboard: false,\n      showScrollbar: \"never\",\n      direction: \"vertical\",\n      useNative: false,\n      updateManually: true,\n      bounceEnabled: false,\n      onScroll: e => {\n        this._sideBarSemaphore.take(e.scrollOffset);\n\n        if (this._dataTableSemaphore.isFree(e.scrollOffset)) {\n          this._dateTableScrollable.scrollTo({\n            top: e.scrollOffset.top\n          });\n        }\n\n        this._sideBarSemaphore.release();\n      }\n    });\n  }\n\n  _attachTableClasses() {\n    this._addTableClass(this._$dateTable, DATE_TABLE_CLASS);\n\n    if (this._isVerticalGroupedWorkSpace()) {\n      var groupCount = this._getGroupCount();\n\n      for (var i = 0; i < groupCount; i++) {\n        this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS);\n      }\n    } else if (!this.isRenovatedRender()) {\n      this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS);\n    }\n  }\n\n  _attachHeaderTableClasses() {\n    this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS);\n  }\n\n  _addTableClass($el, className) {\n    $el && !$el.hasClass(className) && $el.addClass(className);\n  }\n\n  _initMarkup() {\n    this.cache.clear();\n\n    this._initWorkSpaceUnits();\n\n    this._initVirtualScrolling();\n\n    this._initDateTableScrollable();\n\n    this._createWorkSpaceElements();\n\n    super._initMarkup();\n\n    if (!this.option(\"crossScrollingEnabled\")) {\n      this._attachTableClasses();\n\n      this._attachHeaderTableClasses();\n    }\n\n    this._toggleGroupedClass();\n\n    this._renderView();\n\n    this._attachEvents();\n  }\n\n  _render() {\n    super._render();\n\n    this._renderDateTimeIndication();\n\n    this._setIndicationUpdateInterval();\n  }\n\n  _toggleGroupedClass() {\n    this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0);\n  }\n\n  _renderView() {\n    if (this.isRenovatedRender()) {\n      if (this._isVerticalGroupedWorkSpace()) {\n        this.renderRGroupPanel();\n      }\n    } else {\n      this._applyCellTemplates(this._renderGroupHeader());\n    }\n\n    this.renderWorkSpace();\n\n    this._updateGroupTableHeight();\n\n    this.updateHeaderEmptyCellWidth();\n    this._shader = new VerticalShader(this);\n  }\n\n  updateCellsSelection() {\n    var renderOptions = this.generateRenderOptions();\n    this.viewDataProvider.updateViewData(renderOptions);\n    this.renderRWorkSpace({\n      timePanel: true,\n      dateTable: true,\n      allDayPanel: true\n    });\n  }\n\n  _renderDateTimeIndication() {\n    return noop();\n  }\n\n  _setIndicationUpdateInterval() {\n    return noop();\n  }\n\n  _refreshDateTimeIndication() {\n    return noop();\n  }\n\n  _detachGroupCountClass() {\n    [...VERTICAL_GROUP_COUNT_CLASSES].forEach(className => {\n      this.$element().removeClass(className);\n    });\n  }\n\n  _attachGroupCountClass() {\n    var className = this._groupedStrategy.getGroupCountClass(this.option(\"groups\"));\n\n    this.$element().addClass(className);\n  }\n\n  _getDateHeaderTemplate() {\n    return this.option(\"dateCellTemplate\");\n  }\n\n  _toggleAllDayVisibility(isUpdateScrollable) {\n    var showAllDayPanel = this._isShowAllDayPanel();\n\n    this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\n\n    this._changeAllDayVisibility();\n\n    isUpdateScrollable && this._updateScrollable();\n  }\n\n  _changeAllDayVisibility() {\n    this.cache.clear();\n    this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel());\n  }\n\n  _getDateTables() {\n    return this._$dateTable.add(this._$allDayTable);\n  }\n\n  _getDateTable() {\n    return this._$dateTable;\n  }\n\n  _removeAllDayElements() {\n    this._$allDayTable && this._$allDayTable.remove();\n    this._$allDayTitle && this._$allDayTitle.remove();\n  }\n\n  _cleanView() {\n    var _this$_shader;\n\n    this.cache.clear();\n\n    this._cleanTableWidths();\n\n    this.cellsSelectionState.clearSelectedAndFocusedCells();\n\n    if (!this.isRenovatedRender()) {\n      var _this$_$allDayTable, _this$_$sidebarTable;\n\n      this._$thead.empty();\n\n      this._$dateTable.empty();\n\n      this._$timePanel.empty();\n\n      this._$groupTable.empty();\n\n      null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\n      null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty();\n    }\n\n    null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\n    delete this._interval;\n  }\n\n  _clean() {\n    eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n\n    this._disposeRenovatedComponents();\n\n    super._clean();\n  }\n\n  _cleanTableWidths() {\n    this._$headerPanel.css(\"width\", \"\");\n\n    this._$dateTable.css(\"width\", \"\");\n\n    this._$allDayTable && this._$allDayTable.css(\"width\", \"\");\n  }\n\n  _disposeRenovatedComponents() {\n    var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\n\n    null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\n    this.renovatedAllDayPanel = void 0;\n    null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\n    this.renovatedDateTable = void 0;\n    null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\n    this.renovatedTimePanel = void 0;\n    null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\n    this.renovatedGroupPanel = void 0;\n    null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\n    this.renovatedHeaderPanel = void 0;\n  }\n\n  getGroupedStrategy() {\n    return this._groupedStrategy;\n  }\n\n  getFixedContainer() {\n    return this._$fixedContainer;\n  }\n\n  getAllDayContainer() {\n    return this._$allDayContainer;\n  }\n\n  updateRender() {\n    this.renderer.updateRender();\n  }\n\n  updateGrid() {\n    this.renderer._renderGrid();\n  }\n\n  updateAppointments() {\n    var _this$dragBehavior2;\n\n    this.option(\"onRenderAppointments\")();\n    null === (_this$dragBehavior2 = this.dragBehavior) || void 0 === _this$dragBehavior2 ? void 0 : _this$dragBehavior2.updateDragSource();\n  }\n\n  _createAllDayPanelElements() {\n    var groupCount = this._getGroupCount();\n\n    if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\n      for (var i = 0; i < groupCount; i++) {\n        var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\n\n        this._allDayTitles.push($allDayTitle);\n\n        this._$allDayTable = $(\"<table>\");\n\n        this._allDayTables.push(this._$allDayTable);\n\n        this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n\n        this._allDayPanels.push(this._$allDayPanel);\n      }\n    } else {\n      this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\n      this._$allDayTable = $(\"<table>\");\n      this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n    }\n  }\n\n  renderWorkSpace() {\n    var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n    this.cache.clear();\n    this.viewDataProvider.update(this.generateRenderOptions(), isGenerateNewViewData);\n\n    if (this.isRenovatedRender()) {\n      this.renderRWorkSpace();\n      this.virtualScrollingDispatcher.updateDimensions();\n    } else {\n      this._renderDateHeader();\n\n      this._renderTimePanel();\n\n      this._renderGroupAllDayPanel();\n\n      this._renderDateTable();\n\n      this._renderAllDayPanel();\n    }\n\n    this._initPositionHelper();\n  }\n\n  _renderGroupHeader() {\n    var $container = this._getGroupHeaderContainer();\n\n    var groupCount = this._getGroupCount();\n\n    var cellTemplates = [];\n\n    if (groupCount) {\n      var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\n\n      this._attachGroupCountClass();\n\n      $container.append(groupRows.elements);\n      cellTemplates = groupRows.cellTemplates;\n    } else {\n      this._detachGroupCountClass();\n    }\n\n    return cellTemplates;\n  }\n\n  _applyCellTemplates(templates) {\n    null === templates || void 0 === templates ? void 0 : templates.forEach(function (template) {\n      template();\n    });\n  }\n\n  _makeGroupRows(groups, groupByDate) {\n    var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n    return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n      groupHeaderRowClass: GROUP_ROW_CLASS,\n      groupRowClass: GROUP_ROW_CLASS,\n      groupHeaderClass: this._getGroupHeaderClass.bind(this),\n      groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\n    }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate);\n  }\n\n  _renderDateHeader() {\n    var container = this._getDateHeaderContainer();\n\n    var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\n\n    var count = this._getCellCount();\n\n    var cellTemplate = this._getDateHeaderTemplate();\n\n    var repeatCount = this._getCalculateHeaderCellRepeatCount();\n\n    var templateCallbacks = [];\n    var groupByDate = this.isGroupedByDate();\n\n    if (!groupByDate) {\n      for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\n        for (var columnIndex = 0; columnIndex < count; columnIndex++) {\n          var templateIndex = rowIndex * count + columnIndex;\n\n          this._renderDateHeaderTemplate($headerRow, columnIndex, templateIndex, cellTemplate, templateCallbacks);\n        }\n      }\n\n      container.append($headerRow);\n    } else {\n      var colSpan = groupByDate ? this._getGroupCount() : 1;\n\n      for (var _columnIndex = 0; _columnIndex < count; _columnIndex++) {\n        var _templateIndex = _columnIndex * repeatCount;\n\n        var cellElement = this._renderDateHeaderTemplate($headerRow, _columnIndex, _templateIndex, cellTemplate, templateCallbacks);\n\n        cellElement.attr(\"colSpan\", colSpan);\n      }\n\n      container.prepend($headerRow);\n    }\n\n    this._applyCellTemplates(templateCallbacks);\n\n    return $headerRow;\n  }\n\n  _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\n    var validTemplateIndex = this.isGroupedByDate() ? Math.floor(templateIndex / this._getGroupCount()) : templateIndex;\n    var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\n    var {\n      text: text,\n      startDate: date\n    } = completeDateHeaderMap[completeDateHeaderMap.length - 1][validTemplateIndex];\n    var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\n\n    if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\n      templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\n        model: _extends({\n          text: text,\n          date: date\n        }, this._getGroupsForDateHeaderTemplate(templateIndex)),\n        index: templateIndex,\n        container: getPublicElement($cell)\n      }));\n    } else {\n      $cell.text(text);\n    }\n\n    container.append($cell);\n    return $cell;\n  }\n\n  _getGroupsForDateHeaderTemplate(templateIndex) {\n    var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n    var groupIndex;\n    var groups;\n\n    if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\n      groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\n      var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\n      groups = getGroupsObjectFromGroupsArray(groupsArray);\n    }\n\n    return {\n      groups: groups,\n      groupIndex: groupIndex\n    };\n  }\n\n  _getHeaderPanelCellClass(i) {\n    var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate());\n  }\n\n  _renderAllDayPanel(index) {\n    var cellCount = this._getCellCount();\n\n    if (!this._isVerticalGroupedWorkSpace()) {\n      cellCount *= this._getGroupCount() || 1;\n    }\n\n    var cellTemplates = this._renderTableBody({\n      container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\n      rowCount: 1,\n      cellCount: cellCount,\n      cellClass: this._getAllDayPanelCellClass.bind(this),\n      rowClass: ALL_DAY_TABLE_ROW_CLASS,\n      cellTemplate: this.option(\"dataCellTemplate\"),\n      getCellData: this._oldRender_getAllDayCellData(index),\n      groupIndex: index\n    }, true);\n\n    this._toggleAllDayVisibility(true);\n\n    this._applyCellTemplates(cellTemplates);\n  }\n\n  _renderGroupAllDayPanel() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      var groupCount = this._getGroupCount();\n\n      for (var i = 0; i < groupCount; i++) {\n        this._renderAllDayPanel(i);\n      }\n    }\n  }\n\n  _getAllDayPanelCellClass(i, j) {\n    var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1);\n  }\n\n  _renderTimePanel() {\n    var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\n\n    var getData = (rowIndex, field) => {\n      var allDayPanelsCount = 0;\n\n      if (this.isAllDayPanelVisible) {\n        allDayPanelsCount = 1;\n      }\n\n      if (this.isGroupedAllDayPanel()) {\n        allDayPanelsCount = Math.ceil((rowIndex + 1) / this._getRowCount());\n      }\n\n      var validRowIndex = rowIndex + allDayPanelsCount;\n      return this.viewDataProvider.completeTimePanelMap[validRowIndex][field];\n    };\n\n    this._renderTableBody({\n      container: getPublicElement(this._$timePanel),\n      rowCount: this._getTimePanelRowCount() * repeatCount,\n      cellCount: 1,\n      cellClass: this._getTimeCellClass.bind(this),\n      rowClass: TIME_PANEL_ROW_CLASS,\n      cellTemplate: this.option(\"timeCellTemplate\"),\n      getCellText: rowIndex => getData(rowIndex, \"text\"),\n      getCellDate: rowIndex => getData(rowIndex, \"startDate\"),\n      groupCount: this._getGroupCount(),\n      allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\n      getTemplateData: (rowIndex => {\n        if (!this._isVerticalGroupedWorkSpace()) {\n          return {};\n        }\n\n        var groupIndex = this._getGroupIndex(rowIndex, 0);\n\n        var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\n        var groups = getGroupsObjectFromGroupsArray(groupsArray);\n        return {\n          groupIndex: groupIndex,\n          groups: groups\n        };\n      }).bind(this)\n    });\n  }\n\n  _getTimeCellClass(i) {\n    var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n    return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass;\n  }\n\n  _renderDateTable() {\n    var groupCount = this._getGroupCount();\n\n    this._renderTableBody({\n      container: getPublicElement(this._$dateTable),\n      rowCount: this._getTotalRowCount(groupCount),\n      cellCount: this._getTotalCellCount(groupCount),\n      cellClass: this._getDateTableCellClass.bind(this),\n      rowClass: DATE_TABLE_ROW_CLASS,\n      cellTemplate: this.option(\"dataCellTemplate\"),\n      getCellData: (_, rowIndex, columnIndex) => {\n        var isGroupedAllDayPanel = this.isGroupedAllDayPanel();\n        var validRowIndex = rowIndex;\n\n        if (isGroupedAllDayPanel) {\n          var rowCount = this._getRowCount();\n\n          var allDayPanelsCount = Math.ceil(rowIndex / rowCount);\n          validRowIndex += allDayPanelsCount;\n        }\n\n        var cellData = this.viewDataProvider.viewDataMap.dateTableMap[validRowIndex][columnIndex].cellData;\n        return {\n          value: this._filterCellDataFields(cellData),\n          fullValue: cellData,\n          key: CELL_DATA\n        };\n      },\n      allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\n      groupCount: groupCount,\n      groupByDate: this.option(\"groupByDate\")\n    });\n  }\n\n  _insertAllDayRowsIntoDateTable() {\n    return this._groupedStrategy.insertAllDayRowsIntoDateTable();\n  }\n\n  _renderTableBody(options, delayCellTemplateRendering) {\n    var result = [];\n\n    if (!delayCellTemplateRendering) {\n      this._applyCellTemplates(tableCreator.makeTable(options));\n    } else {\n      result = tableCreator.makeTable(options);\n    }\n\n    return result;\n  }\n\n}\n\nvar createDragBehaviorConfig = (container, isDefaultDraggingMode, dragBehavior, enableDefaultDragging, disableDefaultDragging, getDroppableCell, getDateTables, removeDroppableCellClass, getCellWidth, options) => {\n  var state = {\n    dragElement: void 0,\n    itemData: void 0\n  };\n\n  var isItemDisabled = () => {\n    var {\n      itemData: itemData\n    } = state;\n\n    if (itemData) {\n      var getter = compileGetter(\"disabled\");\n      return getter(itemData);\n    }\n\n    return true;\n  };\n\n  var cursorOffset = options.isSetCursorOffset ? () => {\n    var $dragElement = $(state.dragElement);\n    return {\n      x: getWidth($dragElement) / 2,\n      y: getHeight($dragElement) / 2\n    };\n  } : void 0;\n  return {\n    container: container,\n    dragTemplate: () => state.dragElement,\n    onDragStart: e => {\n      if (!isDefaultDraggingMode) {\n        disableDefaultDragging();\n      }\n\n      var canceled = e.cancel;\n      var event = e.event;\n      var $itemElement = $(e.itemElement);\n      var appointments = e.component._appointments;\n      state.itemData = options.getItemData(e.itemElement, appointments);\n      var settings = options.getItemSettings($itemElement, e);\n      var initialPosition = options.initialPosition;\n\n      if (!isItemDisabled()) {\n        event.data = event.data || {};\n\n        if (!canceled) {\n          if (!settings.isCompact) {\n            dragBehavior.updateDragSource(state.itemData, settings);\n          }\n\n          state.dragElement = ((itemData, settings, appointments) => {\n            var appointmentIndex = appointments.option(\"items\").length;\n            settings.isCompact = false;\n            settings.virtual = false;\n\n            var items = appointments._renderItem(appointmentIndex, {\n              itemData: itemData,\n              settings: [settings]\n            });\n\n            return items[0];\n          })(state.itemData, settings, appointments);\n\n          event.data.itemElement = state.dragElement;\n          event.data.initialPosition = null !== initialPosition && void 0 !== initialPosition ? initialPosition : locate($(state.dragElement));\n          event.data.itemData = state.itemData;\n          event.data.itemSettings = settings;\n          dragBehavior.onDragStart(event.data);\n          resetPosition($(state.dragElement));\n        }\n      }\n    },\n    onDragMove: () => {\n      if (isDefaultDraggingMode) {\n        return;\n      }\n\n      var appointmentWidth = getWidth(state.dragElement);\n      var cellWidth = getCellWidth();\n      var isWideAppointment = appointmentWidth > cellWidth;\n      var dragElementContainer = $(state.dragElement).parent();\n      var boundingRect = getBoundingRect(dragElementContainer.get(0));\n      var newX = boundingRect.left + 10;\n      var newY = boundingRect.top + 10;\n      var elements = isWideAppointment ? domAdapter.elementsFromPoint(newX, newY) : domAdapter.elementsFromPoint(newX + appointmentWidth / 2, newY);\n      var dateTables = getDateTables();\n      var droppableCell = elements.find(el => {\n        var classList = el.classList;\n        var isCurrentSchedulerElement = 1 === dateTables.find(el).length;\n        return isCurrentSchedulerElement && (classList.contains(DATE_TABLE_CELL_CLASS) || classList.contains(ALL_DAY_TABLE_CELL_CLASS));\n      });\n\n      if (droppableCell) {\n        var oldDroppableCell = getDroppableCell();\n\n        if (!oldDroppableCell.is(droppableCell)) {\n          removeDroppableCellClass();\n        }\n\n        $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n      }\n    },\n    onDragEnd: e => {\n      var _state$dragElement;\n\n      if (!isDefaultDraggingMode) {\n        enableDefaultDragging();\n      }\n\n      if (!isItemDisabled()) {\n        dragBehavior.onDragEnd(e);\n      }\n\n      null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\n      removeDroppableCellClass();\n    },\n    cursorOffset: cursorOffset,\n    filter: options.filter\n  };\n};\n\nexport default SchedulerWorkSpace;","map":{"version":3,"names":["_extends","setWidth","getOuterHeight","getOuterWidth","setOuterHeight","getHeight","getWidth","$","domAdapter","eventsEngine","dateUtils","getWindow","hasWindow","getPublicElement","extend","getBoundingRect","messageLocalization","noop","isDefined","addNamespace","isMouseEvent","pointerEvents","errors","name","clickEventName","contextMenuEventName","enter","dragEventEnter","leave","dragEventLeave","drop","dragEventDrop","Scrollable","HorizontalGroupedStrategy","VerticalGroupedStrategy","tableCreatorModule","tableCreator","VerticalShader","AppointmentDragBehavior","APPOINTMENT_SETTINGS_KEY","FIXED_CONTAINER_CLASS","VIRTUAL_CELL_CLASS","TIME_PANEL_CLASS","DATE_TABLE_CLASS","DATE_TABLE_ROW_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CONTENT_CLASS","VERTICAL_GROUP_COUNT_CLASSES","WidgetObserver","resetPosition","locate","VirtualScrollingDispatcher","VirtualScrollingRenderer","ViewDataProvider","dxrDateTableLayout","dxrAllDayPanelTable","dxrAllDayPanelTitle","dxrTimePanelTableLayout","dxrGroupPanel","dxrDateHeader","CellsSelectionState","Cache","CellsSelectionController","calculateViewStartDate","getViewStartByOptions","validateDayHours","getStartViewDateTimeOffset","isDateAndTimeView","calculateIsGroupedAllDayPanel","getCellDuration","createResourcesTree","getCellGroups","getGroupsObjectFromGroupsArray","getGroupCount","ScrollSemaphore","getCellWidth","getCellHeight","getAllDayHeight","getMaxAllowedPosition","PositionHelper","utils","compileGetter","abstract","toMs","dateToMilliseconds","COMPONENT_CLASS","GROUPED_WORKSPACE_CLASS","VERTICAL_GROUPED_WORKSPACE_CLASS","WORKSPACE_VERTICAL_GROUP_TABLE_CLASS","WORKSPACE_WITH_BOTH_SCROLLS_CLASS","WORKSPACE_WITH_COUNT_CLASS","WORKSPACE_WITH_GROUP_BY_DATE_CLASS","WORKSPACE_WITH_ODD_CELLS_CLASS","TIME_PANEL_CELL_CLASS","TIME_PANEL_ROW_CLASS","ALL_DAY_PANEL_CLASS","ALL_DAY_TABLE_CLASS","ALL_DAY_CONTAINER_CLASS","ALL_DAY_TITLE_CLASS","ALL_DAY_TABLE_CELL_CLASS","ALL_DAY_TABLE_ROW_CLASS","WORKSPACE_WITH_ALL_DAY_CLASS","WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS","WORKSPACE_WITH_MOUSE_SELECTION_CLASS","HORIZONTAL_SIZES_CLASS","VERTICAL_SIZES_CLASS","HEADER_PANEL_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_ROW_CLASS","GROUP_HEADER_CLASS","DATE_TABLE_CELL_CLASS","DATE_TABLE_FOCUSED_CELL_CLASS","VIRTUAL_ROW_CLASS","DATE_TABLE_DROPPABLE_CELL_CLASS","SCHEDULER_HEADER_SCROLLABLE_CLASS","SCHEDULER_SIDEBAR_SCROLLABLE_CLASS","SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS","SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME","down","DragEventNames","ENTER","DROP","LEAVE","SCHEDULER_CELL_DXCLICK_EVENT_NAME","SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME","SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME","up","SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME","move","CELL_DATA","DATE_TABLE_MIN_CELL_WIDTH","DAY_MS","HOUR_MS","DRAG_AND_DROP_SELECTOR","concat","CELL_SELECTOR","SchedulerWorkSpace","viewDataProvider","_viewDataProvider","type","cache","_cache","cellsSelectionState","_cellsSelectionState","selectedCellsOption","option","length","validSelectedCells","map","selectedCell","groups","_getGroupCount","groupIndex","_getGroupIndexByResourceId","setSelectedCellsByData","cellsSelectionController","_cellsSelectionController","isAllDayPanelVisible","_isShowAllDayPanel","supportAllDayRow","verticalGroupTableClass","viewDirection","renovatedHeaderPanelComponent","timeZoneCalculator","isDefaultDraggingMode","_supportedKeys","clickHandler","e","preventDefault","stopPropagation","selectedCells","getSelectedCells","selectedCellsElement","cellData","_getCellByData","filter","cell","target","_showPopup","_cellClickAction","event","cellElement","onArrowPressed","key","_this$cellsSelectionS","focusedCellData","focusedCell","isAllDayPanelCell","allDay","_isVerticalGroupedWorkSpace","isMultiSelection","shiftKey","isMultiSelectionAllowed","isRTL","_isRTL","groupCount","isGroupedByDate","isHorizontalGrouping","_isHorizontalGroupedWorkSpace","focusedCellPosition","findCellPositionInMap","isAllDay","edgeIndices","getGroupEdgeIndices","getViewEdgeIndices","nextCellData","handleArrowClick","viewType","getCellDataByPosition","getCellData","bind","_processNextSelectedCell","space","downArrow","upArrow","rightArrow","leftArrow","_moveToCell","$cell","currentCellData","_getFullCellData","nextFocusedCellData","moveToCell","isVirtualCell","hasClass","nextCellPosition","startDate","index","isSameCell","_dom_getAllDayPanelCell","columnIndex","_dom_getDateCell","isNextCellAllDay","_setSelectedCellsStateAndUpdateSelection","_dateTableScrollable","scrollToElement","cellPosition","$nextFocusedCell","nextCellCoordinates","rowIndex","setFocusedCell","setSelectedCells","updateCellsSelection","_updateSelectedCellDataOption","_hasAllDayClass","_focusInHandler","is","_focusTarget","_isCellClick","_contextMenuHandled","apply","arguments","restoreSelectedAndFocusedCells","cellCoordinates","_focusOutHandler","_disposed","releaseSelectedAndFocusedCells","updateViewData","generateRenderOptions","$element","_isWorkSpaceWithCount","_isWorkspaceWithOddCells","isVirtualScrolling","_getRealGroupOrientation","createRAllDayPanelElements","_$allDayPanel","addClass","_$allDayTitle","appendTo","_$headerPanelEmptyCell","_dateTableScrollableConfig","config","useKeyboard","bounceEnabled","updateManually","onScroll","_this$_groupedStrateg","_groupedStrategy","clear","_needCreateCrossScrolling","_createCrossScrollingConfig","virtualScrollingDispatcher","horizontalScrollingAllowed","height","currentOnScroll","handleOnScrollEvent","scrollOffset","currentConfig","direction","_dataTableSemaphore","take","_sideBarSemaphore","isFree","_this$_sidebarScrolla","_sidebarScrollable","scrollTo","top","_headerSemaphore","_this$_headerScrollab","_headerScrollable","left","release","onEnd","_headerScrollableConfig","showScrollbar","useNative","_visibilityChanged","visible","_updateGroupTableHeight","_setTableSizes","_attachTableClasses","cellWidth","getCellMinWidth","minWidth","getWorkSpaceMinWidth","totalCellCount","_getTotalCellCount","width","_$headerPanel","_$dateTable","_$allDayTable","_attachHeaderTableClasses","_updateScrollable","_dimensionChanged","_isVisible","updateHeaderEmptyCellWidth","_getElementClass","_getRowCount","getRowCount","intervalCount","currentDate","hoursInterval","startDayHour","endDayHour","_getCellCount","getCellCount","isRenovatedRender","renovatedRenderSupported","_isVirtualModeOn","_initVirtualScrolling","dispose","_getVirtualScrollingDispatcherOptions","attachScrollableEvents","renderer","onDataSourceChanged","isGroupedAllDayPanel","isProvideVirtualCellsWidth","_this$_getToday","groupOrientation","_getDefaultGroupStrategy","options","groupByDate","startRowIndex","startCellIndex","today","_getToday","call","headerCellTextFormat","_getFormat","getDateForHeaderText","_","date","cellDuration","firstDayOfWeek","getRenderState","_setHorizontalGroupHeaderCellsHeight","_isRenderHeaderPanelEmptyCell","timePanelWidth","getTimePanelWidth","groupPanelWidth","getGroupTableWidth","css","_isGroupsSpecified","resources","id","resourceTree","_getGroupIndexRecursively","currentKey","currentValue","reduce","prevIndex","_ref","leafIndex","value","children","areValuesEqual","_getViewStartByOptions","_getIntervalDuration","_calculateViewStartDate","getIntervalDuration","_getHeaderDate","getStartViewDate","_firstDayOfWeek","getFirstDayOfWeek","_attachEvents","_createSelectionChangedAction","_attachClickEvent","_attachContextMenuEvent","that","pointerDownAction","_createAction","_pointerDownHandler","_createCellClickAction","cellSelector","off","on","which","_createActionByOption","afterExecute","_cellClickHandler","args","_selectionChangedAction","_handleSelectedCellsClick","$target","_getCoordinatesByCell","isAllDayCell","firstCellData","lastCellData","result","endDate","_createContextMenuAction","eventName","NAME","_contextMenuHandler","_contextMenuAction","_getGroupHeaderContainer","_$groupTable","_$thead","_getDateHeaderContainer","_getCalculateHeaderCellRepeatCount","calculateHeaderCellRepeatCount","_this$_headerScrollab2","_this$_sidebarScrolla2","update","_getTimePanelRowCount","_getCellCountInDay","getCellCountInDay","getTotalCellCount","_getTotalRowCount","includeAllDayPanelRows","getTotalRowCount","_getGroupIndex","getGroupIndex","calculateEndDate","viewDataGenerator","getInterval","_attachTablesEvents","element","_attachDragEvents","_attachPointerEvents","_detachDragEvents","checkDropTarget","_isOutsideScrollable","preventDefaultDragging","removeDroppableCellClass","_this$dragBehavior","_this$dragBehavior$dr","dragBehavior","dragBetweenComponentsPromise","removeDroppableClasses","then","isPointerDown","getDocument","removeClass","getWorkArea","_$dateTableContainer","getScrollable","getScrollableScrollTop","scrollTop","getGroupedScrollableScrollTop","getScrollableScrollLeft","scrollLeft","getScrollableOuterWidth","scrollWidth","getScrollableContainer","container","getHeaderPanelHeight","_$timePanel","get","getWorkSpaceLeftOffset","getLeftOffset","_getCellCoordinatesByIndex","Math","floor","_getDateGenerationOptions","_this$viewDataProvide","isWorkView","interval","startViewDate","_getIntervalBetween","firstViewDate","startDayTime","timeZoneOffset","getTimezonesDifference","fullInterval","getTime","days","_getDaysOfInterval","weekendsCount","_getWeekendsCount","hiddenInterval","visibleDayDuration","getVisibleDayDuration","_updateIndex","_getDroppableCell","_getDateTables","find","_getWorkSpaceWidth","totalWidth","groupTableWidth","_getCellByCoordinates","inAllDayRow","indexes","prepareCellIndexes","position","eq","_getCells","cellClass","i","cells","toArray","_getAllCells","_getGroupHeaderCells","_getScrollCoordinates","hours","minutes","Date","setHours","findGlobalCellPosition","calculateCoordinatesByDataAndPosition","$dateTableScrollableElement","scrollableSize","window","isTargetInAllDayPanel","closest","isOutsideHorizontalScrollable","pageX","scrollX","isOutsideVerticalScrollable","pageY","scrollY","setCellDataCache","JSON","stringify","set","setCellDataCacheAlias","appointment","geometry","aliasKey","keepOriginalHours","_filterCellDataFields","currentCell","_getDataByCell","_getVirtualRowOffset","virtualRowOffset","_getVirtualCellOffset","virtualCellOffset","parent","topVirtualRowsCount","leftVirtualCellsCount","getCellIndexByDate","timeInterval","startViewDateOffset","dateTimeStamp","getDroppableCellIndex","$droppableCell","$row","getDataByDroppableCell","getDateRange","getEndViewDateByEndDayHour","getRoundedCellWidth","startIndex","cellCount","$cells","elementWidth","getDOMElementsMetaData","getAllDayOffset","getCellIndexByCoordinates","coordinates","cellHeight","topIndex","leftIndex","getEndViewDate","getLastCellEndDate","getLastViewDateByEndDayHour","getGroupBounds","groupedDataMap","getGroupBoundsOffset","startOffset","right","needRecalculateResizableArea","getCellDataByCoordinates","cellIndex","getVisibleBounds","$scrollable","scrolledCellCount","bottom","updateScrollPosition","newDate","createDate","path","needUpdateScrollPosition","_getCellsInViewport","time","trimmedTime","trimTime","currentResult","cellStartDate","cellEndDate","cellGroupIndex","cellStartTime","cellEndTime","totalColumnCount","scrollableScrollTop","scrollableScrollLeft","fullScrolledRowCount","scrolledRowCount","fullScrolledColumnCount","scrolledColumnCount","rowCount","columnCount","each","push","scrollToTime","_isValidScrollDate","scrollable","scrollBy","throwWarning","isScrollToAllDay","getHours","getMinutes","offset","scrollableHeight","scrollableWidth","xShift","yShift","setTimeout","min","max","log","needApplyCollectorOffset","$cellElement","isVerticalGrouping","_getTimePanelCells","_getRDateTableProps","viewData","dataCellTemplate","addDateTableClass","addVerticalSizesClassToRows","selectedCellData","correctedSelectedCellData","_ref2","dateTableCellsMeta","_getDateTableDOMElementsInfo","allDayPanelCellsMeta","_getAllDayPanelDOMElementsInfo","dateTableCells","dateTable","_getDateTable","dateTableRect","columnsCount","getColumnsCount","_addCellMetaData","allDayCells","allDayAppointmentContainer","allDayPanelRect","cellMetaDataArray","parentRect","cellRect","_oldRender_getAllDayCellData","validColumnIndex","getDateByCellIndices","validGroupIndex","data","groupsArray","renderRWorkSpace","componentsToRender","components","header","timePanel","allDayPanel","renderRHeaderPanel","renderRTimeTable","renderRDateTable","renderRAllDayPanel","renovation","renderComponent","renderRGroupPanel","resourceCellTemplate","className","groupPanelData","getGroupPanelData","_attachGroupCountClass","_detachGroupCountClass","_this$virtualScrollin","_toggleAllDayVisibility","horizontalVirtualScrolling","timePanelData","timeCellTemplate","isRenderDateHeader","dateHeaderData","dateCellTemplate","initDragBehavior","scheduler","_createDragBehavior","getAllDayContainer","getItemData","itemElement","appointments","_getItemData","getItemSettings","$itemElement","_createDragBehaviorBase","addTo","createDragBehaviorConfig","_dispose","_getDefaultOptions","activeStateEnabled","hoverStateEnabled","showAllDayPanel","allDayExpanded","onCellClick","crossScrollingEnabled","allowMultipleCellSelection","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","scrolling","mode","allDayPanelMode","renovateRender","draggingMode","onScrollEnd","getHeaderHeight","onRenderAppointments","onShowAllDayPanel","onSelectedCellsClick","schedulerHeight","schedulerWidth","_optionChanged","_cleanWorkSpace","_cleanView","_removeAllDayElements","_initGrouping","repaint","_initGroupedStrategy","_createAllDayPanelElements","_toggleGroupByDateClass","renderWorkSpace","_changeAllDayVisibility","_toggleWorkSpaceCountClass","_toggleHorizontalScrollClass","updateShowAllDayPanel","updateAppointments","updateDimensions","isHiddenAllDayPanel","getSchedulerHeight","getSchedulerWidth","getViewHeight","getViewWidth","getWindowHeight","innerHeight","getWindowWidth","innerWidth","getScrolling","createAction","updateRender","updateGrid","_toggleGroupedClass","_toggleWorkSpaceWithOddCells","_renderView","_init","_activeStateUnit","_initPositionHelper","positionHelper","viewStartDayHour","viewEndDayHour","groupedStrategy","rtlEnabled","getDOMMetaDataCallback","_toggleGroupingDirectionClass","isVerticalOrientation","orientation","Strategy","toggleClass","_getDateTableCellClass","addAdditionalGroupCellClasses","_getGroupHeaderClass","_initWorkSpaceUnits","_$headerPanelContainer","_$headerTablesContainer","_$fixedContainer","_$allDayContainer","_$dateTableScrollableContent","_$sidebarScrollableContent","_initAllDayPanelElements","_allDayTitles","_allDayTables","_allDayPanels","_initDateTableScrollable","$dateTableScrollable","_createComponent","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_createWorkSpaceStaticElements","append","$content","_this$_$allDayPanel","_appendHeaderPanelEmptyCellIfNecessary","_$flexContainer","_createHeaderScrollable","_createSidebarScrollable","_this$_$allDayPanel2","$headerScrollable","$timePanelScrollable","_addTableClass","$el","_initMarkup","_render","_renderDateTimeIndication","_setIndicationUpdateInterval","_applyCellTemplates","_renderGroupHeader","_shader","renderOptions","_refreshDateTimeIndication","forEach","getGroupCountClass","_getDateHeaderTemplate","isUpdateScrollable","add","remove","_this$_shader","_cleanTableWidths","clearSelectedAndFocusedCells","_this$_$allDayTable","_this$_$sidebarTable","empty","_$sidebarTable","clean","_interval","_clean","_disposeRenovatedComponents","_this$renovatedAllDay","_this$renovatedDateTa","_this$renovatedTimePa","_this$renovatedGroupP","_this$renovatedHeader","renovatedAllDayPanel","renovatedDateTable","renovatedTimePanel","renovatedGroupPanel","renovatedHeaderPanel","getGroupedStrategy","getFixedContainer","_renderGrid","_this$dragBehavior2","updateDragSource","$allDayTitle","text","format","isGenerateNewViewData","_renderDateHeader","_renderTimePanel","_renderGroupAllDayPanel","_renderDateTable","_renderAllDayPanel","$container","cellTemplates","groupRows","_makeGroupRows","elements","templates","template","tableCreatorStrategy","VERTICAL","HORIZONTAL","makeGroupedTable","groupHeaderRowClass","groupRowClass","groupHeaderClass","groupHeaderContentClass","$headerRow","count","cellTemplate","repeatCount","templateCallbacks","templateIndex","_renderDateHeaderTemplate","colSpan","_columnIndex","_templateIndex","attr","prepend","panelCellIndex","validTemplateIndex","completeDateHeaderMap","_getHeaderPanelCellClass","render","model","_getGroupsForDateHeaderTemplate","indexMultiplier","_renderTableBody","_getAllDayPanelCellClass","rowClass","j","calculateTimeCellRepeatCount","getData","field","allDayPanelsCount","ceil","validRowIndex","completeTimePanelMap","_getTimeCellClass","getCellText","getCellDate","allDayElements","_insertAllDayRowsIntoDateTable","getTemplateData","viewDataMap","dateTableMap","fullValue","insertAllDayRowsIntoDateTable","delayCellTemplateRendering","makeTable","enableDefaultDragging","disableDefaultDragging","getDroppableCell","getDateTables","state","dragElement","itemData","isItemDisabled","getter","cursorOffset","isSetCursorOffset","$dragElement","x","y","dragTemplate","onDragStart","canceled","cancel","component","_appointments","settings","initialPosition","isCompact","appointmentIndex","virtual","items","_renderItem","itemSettings","onDragMove","appointmentWidth","isWideAppointment","dragElementContainer","boundingRect","newX","newY","elementsFromPoint","dateTables","droppableCell","el","classList","isCurrentSchedulerElement","contains","oldDroppableCell","onDragEnd","_state$dragElement"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    setWidth,\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    setOuterHeight,\r\n    getHeight,\r\n    getWidth\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport messageLocalization from \"../../../localization/message\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    addNamespace,\r\n    isMouseEvent\r\n} from \"../../../events/utils/index\";\r\nimport pointerEvents from \"../../../events/pointer\";\r\nimport errors from \"../../widget/ui.errors\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../events/click\";\r\nimport {\r\n    name as contextMenuEventName\r\n} from \"../../../events/contextmenu\";\r\nimport {\r\n    enter as dragEventEnter,\r\n    leave as dragEventLeave,\r\n    drop as dragEventDrop\r\n} from \"../../../events/drag\";\r\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\r\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\r\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\r\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\r\nimport {\r\n    APPOINTMENT_SETTINGS_KEY\r\n} from \"../constants\";\r\nimport {\r\n    FIXED_CONTAINER_CLASS,\r\n    VIRTUAL_CELL_CLASS,\r\n    TIME_PANEL_CLASS,\r\n    DATE_TABLE_CLASS,\r\n    DATE_TABLE_ROW_CLASS,\r\n    GROUP_ROW_CLASS,\r\n    GROUP_HEADER_CONTENT_CLASS,\r\n    VERTICAL_GROUP_COUNT_CLASSES\r\n} from \"../classes\";\r\nimport WidgetObserver from \"../base/widgetObserver\";\r\nimport {\r\n    resetPosition,\r\n    locate\r\n} from \"../../../animation/translator\";\r\nimport {\r\n    VirtualScrollingDispatcher,\r\n    VirtualScrollingRenderer\r\n} from \"./ui.scheduler.virtual_scrolling\";\r\nimport ViewDataProvider from \"./view_model/view_data_provider\";\r\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\r\nimport dxrAllDayPanelTable from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/table.j\";\r\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\r\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\r\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\r\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\r\nimport CellsSelectionState from \"./cells_selection_state\";\r\nimport {\r\n    Cache\r\n} from \"./cache\";\r\nimport {\r\n    CellsSelectionController\r\n} from \"./cells_selection_controller\";\r\nimport {\r\n    calculateViewStartDate,\r\n    getViewStartByOptions,\r\n    validateDayHours,\r\n    getStartViewDateTimeOffset,\r\n    isDateAndTimeView,\r\n    calculateIsGroupedAllDayPanel,\r\n    getCellDuration\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    createResourcesTree,\r\n    getCellGroups,\r\n    getGroupsObjectFromGroupsArray,\r\n    getGroupCount\r\n} from \"../resources/utils\";\r\nimport {\r\n    ScrollSemaphore\r\n} from \"../../../renovation/ui/scheduler/utils/semaphore/scrollSemaphore\";\r\nimport {\r\n    getCellWidth,\r\n    getCellHeight,\r\n    getAllDayHeight,\r\n    getMaxAllowedPosition,\r\n    PositionHelper\r\n} from \"./helpers/positionHelper\";\r\nimport {\r\n    utils\r\n} from \"../utils\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../core/utils/data\";\r\nvar abstract = WidgetObserver.abstract;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\r\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\r\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\r\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\r\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\r\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\r\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\r\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\r\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\r\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\r\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\r\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\r\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\r\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\r\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\r\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\r\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\r\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\r\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\r\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\r\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\r\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\r\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\r\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\r\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\r\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\r\nvar DragEventNames = {\r\n    ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\r\n    DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\r\n    LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\r\n};\r\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\r\nvar CELL_DATA = \"dxCellData\";\r\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\r\nvar DAY_MS = toMs(\"day\");\r\nvar HOUR_MS = toMs(\"hour\");\r\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\r\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\r\nclass SchedulerWorkSpace extends WidgetObserver {\r\n    get viewDataProvider() {\r\n        if (!this._viewDataProvider) {\r\n            this._viewDataProvider = new ViewDataProvider(this.type)\r\n        }\r\n        return this._viewDataProvider\r\n    }\r\n    get cache() {\r\n        if (!this._cache) {\r\n            this._cache = new Cache\r\n        }\r\n        return this._cache\r\n    }\r\n    get cellsSelectionState() {\r\n        if (!this._cellsSelectionState) {\r\n            this._cellsSelectionState = new CellsSelectionState(this.viewDataProvider);\r\n            var selectedCellsOption = this.option(\"selectedCellData\");\r\n            if ((null === selectedCellsOption || void 0 === selectedCellsOption ? void 0 : selectedCellsOption.length) > 0) {\r\n                var validSelectedCells = selectedCellsOption.map(selectedCell => {\r\n                    var groups = selectedCell.groups;\r\n                    if (!groups || 0 === this._getGroupCount()) {\r\n                        return _extends({}, selectedCell, {\r\n                            groupIndex: 0\r\n                        })\r\n                    }\r\n                    var groupIndex = this._getGroupIndexByResourceId(groups);\r\n                    return _extends({}, selectedCell, {\r\n                        groupIndex: groupIndex\r\n                    })\r\n                });\r\n                this._cellsSelectionState.setSelectedCellsByData(validSelectedCells)\r\n            }\r\n        }\r\n        return this._cellsSelectionState\r\n    }\r\n    get cellsSelectionController() {\r\n        if (!this._cellsSelectionController) {\r\n            this._cellsSelectionController = new CellsSelectionController\r\n        }\r\n        return this._cellsSelectionController\r\n    }\r\n    get isAllDayPanelVisible() {\r\n        return this._isShowAllDayPanel() && this.supportAllDayRow()\r\n    }\r\n    get verticalGroupTableClass() {\r\n        return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"vertical\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrDateHeader\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.option(\"timeZoneCalculator\")\r\n    }\r\n    get isDefaultDraggingMode() {\r\n        return \"default\" === this.option(\"draggingMode\")\r\n    }\r\n    _supportedKeys() {\r\n        var clickHandler = function(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var selectedCells = this.cellsSelectionState.getSelectedCells();\r\n            if (null !== selectedCells && void 0 !== selectedCells && selectedCells.length) {\r\n                var selectedCellsElement = selectedCells.map(cellData => this._getCellByData(cellData)).filter(cell => !!cell);\r\n                e.target = selectedCellsElement;\r\n                this._showPopup = true;\r\n                this._cellClickAction({\r\n                    event: e,\r\n                    cellElement: $(selectedCellsElement),\r\n                    cellData: selectedCells[0]\r\n                })\r\n            }\r\n        };\r\n        var onArrowPressed = (e, key) => {\r\n            var _this$cellsSelectionS;\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var focusedCellData = null === (_this$cellsSelectionS = this.cellsSelectionState.focusedCell) || void 0 === _this$cellsSelectionS ? void 0 : _this$cellsSelectionS.cellData;\r\n            if (focusedCellData) {\r\n                var isAllDayPanelCell = focusedCellData.allDay && !this._isVerticalGroupedWorkSpace();\r\n                var isMultiSelection = e.shiftKey;\r\n                var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\r\n                var isRTL = this._isRTL();\r\n                var groupCount = this._getGroupCount();\r\n                var isGroupedByDate = this.isGroupedByDate();\r\n                var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\r\n                var focusedCellPosition = this.viewDataProvider.findCellPositionInMap(_extends({}, focusedCellData, {\r\n                    isAllDay: focusedCellData.allDay\r\n                }));\r\n                var edgeIndices = isHorizontalGrouping && isMultiSelection && !isGroupedByDate ? this.viewDataProvider.getGroupEdgeIndices(focusedCellData.groupIndex, isAllDayPanelCell) : this.viewDataProvider.getViewEdgeIndices(isAllDayPanelCell);\r\n                var nextCellData = this.cellsSelectionController.handleArrowClick({\r\n                    focusedCellPosition: focusedCellPosition,\r\n                    edgeIndices: edgeIndices,\r\n                    isRTL: isRTL,\r\n                    isGroupedByDate: isGroupedByDate,\r\n                    groupCount: groupCount,\r\n                    isMultiSelection: isMultiSelection,\r\n                    isMultiSelectionAllowed: isMultiSelectionAllowed,\r\n                    viewType: this.type,\r\n                    key: key,\r\n                    getCellDataByPosition: this.viewDataProvider.getCellData.bind(this.viewDataProvider),\r\n                    isAllDayPanelCell: isAllDayPanelCell,\r\n                    focusedCellData: focusedCellData\r\n                });\r\n                this._processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection && isMultiSelectionAllowed)\r\n            }\r\n        };\r\n        return extend(super._supportedKeys(), {\r\n            enter: clickHandler,\r\n            space: clickHandler,\r\n            downArrow: e => {\r\n                onArrowPressed(e, \"down\")\r\n            },\r\n            upArrow: e => {\r\n                onArrowPressed(e, \"up\")\r\n            },\r\n            rightArrow: e => {\r\n                onArrowPressed(e, \"right\")\r\n            },\r\n            leftArrow: e => {\r\n                onArrowPressed(e, \"left\")\r\n            }\r\n        })\r\n    }\r\n    _isRTL() {\r\n        return this.option(\"rtlEnabled\")\r\n    }\r\n    _moveToCell($cell, isMultiSelection) {\r\n        if (!isDefined($cell) || !$cell.length) {\r\n            return\r\n        }\r\n        var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\r\n        var currentCellData = this._getFullCellData($cell);\r\n        var focusedCellData = this.cellsSelectionState.focusedCell.cellData;\r\n        var nextFocusedCellData = this.cellsSelectionController.moveToCell({\r\n            isMultiSelection: isMultiSelection,\r\n            isMultiSelectionAllowed: isMultiSelectionAllowed,\r\n            currentCellData: currentCellData,\r\n            focusedCellData: focusedCellData,\r\n            isVirtualCell: $cell.hasClass(VIRTUAL_CELL_CLASS)\r\n        });\r\n        this._processNextSelectedCell(nextFocusedCellData, focusedCellData, isMultiSelectionAllowed && isMultiSelection)\r\n    }\r\n    _processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection) {\r\n        var nextCellPosition = this.viewDataProvider.findCellPositionInMap({\r\n            startDate: nextCellData.startDate,\r\n            groupIndex: nextCellData.groupIndex,\r\n            isAllDay: nextCellData.allDay,\r\n            index: nextCellData.index\r\n        });\r\n        if (!this.viewDataProvider.isSameCell(focusedCellData, nextCellData)) {\r\n            var $cell = nextCellData.allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(nextCellPosition.columnIndex) : this._dom_getDateCell(nextCellPosition);\r\n            var isNextCellAllDay = nextCellData.allDay;\r\n            this._setSelectedCellsStateAndUpdateSelection(isNextCellAllDay, nextCellPosition, isMultiSelection, $cell);\r\n            this._dateTableScrollable.scrollToElement($cell)\r\n        }\r\n    }\r\n    _setSelectedCellsStateAndUpdateSelection(isAllDay, cellPosition, isMultiSelection, $nextFocusedCell) {\r\n        var nextCellCoordinates = {\r\n            rowIndex: cellPosition.rowIndex,\r\n            columnIndex: cellPosition.columnIndex,\r\n            allDay: isAllDay\r\n        };\r\n        this.cellsSelectionState.setFocusedCell(nextCellCoordinates.rowIndex, nextCellCoordinates.columnIndex, isAllDay);\r\n        if (isMultiSelection) {\r\n            this.cellsSelectionState.setSelectedCells(nextCellCoordinates)\r\n        } else {\r\n            this.cellsSelectionState.setSelectedCells(nextCellCoordinates, nextCellCoordinates)\r\n        }\r\n        this.updateCellsSelection();\r\n        this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells(), $nextFocusedCell)\r\n    }\r\n    _hasAllDayClass($cell) {\r\n        return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS)\r\n    }\r\n    _focusInHandler(e) {\r\n        if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\r\n            delete this._isCellClick;\r\n            delete this._contextMenuHandled;\r\n            super._focusInHandler.apply(this, arguments);\r\n            this.cellsSelectionState.restoreSelectedAndFocusedCells();\r\n            if (!this.cellsSelectionState.focusedCell) {\r\n                var cellCoordinates = {\r\n                    columnIndex: 0,\r\n                    rowIndex: 0,\r\n                    allDay: this._isVerticalGroupedWorkSpace() && this.isAllDayPanelVisible\r\n                };\r\n                this.cellsSelectionState.setFocusedCell(cellCoordinates.rowIndex, cellCoordinates.columnIndex, cellCoordinates.allDay);\r\n                this.cellsSelectionState.setSelectedCells(cellCoordinates, cellCoordinates)\r\n            }\r\n            this.updateCellsSelection();\r\n            this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells())\r\n        }\r\n    }\r\n    _focusOutHandler() {\r\n        super._focusOutHandler.apply(this, arguments);\r\n        if (!this._contextMenuHandled && !this._disposed) {\r\n            this.cellsSelectionState.releaseSelectedAndFocusedCells();\r\n            this.viewDataProvider.updateViewData(this.generateRenderOptions());\r\n            this.updateCellsSelection()\r\n        }\r\n    }\r\n    _focusTarget() {\r\n        return this.$element()\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\")\r\n    }\r\n    _isHorizontalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\")\r\n    }\r\n    _isWorkSpaceWithCount() {\r\n        return this.option(\"intervalCount\") > 1\r\n    }\r\n    _isWorkspaceWithOddCells() {\r\n        return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling()\r\n    }\r\n    _getRealGroupOrientation() {\r\n        return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\"\r\n    }\r\n    createRAllDayPanelElements() {\r\n        this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS);\r\n        this._$allDayTitle = $(\"<div>\").appendTo(this._$headerPanelEmptyCell)\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            bounceEnabled: false,\r\n            updateManually: true,\r\n            onScroll: () => {\r\n                var _this$_groupedStrateg;\r\n                null === (_this$_groupedStrateg = this._groupedStrategy.cache) || void 0 === _this$_groupedStrateg ? void 0 : _this$_groupedStrateg.clear()\r\n            }\r\n        };\r\n        if (this._needCreateCrossScrolling()) {\r\n            config = extend(config, this._createCrossScrollingConfig(config))\r\n        }\r\n        if (this.isVirtualScrolling() && (this.virtualScrollingDispatcher.horizontalScrollingAllowed || this.virtualScrollingDispatcher.height)) {\r\n            var currentOnScroll = config.onScroll;\r\n            config = _extends({}, config, {\r\n                onScroll: e => {\r\n                    null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll(e);\r\n                    this.virtualScrollingDispatcher.handleOnScrollEvent(null === e || void 0 === e ? void 0 : e.scrollOffset)\r\n                }\r\n            })\r\n        }\r\n        return config\r\n    }\r\n    _createCrossScrollingConfig(currentConfig) {\r\n        var config = {};\r\n        config.direction = \"both\";\r\n        var currentOnScroll = currentConfig.onScroll;\r\n        config.onScroll = e => {\r\n            currentOnScroll();\r\n            this._dataTableSemaphore.take(e.scrollOffset);\r\n            if (this._sideBarSemaphore.isFree(e.scrollOffset)) {\r\n                var _this$_sidebarScrolla;\r\n                null === (_this$_sidebarScrolla = this._sidebarScrollable) || void 0 === _this$_sidebarScrolla ? void 0 : _this$_sidebarScrolla.scrollTo({\r\n                    top: e.scrollOffset.top\r\n                })\r\n            }\r\n            if (this._headerSemaphore.isFree(e.scrollOffset)) {\r\n                var _this$_headerScrollab;\r\n                null === (_this$_headerScrollab = this._headerScrollable) || void 0 === _this$_headerScrollab ? void 0 : _this$_headerScrollab.scrollTo({\r\n                    left: e.scrollOffset.left\r\n                })\r\n            }\r\n            this._dataTableSemaphore.release()\r\n        };\r\n        config.onEnd = () => {\r\n            this.option(\"onScrollEnd\")()\r\n        };\r\n        return config\r\n    }\r\n    _headerScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            showScrollbar: \"never\",\r\n            direction: \"horizontal\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: e => {\r\n                this._headerSemaphore.take(e.scrollOffset);\r\n                this._dataTableSemaphore.isFree(e.scrollOffset) && this._dateTableScrollable.scrollTo({\r\n                    left: e.scrollOffset.left\r\n                });\r\n                this._headerSemaphore.release()\r\n            }\r\n        };\r\n        return config\r\n    }\r\n    _visibilityChanged(visible) {\r\n        this.cache.clear();\r\n        if (visible) {\r\n            this._updateGroupTableHeight()\r\n        }\r\n        if (visible && this._needCreateCrossScrolling()) {\r\n            this._setTableSizes()\r\n        }\r\n    }\r\n    _setTableSizes() {\r\n        this.cache.clear();\r\n        this._attachTableClasses();\r\n        var cellWidth = this.getCellWidth();\r\n        if (cellWidth < this.getCellMinWidth()) {\r\n            cellWidth = this.getCellMinWidth()\r\n        }\r\n        var minWidth = this.getWorkSpaceMinWidth();\r\n        var groupCount = this._getGroupCount();\r\n        var totalCellCount = this._getTotalCellCount(groupCount);\r\n        var width = cellWidth * totalCellCount;\r\n        if (width < minWidth) {\r\n            width = minWidth\r\n        }\r\n        setWidth(this._$headerPanel, width);\r\n        setWidth(this._$dateTable, width);\r\n        if (this._$allDayTable) {\r\n            setWidth(this._$allDayTable, width)\r\n        }\r\n        this._attachHeaderTableClasses();\r\n        this._updateGroupTableHeight();\r\n        this._updateScrollable()\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        return this._groupedStrategy.getWorkSpaceMinWidth()\r\n    }\r\n    _dimensionChanged() {\r\n        if (!this._isVisible()) {\r\n            return\r\n        }\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._setTableSizes()\r\n        }\r\n        this.updateHeaderEmptyCellWidth();\r\n        this._updateScrollable();\r\n        this.cache.clear()\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return this.option(\"crossScrollingEnabled\")\r\n    }\r\n    _getElementClass() {\r\n        return noop()\r\n    }\r\n    _getRowCount() {\r\n        return this.viewDataProvider.getRowCount({\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            viewType: this.type,\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\")\r\n        })\r\n    }\r\n    _getCellCount() {\r\n        return this.viewDataProvider.getCellCount({\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            viewType: this.type,\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\")\r\n        })\r\n    }\r\n    isRenovatedRender() {\r\n        return this.renovatedRenderSupported() && this.option(\"renovateRender\")\r\n    }\r\n    _isVirtualModeOn() {\r\n        return \"virtual\" === this.option(\"scrolling.mode\")\r\n    }\r\n    isVirtualScrolling() {\r\n        return this.isRenovatedRender() && this._isVirtualModeOn()\r\n    }\r\n    _initVirtualScrolling() {\r\n        if (this.virtualScrollingDispatcher) {\r\n            this.virtualScrollingDispatcher.dispose();\r\n            this.virtualScrollingDispatcher = null\r\n        }\r\n        this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this._getVirtualScrollingDispatcherOptions());\r\n        this.virtualScrollingDispatcher.attachScrollableEvents();\r\n        this.renderer = new VirtualScrollingRenderer(this)\r\n    }\r\n    onDataSourceChanged() {}\r\n    isGroupedAllDayPanel() {\r\n        return calculateIsGroupedAllDayPanel(this.option(\"groups\"), this.option(\"groupOrientation\"), this.isAllDayPanelVisible)\r\n    }\r\n    generateRenderOptions(isProvideVirtualCellsWidth) {\r\n        var _this$_getToday;\r\n        var groupCount = this._getGroupCount();\r\n        var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        var options = _extends({\r\n            groupByDate: this.option(\"groupByDate\"),\r\n            startRowIndex: 0,\r\n            startCellIndex: 0,\r\n            groupOrientation: groupOrientation,\r\n            today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\r\n            groups: this.option(\"groups\"),\r\n            isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\r\n            isAllDayPanelVisible: this.isAllDayPanelVisible,\r\n            selectedCells: this.cellsSelectionState.getSelectedCells(),\r\n            focusedCell: this.cellsSelectionState.focusedCell,\r\n            headerCellTextFormat: this._getFormat(),\r\n            getDateForHeaderText: (_, date) => date,\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\"),\r\n            cellDuration: this.getCellDuration(),\r\n            viewType: this.type,\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            startDate: this.option(\"startDate\"),\r\n            firstDayOfWeek: this.option(\"firstDayOfWeek\")\r\n        }, this.virtualScrollingDispatcher.getRenderState());\r\n        return options\r\n    }\r\n    renovatedRenderSupported() {\r\n        return true\r\n    }\r\n    _updateGroupTableHeight() {\r\n        if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\r\n            this._setHorizontalGroupHeaderCellsHeight()\r\n        }\r\n    }\r\n    updateHeaderEmptyCellWidth() {\r\n        if (hasWindow() && this._isRenderHeaderPanelEmptyCell()) {\r\n            var timePanelWidth = this.getTimePanelWidth();\r\n            var groupPanelWidth = this.getGroupTableWidth();\r\n            this._$headerPanelEmptyCell.css(\"width\", timePanelWidth + groupPanelWidth)\r\n        }\r\n    }\r\n    _isGroupsSpecified(resources) {\r\n        return this.option(\"groups\").length && resources\r\n    }\r\n    _getGroupIndexByResourceId(id) {\r\n        var groups = this.option(\"groups\");\r\n        var resourceTree = createResourcesTree(groups);\r\n        if (!resourceTree.length) {\r\n            return 0\r\n        }\r\n        return this._getGroupIndexRecursively(resourceTree, id)\r\n    }\r\n    _getGroupIndexRecursively(resourceTree, id) {\r\n        var currentKey = resourceTree[0].name;\r\n        var currentValue = id[currentKey];\r\n        return resourceTree.reduce((prevIndex, _ref) => {\r\n            var {\r\n                leafIndex: leafIndex,\r\n                value: value,\r\n                children: children\r\n            } = _ref;\r\n            var areValuesEqual = currentValue === value;\r\n            if (areValuesEqual && void 0 !== leafIndex) {\r\n                return leafIndex\r\n            }\r\n            if (areValuesEqual) {\r\n                return this._getGroupIndexRecursively(children, id)\r\n            }\r\n            return prevIndex\r\n        }, 0)\r\n    }\r\n    _getViewStartByOptions() {\r\n        return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this._getIntervalDuration(), this.option(\"startDate\") ? this._calculateViewStartDate() : void 0)\r\n    }\r\n    _getIntervalDuration() {\r\n        return this.viewDataProvider.getIntervalDuration(this.option(\"intervalCount\"))\r\n    }\r\n    _getHeaderDate() {\r\n        return this.getStartViewDate()\r\n    }\r\n    _calculateViewStartDate() {\r\n        return calculateViewStartDate(this.option(\"startDate\"))\r\n    }\r\n    _firstDayOfWeek() {\r\n        return this.viewDataProvider.getFirstDayOfWeek(this.option(\"firstDayOfWeek\"))\r\n    }\r\n    _attachEvents() {\r\n        this._createSelectionChangedAction();\r\n        this._attachClickEvent();\r\n        this._attachContextMenuEvent()\r\n    }\r\n    _attachClickEvent() {\r\n        var that = this;\r\n        var pointerDownAction = this._createAction((function(e) {\r\n            that._pointerDownHandler(e.event)\r\n        }));\r\n        this._createCellClickAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\r\n        eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, (function(e) {\r\n            if (isMouseEvent(e) && e.which > 1) {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        }));\r\n        eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, (function(e) {\r\n            var $cell = $(e.target);\r\n            that._cellClickAction({\r\n                event: e,\r\n                cellElement: getPublicElement($cell),\r\n                cellData: that.getCellData($cell)\r\n            })\r\n        }))\r\n    }\r\n    _createCellClickAction() {\r\n        this._cellClickAction = this._createActionByOption(\"onCellClick\", {\r\n            afterExecute: e => this._cellClickHandler(e.args[0].event)\r\n        })\r\n    }\r\n    _createSelectionChangedAction() {\r\n        this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\")\r\n    }\r\n    _cellClickHandler() {\r\n        if (this._showPopup) {\r\n            delete this._showPopup;\r\n            this._handleSelectedCellsClick()\r\n        }\r\n    }\r\n    _pointerDownHandler(e) {\r\n        var $target = $(e.target);\r\n        if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\r\n            this._isCellClick = false;\r\n            return\r\n        }\r\n        this._isCellClick = true;\r\n        if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\r\n            this._showPopup = true\r\n        } else {\r\n            var cellCoordinates = this._getCoordinatesByCell($target);\r\n            var isAllDayCell = this._hasAllDayClass($target);\r\n            this._setSelectedCellsStateAndUpdateSelection(isAllDayCell, cellCoordinates, false, $target)\r\n        }\r\n    }\r\n    _handleSelectedCellsClick() {\r\n        var selectedCells = this.cellsSelectionState.getSelectedCells();\r\n        var firstCellData = selectedCells[0];\r\n        var lastCellData = selectedCells[selectedCells.length - 1];\r\n        var result = {\r\n            startDate: firstCellData.startDate,\r\n            endDate: lastCellData.endDate\r\n        };\r\n        if (void 0 !== lastCellData.allDay) {\r\n            result.allDay = lastCellData.allDay\r\n        }\r\n        this.option(\"onSelectedCellsClick\")(result, lastCellData.groups)\r\n    }\r\n    _attachContextMenuEvent() {\r\n        this._createContextMenuAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        var eventName = addNamespace(contextMenuEventName, this.NAME);\r\n        eventsEngine.off($element, eventName, cellSelector);\r\n        eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this))\r\n    }\r\n    _contextMenuHandler(e) {\r\n        var $cell = $(e.target);\r\n        this._contextMenuAction({\r\n            event: e,\r\n            cellElement: getPublicElement($cell),\r\n            cellData: this.getCellData($cell)\r\n        });\r\n        this._contextMenuHandled = true\r\n    }\r\n    _createContextMenuAction() {\r\n        this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\")\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$groupTable\r\n        }\r\n        return this._$thead\r\n    }\r\n    _getDateHeaderContainer() {\r\n        return this._$thead\r\n    }\r\n    _getCalculateHeaderCellRepeatCount() {\r\n        return this._groupedStrategy.calculateHeaderCellRepeatCount()\r\n    }\r\n    _updateScrollable() {\r\n        var _this$_headerScrollab2, _this$_sidebarScrolla2;\r\n        this._dateTableScrollable.update();\r\n        null === (_this$_headerScrollab2 = this._headerScrollable) || void 0 === _this$_headerScrollab2 ? void 0 : _this$_headerScrollab2.update();\r\n        null === (_this$_sidebarScrolla2 = this._sidebarScrollable) || void 0 === _this$_sidebarScrolla2 ? void 0 : _this$_sidebarScrolla2.update()\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this._getCellCountInDay()\r\n    }\r\n    _getCellCountInDay() {\r\n        var hoursInterval = this.option(\"hoursInterval\");\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        return this.viewDataProvider.getCellCountInDay(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    _getTotalCellCount(groupCount) {\r\n        return this._groupedStrategy.getTotalCellCount(groupCount)\r\n    }\r\n    _getTotalRowCount(groupCount, includeAllDayPanelRows) {\r\n        var result = this._groupedStrategy.getTotalRowCount(groupCount);\r\n        if (includeAllDayPanelRows && this.isAllDayPanelVisible) {\r\n            result += groupCount\r\n        }\r\n        return result\r\n    }\r\n    _getGroupIndex(rowIndex, columnIndex) {\r\n        return this._groupedStrategy.getGroupIndex(rowIndex, columnIndex)\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\r\n        return viewDataGenerator.calculateEndDate(startDate, viewDataGenerator.getInterval(this.option(\"hoursInterval\")), this.option(\"endDayHour\"))\r\n    }\r\n    _getGroupCount() {\r\n        return getGroupCount(this.option(\"groups\"))\r\n    }\r\n    _attachTablesEvents() {\r\n        var element = this.$element();\r\n        this._attachDragEvents(element);\r\n        this._attachPointerEvents(element)\r\n    }\r\n    _detachDragEvents(element) {\r\n        eventsEngine.off(element, DragEventNames.ENTER);\r\n        eventsEngine.off(element, DragEventNames.LEAVE);\r\n        eventsEngine.off(element, DragEventNames.DROP)\r\n    }\r\n    _attachDragEvents(element) {\r\n        this._detachDragEvents(element);\r\n        eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\r\n            checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\r\n        }, e => {\r\n            if (!this.preventDefaultDragging) {\r\n                this.removeDroppableCellClass();\r\n                $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n            }\r\n        });\r\n        eventsEngine.on(element, DragEventNames.LEAVE, () => {\r\n            if (!this.preventDefaultDragging) {\r\n                this.removeDroppableCellClass()\r\n            }\r\n        });\r\n        eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => {\r\n            var _this$dragBehavior, _this$dragBehavior$dr;\r\n            if (!(null !== (_this$dragBehavior = this.dragBehavior) && void 0 !== _this$dragBehavior && _this$dragBehavior.dragBetweenComponentsPromise)) {\r\n                this.dragBehavior.removeDroppableClasses();\r\n                return\r\n            }\r\n            null === (_this$dragBehavior$dr = this.dragBehavior.dragBetweenComponentsPromise) || void 0 === _this$dragBehavior$dr ? void 0 : _this$dragBehavior$dr.then(() => {\r\n                this.dragBehavior.removeDroppableClasses()\r\n            })\r\n        })\r\n    }\r\n    _attachPointerEvents(element) {\r\n        var isPointerDown = false;\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isMouseEvent(e) && 1 === e.which) {\r\n                isPointerDown = true;\r\n                this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\r\n                eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n                eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\r\n                    isPointerDown = false;\r\n                    this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS)\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._moveToCell($(e.target), true)\r\n            }\r\n        })\r\n    }\r\n    _getFormat() {\r\n        return abstract()\r\n    }\r\n    getWorkArea() {\r\n        return this._$dateTableContainer\r\n    }\r\n    getScrollable() {\r\n        return this._dateTableScrollable\r\n    }\r\n    getScrollableScrollTop() {\r\n        return this._dateTableScrollable.scrollTop()\r\n    }\r\n    getGroupedScrollableScrollTop(allDay) {\r\n        return this._groupedStrategy.getScrollableScrollTop(allDay)\r\n    }\r\n    getScrollableScrollLeft() {\r\n        return this._dateTableScrollable.scrollLeft()\r\n    }\r\n    getScrollableOuterWidth() {\r\n        return this._dateTableScrollable.scrollWidth()\r\n    }\r\n    getScrollableContainer() {\r\n        return $(this._dateTableScrollable.container())\r\n    }\r\n    getHeaderPanelHeight() {\r\n        return this._$headerPanel && getOuterHeight(this._$headerPanel, true)\r\n    }\r\n    getTimePanelWidth() {\r\n        return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$groupTable ? getOuterWidth(this._$groupTable) : 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return this._groupedStrategy.getLeftOffset()\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        var columnIndex = Math.floor(index / this._getRowCount());\r\n        var rowIndex = index - this._getRowCount() * columnIndex;\r\n        return {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    }\r\n    _getDateGenerationOptions() {\r\n        var _this$viewDataProvide;\r\n        return {\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\"),\r\n            isWorkView: this.viewDataProvider.viewDataGenerator.isWorkView,\r\n            interval: null === (_this$viewDataProvide = this.viewDataProvider.viewDataGenerator) || void 0 === _this$viewDataProvide ? void 0 : _this$viewDataProvide.getInterval(this.option(\"hoursInterval\")),\r\n            startViewDate: this.getStartViewDate(),\r\n            firstDayOfWeek: this._firstDayOfWeek()\r\n        }\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\r\n        var days = this._getDaysOfInterval(fullInterval, startDayTime);\r\n        var weekendsCount = this._getWeekendsCount(days);\r\n        var result = (days - weekendsCount) * DAY_MS;\r\n        if (!allDay) {\r\n            var hiddenInterval = this.viewDataProvider.hiddenInterval;\r\n            var visibleDayDuration = this.getVisibleDayDuration();\r\n            result = fullInterval - days * hiddenInterval - weekendsCount * visibleDayDuration\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    _getDaysOfInterval(fullInterval, startDayTime) {\r\n        return Math.floor((fullInterval + startDayTime) / DAY_MS)\r\n    }\r\n    _updateIndex(index) {\r\n        return index * this._getRowCount()\r\n    }\r\n    _getDroppableCell() {\r\n        return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return this.cache.get(\"workspaceWidth\", () => {\r\n            if (this._needCreateCrossScrolling()) {\r\n                return getBoundingRect(this._$dateTable.get(0)).width\r\n            }\r\n            var totalWidth = getBoundingRect(this.$element().get(0)).width;\r\n            var timePanelWidth = this.getTimePanelWidth();\r\n            var groupTableWidth = this.getGroupTableWidth();\r\n            return totalWidth - timePanelWidth - groupTableWidth\r\n        })\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\r\n        return this._dom_getDateCell(indexes)\r\n    }\r\n    _dom_getDateCell(position) {\r\n        return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.columnIndex)\r\n    }\r\n    _dom_getAllDayPanelCell(columnIndex) {\r\n        return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(columnIndex)\r\n    }\r\n    _getCells(allDay, direction) {\r\n        var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        if (\"vertical\" === direction) {\r\n            var result = [];\r\n            for (var i = 1;; i++) {\r\n                var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\r\n                if (!cells.length) {\r\n                    break\r\n                }\r\n                result = result.concat(cells.toArray())\r\n            }\r\n            return $(result)\r\n        } else {\r\n            return this.$element().find(\".\" + cellClass)\r\n        }\r\n    }\r\n    _getAllCells(allDay) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"))\r\n        }\r\n        var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        return this.$element().find(\".\".concat(cellClass))\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        var height = getBoundingRect(this._$dateTable.get(0)).height;\r\n        setOuterHeight(this._$groupTable, height)\r\n    }\r\n    _getGroupHeaderCells() {\r\n        return this.$element().find(\".\" + GROUP_HEADER_CLASS)\r\n    }\r\n    _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\r\n        var currentDate = date || new Date(this.option(\"currentDate\"));\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        if (hours < startDayHour) {\r\n            hours = startDayHour\r\n        }\r\n        if (hours >= endDayHour) {\r\n            hours = endDayHour - 1\r\n        }\r\n        currentDate.setHours(hours, minutes, 0, 0);\r\n        var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\r\n        var {\r\n            position: position,\r\n            cellData: cellData\r\n        } = cell;\r\n        return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, isDateAndTimeView(this.type), \"vertical\" === this.viewDirection)\r\n    }\r\n    _isOutsideScrollable(target, event) {\r\n        var $dateTableScrollableElement = this._dateTableScrollable.$element();\r\n        var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\r\n        var window = getWindow();\r\n        var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\r\n        var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\r\n        var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\r\n        if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\r\n            return false\r\n        }\r\n        return isOutsideVerticalScrollable || isOutsideHorizontalScrollable\r\n    }\r\n    setCellDataCache(cellCoordinates, groupIndex, $cell) {\r\n        var key = JSON.stringify({\r\n            rowIndex: cellCoordinates.rowIndex,\r\n            columnIndex: cellCoordinates.columnIndex,\r\n            groupIndex: groupIndex\r\n        });\r\n        this.cache.set(key, this.getCellData($cell))\r\n    }\r\n    setCellDataCacheAlias(appointment, geometry) {\r\n        var key = JSON.stringify({\r\n            rowIndex: appointment.rowIndex,\r\n            columnIndex: appointment.columnIndex,\r\n            groupIndex: appointment.groupIndex\r\n        });\r\n        var aliasKey = JSON.stringify({\r\n            top: geometry.top,\r\n            left: geometry.left\r\n        });\r\n        this.cache.set(aliasKey, this.cache.get(key))\r\n    }\r\n    supportAllDayRow() {\r\n        return true\r\n    }\r\n    keepOriginalHours() {\r\n        return false\r\n    }\r\n    _filterCellDataFields(cellData) {\r\n        return extend(true, {}, {\r\n            startDate: cellData.startDate,\r\n            endDate: cellData.endDate,\r\n            groups: cellData.groups,\r\n            groupIndex: cellData.groupIndex,\r\n            allDay: cellData.allDay\r\n        })\r\n    }\r\n    getCellData($cell) {\r\n        var cellData = this._getFullCellData($cell) || {};\r\n        return this._filterCellDataFields(cellData)\r\n    }\r\n    _getFullCellData($cell) {\r\n        var currentCell = $cell[0];\r\n        if (currentCell) {\r\n            return this._getDataByCell($cell)\r\n        }\r\n        return\r\n    }\r\n    _getVirtualRowOffset() {\r\n        return this.virtualScrollingDispatcher.virtualRowOffset\r\n    }\r\n    _getVirtualCellOffset() {\r\n        return this.virtualScrollingDispatcher.virtualCellOffset\r\n    }\r\n    _getDataByCell($cell) {\r\n        var rowIndex = $cell.parent().index() - this.virtualScrollingDispatcher.topVirtualRowsCount;\r\n        var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\r\n        var {\r\n            viewDataProvider: viewDataProvider\r\n        } = this;\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\r\n        return cellData ? cellData : void 0\r\n    }\r\n    isGroupedByDate() {\r\n        return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0\r\n    }\r\n    getCellIndexByDate(date, inAllDayRow) {\r\n        var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\r\n        var timeInterval = inAllDayRow ? 864e5 : viewDataGenerator.getInterval(this.option(\"hoursInterval\"));\r\n        var startViewDateOffset = getStartViewDateTimeOffset(this.getStartViewDate(), this.option(\"startDayHour\"));\r\n        var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + startViewDateOffset;\r\n        var index = Math.floor(dateTimeStamp / timeInterval);\r\n        if (inAllDayRow) {\r\n            index = this._updateIndex(index)\r\n        }\r\n        if (index < 0) {\r\n            index = 0\r\n        }\r\n        return index\r\n    }\r\n    getDroppableCellIndex() {\r\n        var $droppableCell = this._getDroppableCell();\r\n        var $row = $droppableCell.parent();\r\n        var rowIndex = $row.index();\r\n        return rowIndex * $row.find(\"td\").length + $droppableCell.index()\r\n    }\r\n    getDataByDroppableCell() {\r\n        var cellData = this.getCellData($(this._getDroppableCell()));\r\n        var allDay = cellData.allDay;\r\n        var startDate = cellData.startDate;\r\n        var endDate = cellData.endDate;\r\n        return {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay,\r\n            groups: cellData.groups\r\n        }\r\n    }\r\n    getDateRange() {\r\n        return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()]\r\n    }\r\n    getCellMinWidth() {\r\n        return DATE_TABLE_MIN_CELL_WIDTH\r\n    }\r\n    getRoundedCellWidth(groupIndex, startIndex, cellCount) {\r\n        if (groupIndex < 0 || !hasWindow()) {\r\n            return 0\r\n        }\r\n        var $row = this.$element().find(\".\".concat(DATE_TABLE_ROW_CLASS)).eq(0);\r\n        var width = 0;\r\n        var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\r\n        var totalCellCount = this._getCellCount() * groupIndex;\r\n        cellCount = cellCount || this._getCellCount();\r\n        if (!isDefined(startIndex)) {\r\n            startIndex = totalCellCount\r\n        }\r\n        for (var i = startIndex; i < totalCellCount + cellCount; i++) {\r\n            var element = $($cells).eq(i).get(0);\r\n            var elementWidth = element ? getBoundingRect(element).width : 0;\r\n            width += elementWidth\r\n        }\r\n        return width / (totalCellCount + cellCount - startIndex)\r\n    }\r\n    getCellWidth() {\r\n        return getCellWidth(this.getDOMElementsMetaData())\r\n    }\r\n    getCellHeight() {\r\n        return getCellHeight(this.getDOMElementsMetaData())\r\n    }\r\n    getAllDayHeight() {\r\n        return getAllDayHeight(this.option(\"showAllDayPanel\"), this._isVerticalGroupedWorkSpace(), this.getDOMElementsMetaData())\r\n    }\r\n    getMaxAllowedPosition(groupIndex) {\r\n        return getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.option(\"rtlEnabled\"), this.getDOMElementsMetaData())\r\n    }\r\n    getAllDayOffset() {\r\n        return this._groupedStrategy.getAllDayOffset()\r\n    }\r\n    getCellIndexByCoordinates(coordinates, allDay) {\r\n        var cellCount = this._getTotalCellCount(this._getGroupCount());\r\n        var cellWidth = Math.floor(this._getWorkSpaceWidth() / cellCount);\r\n        var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\r\n        var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\r\n        var leftIndex = Math.floor((coordinates.left + 5) / cellWidth);\r\n        if (this._isRTL()) {\r\n            leftIndex = cellCount - leftIndex - 1\r\n        }\r\n        return cellCount * topIndex + leftIndex\r\n    }\r\n    getStartViewDate() {\r\n        return this.viewDataProvider.getStartViewDate()\r\n    }\r\n    getEndViewDate() {\r\n        return this.viewDataProvider.getLastCellEndDate()\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        return this.viewDataProvider.getLastViewDateByEndDayHour(this.option(\"endDayHour\"))\r\n    }\r\n    getCellDuration() {\r\n        return getCellDuration(this.type, this.option(\"startDayHour\"), this.option(\"endDayHour\"), this.option(\"hoursInterval\"))\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return allDay ? toMs(\"day\") : this.getCellDuration()\r\n    }\r\n    getVisibleDayDuration() {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        var hoursInterval = this.option(\"hoursInterval\");\r\n        return this.viewDataProvider.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    getGroupBounds(coordinates) {\r\n        var cellCount = this._getCellCount();\r\n        var $cells = this._getCells();\r\n        var cellWidth = this.getCellWidth();\r\n        var groupedDataMap = this.viewDataProvider.groupedDataMap;\r\n        var result = this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap);\r\n        if (this._isRTL()) {\r\n            var startOffset = result.left;\r\n            result.left = result.right - 2 * cellWidth;\r\n            result.right = startOffset + 2 * cellWidth\r\n        }\r\n        return result\r\n    }\r\n    needRecalculateResizableArea() {\r\n        return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop()\r\n    }\r\n    getCellDataByCoordinates(coordinates, allDay) {\r\n        var key = JSON.stringify({\r\n            top: coordinates.top,\r\n            left: coordinates.left\r\n        });\r\n        return this.cache.get(key, () => {\r\n            var $cells = this._getCells(allDay);\r\n            var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\r\n            var $cell = $cells.eq(cellIndex);\r\n            return this.getCellData($cell)\r\n        })\r\n    }\r\n    getVisibleBounds() {\r\n        var result = {};\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\r\n        var totalCellCount = scrolledCellCount + getHeight($scrollable) / cellHeight;\r\n        result.top = {\r\n            hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: scrolledCellCount % 2 ? 30 : 0\r\n        };\r\n        result.bottom = {\r\n            hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\r\n        };\r\n        return result\r\n    }\r\n    updateScrollPosition(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var newDate = this.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var inAllDayRow = allDay && this.isAllDayPanelVisible;\r\n        if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\r\n            this.scrollTo(newDate, groups, inAllDayRow, false)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(date, groups, inAllDayRow) {\r\n        var cells = this._getCellsInViewport(inAllDayRow);\r\n        var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var time = date.getTime();\r\n        var trimmedTime = dateUtils.trimTime(date).getTime();\r\n        return cells.reduce((currentResult, cell) => {\r\n            var {\r\n                startDate: cellStartDate,\r\n                endDate: cellEndDate,\r\n                groupIndex: cellGroupIndex\r\n            } = this.getCellData(cell);\r\n            var cellStartTime = cellStartDate.getTime();\r\n            var cellEndTime = cellEndDate.getTime();\r\n            if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\r\n                return false\r\n            }\r\n            return currentResult\r\n        }, true)\r\n    }\r\n    _getCellsInViewport(inAllDayRow) {\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var cellWidth = this.getCellWidth();\r\n        var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\r\n        var scrollableScrollTop = this.getScrollableScrollTop();\r\n        var scrollableScrollLeft = this.getScrollableScrollLeft();\r\n        var fullScrolledRowCount = scrollableScrollTop / cellHeight - this.virtualScrollingDispatcher.topVirtualRowsCount;\r\n        var scrolledRowCount = Math.floor(fullScrolledRowCount);\r\n        if (scrollableScrollTop % cellHeight !== 0) {\r\n            scrolledRowCount += 1\r\n        }\r\n        var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\r\n        var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\r\n        if (scrollableScrollLeft % cellWidth !== 0) {\r\n            scrolledColumnCount += 1\r\n        }\r\n        var rowCount = Math.floor(fullScrolledRowCount + getHeight($scrollable) / cellHeight);\r\n        var columnCount = Math.floor(fullScrolledColumnCount + getWidth($scrollable) / cellWidth);\r\n        var $cells = this._getAllCells(inAllDayRow);\r\n        var result = [];\r\n        $cells.each((function(index) {\r\n            var $cell = $(this);\r\n            var columnIndex = index % totalColumnCount;\r\n            var rowIndex = index / totalColumnCount;\r\n            if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\r\n                result.push($cell)\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        if (!this._isValidScrollDate(date)) {\r\n            return\r\n        }\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        scrollable.scrollBy({\r\n            top: coordinates.top - scrollable.scrollTop(),\r\n            left: 0\r\n        })\r\n    }\r\n    scrollTo(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\r\n        if (!this._isValidScrollDate(date, throwWarning)) {\r\n            return\r\n        }\r\n        var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\r\n        var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\r\n        var scrollable = this.getScrollable();\r\n        var $scrollable = scrollable.$element();\r\n        var cellWidth = this.getCellWidth();\r\n        var offset = this.option(\"rtlEnabled\") ? cellWidth : 0;\r\n        var scrollableHeight = getHeight($scrollable);\r\n        var scrollableWidth = getWidth($scrollable);\r\n        var cellHeight = this.getCellHeight();\r\n        var xShift = (scrollableWidth - cellWidth) / 2;\r\n        var yShift = (scrollableHeight - cellHeight) / 2;\r\n        var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\r\n        var top = coordinates.top - scrollable.scrollTop() - yShift;\r\n        if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\r\n            top = 0\r\n        }\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout(() => {\r\n                scrollable.scrollBy({\r\n                    left: left,\r\n                    top: top\r\n                })\r\n            })\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: left,\r\n                top: top\r\n            })\r\n        }\r\n    }\r\n    _isValidScrollDate(date) {\r\n        var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\r\n        var min = this.getStartViewDate();\r\n        var max = this.getEndViewDate();\r\n        if (date < min || date > max) {\r\n            throwWarning && errors.log(\"W1008\", date);\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    needApplyCollectorOffset() {\r\n        return false\r\n    }\r\n    removeDroppableCellClass($cellElement) {\r\n        ($cellElement || this._getDroppableCell()).removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getCoordinatesByCell($cell) {\r\n        var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\r\n        var rowIndex = $cell.parent().index();\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\r\n        if (!(isAllDayCell && !isVerticalGrouping)) {\r\n            rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        }\r\n    }\r\n    _isShowAllDayPanel() {\r\n        return this.option(\"showAllDayPanel\")\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS))\r\n    }\r\n    _getRDateTableProps() {\r\n        return {\r\n            viewData: this.viewDataProvider.viewData,\r\n            dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n            addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            addVerticalSizesClassToRows: false\r\n        }\r\n    }\r\n    _updateSelectedCellDataOption(selectedCellData) {\r\n        var correctedSelectedCellData = selectedCellData.map(_ref2 => {\r\n            var {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groupIndex: groupIndex,\r\n                groups: groups\r\n            } = _ref2;\r\n            return {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groupIndex: groupIndex,\r\n                groups: groups\r\n            }\r\n        });\r\n        this.option(\"selectedCellData\", correctedSelectedCellData);\r\n        this._selectionChangedAction({\r\n            selectedCellData: correctedSelectedCellData\r\n        })\r\n    }\r\n    _getCellByData(cellData) {\r\n        var {\r\n            startDate: startDate,\r\n            groupIndex: groupIndex,\r\n            allDay: allDay,\r\n            index: index\r\n        } = cellData;\r\n        var position = this.viewDataProvider.findCellPositionInMap({\r\n            startDate: startDate,\r\n            groupIndex: groupIndex,\r\n            isAllDay: allDay,\r\n            index: index\r\n        });\r\n        if (!position) {\r\n            return\r\n        }\r\n        return allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(position.columnIndex) : this._dom_getDateCell(position)\r\n    }\r\n    getDOMElementsMetaData() {\r\n        return this.cache.get(\"cellElementsMeta\", () => ({\r\n            dateTableCellsMeta: this._getDateTableDOMElementsInfo(),\r\n            allDayPanelCellsMeta: this._getAllDayPanelDOMElementsInfo()\r\n        }))\r\n    }\r\n    _getDateTableDOMElementsInfo() {\r\n        var dateTableCells = this._getAllCells(false);\r\n        if (!dateTableCells.length || !hasWindow()) {\r\n            return [\r\n                [{}]\r\n            ]\r\n        }\r\n        var dateTable = this._getDateTable();\r\n        var dateTableRect = getBoundingRect(dateTable.get(0));\r\n        var columnsCount = this.viewDataProvider.getColumnsCount();\r\n        var result = [];\r\n        dateTableCells.each((index, cell) => {\r\n            var rowIndex = Math.floor(index / columnsCount);\r\n            if (result.length === rowIndex) {\r\n                result.push([])\r\n            }\r\n            this._addCellMetaData(result[rowIndex], cell, dateTableRect)\r\n        });\r\n        return result\r\n    }\r\n    _getAllDayPanelDOMElementsInfo() {\r\n        var result = [];\r\n        if (this.isAllDayPanelVisible && !this._isVerticalGroupedWorkSpace() && hasWindow()) {\r\n            var allDayCells = this._getAllCells(true);\r\n            if (!allDayCells.length) {\r\n                return [{}]\r\n            }\r\n            var allDayAppointmentContainer = this._$allDayPanel;\r\n            var allDayPanelRect = getBoundingRect(allDayAppointmentContainer.get(0));\r\n            allDayCells.each((_, cell) => {\r\n                this._addCellMetaData(result, cell, allDayPanelRect)\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _addCellMetaData(cellMetaDataArray, cell, parentRect) {\r\n        var cellRect = getBoundingRect(cell);\r\n        cellMetaDataArray.push({\r\n            left: cellRect.left - parentRect.left,\r\n            top: cellRect.top - parentRect.top,\r\n            width: cellRect.width,\r\n            height: cellRect.height\r\n        })\r\n    }\r\n    _oldRender_getAllDayCellData(groupIndex) {\r\n        return (cell, rowIndex, columnIndex) => {\r\n            var validColumnIndex = columnIndex % this._getCellCount();\r\n            var options = this._getDateGenerationOptions(true);\r\n            var startDate = this.viewDataProvider.viewDataGenerator.getDateByCellIndices(options, rowIndex, validColumnIndex, this._getCellCountInDay());\r\n            startDate = dateUtils.trimTime(startDate);\r\n            var validGroupIndex = groupIndex || 0;\r\n            if (this.isGroupedByDate()) {\r\n                validGroupIndex = Math.floor(columnIndex % this._getGroupCount())\r\n            } else if (this._isHorizontalGroupedWorkSpace()) {\r\n                validGroupIndex = Math.floor(columnIndex / this._getCellCount())\r\n            }\r\n            var data = {\r\n                startDate: startDate,\r\n                endDate: startDate,\r\n                allDay: true,\r\n                groupIndex: validGroupIndex\r\n            };\r\n            var groupsArray = getCellGroups(validGroupIndex, this.option(\"groups\"));\r\n            if (groupsArray.length) {\r\n                data.groups = getGroupsObjectFromGroupsArray(groupsArray)\r\n            }\r\n            return {\r\n                key: CELL_DATA,\r\n                value: data\r\n            }\r\n        }\r\n    }\r\n    renderRWorkSpace(componentsToRender) {\r\n        var components = null !== componentsToRender && void 0 !== componentsToRender ? componentsToRender : {\r\n            header: true,\r\n            timePanel: true,\r\n            dateTable: true,\r\n            allDayPanel: true\r\n        };\r\n        components.header && this.renderRHeaderPanel();\r\n        components.timePanel && this.renderRTimeTable();\r\n        components.dateTable && this.renderRDateTable();\r\n        components.allDayPanel && this.renderRAllDayPanel()\r\n    }\r\n    renderRDateTable() {\r\n        utils.renovation.renderComponent(this, this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps())\r\n    }\r\n    renderRGroupPanel() {\r\n        var options = {\r\n            groups: this.option(\"groups\"),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            className: this.verticalGroupTableClass,\r\n            groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions())\r\n        };\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountClass();\r\n            utils.renovation.renderComponent(this, this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options)\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n    }\r\n    renderRAllDayPanel() {\r\n        var visible = this.isAllDayPanelVisible && !this.isGroupedAllDayPanel();\r\n        if (visible) {\r\n            var _this$virtualScrollin;\r\n            this._toggleAllDayVisibility(false);\r\n            var options = _extends({\r\n                viewData: this.viewDataProvider.viewData,\r\n                dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n                startCellIndex: 0\r\n            }, (null === (_this$virtualScrollin = this.virtualScrollingDispatcher.horizontalVirtualScrolling) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.getRenderState()) || {});\r\n            utils.renovation.renderComponent(this, this._$allDayTable, dxrAllDayPanelTable, \"renovatedAllDayPanel\", options);\r\n            utils.renovation.renderComponent(this, this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {})\r\n        }\r\n        this._toggleAllDayVisibility(true)\r\n    }\r\n    renderRTimeTable() {\r\n        utils.renovation.renderComponent(this, this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\r\n            timePanelData: this.viewDataProvider.timePanelData,\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groupOrientation: this.option(\"groupOrientation\")\r\n        })\r\n    }\r\n    renderRHeaderPanel() {\r\n        var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountClass()\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n        utils.renovation.renderComponent(this, this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\r\n            dateHeaderData: this.viewDataProvider.dateHeaderData,\r\n            groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions()),\r\n            dateCellTemplate: this.option(\"dateCellTemplate\"),\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groups: this.option(\"groups\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            isRenderDateHeader: isRenderDateHeader\r\n        })\r\n    }\r\n    initDragBehavior(scheduler) {\r\n        if (!this.dragBehavior && scheduler) {\r\n            this.dragBehavior = new AppointmentDragBehavior(scheduler);\r\n            this._createDragBehavior(this.getWorkArea());\r\n            this._createDragBehavior(this.getAllDayContainer());\r\n            this._createDragBehavior(this._$allDayPanel)\r\n        }\r\n    }\r\n    _createDragBehavior($element) {\r\n        var options = {\r\n            getItemData: (itemElement, appointments) => appointments._getItemData(itemElement),\r\n            getItemSettings: $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY)\r\n        };\r\n        this._createDragBehaviorBase($element, options)\r\n    }\r\n    _createDragBehaviorBase($element, options) {\r\n        var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\r\n        this.dragBehavior.addTo($element, createDragBehaviorConfig(container, this.isDefaultDraggingMode, this.dragBehavior, () => {\r\n            if (!this.isDefaultDraggingMode) {\r\n                this.preventDefaultDragging = false\r\n            }\r\n        }, () => {\r\n            if (!this.isDefaultDraggingMode) {\r\n                this.preventDefaultDragging = true\r\n            }\r\n        }, () => this._getDroppableCell(), () => this._getDateTables(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), options))\r\n    }\r\n    _isRenderHeaderPanelEmptyCell() {\r\n        return this._isVerticalGroupedWorkSpace()\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        this.virtualScrollingDispatcher.dispose()\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            currentDate: new Date,\r\n            intervalCount: 1,\r\n            startDate: null,\r\n            firstDayOfWeek: void 0,\r\n            startDayHour: 0,\r\n            endDayHour: 24,\r\n            hoursInterval: .5,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            groups: [],\r\n            showAllDayPanel: true,\r\n            allDayExpanded: false,\r\n            onCellClick: null,\r\n            crossScrollingEnabled: false,\r\n            dataCellTemplate: null,\r\n            timeCellTemplate: null,\r\n            resourceCellTemplate: null,\r\n            dateCellTemplate: null,\r\n            allowMultipleCellSelection: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true,\r\n            groupOrientation: \"horizontal\",\r\n            selectedCellData: [],\r\n            groupByDate: false,\r\n            scrolling: {\r\n                mode: \"standard\"\r\n            },\r\n            allDayPanelMode: \"all\",\r\n            renovateRender: true,\r\n            height: void 0,\r\n            draggingMode: \"outlook\",\r\n            onScrollEnd: () => {},\r\n            getHeaderHeight: void 0,\r\n            onRenderAppointments: () => {},\r\n            onShowAllDayPanel: () => {},\r\n            onSelectedCellsClick: () => {},\r\n            timeZoneCalculator: void 0,\r\n            schedulerHeight: void 0,\r\n            schedulerWidth: void 0\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"startDayHour\":\r\n                validateDayHours(args.value, this.option(\"endDayHour\"));\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"endDayHour\":\r\n                validateDayHours(this.option(\"startDayHour\"), args.value);\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"dateCellTemplate\":\r\n            case \"resourceCellTemplate\":\r\n            case \"dataCellTemplate\":\r\n            case \"timeCellTemplate\":\r\n            case \"hoursInterval\":\r\n            case \"firstDayOfWeek\":\r\n            case \"currentDate\":\r\n            case \"startDate\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"groups\":\r\n                this._cleanView();\r\n                this._removeAllDayElements();\r\n                this._initGrouping();\r\n                this.repaint();\r\n                break;\r\n            case \"groupOrientation\":\r\n                this._initGroupedStrategy();\r\n                this._createAllDayPanelElements();\r\n                this._removeAllDayElements();\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n                if (this._isVerticalGroupedWorkSpace()) {\r\n                    this._cleanView();\r\n                    this._removeAllDayElements();\r\n                    this._initGrouping();\r\n                    this.repaint()\r\n                } else if (!this.isRenovatedRender()) {\r\n                    this._toggleAllDayVisibility(true)\r\n                } else {\r\n                    this.renderWorkSpace()\r\n                }\r\n                break;\r\n            case \"allDayExpanded\":\r\n                this._changeAllDayVisibility();\r\n                this._attachTablesEvents();\r\n                this._updateScrollable();\r\n                break;\r\n            case \"onSelectionChanged\":\r\n                this._createSelectionChangedAction();\r\n                break;\r\n            case \"onCellClick\":\r\n                this._createCellClickAction();\r\n                break;\r\n            case \"onCellContextMenu\":\r\n                this._attachContextMenuEvent();\r\n                break;\r\n            case \"intervalCount\":\r\n                this._cleanWorkSpace();\r\n                this._toggleWorkSpaceCountClass();\r\n                break;\r\n            case \"groupByDate\":\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"crossScrollingEnabled\":\r\n                this._toggleHorizontalScrollClass();\r\n                this._dateTableScrollable.option(this._dateTableScrollableConfig());\r\n                break;\r\n            case \"allDayPanelMode\":\r\n                this.updateShowAllDayPanel();\r\n                this.updateAppointments();\r\n                break;\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._dimensionChanged();\r\n                break;\r\n            case \"timeZoneCalculator\":\r\n            case \"allowMultipleCellSelection\":\r\n            case \"selectedCellData\":\r\n                break;\r\n            case \"renovateRender\":\r\n            case \"scrolling\":\r\n                this.repaint();\r\n                break;\r\n            case \"schedulerHeight\":\r\n            case \"schedulerWidth\":\r\n                this.virtualScrollingDispatcher.updateDimensions(true);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    updateShowAllDayPanel() {\r\n        var isHiddenAllDayPanel = \"hidden\" === this.option(\"allDayPanelMode\");\r\n        this.option(\"onShowAllDayPanel\")(!isHiddenAllDayPanel)\r\n    }\r\n    _getVirtualScrollingDispatcherOptions() {\r\n        return {\r\n            getCellHeight: this.getCellHeight.bind(this),\r\n            getCellWidth: this.getCellWidth.bind(this),\r\n            getCellMinWidth: this.getCellMinWidth.bind(this),\r\n            isRTL: this._isRTL.bind(this),\r\n            getSchedulerHeight: () => this.option(\"schedulerHeight\"),\r\n            getSchedulerWidth: () => this.option(\"schedulerWidth\"),\r\n            getViewHeight: () => this.$element().height ? this.$element().height() : getHeight(this.$element()),\r\n            getViewWidth: () => this.$element().width ? this.$element().width() : getWidth(this.$element()),\r\n            getWindowHeight: () => getWindow().innerHeight,\r\n            getWindowWidth: () => getWindow().innerWidth,\r\n            getScrolling: () => this.option(\"scrolling\"),\r\n            getScrollableOuterWidth: this.getScrollableOuterWidth.bind(this),\r\n            getScrollable: this.getScrollable.bind(this),\r\n            createAction: this._createAction.bind(this),\r\n            updateRender: this.updateRender.bind(this),\r\n            updateGrid: this.updateGrid.bind(this),\r\n            getGroupCount: this._getGroupCount.bind(this),\r\n            isVerticalGrouping: this._isVerticalGroupedWorkSpace.bind(this),\r\n            getTotalRowCount: this._getTotalRowCount.bind(this),\r\n            getTotalCellCount: this._getTotalCellCount.bind(this)\r\n        }\r\n    }\r\n    _cleanWorkSpace() {\r\n        this._cleanView();\r\n        this._toggleGroupedClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        this.virtualScrollingDispatcher.updateDimensions(true);\r\n        this._renderView();\r\n        this.option(\"crossScrollingEnabled\") && this._setTableSizes();\r\n        this.cache.clear()\r\n    }\r\n    _init() {\r\n        this._headerSemaphore = new ScrollSemaphore;\r\n        this._sideBarSemaphore = new ScrollSemaphore;\r\n        this._dataTableSemaphore = new ScrollSemaphore;\r\n        this._viewDataProvider = null;\r\n        this._cellsSelectionState = null;\r\n        this._activeStateUnit = CELL_SELECTOR;\r\n        super._init();\r\n        this._initGrouping();\r\n        this._toggleHorizontalScrollClass();\r\n        this._toggleWorkSpaceCountClass();\r\n        this._toggleGroupByDateClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass())\r\n    }\r\n    _initPositionHelper() {\r\n        this.positionHelper = new PositionHelper({\r\n            key: this.option(\"key\"),\r\n            viewDataProvider: this.viewDataProvider,\r\n            viewStartDayHour: this.option(\"startDayHour\"),\r\n            viewEndDayHour: this.option(\"endDayHour\"),\r\n            cellDuration: this.getCellDuration(),\r\n            groupedStrategy: this._groupedStrategy,\r\n            isGroupedByDate: this.isGroupedByDate(),\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            startViewDate: this.getStartViewDate(),\r\n            isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\r\n            groupCount: this._getGroupCount(),\r\n            isVirtualScrolling: this.isVirtualScrolling(),\r\n            getDOMMetaDataCallback: this.getDOMElementsMetaData.bind(this)\r\n        })\r\n    }\r\n    _initGrouping() {\r\n        this._initGroupedStrategy();\r\n        this._toggleGroupingDirectionClass();\r\n        this._toggleGroupByDateClass()\r\n    }\r\n    isVerticalOrientation() {\r\n        var orientation = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        return \"vertical\" === orientation\r\n    }\r\n    _initGroupedStrategy() {\r\n        var Strategy = this.isVerticalOrientation() ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\r\n        this._groupedStrategy = new Strategy(this)\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"horizontal\"\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"))\r\n    }\r\n    _toggleGroupByDateClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate())\r\n    }\r\n    _toggleWorkSpaceCountClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount())\r\n    }\r\n    _toggleWorkSpaceWithOddCells() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells())\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace())\r\n    }\r\n    _getDateTableCellClass(rowIndex, columnIndex) {\r\n        var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, columnIndex + 1, rowIndex, columnIndex)\r\n    }\r\n    _getGroupHeaderClass(i) {\r\n        var cellClass = GROUP_HEADER_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1)\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._$headerPanelContainer = $(\"<div>\").addClass(\"dx-scheduler-header-panel-container\");\r\n        this._$headerTablesContainer = $(\"<div>\").addClass(\"dx-scheduler-header-tables-container\");\r\n        this._$headerPanel = $(\"<table>\");\r\n        this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\r\n        this._$headerPanelEmptyCell = $(\"<div>\").addClass(\"dx-scheduler-header-panel-empty-cell\");\r\n        this._$allDayTable = $(\"<table>\");\r\n        this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\r\n        this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\r\n        this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\r\n        this._$sidebarScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-side-bar-scrollable-content\");\r\n        this._initAllDayPanelElements();\r\n        if (this.isRenovatedRender()) {\r\n            this.createRAllDayPanelElements()\r\n        } else {\r\n            this._createAllDayPanelElements()\r\n        }\r\n        this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\r\n        this._$dateTable = $(\"<table>\");\r\n        this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\r\n        this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS)\r\n    }\r\n    _initAllDayPanelElements() {\r\n        this._allDayTitles = [];\r\n        this._allDayTables = [];\r\n        this._allDayPanels = []\r\n    }\r\n    _initDateTableScrollable() {\r\n        var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\r\n        this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig())\r\n    }\r\n    _createWorkSpaceElements() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            this._createWorkSpaceStaticElements()\r\n        }\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        this._$dateTableContainer.append(this._$dateTable);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._$dateTableContainer.append(this._$allDayContainer);\r\n            this._$dateTableScrollableContent.append(this._$groupTable, this._$timePanel, this._$dateTableContainer);\r\n            this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n            this._$headerTablesContainer.append(this._$headerPanel)\r\n        } else {\r\n            var _this$_$allDayPanel;\r\n            this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\r\n            this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n            this._$headerTablesContainer.append(this._$headerPanel, this._$allDayPanel);\r\n            null === (_this$_$allDayPanel = this._$allDayPanel) || void 0 === _this$_$allDayPanel ? void 0 : _this$_$allDayPanel.append(this._$allDayContainer, this._$allDayTable)\r\n        }\r\n        this._appendHeaderPanelEmptyCellIfNecessary();\r\n        this._$headerPanelContainer.append(this._$headerTablesContainer);\r\n        this.$element().append(this._$fixedContainer, this._$headerPanelContainer, this._dateTableScrollable.$element())\r\n    }\r\n    _createWorkSpaceScrollableElements() {\r\n        this.$element().append(this._$fixedContainer);\r\n        this._$flexContainer = $(\"<div>\").addClass(\"dx-scheduler-work-space-flex-container\");\r\n        this._createHeaderScrollable();\r\n        this._headerScrollable.$content().append(this._$headerPanel);\r\n        this._appendHeaderPanelEmptyCellIfNecessary();\r\n        this._$headerPanelContainer.append(this._$headerTablesContainer);\r\n        this.$element().append(this._$headerPanelContainer);\r\n        this.$element().append(this._$flexContainer);\r\n        this._createSidebarScrollable();\r\n        this._$flexContainer.append(this._dateTableScrollable.$element());\r\n        this._$dateTableContainer.append(this._$dateTable);\r\n        this._$dateTableScrollableContent.append(this._$dateTableContainer);\r\n        this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._$dateTableContainer.append(this._$allDayContainer);\r\n            this._$sidebarScrollableContent.append(this._$groupTable, this._$timePanel)\r\n        } else {\r\n            var _this$_$allDayPanel2;\r\n            this._headerScrollable.$content().append(this._$allDayPanel);\r\n            null === (_this$_$allDayPanel2 = this._$allDayPanel) || void 0 === _this$_$allDayPanel2 ? void 0 : _this$_$allDayPanel2.append(this._$allDayContainer, this._$allDayTable);\r\n            this._$sidebarScrollableContent.append(this._$timePanel)\r\n        }\r\n        this._sidebarScrollable.$content().append(this._$sidebarScrollableContent)\r\n    }\r\n    _appendHeaderPanelEmptyCellIfNecessary() {\r\n        this._isRenderHeaderPanelEmptyCell() && this._$headerPanelContainer.append(this._$headerPanelEmptyCell)\r\n    }\r\n    _createHeaderScrollable() {\r\n        var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this._$headerTablesContainer);\r\n        this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig())\r\n    }\r\n    _createSidebarScrollable() {\r\n        var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this._$flexContainer);\r\n        this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\r\n            useKeyboard: false,\r\n            showScrollbar: \"never\",\r\n            direction: \"vertical\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: e => {\r\n                this._sideBarSemaphore.take(e.scrollOffset);\r\n                if (this._dataTableSemaphore.isFree(e.scrollOffset)) {\r\n                    this._dateTableScrollable.scrollTo({\r\n                        top: e.scrollOffset.top\r\n                    })\r\n                }\r\n                this._sideBarSemaphore.release()\r\n            }\r\n        })\r\n    }\r\n    _attachTableClasses() {\r\n        this._addTableClass(this._$dateTable, DATE_TABLE_CLASS);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS)\r\n            }\r\n        } else if (!this.isRenovatedRender()) {\r\n            this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS)\r\n        }\r\n    }\r\n    _attachHeaderTableClasses() {\r\n        this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS)\r\n    }\r\n    _addTableClass($el, className) {\r\n        $el && !$el.hasClass(className) && $el.addClass(className)\r\n    }\r\n    _initMarkup() {\r\n        this.cache.clear();\r\n        this._initWorkSpaceUnits();\r\n        this._initVirtualScrolling();\r\n        this._initDateTableScrollable();\r\n        this._createWorkSpaceElements();\r\n        super._initMarkup();\r\n        if (!this.option(\"crossScrollingEnabled\")) {\r\n            this._attachTableClasses();\r\n            this._attachHeaderTableClasses()\r\n        }\r\n        this._toggleGroupedClass();\r\n        this._renderView();\r\n        this._attachEvents()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    }\r\n    _toggleGroupedClass() {\r\n        this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0)\r\n    }\r\n    _renderView() {\r\n        if (this.isRenovatedRender()) {\r\n            if (this._isVerticalGroupedWorkSpace()) {\r\n                this.renderRGroupPanel()\r\n            }\r\n        } else {\r\n            this._applyCellTemplates(this._renderGroupHeader())\r\n        }\r\n        this.renderWorkSpace();\r\n        this._updateGroupTableHeight();\r\n        this.updateHeaderEmptyCellWidth();\r\n        this._shader = new VerticalShader(this)\r\n    }\r\n    updateCellsSelection() {\r\n        var renderOptions = this.generateRenderOptions();\r\n        this.viewDataProvider.updateViewData(renderOptions);\r\n        this.renderRWorkSpace({\r\n            timePanel: true,\r\n            dateTable: true,\r\n            allDayPanel: true\r\n        })\r\n    }\r\n    _renderDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _setIndicationUpdateInterval() {\r\n        return noop()\r\n    }\r\n    _refreshDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _detachGroupCountClass() {\r\n        [...VERTICAL_GROUP_COUNT_CLASSES].forEach(className => {\r\n            this.$element().removeClass(className)\r\n        })\r\n    }\r\n    _attachGroupCountClass() {\r\n        var className = this._groupedStrategy.getGroupCountClass(this.option(\"groups\"));\r\n        this.$element().addClass(className)\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"dateCellTemplate\")\r\n    }\r\n    _toggleAllDayVisibility(isUpdateScrollable) {\r\n        var showAllDayPanel = this._isShowAllDayPanel();\r\n        this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\r\n        this._changeAllDayVisibility();\r\n        isUpdateScrollable && this._updateScrollable()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        this.cache.clear();\r\n        this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel())\r\n    }\r\n    _getDateTables() {\r\n        return this._$dateTable.add(this._$allDayTable)\r\n    }\r\n    _getDateTable() {\r\n        return this._$dateTable\r\n    }\r\n    _removeAllDayElements() {\r\n        this._$allDayTable && this._$allDayTable.remove();\r\n        this._$allDayTitle && this._$allDayTitle.remove()\r\n    }\r\n    _cleanView() {\r\n        var _this$_shader;\r\n        this.cache.clear();\r\n        this._cleanTableWidths();\r\n        this.cellsSelectionState.clearSelectedAndFocusedCells();\r\n        if (!this.isRenovatedRender()) {\r\n            var _this$_$allDayTable, _this$_$sidebarTable;\r\n            this._$thead.empty();\r\n            this._$dateTable.empty();\r\n            this._$timePanel.empty();\r\n            this._$groupTable.empty();\r\n            null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\r\n            null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty()\r\n        }\r\n        null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\r\n        delete this._interval\r\n    }\r\n    _clean() {\r\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n        this._disposeRenovatedComponents();\r\n        super._clean()\r\n    }\r\n    _cleanTableWidths() {\r\n        this._$headerPanel.css(\"width\", \"\");\r\n        this._$dateTable.css(\"width\", \"\");\r\n        this._$allDayTable && this._$allDayTable.css(\"width\", \"\")\r\n    }\r\n    _disposeRenovatedComponents() {\r\n        var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\r\n        null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\r\n        this.renovatedAllDayPanel = void 0;\r\n        null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\r\n        this.renovatedDateTable = void 0;\r\n        null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\r\n        this.renovatedTimePanel = void 0;\r\n        null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\r\n        this.renovatedGroupPanel = void 0;\r\n        null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\r\n        this.renovatedHeaderPanel = void 0\r\n    }\r\n    getGroupedStrategy() {\r\n        return this._groupedStrategy\r\n    }\r\n    getFixedContainer() {\r\n        return this._$fixedContainer\r\n    }\r\n    getAllDayContainer() {\r\n        return this._$allDayContainer\r\n    }\r\n    updateRender() {\r\n        this.renderer.updateRender()\r\n    }\r\n    updateGrid() {\r\n        this.renderer._renderGrid()\r\n    }\r\n    updateAppointments() {\r\n        var _this$dragBehavior2;\r\n        this.option(\"onRenderAppointments\")();\r\n        null === (_this$dragBehavior2 = this.dragBehavior) || void 0 === _this$dragBehavior2 ? void 0 : _this$dragBehavior2.updateDragSource()\r\n    }\r\n    _createAllDayPanelElements() {\r\n        var groupCount = this._getGroupCount();\r\n        if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\r\n                this._allDayTitles.push($allDayTitle);\r\n                this._$allDayTable = $(\"<table>\");\r\n                this._allDayTables.push(this._$allDayTable);\r\n                this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\r\n                this._allDayPanels.push(this._$allDayPanel)\r\n            }\r\n        } else {\r\n            this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\r\n            this._$allDayTable = $(\"<table>\");\r\n            this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable)\r\n        }\r\n    }\r\n    renderWorkSpace() {\r\n        var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        this.cache.clear();\r\n        this.viewDataProvider.update(this.generateRenderOptions(), isGenerateNewViewData);\r\n        if (this.isRenovatedRender()) {\r\n            this.renderRWorkSpace();\r\n            this.virtualScrollingDispatcher.updateDimensions()\r\n        } else {\r\n            this._renderDateHeader();\r\n            this._renderTimePanel();\r\n            this._renderGroupAllDayPanel();\r\n            this._renderDateTable();\r\n            this._renderAllDayPanel()\r\n        }\r\n        this._initPositionHelper()\r\n    }\r\n    _renderGroupHeader() {\r\n        var $container = this._getGroupHeaderContainer();\r\n        var groupCount = this._getGroupCount();\r\n        var cellTemplates = [];\r\n        if (groupCount) {\r\n            var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\r\n            this._attachGroupCountClass();\r\n            $container.append(groupRows.elements);\r\n            cellTemplates = groupRows.cellTemplates\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n        return cellTemplates\r\n    }\r\n    _applyCellTemplates(templates) {\r\n        null === templates || void 0 === templates ? void 0 : templates.forEach((function(template) {\r\n            template()\r\n        }))\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupHeaderRowClass: GROUP_ROW_CLASS,\r\n            groupRowClass: GROUP_ROW_CLASS,\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate)\r\n    }\r\n    _renderDateHeader() {\r\n        var container = this._getDateHeaderContainer();\r\n        var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\r\n        var count = this._getCellCount();\r\n        var cellTemplate = this._getDateHeaderTemplate();\r\n        var repeatCount = this._getCalculateHeaderCellRepeatCount();\r\n        var templateCallbacks = [];\r\n        var groupByDate = this.isGroupedByDate();\r\n        if (!groupByDate) {\r\n            for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\r\n                for (var columnIndex = 0; columnIndex < count; columnIndex++) {\r\n                    var templateIndex = rowIndex * count + columnIndex;\r\n                    this._renderDateHeaderTemplate($headerRow, columnIndex, templateIndex, cellTemplate, templateCallbacks)\r\n                }\r\n            }\r\n            container.append($headerRow)\r\n        } else {\r\n            var colSpan = groupByDate ? this._getGroupCount() : 1;\r\n            for (var _columnIndex = 0; _columnIndex < count; _columnIndex++) {\r\n                var _templateIndex = _columnIndex * repeatCount;\r\n                var cellElement = this._renderDateHeaderTemplate($headerRow, _columnIndex, _templateIndex, cellTemplate, templateCallbacks);\r\n                cellElement.attr(\"colSpan\", colSpan)\r\n            }\r\n            container.prepend($headerRow)\r\n        }\r\n        this._applyCellTemplates(templateCallbacks);\r\n        return $headerRow\r\n    }\r\n    _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\r\n        var validTemplateIndex = this.isGroupedByDate() ? Math.floor(templateIndex / this._getGroupCount()) : templateIndex;\r\n        var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\r\n        var {\r\n            text: text,\r\n            startDate: date\r\n        } = completeDateHeaderMap[completeDateHeaderMap.length - 1][validTemplateIndex];\r\n        var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\r\n        if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\r\n            templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\r\n                model: _extends({\r\n                    text: text,\r\n                    date: date\r\n                }, this._getGroupsForDateHeaderTemplate(templateIndex)),\r\n                index: templateIndex,\r\n                container: getPublicElement($cell)\r\n            }))\r\n        } else {\r\n            $cell.text(text)\r\n        }\r\n        container.append($cell);\r\n        return $cell\r\n    }\r\n    _getGroupsForDateHeaderTemplate(templateIndex) {\r\n        var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\r\n        var groupIndex;\r\n        var groups;\r\n        if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\r\n            groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\r\n            var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\r\n            groups = getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return {\r\n            groups: groups,\r\n            groupIndex: groupIndex\r\n        }\r\n    }\r\n    _getHeaderPanelCellClass(i) {\r\n        var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate())\r\n    }\r\n    _renderAllDayPanel(index) {\r\n        var cellCount = this._getCellCount();\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            cellCount *= this._getGroupCount() || 1\r\n        }\r\n        var cellTemplates = this._renderTableBody({\r\n            container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\r\n            rowCount: 1,\r\n            cellCount: cellCount,\r\n            cellClass: this._getAllDayPanelCellClass.bind(this),\r\n            rowClass: ALL_DAY_TABLE_ROW_CLASS,\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: this._oldRender_getAllDayCellData(index),\r\n            groupIndex: index\r\n        }, true);\r\n        this._toggleAllDayVisibility(true);\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _renderGroupAllDayPanel() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._renderAllDayPanel(i)\r\n            }\r\n        }\r\n    }\r\n    _getAllDayPanelCellClass(i, j) {\r\n        var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1)\r\n    }\r\n    _renderTimePanel() {\r\n        var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\r\n        var getData = (rowIndex, field) => {\r\n            var allDayPanelsCount = 0;\r\n            if (this.isAllDayPanelVisible) {\r\n                allDayPanelsCount = 1\r\n            }\r\n            if (this.isGroupedAllDayPanel()) {\r\n                allDayPanelsCount = Math.ceil((rowIndex + 1) / this._getRowCount())\r\n            }\r\n            var validRowIndex = rowIndex + allDayPanelsCount;\r\n            return this.viewDataProvider.completeTimePanelMap[validRowIndex][field]\r\n        };\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount() * repeatCount,\r\n            cellCount: 1,\r\n            cellClass: this._getTimeCellClass.bind(this),\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellTemplate: this.option(\"timeCellTemplate\"),\r\n            getCellText: rowIndex => getData(rowIndex, \"text\"),\r\n            getCellDate: rowIndex => getData(rowIndex, \"startDate\"),\r\n            groupCount: this._getGroupCount(),\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\r\n            getTemplateData: (rowIndex => {\r\n                if (!this._isVerticalGroupedWorkSpace()) {\r\n                    return {}\r\n                }\r\n                var groupIndex = this._getGroupIndex(rowIndex, 0);\r\n                var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\r\n                var groups = getGroupsObjectFromGroupsArray(groupsArray);\r\n                return {\r\n                    groupIndex: groupIndex,\r\n                    groups: groups\r\n                }\r\n            }).bind(this)\r\n        })\r\n    }\r\n    _getTimeCellClass(i) {\r\n        var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass\r\n    }\r\n    _renderDateTable() {\r\n        var groupCount = this._getGroupCount();\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowCount: this._getTotalRowCount(groupCount),\r\n            cellCount: this._getTotalCellCount(groupCount),\r\n            cellClass: this._getDateTableCellClass.bind(this),\r\n            rowClass: DATE_TABLE_ROW_CLASS,\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: (_, rowIndex, columnIndex) => {\r\n                var isGroupedAllDayPanel = this.isGroupedAllDayPanel();\r\n                var validRowIndex = rowIndex;\r\n                if (isGroupedAllDayPanel) {\r\n                    var rowCount = this._getRowCount();\r\n                    var allDayPanelsCount = Math.ceil(rowIndex / rowCount);\r\n                    validRowIndex += allDayPanelsCount\r\n                }\r\n                var cellData = this.viewDataProvider.viewDataMap.dateTableMap[validRowIndex][columnIndex].cellData;\r\n                return {\r\n                    value: this._filterCellDataFields(cellData),\r\n                    fullValue: cellData,\r\n                    key: CELL_DATA\r\n                }\r\n            },\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\r\n            groupCount: groupCount,\r\n            groupByDate: this.option(\"groupByDate\")\r\n        })\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return this._groupedStrategy.insertAllDayRowsIntoDateTable()\r\n    }\r\n    _renderTableBody(options, delayCellTemplateRendering) {\r\n        var result = [];\r\n        if (!delayCellTemplateRendering) {\r\n            this._applyCellTemplates(tableCreator.makeTable(options))\r\n        } else {\r\n            result = tableCreator.makeTable(options)\r\n        }\r\n        return result\r\n    }\r\n}\r\nvar createDragBehaviorConfig = (container, isDefaultDraggingMode, dragBehavior, enableDefaultDragging, disableDefaultDragging, getDroppableCell, getDateTables, removeDroppableCellClass, getCellWidth, options) => {\r\n    var state = {\r\n        dragElement: void 0,\r\n        itemData: void 0\r\n    };\r\n    var isItemDisabled = () => {\r\n        var {\r\n            itemData: itemData\r\n        } = state;\r\n        if (itemData) {\r\n            var getter = compileGetter(\"disabled\");\r\n            return getter(itemData)\r\n        }\r\n        return true\r\n    };\r\n    var cursorOffset = options.isSetCursorOffset ? () => {\r\n        var $dragElement = $(state.dragElement);\r\n        return {\r\n            x: getWidth($dragElement) / 2,\r\n            y: getHeight($dragElement) / 2\r\n        }\r\n    } : void 0;\r\n    return {\r\n        container: container,\r\n        dragTemplate: () => state.dragElement,\r\n        onDragStart: e => {\r\n            if (!isDefaultDraggingMode) {\r\n                disableDefaultDragging()\r\n            }\r\n            var canceled = e.cancel;\r\n            var event = e.event;\r\n            var $itemElement = $(e.itemElement);\r\n            var appointments = e.component._appointments;\r\n            state.itemData = options.getItemData(e.itemElement, appointments);\r\n            var settings = options.getItemSettings($itemElement, e);\r\n            var initialPosition = options.initialPosition;\r\n            if (!isItemDisabled()) {\r\n                event.data = event.data || {};\r\n                if (!canceled) {\r\n                    if (!settings.isCompact) {\r\n                        dragBehavior.updateDragSource(state.itemData, settings)\r\n                    }\r\n                    state.dragElement = ((itemData, settings, appointments) => {\r\n                        var appointmentIndex = appointments.option(\"items\").length;\r\n                        settings.isCompact = false;\r\n                        settings.virtual = false;\r\n                        var items = appointments._renderItem(appointmentIndex, {\r\n                            itemData: itemData,\r\n                            settings: [settings]\r\n                        });\r\n                        return items[0]\r\n                    })(state.itemData, settings, appointments);\r\n                    event.data.itemElement = state.dragElement;\r\n                    event.data.initialPosition = null !== initialPosition && void 0 !== initialPosition ? initialPosition : locate($(state.dragElement));\r\n                    event.data.itemData = state.itemData;\r\n                    event.data.itemSettings = settings;\r\n                    dragBehavior.onDragStart(event.data);\r\n                    resetPosition($(state.dragElement))\r\n                }\r\n            }\r\n        },\r\n        onDragMove: () => {\r\n            if (isDefaultDraggingMode) {\r\n                return\r\n            }\r\n            var appointmentWidth = getWidth(state.dragElement);\r\n            var cellWidth = getCellWidth();\r\n            var isWideAppointment = appointmentWidth > cellWidth;\r\n            var dragElementContainer = $(state.dragElement).parent();\r\n            var boundingRect = getBoundingRect(dragElementContainer.get(0));\r\n            var newX = boundingRect.left + 10;\r\n            var newY = boundingRect.top + 10;\r\n            var elements = isWideAppointment ? domAdapter.elementsFromPoint(newX, newY) : domAdapter.elementsFromPoint(newX + appointmentWidth / 2, newY);\r\n            var dateTables = getDateTables();\r\n            var droppableCell = elements.find(el => {\r\n                var classList = el.classList;\r\n                var isCurrentSchedulerElement = 1 === dateTables.find(el).length;\r\n                return isCurrentSchedulerElement && (classList.contains(DATE_TABLE_CELL_CLASS) || classList.contains(ALL_DAY_TABLE_CELL_CLASS))\r\n            });\r\n            if (droppableCell) {\r\n                var oldDroppableCell = getDroppableCell();\r\n                if (!oldDroppableCell.is(droppableCell)) {\r\n                    removeDroppableCellClass()\r\n                }\r\n                $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n            }\r\n        },\r\n        onDragEnd: e => {\r\n            var _state$dragElement;\r\n            if (!isDefaultDraggingMode) {\r\n                enableDefaultDragging()\r\n            }\r\n            if (!isItemDisabled()) {\r\n                dragBehavior.onDragEnd(e)\r\n            }\r\n            null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\r\n            removeDroppableCellClass()\r\n        },\r\n        cursorOffset: cursorOffset,\r\n        filter: options.filter\r\n    }\r\n};\r\nexport default SchedulerWorkSpace;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}