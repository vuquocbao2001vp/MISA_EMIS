{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\n/**\r\n * DevExtreme (esm/viz/chart_components/advanced_chart.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { extend as _extend } from \"../../core/utils/extend\";\nimport { each as _each, reverseEach as _reverseEach } from \"../../core/utils/iterator\";\nimport { Range } from \"../translators/range\";\nimport { Axis } from \"../axes/base_axis\";\nimport { SeriesFamily } from \"../core/series_family\";\nimport { BaseChart } from \"./base_chart\";\nimport rangeDataCalculator from \"../series/helpers/range_data_calculator\";\nimport { isDefined as _isDefined, type } from \"../../core/utils/type\";\nimport { noop as _noop } from \"../../core/utils/common\";\nimport { convertVisualRangeObject, rangesAreEqual, map as _map, mergeMarginOptions, setCanvasValues, unique } from \"../core/utils\";\nvar _isArray = Array.isArray;\nvar DEFAULT_AXIS_NAME = \"defaultAxisName\";\nvar FONT = \"font\";\nvar COMMON_AXIS_SETTINGS = \"commonAxisSettings\";\nvar DEFAULT_PANE_NAME = \"default\";\nvar VISUAL_RANGE = \"VISUAL_RANGE\";\n\nfunction prepareAxis(axisOptions) {\n  return _isArray(axisOptions) ? 0 === axisOptions.length ? [{}] : axisOptions : [axisOptions];\n}\n\nfunction processBubbleMargin(opt, bubbleSize) {\n  if (opt.processBubbleSize) {\n    opt.size = bubbleSize;\n  }\n\n  return opt;\n}\n\nfunction estimateBubbleSize(size, panesCount, maxSize, rotated) {\n  var width = rotated ? size.width / panesCount : size.width;\n  var height = rotated ? size.height : size.height / panesCount;\n  return Math.min(width, height) * maxSize;\n}\n\nfunction setAxisVisualRangeByOption(arg, axis, isDirectOption, index) {\n  var options;\n  var visualRange;\n\n  if (isDirectOption) {\n    visualRange = arg.value;\n    options = {\n      skipEventRising: true\n    };\n    var wrappedVisualRange = wrapVisualRange(arg.fullName, visualRange);\n\n    if (wrappedVisualRange) {\n      options = {\n        allowPartialUpdate: true\n      };\n      visualRange = wrappedVisualRange;\n    }\n  } else {\n    visualRange = (_isDefined(index) ? arg.value[index] : arg.value).visualRange;\n  }\n\n  axis.visualRange(visualRange, options);\n}\n\nfunction getAxisTypes(groupsData, axis, isArgumentAxes) {\n  if (isArgumentAxes) {\n    return {\n      argumentAxisType: groupsData.argumentAxisType,\n      argumentType: groupsData.argumentType\n    };\n  }\n\n  var {\n    valueAxisType: valueAxisType,\n    valueType: valueType\n  } = groupsData.groups.filter(g => g.valueAxis === axis)[0];\n  return {\n    valueAxisType: valueAxisType,\n    valueType: valueType\n  };\n}\n\nfunction wrapVisualRange(fullName, value) {\n  var pathElements = fullName.split(\".\");\n  var destElem = pathElements[pathElements.length - 1];\n\n  if (\"endValue\" === destElem || \"startValue\" === destElem) {\n    return {\n      [destElem]: value\n    };\n  }\n}\n\nexport var AdvancedChart = BaseChart.inherit({\n  _fontFields: [COMMON_AXIS_SETTINGS + \".label.\" + FONT, COMMON_AXIS_SETTINGS + \".title.\" + FONT],\n  _partialOptionChangesMap: {\n    visualRange: VISUAL_RANGE,\n    _customVisualRange: VISUAL_RANGE,\n    strips: \"REFRESH_AXES\",\n    constantLines: \"REFRESH_AXES\"\n  },\n  _partialOptionChangesPath: {\n    argumentAxis: [\"strips\", \"constantLines\", \"visualRange\", \"_customVisualRange\"],\n    valueAxis: [\"strips\", \"constantLines\", \"visualRange\", \"_customVisualRange\"]\n  },\n\n  _initCore() {\n    this._panesClipRects = {};\n    this.callBase();\n  },\n\n  _disposeCore() {\n    var disposeObjectsInArray = this._disposeObjectsInArray;\n    var panesClipRects = this._panesClipRects;\n    this.callBase();\n    disposeObjectsInArray.call(panesClipRects, \"fixed\");\n    disposeObjectsInArray.call(panesClipRects, \"base\");\n    disposeObjectsInArray.call(panesClipRects, \"wide\");\n    this._panesClipRects = null;\n\n    this._labelsAxesGroup.linkOff();\n\n    this._labelsAxesGroup.dispose();\n\n    this._labelsAxesGroup = null;\n  },\n\n  _dispose: function () {\n    var disposeObjectsInArray = this._disposeObjectsInArray;\n    this.callBase();\n    this.panes = null;\n\n    if (this._legend) {\n      this._legend.dispose();\n\n      this._legend = null;\n    }\n\n    disposeObjectsInArray.call(this, \"panesBackground\");\n    disposeObjectsInArray.call(this, \"seriesFamilies\");\n\n    this._disposeAxes();\n  },\n  _createPanes: function () {\n    this._cleanPanesClipRects(\"fixed\");\n\n    this._cleanPanesClipRects(\"base\");\n\n    this._cleanPanesClipRects(\"wide\");\n  },\n\n  _cleanPanesClipRects(clipArrayName) {\n    var clipArray = this._panesClipRects[clipArrayName];\n    (clipArray || []).forEach(clipRect => clipRect && clipRect.dispose());\n    this._panesClipRects[clipArrayName] = [];\n  },\n\n  _getElementsClipRectID(paneName) {\n    var clipShape = this._panesClipRects.fixed[this._getPaneIndex(paneName)];\n\n    return clipShape && clipShape.id;\n  },\n\n  _getPaneIndex(paneName) {\n    var paneIndex;\n    var name = paneName || DEFAULT_PANE_NAME;\n\n    _each(this.panes, (index, pane) => {\n      if (pane.name === name) {\n        paneIndex = index;\n        return false;\n      }\n    });\n\n    return paneIndex;\n  },\n\n  _updateSize() {\n    this.callBase();\n    setCanvasValues(this._canvas);\n  },\n\n  _reinitAxes: function () {\n    this.panes = this._createPanes();\n\n    this._populateAxes();\n\n    this._axesReinitialized = true;\n  },\n\n  _populateAxes() {\n    var that = this;\n    var panes = that.panes;\n\n    var rotated = that._isRotated();\n\n    var argumentAxesOptions = prepareAxis(that.option(\"argumentAxis\") || {})[0];\n    var valueAxisOption = that.option(\"valueAxis\");\n    var valueAxesOptions = prepareAxis(valueAxisOption || {});\n    var argumentAxesPopulatedOptions;\n    var valueAxesPopulatedOptions = [];\n    var axisNames = [];\n    var valueAxesCounter = 0;\n    var paneWithNonVirtualAxis;\n\n    var crosshairMargins = that._getCrosshairMargins();\n\n    if (rotated) {\n      paneWithNonVirtualAxis = \"right\" === argumentAxesOptions.position ? panes[panes.length - 1].name : panes[0].name;\n    } else {\n      paneWithNonVirtualAxis = \"top\" === argumentAxesOptions.position ? panes[0].name : panes[panes.length - 1].name;\n    }\n\n    argumentAxesPopulatedOptions = _map(panes, pane => {\n      var virtual = pane.name !== paneWithNonVirtualAxis;\n      return that._populateAxesOptions(\"argumentAxis\", argumentAxesOptions, {\n        pane: pane.name,\n        name: null,\n        optionPath: \"argumentAxis\",\n        crosshairMargin: rotated ? crosshairMargins.x : crosshairMargins.y\n      }, rotated, virtual);\n    });\n\n    _each(valueAxesOptions, (priority, axisOptions) => {\n      var _axisOptions$panes;\n\n      var axisPanes = [];\n      var name = axisOptions.name;\n\n      if (name && axisNames.includes(name)) {\n        that._incidentOccurred(\"E2102\");\n\n        return;\n      }\n\n      name && axisNames.push(name);\n\n      if (axisOptions.pane) {\n        axisPanes.push(axisOptions.pane);\n      }\n\n      if (null !== (_axisOptions$panes = axisOptions.panes) && void 0 !== _axisOptions$panes && _axisOptions$panes.length) {\n        axisPanes = axisPanes.concat(axisOptions.panes.slice(0));\n      }\n\n      axisPanes = unique(axisPanes);\n\n      if (!axisPanes.length) {\n        axisPanes.push(void 0);\n      }\n\n      _each(axisPanes, (_, pane) => {\n        var optionPath = _isArray(valueAxisOption) ? \"valueAxis[\".concat(priority, \"]\") : \"valueAxis\";\n        valueAxesPopulatedOptions.push(that._populateAxesOptions(\"valueAxis\", axisOptions, {\n          name: name || DEFAULT_AXIS_NAME + valueAxesCounter++,\n          pane: pane,\n          priority: priority,\n          optionPath: optionPath,\n          crosshairMargin: rotated ? crosshairMargins.y : crosshairMargins.x\n        }, rotated));\n      });\n    });\n\n    that._redesignAxes(argumentAxesPopulatedOptions, true, paneWithNonVirtualAxis);\n\n    that._redesignAxes(valueAxesPopulatedOptions, false);\n  },\n\n  _redesignAxes(options, isArgumentAxes, paneWithNonVirtualAxis) {\n    var that = this;\n    var axesBasis = [];\n    var axes = isArgumentAxes ? that._argumentAxes : that._valueAxes;\n\n    _each(options, (_, opt) => {\n      var curAxes = axes && axes.filter(a => a.name === opt.name && (!_isDefined(opt.pane) && that.panes.some(p => p.name === a.pane) || a.pane === opt.pane));\n\n      if (curAxes && curAxes.length > 0) {\n        _each(curAxes, (_, axis) => {\n          var axisTypes = getAxisTypes(that._groupsData, axis, isArgumentAxes);\n          axis.updateOptions(opt);\n\n          if (isArgumentAxes) {\n            axis.setTypes(axisTypes.argumentAxisType, axisTypes.argumentType, \"argumentType\");\n          } else {\n            axis.setTypes(axisTypes.valueAxisType, axisTypes.valueType, \"valueType\");\n          }\n\n          axis.validate();\n          axesBasis.push({\n            axis: axis\n          });\n        });\n      } else {\n        axesBasis.push({\n          options: opt\n        });\n      }\n    });\n\n    if (axes) {\n      _reverseEach(axes, (index, axis) => {\n        if (!axesBasis.some(basis => basis.axis && basis.axis === axis)) {\n          that._disposeAxis(index, isArgumentAxes);\n        }\n      });\n    } else if (isArgumentAxes) {\n      axes = that._argumentAxes = [];\n    } else {\n      axes = that._valueAxes = [];\n    }\n\n    _each(axesBasis, (_, basis) => {\n      var axis = basis.axis;\n\n      if (basis.axis && isArgumentAxes) {\n        basis.axis.isVirtual = basis.axis.pane !== paneWithNonVirtualAxis;\n      } else if (basis.options) {\n        axis = that._createAxis(isArgumentAxes, basis.options, isArgumentAxes ? basis.options.pane !== paneWithNonVirtualAxis : void 0);\n        axes.push(axis);\n      }\n\n      axis.applyVisualRangeSetter(that._getVisualRangeSetter());\n    });\n  },\n\n  _disposeAxis(index, isArgumentAxis) {\n    var axes = isArgumentAxis ? this._argumentAxes : this._valueAxes;\n    var axis = axes[index];\n\n    if (!axis) {\n      return;\n    }\n\n    axis.dispose();\n    axes.splice(index, 1);\n  },\n\n  _disposeAxes: function () {\n    var disposeObjectsInArray = this._disposeObjectsInArray;\n    disposeObjectsInArray.call(this, \"_argumentAxes\");\n    disposeObjectsInArray.call(this, \"_valueAxes\");\n  },\n  _appendAdditionalSeriesGroups: function () {\n    this._crosshairCursorGroup.linkAppend();\n\n    this._scrollBar && this._scrollBarGroup.linkAppend();\n  },\n  _getLegendTargets: function () {\n    return (this.series || []).map(s => {\n      var item = this._getLegendOptions(s);\n\n      item.legendData.series = s;\n\n      if (!s.getOptions().showInLegend) {\n        item.legendData.visible = false;\n      }\n\n      return item;\n    });\n  },\n  _legendItemTextField: \"name\",\n  _seriesPopulatedHandlerCore: function () {\n    this._processSeriesFamilies();\n\n    this._processValueAxisFormat();\n  },\n  _renderTrackers: function () {\n    var i;\n\n    for (i = 0; i < this.series.length; ++i) {\n      this.series[i].drawTrackers();\n    }\n  },\n  _specialProcessSeries: function () {\n    this._processSeriesFamilies();\n  },\n  _processSeriesFamilies: function () {\n    var _that$seriesFamilies;\n\n    var that = this;\n    var types = [];\n    var families = [];\n    var paneSeries;\n    var themeManager = that._themeManager;\n    var negativesAsZeroes = themeManager.getOptions(\"negativesAsZeroes\");\n    var negativesAsZeros = themeManager.getOptions(\"negativesAsZeros\");\n    var familyOptions = {\n      minBubbleSize: themeManager.getOptions(\"minBubbleSize\"),\n      maxBubbleSize: themeManager.getOptions(\"maxBubbleSize\"),\n      barGroupPadding: themeManager.getOptions(\"barGroupPadding\"),\n      barGroupWidth: themeManager.getOptions(\"barGroupWidth\"),\n      negativesAsZeroes: _isDefined(negativesAsZeroes) ? negativesAsZeroes : negativesAsZeros\n    };\n\n    if (null !== (_that$seriesFamilies = that.seriesFamilies) && void 0 !== _that$seriesFamilies && _that$seriesFamilies.length) {\n      _each(that.seriesFamilies, function (_, family) {\n        family.updateOptions(familyOptions);\n        family.adjustSeriesValues();\n      });\n\n      return;\n    }\n\n    _each(that.series, function (_, item) {\n      if (!types.includes(item.type)) {\n        types.push(item.type);\n      }\n    });\n\n    _each(that._getLayoutTargets(), function (_, pane) {\n      paneSeries = that._getSeriesForPane(pane.name);\n\n      _each(types, function (_, type) {\n        var family = new SeriesFamily({\n          type: type,\n          pane: pane.name,\n          minBubbleSize: familyOptions.minBubbleSize,\n          maxBubbleSize: familyOptions.maxBubbleSize,\n          barGroupPadding: familyOptions.barGroupPadding,\n          barGroupWidth: familyOptions.barGroupWidth,\n          negativesAsZeroes: familyOptions.negativesAsZeroes,\n          rotated: that._isRotated()\n        });\n        family.add(paneSeries);\n        family.adjustSeriesValues();\n        families.push(family);\n      });\n    });\n\n    that.seriesFamilies = families;\n  },\n  _updateSeriesDimensions: function () {\n    var i;\n    var seriesFamilies = this.seriesFamilies || [];\n\n    for (i = 0; i < seriesFamilies.length; i++) {\n      var family = seriesFamilies[i];\n      family.updateSeriesValues();\n      family.adjustSeriesDimensions();\n    }\n  },\n  _getLegendCallBack: function (series) {\n    return this._legend && this._legend.getActionCallback(series);\n  },\n  _appendAxesGroups: function () {\n    this._stripsGroup.linkAppend();\n\n    this._gridGroup.linkAppend();\n\n    this._axesGroup.linkAppend();\n\n    this._labelsAxesGroup.linkAppend();\n\n    this._constantLinesGroup.linkAppend();\n\n    this._stripLabelAxesGroup.linkAppend();\n\n    this._scaleBreaksGroup.linkAppend();\n  },\n\n  _populateMarginOptions() {\n    var that = this;\n    var bubbleSize = estimateBubbleSize(that.getSize(), that.panes.length, that._themeManager.getOptions(\"maxBubbleSize\"), that._isRotated());\n    var argumentMarginOptions = {};\n\n    that._valueAxes.forEach(valueAxis => {\n      var groupSeries = that.series.filter(function (series) {\n        return series.getValueAxis() === valueAxis;\n      });\n      var marginOptions = {};\n      groupSeries.forEach(series => {\n        if (series.isVisible()) {\n          var seriesMarginOptions = processBubbleMargin(series.getMarginOptions(), bubbleSize);\n          marginOptions = mergeMarginOptions(marginOptions, seriesMarginOptions);\n          argumentMarginOptions = mergeMarginOptions(argumentMarginOptions, seriesMarginOptions);\n        }\n      });\n      valueAxis.setMarginOptions(marginOptions);\n    });\n\n    that._argumentAxes.forEach(a => a.setMarginOptions(argumentMarginOptions));\n  },\n\n  _populateBusinessRange(updatedAxis, keepRange) {\n    var that = this;\n\n    var rotated = that._isRotated();\n\n    var series = that._getVisibleSeries();\n\n    var argRanges = {};\n    var commonArgRange = new Range({\n      rotated: !!rotated\n    });\n\n    var getPaneName = axis => axis.pane || DEFAULT_PANE_NAME;\n\n    that.panes.forEach(p => argRanges[p.name] = new Range({\n      rotated: !!rotated\n    }));\n\n    that._valueAxes.forEach(valueAxis => {\n      var groupRange = new Range({\n        rotated: !!rotated,\n        pane: valueAxis.pane,\n        axis: valueAxis.name\n      });\n      var groupSeries = series.filter(series => series.getValueAxis() === valueAxis);\n      groupSeries.forEach(series => {\n        var seriesRange = series.getRangeData();\n        groupRange.addRange(seriesRange.val);\n        argRanges[getPaneName(valueAxis)].addRange(seriesRange.arg);\n      });\n\n      if (!updatedAxis || updatedAxis && groupSeries.length && valueAxis === updatedAxis) {\n        valueAxis.setGroupSeries(groupSeries);\n        valueAxis.setBusinessRange(groupRange, that._axesReinitialized || keepRange, that._argumentAxes[0]._lastVisualRangeUpdateMode);\n      }\n    });\n\n    if (!updatedAxis || updatedAxis && series.length) {\n      Object.keys(argRanges).forEach(p => commonArgRange.addRange(argRanges[p]));\n      var commonInterval = commonArgRange.interval;\n\n      that._argumentAxes.forEach(a => {\n        var _argRanges$getPaneNam;\n\n        var currentInterval = null !== (_argRanges$getPaneNam = argRanges[getPaneName(a)].interval) && void 0 !== _argRanges$getPaneNam ? _argRanges$getPaneNam : commonInterval;\n        a.setBusinessRange(new Range(_extends({}, commonArgRange, {\n          interval: currentInterval\n        })), that._axesReinitialized, void 0, that._groupsData.categories);\n      });\n    }\n\n    that._populateMarginOptions();\n  },\n\n  getArgumentAxis: function () {\n    return (this._argumentAxes || []).filter(a => !a.isVirtual)[0];\n  },\n  getValueAxis: function (name) {\n    return (this._valueAxes || []).filter(_isDefined(name) ? a => a.name === name : a => a.pane === this.defaultPane)[0];\n  },\n  _getGroupsData: function () {\n    var that = this;\n    var groups = [];\n\n    that._valueAxes.forEach(function (axis) {\n      groups.push({\n        series: that.series.filter(function (series) {\n          return series.getValueAxis() === axis;\n        }),\n        valueAxis: axis,\n        valueOptions: axis.getOptions()\n      });\n    });\n\n    return {\n      groups: groups,\n      argumentAxes: that._argumentAxes,\n      argumentOptions: that._argumentAxes[0].getOptions()\n    };\n  },\n  _groupSeries: function () {\n    this._correctValueAxes(false);\n\n    this._groupsData = this._getGroupsData();\n  },\n  _processValueAxisFormat: function () {\n    var axesWithFullStackedFormat = [];\n    this.series.forEach(function (series) {\n      var axis = series.getValueAxis();\n\n      if (series.isFullStackedSeries()) {\n        axis.setPercentLabelFormat();\n        axesWithFullStackedFormat.push(axis);\n      }\n    });\n\n    this._valueAxes.forEach(function (axis) {\n      if (-1 === axesWithFullStackedFormat.indexOf(axis)) {\n        axis.resetAutoLabelFormat();\n      }\n    });\n  },\n\n  _populateAxesOptions(typeSelector, userOptions, axisOptions, rotated, virtual) {\n    var preparedUserOptions = this._prepareStripsAndConstantLines(typeSelector, userOptions, rotated);\n\n    var options = _extend(true, {}, preparedUserOptions, axisOptions, this._prepareAxisOptions(typeSelector, preparedUserOptions, rotated));\n\n    if (virtual) {\n      options.visible = options.tick.visible = options.minorTick.visible = options.label.visible = false;\n      options.title = {};\n    }\n\n    return options;\n  },\n\n  _getValFilter: series => rangeDataCalculator.getViewPortFilter(series.getValueAxis().visualRange() || {}),\n\n  _createAxis(isArgumentAxes, options, virtual) {\n    var that = this;\n    var typeSelector = isArgumentAxes ? \"argumentAxis\" : \"valueAxis\";\n\n    var renderingSettings = _extend({\n      renderer: that._renderer,\n      incidentOccurred: that._incidentOccurred,\n      eventTrigger: that._eventTrigger,\n      axisClass: isArgumentAxes ? \"arg\" : \"val\",\n      widgetClass: \"dxc\",\n      stripsGroup: that._stripsGroup,\n      stripLabelAxesGroup: that._stripLabelAxesGroup,\n      constantLinesGroup: that._constantLinesGroup,\n      scaleBreaksGroup: that._scaleBreaksGroup,\n      axesContainerGroup: that._axesGroup,\n      labelsAxesGroup: that._labelsAxesGroup,\n      gridGroup: that._gridGroup,\n      isArgumentAxis: isArgumentAxes,\n      getTemplate: template => that._getTemplate(template)\n    }, that._getAxisRenderingOptions(typeSelector));\n\n    var axis = new Axis(renderingSettings);\n    axis.updateOptions(options);\n    axis.isVirtual = virtual;\n    return axis;\n  },\n\n  _applyVisualRangeByVirtualAxes: (axis, range) => false,\n\n  _applyCustomVisualRangeOption(axis, range) {\n    if (axis.getOptions().optionPath) {\n      this._parseVisualRangeOption(\"\".concat(axis.getOptions().optionPath, \".visualRange\"), range);\n    }\n  },\n\n  _getVisualRangeSetter() {\n    var chart = this;\n    return function (axis, _ref) {\n      var {\n        skipEventRising: skipEventRising,\n        range: range\n      } = _ref;\n\n      chart._applyCustomVisualRangeOption(axis, range);\n\n      axis.setCustomVisualRange(range);\n      axis.skipEventRising = skipEventRising;\n\n      if (!chart._applyVisualRangeByVirtualAxes(axis, range)) {\n        if (chart._applyingChanges) {\n          chart._change_VISUAL_RANGE();\n        } else {\n          chart._requestChange([VISUAL_RANGE]);\n        }\n      }\n    };\n  },\n\n  _getTrackerSettings: function () {\n    return _extend(this.callBase(), {\n      argumentAxis: this.getArgumentAxis()\n    });\n  },\n  _prepareStripsAndConstantLines: function (typeSelector, userOptions, rotated) {\n    userOptions = this._themeManager.getOptions(typeSelector, userOptions, rotated);\n\n    if (userOptions.strips) {\n      _each(userOptions.strips, function (i) {\n        userOptions.strips[i] = _extend(true, {}, userOptions.stripStyle, userOptions.strips[i]);\n      });\n    }\n\n    if (userOptions.constantLines) {\n      _each(userOptions.constantLines, function (i, line) {\n        userOptions.constantLines[i] = _extend(true, {}, userOptions.constantLineStyle, line);\n      });\n    }\n\n    return userOptions;\n  },\n  refresh: function () {\n    this._disposeAxes();\n\n    this.callBase();\n  },\n\n  _layoutAxes(drawAxes) {\n    drawAxes();\n    var needSpace = this.checkForMoreSpaceForPanesCanvas();\n\n    if (needSpace) {\n      var rect = this._rect.slice();\n\n      var size = this._layout.backward(rect, rect, [needSpace.width, needSpace.height]);\n\n      needSpace.width = Math.max(0, size[0]);\n      needSpace.height = Math.max(0, size[1]);\n      this._canvas = this._createCanvasFromRect(rect);\n      drawAxes(needSpace);\n    }\n  },\n\n  checkForMoreSpaceForPanesCanvas() {\n    return this.layoutManager.needMoreSpaceForPanesCanvas(this._getLayoutTargets(), this._isRotated());\n  },\n\n  _parseVisualRangeOption(fullName, value) {\n    var that = this;\n    var name = fullName.split(/[.[]/)[0];\n    var index = fullName.match(/\\d+/g);\n    index = _isDefined(index) ? parseInt(index[0]) : index;\n\n    if (fullName.indexOf(\"visualRange\") > 0) {\n      if (\"object\" !== type(value)) {\n        value = wrapVisualRange(fullName, value) || value;\n      }\n\n      that._setCustomVisualRange(name, index, value);\n    } else if ((\"object\" === type(value) || _isArray(value)) && name.indexOf(\"Axis\") > 0 && JSON.stringify(value).indexOf(\"visualRange\") > 0) {\n      if (_isDefined(value.visualRange)) {\n        that._setCustomVisualRange(name, index, value.visualRange);\n      } else if (_isArray(value)) {\n        value.forEach((a, i) => _isDefined(a.visualRange) && that._setCustomVisualRange(name, i, a.visualRange));\n      }\n    }\n  },\n\n  _setCustomVisualRange(axesName, index, value) {\n    var options = this._options.silent(axesName);\n\n    if (!options) {\n      return;\n    }\n\n    if (!_isDefined(index)) {\n      options._customVisualRange = value;\n    } else {\n      options[index]._customVisualRange = value;\n    }\n\n    this._axesReinitialized = true;\n  },\n\n  _raiseZoomEndHandlers() {\n    this._valueAxes.forEach(axis => axis.handleZoomEnd());\n  },\n\n  _setOptionsByReference() {\n    this.callBase();\n\n    _extend(this._optionsByReference, {\n      \"valueAxis.visualRange\": true\n    });\n  },\n\n  _notifyOptionChanged(option, value, previousValue) {\n    this.callBase.apply(this, arguments);\n\n    if (!this._optionChangedLocker) {\n      this._parseVisualRangeOption(option, value);\n    }\n  },\n\n  _notifyVisualRange() {\n    var that = this;\n\n    that._valueAxes.forEach(axis => {\n      var axisPath = axis.getOptions().optionPath;\n\n      if (axisPath) {\n        var path = \"\".concat(axisPath, \".visualRange\");\n        var visualRange = convertVisualRangeObject(axis.visualRange(), !_isArray(that.option(path)));\n\n        if (!axis.skipEventRising || !rangesAreEqual(visualRange, that.option(path))) {\n          if (!that.option(axisPath) && \"valueAxis\" !== axisPath) {\n            that.option(axisPath, {\n              name: axis.name,\n              visualRange: visualRange\n            });\n          } else {\n            that.option(path, visualRange);\n          }\n        } else {\n          axis.skipEventRising = null;\n        }\n      }\n    });\n  },\n\n  _notify() {\n    this.callBase();\n    this._axesReinitialized = false;\n\n    if (true !== this.option(\"disableTwoWayBinding\")) {\n      this.skipOptionsRollBack = true;\n\n      this._notifyVisualRange();\n\n      this.skipOptionsRollBack = false;\n    }\n  },\n\n  _getAxesForScaling() {\n    return this._valueAxes;\n  },\n\n  _getAxesByOptionPath(arg, isDirectOption, optionName) {\n    var sourceAxes = this._getAxesForScaling();\n\n    var axes = [];\n\n    if (isDirectOption) {\n      var axisPath;\n\n      if (arg.fullName) {\n        axisPath = arg.fullName.slice(0, arg.fullName.indexOf(\".\"));\n      }\n\n      axes = sourceAxes.filter(a => a.getOptions().optionPath === axisPath);\n    } else if (\"object\" === type(arg.value)) {\n      axes = sourceAxes.filter(a => a.getOptions().optionPath === arg.name);\n    } else if (_isArray(arg.value)) {\n      arg.value.forEach((v, index) => {\n        var axis = sourceAxes.filter(a => a.getOptions().optionPath === \"\".concat(arg.name, \"[\").concat(index, \"]\"))[0];\n        _isDefined(v[optionName]) && _isDefined(axis) && (axes[index] = axis);\n      });\n    }\n\n    return axes;\n  },\n\n  _optionChanged(arg) {\n    if (!this._optionChangedLocker) {\n      var axes;\n      var isDirectOption = arg.fullName.indexOf(\"visualRange\") > 0 ? true : this.getPartialChangeOptionsName(arg).indexOf(\"visualRange\") > -1 ? false : void 0;\n\n      if (_isDefined(isDirectOption)) {\n        axes = this._getAxesByOptionPath(arg, isDirectOption, \"visualRange\");\n\n        if (axes) {\n          if (axes.length > 1 || _isArray(arg.value)) {\n            axes.forEach((a, index) => setAxisVisualRangeByOption(arg, a, isDirectOption, index));\n          } else if (1 === axes.length) {\n            setAxisVisualRangeByOption(arg, axes[0], isDirectOption);\n          }\n        }\n      }\n    }\n\n    this.callBase(arg);\n  },\n\n  _change_VISUAL_RANGE: function () {\n    this._recreateSizeDependentObjects(false);\n\n    if (!this._changes.has(\"FULL_RENDER\")) {\n      var resizePanesOnZoom = this.option(\"resizePanesOnZoom\");\n\n      this._doRender({\n        force: true,\n        drawTitle: false,\n        drawLegend: false,\n        adjustAxes: null !== resizePanesOnZoom && void 0 !== resizePanesOnZoom ? resizePanesOnZoom : this.option(\"adjustAxesOnZoom\") || false,\n        animate: false\n      });\n\n      this._raiseZoomEndHandlers();\n    }\n  },\n\n  resetVisualRange() {\n    var that = this;\n\n    that._valueAxes.forEach(axis => {\n      axis.resetVisualRange(false);\n\n      that._applyCustomVisualRangeOption(axis);\n    });\n\n    that._requestChange([VISUAL_RANGE]);\n  },\n\n  _getCrosshairMargins: () => ({\n    x: 0,\n    y: 0\n  }),\n  _legendDataField: \"series\",\n  _adjustSeriesLabels: _noop,\n  _correctValueAxes: _noop\n});","map":{"version":3,"names":["_extends","extend","_extend","each","_each","reverseEach","_reverseEach","Range","Axis","SeriesFamily","BaseChart","rangeDataCalculator","isDefined","_isDefined","type","noop","_noop","convertVisualRangeObject","rangesAreEqual","map","_map","mergeMarginOptions","setCanvasValues","unique","_isArray","Array","isArray","DEFAULT_AXIS_NAME","FONT","COMMON_AXIS_SETTINGS","DEFAULT_PANE_NAME","VISUAL_RANGE","prepareAxis","axisOptions","length","processBubbleMargin","opt","bubbleSize","processBubbleSize","size","estimateBubbleSize","panesCount","maxSize","rotated","width","height","Math","min","setAxisVisualRangeByOption","arg","axis","isDirectOption","index","options","visualRange","value","skipEventRising","wrappedVisualRange","wrapVisualRange","fullName","allowPartialUpdate","getAxisTypes","groupsData","isArgumentAxes","argumentAxisType","argumentType","valueAxisType","valueType","groups","filter","g","valueAxis","pathElements","split","destElem","AdvancedChart","inherit","_fontFields","_partialOptionChangesMap","_customVisualRange","strips","constantLines","_partialOptionChangesPath","argumentAxis","_initCore","_panesClipRects","callBase","_disposeCore","disposeObjectsInArray","_disposeObjectsInArray","panesClipRects","call","_labelsAxesGroup","linkOff","dispose","_dispose","panes","_legend","_disposeAxes","_createPanes","_cleanPanesClipRects","clipArrayName","clipArray","forEach","clipRect","_getElementsClipRectID","paneName","clipShape","fixed","_getPaneIndex","id","paneIndex","name","pane","_updateSize","_canvas","_reinitAxes","_populateAxes","_axesReinitialized","that","_isRotated","argumentAxesOptions","option","valueAxisOption","valueAxesOptions","argumentAxesPopulatedOptions","valueAxesPopulatedOptions","axisNames","valueAxesCounter","paneWithNonVirtualAxis","crosshairMargins","_getCrosshairMargins","position","virtual","_populateAxesOptions","optionPath","crosshairMargin","x","y","priority","_axisOptions$panes","axisPanes","includes","_incidentOccurred","push","concat","slice","_","_redesignAxes","axesBasis","axes","_argumentAxes","_valueAxes","curAxes","a","some","p","axisTypes","_groupsData","updateOptions","setTypes","validate","basis","_disposeAxis","isVirtual","_createAxis","applyVisualRangeSetter","_getVisualRangeSetter","isArgumentAxis","splice","_appendAdditionalSeriesGroups","_crosshairCursorGroup","linkAppend","_scrollBar","_scrollBarGroup","_getLegendTargets","series","s","item","_getLegendOptions","legendData","getOptions","showInLegend","visible","_legendItemTextField","_seriesPopulatedHandlerCore","_processSeriesFamilies","_processValueAxisFormat","_renderTrackers","i","drawTrackers","_specialProcessSeries","_that$seriesFamilies","types","families","paneSeries","themeManager","_themeManager","negativesAsZeroes","negativesAsZeros","familyOptions","minBubbleSize","maxBubbleSize","barGroupPadding","barGroupWidth","seriesFamilies","family","adjustSeriesValues","_getLayoutTargets","_getSeriesForPane","add","_updateSeriesDimensions","updateSeriesValues","adjustSeriesDimensions","_getLegendCallBack","getActionCallback","_appendAxesGroups","_stripsGroup","_gridGroup","_axesGroup","_constantLinesGroup","_stripLabelAxesGroup","_scaleBreaksGroup","_populateMarginOptions","getSize","argumentMarginOptions","groupSeries","getValueAxis","marginOptions","isVisible","seriesMarginOptions","getMarginOptions","setMarginOptions","_populateBusinessRange","updatedAxis","keepRange","_getVisibleSeries","argRanges","commonArgRange","getPaneName","groupRange","seriesRange","getRangeData","addRange","val","setGroupSeries","setBusinessRange","_lastVisualRangeUpdateMode","Object","keys","commonInterval","interval","_argRanges$getPaneNam","currentInterval","categories","getArgumentAxis","defaultPane","_getGroupsData","valueOptions","argumentAxes","argumentOptions","_groupSeries","_correctValueAxes","axesWithFullStackedFormat","isFullStackedSeries","setPercentLabelFormat","indexOf","resetAutoLabelFormat","typeSelector","userOptions","preparedUserOptions","_prepareStripsAndConstantLines","_prepareAxisOptions","tick","minorTick","label","title","_getValFilter","getViewPortFilter","renderingSettings","renderer","_renderer","incidentOccurred","eventTrigger","_eventTrigger","axisClass","widgetClass","stripsGroup","stripLabelAxesGroup","constantLinesGroup","scaleBreaksGroup","axesContainerGroup","labelsAxesGroup","gridGroup","getTemplate","template","_getTemplate","_getAxisRenderingOptions","_applyVisualRangeByVirtualAxes","range","_applyCustomVisualRangeOption","_parseVisualRangeOption","chart","_ref","setCustomVisualRange","_applyingChanges","_change_VISUAL_RANGE","_requestChange","_getTrackerSettings","stripStyle","line","constantLineStyle","refresh","_layoutAxes","drawAxes","needSpace","checkForMoreSpaceForPanesCanvas","rect","_rect","_layout","backward","max","_createCanvasFromRect","layoutManager","needMoreSpaceForPanesCanvas","match","parseInt","_setCustomVisualRange","JSON","stringify","axesName","_options","silent","_raiseZoomEndHandlers","handleZoomEnd","_setOptionsByReference","_optionsByReference","_notifyOptionChanged","previousValue","apply","arguments","_optionChangedLocker","_notifyVisualRange","axisPath","path","_notify","skipOptionsRollBack","_getAxesForScaling","_getAxesByOptionPath","optionName","sourceAxes","v","_optionChanged","getPartialChangeOptionsName","_recreateSizeDependentObjects","_changes","has","resizePanesOnZoom","_doRender","force","drawTitle","drawLegend","adjustAxes","animate","resetVisualRange","_legendDataField","_adjustSeriesLabels"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/viz/chart_components/advanced_chart.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/viz/chart_components/advanced_chart.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    extend as _extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    each as _each,\r\n    reverseEach as _reverseEach\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    Range\r\n} from \"../translators/range\";\r\nimport {\r\n    Axis\r\n} from \"../axes/base_axis\";\r\nimport {\r\n    SeriesFamily\r\n} from \"../core/series_family\";\r\nimport {\r\n    BaseChart\r\n} from \"./base_chart\";\r\nimport rangeDataCalculator from \"../series/helpers/range_data_calculator\";\r\nimport {\r\n    isDefined as _isDefined,\r\n    type\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    noop as _noop\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    convertVisualRangeObject,\r\n    rangesAreEqual,\r\n    map as _map,\r\n    mergeMarginOptions,\r\n    setCanvasValues,\r\n    unique\r\n} from \"../core/utils\";\r\nvar _isArray = Array.isArray;\r\nvar DEFAULT_AXIS_NAME = \"defaultAxisName\";\r\nvar FONT = \"font\";\r\nvar COMMON_AXIS_SETTINGS = \"commonAxisSettings\";\r\nvar DEFAULT_PANE_NAME = \"default\";\r\nvar VISUAL_RANGE = \"VISUAL_RANGE\";\r\n\r\nfunction prepareAxis(axisOptions) {\r\n    return _isArray(axisOptions) ? 0 === axisOptions.length ? [{}] : axisOptions : [axisOptions]\r\n}\r\n\r\nfunction processBubbleMargin(opt, bubbleSize) {\r\n    if (opt.processBubbleSize) {\r\n        opt.size = bubbleSize\r\n    }\r\n    return opt\r\n}\r\n\r\nfunction estimateBubbleSize(size, panesCount, maxSize, rotated) {\r\n    var width = rotated ? size.width / panesCount : size.width;\r\n    var height = rotated ? size.height : size.height / panesCount;\r\n    return Math.min(width, height) * maxSize\r\n}\r\n\r\nfunction setAxisVisualRangeByOption(arg, axis, isDirectOption, index) {\r\n    var options;\r\n    var visualRange;\r\n    if (isDirectOption) {\r\n        visualRange = arg.value;\r\n        options = {\r\n            skipEventRising: true\r\n        };\r\n        var wrappedVisualRange = wrapVisualRange(arg.fullName, visualRange);\r\n        if (wrappedVisualRange) {\r\n            options = {\r\n                allowPartialUpdate: true\r\n            };\r\n            visualRange = wrappedVisualRange\r\n        }\r\n    } else {\r\n        visualRange = (_isDefined(index) ? arg.value[index] : arg.value).visualRange\r\n    }\r\n    axis.visualRange(visualRange, options)\r\n}\r\n\r\nfunction getAxisTypes(groupsData, axis, isArgumentAxes) {\r\n    if (isArgumentAxes) {\r\n        return {\r\n            argumentAxisType: groupsData.argumentAxisType,\r\n            argumentType: groupsData.argumentType\r\n        }\r\n    }\r\n    var {\r\n        valueAxisType: valueAxisType,\r\n        valueType: valueType\r\n    } = groupsData.groups.filter(g => g.valueAxis === axis)[0];\r\n    return {\r\n        valueAxisType: valueAxisType,\r\n        valueType: valueType\r\n    }\r\n}\r\n\r\nfunction wrapVisualRange(fullName, value) {\r\n    var pathElements = fullName.split(\".\");\r\n    var destElem = pathElements[pathElements.length - 1];\r\n    if (\"endValue\" === destElem || \"startValue\" === destElem) {\r\n        return {\r\n            [destElem]: value\r\n        }\r\n    }\r\n}\r\nexport var AdvancedChart = BaseChart.inherit({\r\n    _fontFields: [COMMON_AXIS_SETTINGS + \".label.\" + FONT, COMMON_AXIS_SETTINGS + \".title.\" + FONT],\r\n    _partialOptionChangesMap: {\r\n        visualRange: VISUAL_RANGE,\r\n        _customVisualRange: VISUAL_RANGE,\r\n        strips: \"REFRESH_AXES\",\r\n        constantLines: \"REFRESH_AXES\"\r\n    },\r\n    _partialOptionChangesPath: {\r\n        argumentAxis: [\"strips\", \"constantLines\", \"visualRange\", \"_customVisualRange\"],\r\n        valueAxis: [\"strips\", \"constantLines\", \"visualRange\", \"_customVisualRange\"]\r\n    },\r\n    _initCore() {\r\n        this._panesClipRects = {};\r\n        this.callBase()\r\n    },\r\n    _disposeCore() {\r\n        var disposeObjectsInArray = this._disposeObjectsInArray;\r\n        var panesClipRects = this._panesClipRects;\r\n        this.callBase();\r\n        disposeObjectsInArray.call(panesClipRects, \"fixed\");\r\n        disposeObjectsInArray.call(panesClipRects, \"base\");\r\n        disposeObjectsInArray.call(panesClipRects, \"wide\");\r\n        this._panesClipRects = null;\r\n        this._labelsAxesGroup.linkOff();\r\n        this._labelsAxesGroup.dispose();\r\n        this._labelsAxesGroup = null\r\n    },\r\n    _dispose: function() {\r\n        var disposeObjectsInArray = this._disposeObjectsInArray;\r\n        this.callBase();\r\n        this.panes = null;\r\n        if (this._legend) {\r\n            this._legend.dispose();\r\n            this._legend = null\r\n        }\r\n        disposeObjectsInArray.call(this, \"panesBackground\");\r\n        disposeObjectsInArray.call(this, \"seriesFamilies\");\r\n        this._disposeAxes()\r\n    },\r\n    _createPanes: function() {\r\n        this._cleanPanesClipRects(\"fixed\");\r\n        this._cleanPanesClipRects(\"base\");\r\n        this._cleanPanesClipRects(\"wide\")\r\n    },\r\n    _cleanPanesClipRects(clipArrayName) {\r\n        var clipArray = this._panesClipRects[clipArrayName];\r\n        (clipArray || []).forEach(clipRect => clipRect && clipRect.dispose());\r\n        this._panesClipRects[clipArrayName] = []\r\n    },\r\n    _getElementsClipRectID(paneName) {\r\n        var clipShape = this._panesClipRects.fixed[this._getPaneIndex(paneName)];\r\n        return clipShape && clipShape.id\r\n    },\r\n    _getPaneIndex(paneName) {\r\n        var paneIndex;\r\n        var name = paneName || DEFAULT_PANE_NAME;\r\n        _each(this.panes, (index, pane) => {\r\n            if (pane.name === name) {\r\n                paneIndex = index;\r\n                return false\r\n            }\r\n        });\r\n        return paneIndex\r\n    },\r\n    _updateSize() {\r\n        this.callBase();\r\n        setCanvasValues(this._canvas)\r\n    },\r\n    _reinitAxes: function() {\r\n        this.panes = this._createPanes();\r\n        this._populateAxes();\r\n        this._axesReinitialized = true\r\n    },\r\n    _populateAxes() {\r\n        var that = this;\r\n        var panes = that.panes;\r\n        var rotated = that._isRotated();\r\n        var argumentAxesOptions = prepareAxis(that.option(\"argumentAxis\") || {})[0];\r\n        var valueAxisOption = that.option(\"valueAxis\");\r\n        var valueAxesOptions = prepareAxis(valueAxisOption || {});\r\n        var argumentAxesPopulatedOptions;\r\n        var valueAxesPopulatedOptions = [];\r\n        var axisNames = [];\r\n        var valueAxesCounter = 0;\r\n        var paneWithNonVirtualAxis;\r\n        var crosshairMargins = that._getCrosshairMargins();\r\n        if (rotated) {\r\n            paneWithNonVirtualAxis = \"right\" === argumentAxesOptions.position ? panes[panes.length - 1].name : panes[0].name\r\n        } else {\r\n            paneWithNonVirtualAxis = \"top\" === argumentAxesOptions.position ? panes[0].name : panes[panes.length - 1].name\r\n        }\r\n        argumentAxesPopulatedOptions = _map(panes, pane => {\r\n            var virtual = pane.name !== paneWithNonVirtualAxis;\r\n            return that._populateAxesOptions(\"argumentAxis\", argumentAxesOptions, {\r\n                pane: pane.name,\r\n                name: null,\r\n                optionPath: \"argumentAxis\",\r\n                crosshairMargin: rotated ? crosshairMargins.x : crosshairMargins.y\r\n            }, rotated, virtual)\r\n        });\r\n        _each(valueAxesOptions, (priority, axisOptions) => {\r\n            var _axisOptions$panes;\r\n            var axisPanes = [];\r\n            var name = axisOptions.name;\r\n            if (name && axisNames.includes(name)) {\r\n                that._incidentOccurred(\"E2102\");\r\n                return\r\n            }\r\n            name && axisNames.push(name);\r\n            if (axisOptions.pane) {\r\n                axisPanes.push(axisOptions.pane)\r\n            }\r\n            if (null !== (_axisOptions$panes = axisOptions.panes) && void 0 !== _axisOptions$panes && _axisOptions$panes.length) {\r\n                axisPanes = axisPanes.concat(axisOptions.panes.slice(0))\r\n            }\r\n            axisPanes = unique(axisPanes);\r\n            if (!axisPanes.length) {\r\n                axisPanes.push(void 0)\r\n            }\r\n            _each(axisPanes, (_, pane) => {\r\n                var optionPath = _isArray(valueAxisOption) ? \"valueAxis[\".concat(priority, \"]\") : \"valueAxis\";\r\n                valueAxesPopulatedOptions.push(that._populateAxesOptions(\"valueAxis\", axisOptions, {\r\n                    name: name || DEFAULT_AXIS_NAME + valueAxesCounter++,\r\n                    pane: pane,\r\n                    priority: priority,\r\n                    optionPath: optionPath,\r\n                    crosshairMargin: rotated ? crosshairMargins.y : crosshairMargins.x\r\n                }, rotated))\r\n            })\r\n        });\r\n        that._redesignAxes(argumentAxesPopulatedOptions, true, paneWithNonVirtualAxis);\r\n        that._redesignAxes(valueAxesPopulatedOptions, false)\r\n    },\r\n    _redesignAxes(options, isArgumentAxes, paneWithNonVirtualAxis) {\r\n        var that = this;\r\n        var axesBasis = [];\r\n        var axes = isArgumentAxes ? that._argumentAxes : that._valueAxes;\r\n        _each(options, (_, opt) => {\r\n            var curAxes = axes && axes.filter(a => a.name === opt.name && (!_isDefined(opt.pane) && that.panes.some(p => p.name === a.pane) || a.pane === opt.pane));\r\n            if (curAxes && curAxes.length > 0) {\r\n                _each(curAxes, (_, axis) => {\r\n                    var axisTypes = getAxisTypes(that._groupsData, axis, isArgumentAxes);\r\n                    axis.updateOptions(opt);\r\n                    if (isArgumentAxes) {\r\n                        axis.setTypes(axisTypes.argumentAxisType, axisTypes.argumentType, \"argumentType\")\r\n                    } else {\r\n                        axis.setTypes(axisTypes.valueAxisType, axisTypes.valueType, \"valueType\")\r\n                    }\r\n                    axis.validate();\r\n                    axesBasis.push({\r\n                        axis: axis\r\n                    })\r\n                })\r\n            } else {\r\n                axesBasis.push({\r\n                    options: opt\r\n                })\r\n            }\r\n        });\r\n        if (axes) {\r\n            _reverseEach(axes, (index, axis) => {\r\n                if (!axesBasis.some(basis => basis.axis && basis.axis === axis)) {\r\n                    that._disposeAxis(index, isArgumentAxes)\r\n                }\r\n            })\r\n        } else if (isArgumentAxes) {\r\n            axes = that._argumentAxes = []\r\n        } else {\r\n            axes = that._valueAxes = []\r\n        }\r\n        _each(axesBasis, (_, basis) => {\r\n            var axis = basis.axis;\r\n            if (basis.axis && isArgumentAxes) {\r\n                basis.axis.isVirtual = basis.axis.pane !== paneWithNonVirtualAxis\r\n            } else if (basis.options) {\r\n                axis = that._createAxis(isArgumentAxes, basis.options, isArgumentAxes ? basis.options.pane !== paneWithNonVirtualAxis : void 0);\r\n                axes.push(axis)\r\n            }\r\n            axis.applyVisualRangeSetter(that._getVisualRangeSetter())\r\n        })\r\n    },\r\n    _disposeAxis(index, isArgumentAxis) {\r\n        var axes = isArgumentAxis ? this._argumentAxes : this._valueAxes;\r\n        var axis = axes[index];\r\n        if (!axis) {\r\n            return\r\n        }\r\n        axis.dispose();\r\n        axes.splice(index, 1)\r\n    },\r\n    _disposeAxes: function() {\r\n        var disposeObjectsInArray = this._disposeObjectsInArray;\r\n        disposeObjectsInArray.call(this, \"_argumentAxes\");\r\n        disposeObjectsInArray.call(this, \"_valueAxes\")\r\n    },\r\n    _appendAdditionalSeriesGroups: function() {\r\n        this._crosshairCursorGroup.linkAppend();\r\n        this._scrollBar && this._scrollBarGroup.linkAppend()\r\n    },\r\n    _getLegendTargets: function() {\r\n        return (this.series || []).map(s => {\r\n            var item = this._getLegendOptions(s);\r\n            item.legendData.series = s;\r\n            if (!s.getOptions().showInLegend) {\r\n                item.legendData.visible = false\r\n            }\r\n            return item\r\n        })\r\n    },\r\n    _legendItemTextField: \"name\",\r\n    _seriesPopulatedHandlerCore: function() {\r\n        this._processSeriesFamilies();\r\n        this._processValueAxisFormat()\r\n    },\r\n    _renderTrackers: function() {\r\n        var i;\r\n        for (i = 0; i < this.series.length; ++i) {\r\n            this.series[i].drawTrackers()\r\n        }\r\n    },\r\n    _specialProcessSeries: function() {\r\n        this._processSeriesFamilies()\r\n    },\r\n    _processSeriesFamilies: function() {\r\n        var _that$seriesFamilies;\r\n        var that = this;\r\n        var types = [];\r\n        var families = [];\r\n        var paneSeries;\r\n        var themeManager = that._themeManager;\r\n        var negativesAsZeroes = themeManager.getOptions(\"negativesAsZeroes\");\r\n        var negativesAsZeros = themeManager.getOptions(\"negativesAsZeros\");\r\n        var familyOptions = {\r\n            minBubbleSize: themeManager.getOptions(\"minBubbleSize\"),\r\n            maxBubbleSize: themeManager.getOptions(\"maxBubbleSize\"),\r\n            barGroupPadding: themeManager.getOptions(\"barGroupPadding\"),\r\n            barGroupWidth: themeManager.getOptions(\"barGroupWidth\"),\r\n            negativesAsZeroes: _isDefined(negativesAsZeroes) ? negativesAsZeroes : negativesAsZeros\r\n        };\r\n        if (null !== (_that$seriesFamilies = that.seriesFamilies) && void 0 !== _that$seriesFamilies && _that$seriesFamilies.length) {\r\n            _each(that.seriesFamilies, (function(_, family) {\r\n                family.updateOptions(familyOptions);\r\n                family.adjustSeriesValues()\r\n            }));\r\n            return\r\n        }\r\n        _each(that.series, (function(_, item) {\r\n            if (!types.includes(item.type)) {\r\n                types.push(item.type)\r\n            }\r\n        }));\r\n        _each(that._getLayoutTargets(), (function(_, pane) {\r\n            paneSeries = that._getSeriesForPane(pane.name);\r\n            _each(types, (function(_, type) {\r\n                var family = new SeriesFamily({\r\n                    type: type,\r\n                    pane: pane.name,\r\n                    minBubbleSize: familyOptions.minBubbleSize,\r\n                    maxBubbleSize: familyOptions.maxBubbleSize,\r\n                    barGroupPadding: familyOptions.barGroupPadding,\r\n                    barGroupWidth: familyOptions.barGroupWidth,\r\n                    negativesAsZeroes: familyOptions.negativesAsZeroes,\r\n                    rotated: that._isRotated()\r\n                });\r\n                family.add(paneSeries);\r\n                family.adjustSeriesValues();\r\n                families.push(family)\r\n            }))\r\n        }));\r\n        that.seriesFamilies = families\r\n    },\r\n    _updateSeriesDimensions: function() {\r\n        var i;\r\n        var seriesFamilies = this.seriesFamilies || [];\r\n        for (i = 0; i < seriesFamilies.length; i++) {\r\n            var family = seriesFamilies[i];\r\n            family.updateSeriesValues();\r\n            family.adjustSeriesDimensions()\r\n        }\r\n    },\r\n    _getLegendCallBack: function(series) {\r\n        return this._legend && this._legend.getActionCallback(series)\r\n    },\r\n    _appendAxesGroups: function() {\r\n        this._stripsGroup.linkAppend();\r\n        this._gridGroup.linkAppend();\r\n        this._axesGroup.linkAppend();\r\n        this._labelsAxesGroup.linkAppend();\r\n        this._constantLinesGroup.linkAppend();\r\n        this._stripLabelAxesGroup.linkAppend();\r\n        this._scaleBreaksGroup.linkAppend()\r\n    },\r\n    _populateMarginOptions() {\r\n        var that = this;\r\n        var bubbleSize = estimateBubbleSize(that.getSize(), that.panes.length, that._themeManager.getOptions(\"maxBubbleSize\"), that._isRotated());\r\n        var argumentMarginOptions = {};\r\n        that._valueAxes.forEach(valueAxis => {\r\n            var groupSeries = that.series.filter((function(series) {\r\n                return series.getValueAxis() === valueAxis\r\n            }));\r\n            var marginOptions = {};\r\n            groupSeries.forEach(series => {\r\n                if (series.isVisible()) {\r\n                    var seriesMarginOptions = processBubbleMargin(series.getMarginOptions(), bubbleSize);\r\n                    marginOptions = mergeMarginOptions(marginOptions, seriesMarginOptions);\r\n                    argumentMarginOptions = mergeMarginOptions(argumentMarginOptions, seriesMarginOptions)\r\n                }\r\n            });\r\n            valueAxis.setMarginOptions(marginOptions)\r\n        });\r\n        that._argumentAxes.forEach(a => a.setMarginOptions(argumentMarginOptions))\r\n    },\r\n    _populateBusinessRange(updatedAxis, keepRange) {\r\n        var that = this;\r\n        var rotated = that._isRotated();\r\n        var series = that._getVisibleSeries();\r\n        var argRanges = {};\r\n        var commonArgRange = new Range({\r\n            rotated: !!rotated\r\n        });\r\n        var getPaneName = axis => axis.pane || DEFAULT_PANE_NAME;\r\n        that.panes.forEach(p => argRanges[p.name] = new Range({\r\n            rotated: !!rotated\r\n        }));\r\n        that._valueAxes.forEach(valueAxis => {\r\n            var groupRange = new Range({\r\n                rotated: !!rotated,\r\n                pane: valueAxis.pane,\r\n                axis: valueAxis.name\r\n            });\r\n            var groupSeries = series.filter(series => series.getValueAxis() === valueAxis);\r\n            groupSeries.forEach(series => {\r\n                var seriesRange = series.getRangeData();\r\n                groupRange.addRange(seriesRange.val);\r\n                argRanges[getPaneName(valueAxis)].addRange(seriesRange.arg)\r\n            });\r\n            if (!updatedAxis || updatedAxis && groupSeries.length && valueAxis === updatedAxis) {\r\n                valueAxis.setGroupSeries(groupSeries);\r\n                valueAxis.setBusinessRange(groupRange, that._axesReinitialized || keepRange, that._argumentAxes[0]._lastVisualRangeUpdateMode)\r\n            }\r\n        });\r\n        if (!updatedAxis || updatedAxis && series.length) {\r\n            Object.keys(argRanges).forEach(p => commonArgRange.addRange(argRanges[p]));\r\n            var commonInterval = commonArgRange.interval;\r\n            that._argumentAxes.forEach(a => {\r\n                var _argRanges$getPaneNam;\r\n                var currentInterval = null !== (_argRanges$getPaneNam = argRanges[getPaneName(a)].interval) && void 0 !== _argRanges$getPaneNam ? _argRanges$getPaneNam : commonInterval;\r\n                a.setBusinessRange(new Range(_extends({}, commonArgRange, {\r\n                    interval: currentInterval\r\n                })), that._axesReinitialized, void 0, that._groupsData.categories)\r\n            })\r\n        }\r\n        that._populateMarginOptions()\r\n    },\r\n    getArgumentAxis: function() {\r\n        return (this._argumentAxes || []).filter(a => !a.isVirtual)[0]\r\n    },\r\n    getValueAxis: function(name) {\r\n        return (this._valueAxes || []).filter(_isDefined(name) ? a => a.name === name : a => a.pane === this.defaultPane)[0]\r\n    },\r\n    _getGroupsData: function() {\r\n        var that = this;\r\n        var groups = [];\r\n        that._valueAxes.forEach((function(axis) {\r\n            groups.push({\r\n                series: that.series.filter((function(series) {\r\n                    return series.getValueAxis() === axis\r\n                })),\r\n                valueAxis: axis,\r\n                valueOptions: axis.getOptions()\r\n            })\r\n        }));\r\n        return {\r\n            groups: groups,\r\n            argumentAxes: that._argumentAxes,\r\n            argumentOptions: that._argumentAxes[0].getOptions()\r\n        }\r\n    },\r\n    _groupSeries: function() {\r\n        this._correctValueAxes(false);\r\n        this._groupsData = this._getGroupsData()\r\n    },\r\n    _processValueAxisFormat: function() {\r\n        var axesWithFullStackedFormat = [];\r\n        this.series.forEach((function(series) {\r\n            var axis = series.getValueAxis();\r\n            if (series.isFullStackedSeries()) {\r\n                axis.setPercentLabelFormat();\r\n                axesWithFullStackedFormat.push(axis)\r\n            }\r\n        }));\r\n        this._valueAxes.forEach((function(axis) {\r\n            if (-1 === axesWithFullStackedFormat.indexOf(axis)) {\r\n                axis.resetAutoLabelFormat()\r\n            }\r\n        }))\r\n    },\r\n    _populateAxesOptions(typeSelector, userOptions, axisOptions, rotated, virtual) {\r\n        var preparedUserOptions = this._prepareStripsAndConstantLines(typeSelector, userOptions, rotated);\r\n        var options = _extend(true, {}, preparedUserOptions, axisOptions, this._prepareAxisOptions(typeSelector, preparedUserOptions, rotated));\r\n        if (virtual) {\r\n            options.visible = options.tick.visible = options.minorTick.visible = options.label.visible = false;\r\n            options.title = {}\r\n        }\r\n        return options\r\n    },\r\n    _getValFilter: series => rangeDataCalculator.getViewPortFilter(series.getValueAxis().visualRange() || {}),\r\n    _createAxis(isArgumentAxes, options, virtual) {\r\n        var that = this;\r\n        var typeSelector = isArgumentAxes ? \"argumentAxis\" : \"valueAxis\";\r\n        var renderingSettings = _extend({\r\n            renderer: that._renderer,\r\n            incidentOccurred: that._incidentOccurred,\r\n            eventTrigger: that._eventTrigger,\r\n            axisClass: isArgumentAxes ? \"arg\" : \"val\",\r\n            widgetClass: \"dxc\",\r\n            stripsGroup: that._stripsGroup,\r\n            stripLabelAxesGroup: that._stripLabelAxesGroup,\r\n            constantLinesGroup: that._constantLinesGroup,\r\n            scaleBreaksGroup: that._scaleBreaksGroup,\r\n            axesContainerGroup: that._axesGroup,\r\n            labelsAxesGroup: that._labelsAxesGroup,\r\n            gridGroup: that._gridGroup,\r\n            isArgumentAxis: isArgumentAxes,\r\n            getTemplate: template => that._getTemplate(template)\r\n        }, that._getAxisRenderingOptions(typeSelector));\r\n        var axis = new Axis(renderingSettings);\r\n        axis.updateOptions(options);\r\n        axis.isVirtual = virtual;\r\n        return axis\r\n    },\r\n    _applyVisualRangeByVirtualAxes: (axis, range) => false,\r\n    _applyCustomVisualRangeOption(axis, range) {\r\n        if (axis.getOptions().optionPath) {\r\n            this._parseVisualRangeOption(\"\".concat(axis.getOptions().optionPath, \".visualRange\"), range)\r\n        }\r\n    },\r\n    _getVisualRangeSetter() {\r\n        var chart = this;\r\n        return function(axis, _ref) {\r\n            var {\r\n                skipEventRising: skipEventRising,\r\n                range: range\r\n            } = _ref;\r\n            chart._applyCustomVisualRangeOption(axis, range);\r\n            axis.setCustomVisualRange(range);\r\n            axis.skipEventRising = skipEventRising;\r\n            if (!chart._applyVisualRangeByVirtualAxes(axis, range)) {\r\n                if (chart._applyingChanges) {\r\n                    chart._change_VISUAL_RANGE()\r\n                } else {\r\n                    chart._requestChange([VISUAL_RANGE])\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _getTrackerSettings: function() {\r\n        return _extend(this.callBase(), {\r\n            argumentAxis: this.getArgumentAxis()\r\n        })\r\n    },\r\n    _prepareStripsAndConstantLines: function(typeSelector, userOptions, rotated) {\r\n        userOptions = this._themeManager.getOptions(typeSelector, userOptions, rotated);\r\n        if (userOptions.strips) {\r\n            _each(userOptions.strips, (function(i) {\r\n                userOptions.strips[i] = _extend(true, {}, userOptions.stripStyle, userOptions.strips[i])\r\n            }))\r\n        }\r\n        if (userOptions.constantLines) {\r\n            _each(userOptions.constantLines, (function(i, line) {\r\n                userOptions.constantLines[i] = _extend(true, {}, userOptions.constantLineStyle, line)\r\n            }))\r\n        }\r\n        return userOptions\r\n    },\r\n    refresh: function() {\r\n        this._disposeAxes();\r\n        this.callBase()\r\n    },\r\n    _layoutAxes(drawAxes) {\r\n        drawAxes();\r\n        var needSpace = this.checkForMoreSpaceForPanesCanvas();\r\n        if (needSpace) {\r\n            var rect = this._rect.slice();\r\n            var size = this._layout.backward(rect, rect, [needSpace.width, needSpace.height]);\r\n            needSpace.width = Math.max(0, size[0]);\r\n            needSpace.height = Math.max(0, size[1]);\r\n            this._canvas = this._createCanvasFromRect(rect);\r\n            drawAxes(needSpace)\r\n        }\r\n    },\r\n    checkForMoreSpaceForPanesCanvas() {\r\n        return this.layoutManager.needMoreSpaceForPanesCanvas(this._getLayoutTargets(), this._isRotated())\r\n    },\r\n    _parseVisualRangeOption(fullName, value) {\r\n        var that = this;\r\n        var name = fullName.split(/[.[]/)[0];\r\n        var index = fullName.match(/\\d+/g);\r\n        index = _isDefined(index) ? parseInt(index[0]) : index;\r\n        if (fullName.indexOf(\"visualRange\") > 0) {\r\n            if (\"object\" !== type(value)) {\r\n                value = wrapVisualRange(fullName, value) || value\r\n            }\r\n            that._setCustomVisualRange(name, index, value)\r\n        } else if ((\"object\" === type(value) || _isArray(value)) && name.indexOf(\"Axis\") > 0 && JSON.stringify(value).indexOf(\"visualRange\") > 0) {\r\n            if (_isDefined(value.visualRange)) {\r\n                that._setCustomVisualRange(name, index, value.visualRange)\r\n            } else if (_isArray(value)) {\r\n                value.forEach((a, i) => _isDefined(a.visualRange) && that._setCustomVisualRange(name, i, a.visualRange))\r\n            }\r\n        }\r\n    },\r\n    _setCustomVisualRange(axesName, index, value) {\r\n        var options = this._options.silent(axesName);\r\n        if (!options) {\r\n            return\r\n        }\r\n        if (!_isDefined(index)) {\r\n            options._customVisualRange = value\r\n        } else {\r\n            options[index]._customVisualRange = value\r\n        }\r\n        this._axesReinitialized = true\r\n    },\r\n    _raiseZoomEndHandlers() {\r\n        this._valueAxes.forEach(axis => axis.handleZoomEnd())\r\n    },\r\n    _setOptionsByReference() {\r\n        this.callBase();\r\n        _extend(this._optionsByReference, {\r\n            \"valueAxis.visualRange\": true\r\n        })\r\n    },\r\n    _notifyOptionChanged(option, value, previousValue) {\r\n        this.callBase.apply(this, arguments);\r\n        if (!this._optionChangedLocker) {\r\n            this._parseVisualRangeOption(option, value)\r\n        }\r\n    },\r\n    _notifyVisualRange() {\r\n        var that = this;\r\n        that._valueAxes.forEach(axis => {\r\n            var axisPath = axis.getOptions().optionPath;\r\n            if (axisPath) {\r\n                var path = \"\".concat(axisPath, \".visualRange\");\r\n                var visualRange = convertVisualRangeObject(axis.visualRange(), !_isArray(that.option(path)));\r\n                if (!axis.skipEventRising || !rangesAreEqual(visualRange, that.option(path))) {\r\n                    if (!that.option(axisPath) && \"valueAxis\" !== axisPath) {\r\n                        that.option(axisPath, {\r\n                            name: axis.name,\r\n                            visualRange: visualRange\r\n                        })\r\n                    } else {\r\n                        that.option(path, visualRange)\r\n                    }\r\n                } else {\r\n                    axis.skipEventRising = null\r\n                }\r\n            }\r\n        })\r\n    },\r\n    _notify() {\r\n        this.callBase();\r\n        this._axesReinitialized = false;\r\n        if (true !== this.option(\"disableTwoWayBinding\")) {\r\n            this.skipOptionsRollBack = true;\r\n            this._notifyVisualRange();\r\n            this.skipOptionsRollBack = false\r\n        }\r\n    },\r\n    _getAxesForScaling() {\r\n        return this._valueAxes\r\n    },\r\n    _getAxesByOptionPath(arg, isDirectOption, optionName) {\r\n        var sourceAxes = this._getAxesForScaling();\r\n        var axes = [];\r\n        if (isDirectOption) {\r\n            var axisPath;\r\n            if (arg.fullName) {\r\n                axisPath = arg.fullName.slice(0, arg.fullName.indexOf(\".\"))\r\n            }\r\n            axes = sourceAxes.filter(a => a.getOptions().optionPath === axisPath)\r\n        } else if (\"object\" === type(arg.value)) {\r\n            axes = sourceAxes.filter(a => a.getOptions().optionPath === arg.name)\r\n        } else if (_isArray(arg.value)) {\r\n            arg.value.forEach((v, index) => {\r\n                var axis = sourceAxes.filter(a => a.getOptions().optionPath === \"\".concat(arg.name, \"[\").concat(index, \"]\"))[0];\r\n                _isDefined(v[optionName]) && _isDefined(axis) && (axes[index] = axis)\r\n            })\r\n        }\r\n        return axes\r\n    },\r\n    _optionChanged(arg) {\r\n        if (!this._optionChangedLocker) {\r\n            var axes;\r\n            var isDirectOption = arg.fullName.indexOf(\"visualRange\") > 0 ? true : this.getPartialChangeOptionsName(arg).indexOf(\"visualRange\") > -1 ? false : void 0;\r\n            if (_isDefined(isDirectOption)) {\r\n                axes = this._getAxesByOptionPath(arg, isDirectOption, \"visualRange\");\r\n                if (axes) {\r\n                    if (axes.length > 1 || _isArray(arg.value)) {\r\n                        axes.forEach((a, index) => setAxisVisualRangeByOption(arg, a, isDirectOption, index))\r\n                    } else if (1 === axes.length) {\r\n                        setAxisVisualRangeByOption(arg, axes[0], isDirectOption)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.callBase(arg)\r\n    },\r\n    _change_VISUAL_RANGE: function() {\r\n        this._recreateSizeDependentObjects(false);\r\n        if (!this._changes.has(\"FULL_RENDER\")) {\r\n            var resizePanesOnZoom = this.option(\"resizePanesOnZoom\");\r\n            this._doRender({\r\n                force: true,\r\n                drawTitle: false,\r\n                drawLegend: false,\r\n                adjustAxes: null !== resizePanesOnZoom && void 0 !== resizePanesOnZoom ? resizePanesOnZoom : this.option(\"adjustAxesOnZoom\") || false,\r\n                animate: false\r\n            });\r\n            this._raiseZoomEndHandlers()\r\n        }\r\n    },\r\n    resetVisualRange() {\r\n        var that = this;\r\n        that._valueAxes.forEach(axis => {\r\n            axis.resetVisualRange(false);\r\n            that._applyCustomVisualRangeOption(axis)\r\n        });\r\n        that._requestChange([VISUAL_RANGE])\r\n    },\r\n    _getCrosshairMargins: () => ({\r\n        x: 0,\r\n        y: 0\r\n    }),\r\n    _legendDataField: \"series\",\r\n    _adjustSeriesLabels: _noop,\r\n    _correctValueAxes: _noop\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}