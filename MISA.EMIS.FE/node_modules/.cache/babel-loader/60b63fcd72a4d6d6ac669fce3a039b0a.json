{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/color_box/color_view.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight, getWidth, getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { locate, move } from \"../../animation/translator\";\nimport { extend } from \"../../core/utils/extend\";\nimport Color from \"../../color\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Editor from \"../editor/editor\";\nimport NumberBox from \"../number_box\";\nimport TextBox from \"../text_box\";\nimport Draggable from \"../draggable\";\nimport { isCommandKeyPressed } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nvar COLOR_VIEW_CLASS = \"dx-colorview\";\nvar COLOR_VIEW_CONTAINER_CLASS = \"dx-colorview-container\";\nvar COLOR_VIEW_ROW_CLASS = \"dx-colorview-container-row\";\nvar COLOR_VIEW_CELL_CLASS = \"dx-colorview-container-cell\";\nvar COLOR_VIEW_PALETTE_CLASS = \"dx-colorview-palette\";\nvar COLOR_VIEW_PALETTE_CELL_CLASS = \"dx-colorview-palette-cell\";\nvar COLOR_VIEW_PALETTE_HANDLE_CLASS = \"dx-colorview-palette-handle\";\nvar COLOR_VIEW_PALETTE_GRADIENT_CLASS = \"dx-colorview-palette-gradient\";\nvar COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS = \"dx-colorview-palette-gradient-white\";\nvar COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS = \"dx-colorview-palette-gradient-black\";\nvar COLOR_VIEW_HUE_SCALE_CLASS = \"dx-colorview-hue-scale\";\nvar COLOR_VIEW_HUE_SCALE_CELL_CLASS = \"dx-colorview-hue-scale-cell\";\nvar COLOR_VIEW_HUE_SCALE_HANDLE_CLASS = \"dx-colorview-hue-scale-handle\";\nvar COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS = \"dx-colorview-hue-scale-wrapper\";\nvar COLOR_VIEW_CONTROLS_CONTAINER_CLASS = \"dx-colorview-controls-container\";\nvar COLOR_VIEW_RED_LABEL_CLASS = \"dx-colorview-label-red\";\nvar COLOR_VIEW_GREEN_LABEL_CLASS = \"dx-colorview-label-green\";\nvar COLOR_VIEW_BLUE_LABEL_CLASS = \"dx-colorview-label-blue\";\nvar COLOR_VIEW_HEX_LABEL_CLASS = \"dx-colorview-label-hex\";\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS = \"dx-colorview-alpha-channel-scale\";\nvar COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS = \"dx-colorview-alpha-channel-row\";\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS = \"dx-colorview-alpha-channel-wrapper\";\nvar COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS = \"dx-colorview-alpha-channel-label\";\nvar COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS = \"dx-colorview-alpha-channel-handle\";\nvar COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS = \"dx-colorview-alpha-channel-cell\";\nvar COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS = \"dx-colorview-alpha-channel-border\";\nvar COLOR_VIEW_COLOR_PREVIEW = \"dx-colorview-color-preview\";\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS = \"dx-colorview-color-preview-container\";\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS = \"dx-colorview-color-preview-container-inner\";\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT = \"dx-colorview-color-preview-color-current\";\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW = \"dx-colorview-color-preview-color-new\";\nvar ColorView = Editor.inherit({\n  _supportedKeys: function () {\n    var isRTL = this.option(\"rtlEnabled\");\n    var that = this;\n\n    var getHorizontalPaletteStep = function (e) {\n      var step = 100 / that._paletteWidth;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return Math.round(step);\n    };\n\n    var updateHorizontalPaletteValue = function (step) {\n      var value = that._currentColor.hsv.s + step;\n\n      if (value > 100) {\n        value = 100;\n      } else if (value < 0) {\n        value = 0;\n      }\n\n      that._currentColor.hsv.s = value;\n      updatePaletteValue();\n    };\n\n    var getVerticalPaletteStep = function (e) {\n      var step = 100 / that._paletteHeight;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return Math.round(step);\n    };\n\n    var updateVerticalPaletteValue = function (step) {\n      var value = that._currentColor.hsv.v + step;\n\n      if (value > 100) {\n        value = 100;\n      } else if (value < 0) {\n        value = 0;\n      }\n\n      that._currentColor.hsv.v = value;\n      updatePaletteValue();\n    };\n\n    function updatePaletteValue() {\n      that._placePaletteHandle();\n\n      that._updateColorFromHsv(that._currentColor.hsv.h, that._currentColor.hsv.s, that._currentColor.hsv.v);\n    }\n\n    var getHueScaleStep = function (e) {\n      var step = 360 / (that._hueScaleWrapperHeight - that._hueScaleHandleHeight);\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > 1 ? step : 1;\n      return step;\n    };\n\n    var updateHueScaleValue = function (step) {\n      that._currentColor.hsv.h += step;\n\n      that._placeHueScaleHandle();\n\n      var handleLocation = locate(that._$hueScaleHandle);\n\n      that._updateColorHue(handleLocation.top + that._hueScaleHandleHeight / 2);\n    };\n\n    var getAlphaScaleStep = function (e) {\n      var step = 1 / that._alphaChannelScaleWorkWidth;\n\n      if (e.shiftKey) {\n        step *= that.option(\"keyStep\");\n      }\n\n      step = step > .01 ? step : .01;\n      step = isRTL ? -step : step;\n      return step;\n    };\n\n    var updateAlphaScaleValue = function (step) {\n      that._currentColor.a += step;\n\n      that._placeAlphaChannelHandle();\n\n      var handleLocation = locate(that._$alphaChannelHandle);\n\n      that._calculateColorTransparencyByScaleWidth(handleLocation.left + that._alphaChannelHandleWidth / 2);\n    };\n\n    return extend(this.callBase(), {\n      upArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (isCommandKeyPressed(e)) {\n          if (this._currentColor.hsv.h <= 360 && !this._isTopColorHue) {\n            this._saveValueChangeEvent(e);\n\n            updateHueScaleValue(getHueScaleStep(e));\n          }\n        } else if (this._currentColor.hsv.v < 100) {\n          this._saveValueChangeEvent(e);\n\n          updateVerticalPaletteValue(getVerticalPaletteStep(e));\n        }\n      },\n      downArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (isCommandKeyPressed(e)) {\n          if (this._currentColor.hsv.h >= 0) {\n            if (this._isTopColorHue) {\n              this._currentColor.hsv.h = 360;\n            }\n\n            this._saveValueChangeEvent(e);\n\n            updateHueScaleValue(-getHueScaleStep(e));\n          }\n        } else if (this._currentColor.hsv.v > 0) {\n          this._saveValueChangeEvent(e);\n\n          updateVerticalPaletteValue(-getVerticalPaletteStep(e));\n        }\n      },\n      rightArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (isCommandKeyPressed(e)) {\n          if (isRTL ? this._currentColor.a < 1 : this._currentColor.a > 0 && this.option(\"editAlphaChannel\")) {\n            this._saveValueChangeEvent(e);\n\n            updateAlphaScaleValue(-getAlphaScaleStep(e));\n          }\n        } else if (this._currentColor.hsv.s < 100) {\n          this._saveValueChangeEvent(e);\n\n          updateHorizontalPaletteValue(getHorizontalPaletteStep(e));\n        }\n      },\n      leftArrow: function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (isCommandKeyPressed(e)) {\n          if (isRTL ? this._currentColor.a > 0 : this._currentColor.a < 1 && this.option(\"editAlphaChannel\")) {\n            this._saveValueChangeEvent(e);\n\n            updateAlphaScaleValue(getAlphaScaleStep(e));\n          }\n        } else if (this._currentColor.hsv.s > 0) {\n          this._saveValueChangeEvent(e);\n\n          updateHorizontalPaletteValue(-getHorizontalPaletteStep(e));\n        }\n      },\n      enter: function (e) {\n        this._fireEnterKeyPressed(e);\n      }\n    });\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      value: null,\n      matchValue: null,\n      onEnterKeyPressed: void 0,\n      editAlphaChannel: false,\n      keyStep: 1,\n      stylingMode: void 0\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return \"desktop\" === devices.real().deviceType && !devices.isSimulator();\n      },\n      options: {\n        focusStateEnabled: true\n      }\n    }]);\n  },\n  _init: function () {\n    this.callBase();\n\n    this._initColorAndOpacity();\n\n    this._initEnterKeyPressedAction();\n  },\n  _initEnterKeyPressedAction: function () {\n    this._onEnterKeyPressedAction = this._createActionByOption(\"onEnterKeyPressed\");\n  },\n  _fireEnterKeyPressed: function (e) {\n    if (!this._onEnterKeyPressedAction) {\n      return;\n    }\n\n    this._onEnterKeyPressedAction({\n      event: e\n    });\n  },\n  _initColorAndOpacity: function () {\n    this._setCurrentColor(this.option(\"value\"));\n  },\n  _setCurrentColor: function (value) {\n    value = value || \"#000000\";\n    var newColor = new Color(value);\n\n    if (!newColor.colorIsInvalid) {\n      if (!this._currentColor || this._makeRgba(this._currentColor) !== this._makeRgba(newColor)) {\n        this._currentColor = newColor;\n\n        if (this._$currentColor) {\n          this._makeTransparentBackground(this._$currentColor, newColor);\n        }\n      }\n    } else {\n      this.option(\"value\", this._currentColor.baseColor);\n    }\n  },\n  _setBaseColor: function (value) {\n    var color = value || \"#000000\";\n    var newColor = new Color(color);\n\n    if (!newColor.colorIsInvalid) {\n      var isBaseColorChanged = this._makeRgba(this.option(\"matchValue\") !== this._makeRgba(newColor));\n\n      if (isBaseColorChanged) {\n        if (this._$baseColor) {\n          this._makeTransparentBackground(this._$baseColor, newColor);\n        }\n      }\n    }\n  },\n  _initMarkup: function () {\n    this.callBase();\n    this.$element().addClass(COLOR_VIEW_CLASS);\n\n    this._renderColorPickerContainer();\n  },\n  _render: function () {\n    this.callBase();\n\n    this._renderPalette();\n\n    this._renderHueScale();\n\n    this._renderControlsContainer();\n\n    this._renderControls();\n\n    this._renderAlphaChannelElements();\n  },\n  _makeTransparentBackground: function ($el, color) {\n    if (!(color instanceof Color)) {\n      color = new Color(color);\n    }\n\n    $el.css(\"backgroundColor\", this._makeRgba(color));\n  },\n  _makeRgba: function (color) {\n    if (!(color instanceof Color)) {\n      color = new Color(color);\n    }\n\n    return \"rgba(\" + [color.r, color.g, color.b, color.a].join(\", \") + \")\";\n  },\n  _renderValue: function () {\n    this.callBase(this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this.option(\"value\"));\n  },\n  _renderColorPickerContainer: function () {\n    var $parent = this.$element();\n    this._$colorPickerContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTAINER_CLASS).appendTo($parent);\n\n    this._renderHtmlRows();\n  },\n  _renderHtmlRows: function (updatedOption) {\n    var $renderedRows = this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS);\n\n    var renderedRowsCount = $renderedRows.length;\n    var rowCount = this.option(\"editAlphaChannel\") ? 2 : 1;\n    var delta = renderedRowsCount - rowCount;\n\n    if (delta > 0) {\n      $renderedRows.eq(-1).remove();\n    }\n\n    if (delta < 0) {\n      delta = Math.abs(delta);\n      var rows = [];\n      var i;\n\n      for (i = 0; i < delta; i++) {\n        rows.push($(\"<div>\").addClass(COLOR_VIEW_ROW_CLASS));\n      }\n\n      if (renderedRowsCount) {\n        for (i = 0; i < rows.length; i++) {\n          $renderedRows.eq(0).after(rows[i]);\n        }\n      } else {\n        this._$colorPickerContainer.append(rows);\n      }\n    }\n  },\n  _renderHtmlCellInsideRow: function (index, $rowParent, additionalClass) {\n    return $(\"<div>\").addClass(COLOR_VIEW_CELL_CLASS).addClass(additionalClass).appendTo($rowParent.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(index));\n  },\n  _renderPalette: function () {\n    var $paletteCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_PALETTE_CELL_CLASS);\n\n    var $paletteGradientWhite = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS].join(\" \"));\n    var $paletteGradientBlack = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS].join(\" \"));\n    this._$palette = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_CLASS).css(\"backgroundColor\", this._currentColor.getPureColor().toHex()).appendTo($paletteCell);\n    this._paletteHeight = getHeight(this._$palette);\n    this._paletteWidth = getWidth(this._$palette);\n\n    this._renderPaletteHandle();\n\n    this._$palette.append([$paletteGradientWhite, $paletteGradientBlack]);\n  },\n  _renderPaletteHandle: function () {\n    this._$paletteHandle = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_HANDLE_CLASS).appendTo(this._$palette);\n\n    this._createComponent(this._$paletteHandle, Draggable, {\n      contentTemplate: null,\n      boundary: this._$palette,\n      allowMoveByClick: true,\n      boundOffset: function () {\n        return -this._paletteHandleHeight / 2;\n      }.bind(this),\n      onDragMove: _ref => {\n        var {\n          event: event\n        } = _ref;\n        var paletteHandlePosition = locate(this._$paletteHandle);\n        this._updateByDrag = true;\n\n        this._saveValueChangeEvent(event);\n\n        this._updateColorFromHsv(this._currentColor.hsv.h, this._calculateColorSaturation(paletteHandlePosition), this._calculateColorValue(paletteHandlePosition));\n      }\n    });\n\n    this._paletteHandleWidth = getWidth(this._$paletteHandle);\n    this._paletteHandleHeight = getHeight(this._$paletteHandle);\n\n    this._placePaletteHandle();\n  },\n  _placePaletteHandle: function () {\n    move(this._$paletteHandle, {\n      left: Math.round(this._paletteWidth * this._currentColor.hsv.s / 100 - this._paletteHandleWidth / 2),\n      top: Math.round(this._paletteHeight - this._paletteHeight * this._currentColor.hsv.v / 100 - this._paletteHandleHeight / 2)\n    });\n  },\n  _calculateColorValue: function (paletteHandlePosition) {\n    var value = Math.floor(paletteHandlePosition.top + this._paletteHandleHeight / 2);\n    return 100 - Math.round(100 * value / this._paletteHeight);\n  },\n  _calculateColorSaturation: function (paletteHandlePosition) {\n    var saturation = Math.floor(paletteHandlePosition.left + this._paletteHandleWidth / 2);\n    return Math.round(100 * saturation / this._paletteWidth);\n  },\n  _updateColorFromHsv: function (hue, saturation, value) {\n    var a = this._currentColor.a;\n    this._currentColor = new Color(\"hsv(\" + [hue, saturation, value].join(\",\") + \")\");\n    this._currentColor.a = a;\n\n    this._updateColorParamsAndColorPreview();\n\n    this.applyColor();\n  },\n  _renderHueScale: function () {\n    var $hueScaleCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_HUE_SCALE_CELL_CLASS);\n\n    this._$hueScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS).appendTo($hueScaleCell);\n    this._$hueScale = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_CLASS).appendTo(this._$hueScaleWrapper);\n    this._hueScaleHeight = getHeight(this._$hueScale);\n    this._hueScaleWrapperHeight = getOuterHeight(this._$hueScaleWrapper);\n\n    this._renderHueScaleHandle();\n  },\n  _renderHueScaleHandle: function () {\n    this._$hueScaleHandle = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_HANDLE_CLASS).appendTo(this._$hueScaleWrapper);\n\n    this._createComponent(this._$hueScaleHandle, Draggable, {\n      contentTemplate: null,\n      boundary: this._$hueScaleWrapper,\n      allowMoveByClick: true,\n      dragDirection: \"vertical\",\n      onDragMove: _ref2 => {\n        var {\n          event: event\n        } = _ref2;\n        this._updateByDrag = true;\n\n        this._saveValueChangeEvent(event);\n\n        this._updateColorHue(locate(this._$hueScaleHandle).top + this._hueScaleHandleHeight / 2);\n      }\n    });\n\n    this._hueScaleHandleHeight = getHeight(this._$hueScaleHandle);\n\n    this._placeHueScaleHandle();\n  },\n  _placeHueScaleHandle: function () {\n    var hueScaleHeight = this._hueScaleWrapperHeight;\n    var handleHeight = this._hueScaleHandleHeight;\n    var top = (hueScaleHeight - handleHeight) * (360 - this._currentColor.hsv.h) / 360;\n\n    if (hueScaleHeight < top + handleHeight) {\n      top = hueScaleHeight - handleHeight;\n    }\n\n    if (top < 0) {\n      top = 0;\n    }\n\n    move(this._$hueScaleHandle, {\n      top: Math.round(top)\n    });\n  },\n  _updateColorHue: function (handlePosition) {\n    var hue = 360 - Math.round(360 * (handlePosition - this._hueScaleHandleHeight / 2) / (this._hueScaleWrapperHeight - this._hueScaleHandleHeight));\n    var saturation = this._currentColor.hsv.s;\n    var value = this._currentColor.hsv.v;\n    this._isTopColorHue = false;\n    hue = hue < 0 ? 0 : hue;\n\n    if (hue >= 360) {\n      this._isTopColorHue = true;\n      hue = 0;\n    }\n\n    this._updateColorFromHsv(hue, saturation, value);\n\n    this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\n  },\n  _renderControlsContainer: function () {\n    var $controlsContainerCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer);\n\n    this._$controlsContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTROLS_CONTAINER_CLASS).appendTo($controlsContainerCell);\n  },\n  _renderControls: function () {\n    this._renderColorsPreview();\n\n    this._renderRgbInputs();\n\n    this._renderHexInput();\n  },\n  _renderColorsPreview: function () {\n    var $colorsPreviewContainer = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS).appendTo(this._$controlsContainer);\n    var $colorsPreviewContainerInner = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS).appendTo($colorsPreviewContainer);\n    this._$currentColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW].join(\" \"));\n    this._$baseColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT].join(\" \"));\n\n    this._makeTransparentBackground(this._$baseColor, this.option(\"matchValue\"));\n\n    this._makeTransparentBackground(this._$currentColor, this._currentColor);\n\n    $colorsPreviewContainerInner.append([this._$baseColor, this._$currentColor]);\n  },\n  _renderAlphaChannelElements: function () {\n    if (this.option(\"editAlphaChannel\")) {\n      this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(1).addClass(COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS);\n\n      this._renderAlphaChannelScale();\n\n      this._renderAlphaChannelInput();\n    }\n  },\n  _renderRgbInputs: function () {\n    this._rgbInputsWithLabels = [this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.r,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"R\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaRed\"),\n      labelClass: COLOR_VIEW_RED_LABEL_CLASS\n    }), this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.g,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"G\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaGreen\"),\n      labelClass: COLOR_VIEW_GREEN_LABEL_CLASS\n    }), this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.b,\n      onValueChanged: this._updateColor.bind(this, false),\n      labelText: \"B\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaBlue\"),\n      labelClass: COLOR_VIEW_BLUE_LABEL_CLASS\n    })];\n\n    this._$controlsContainer.append(this._rgbInputsWithLabels);\n\n    this._rgbInputs = [this._rgbInputsWithLabels[0].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[1].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[2].find(\".dx-numberbox\").dxNumberBox(\"instance\")];\n  },\n  _renderEditorWithLabel: function (options) {\n    var $editor = $(\"<div>\");\n    var $label = $(\"<label>\").addClass(options.labelClass).text(options.labelText + \":\").append($editor);\n    eventsEngine.off($label, clickEventName);\n    eventsEngine.on($label, clickEventName, function (e) {\n      e.preventDefault();\n    });\n    var editorType = options.editorType;\n    var editorOptions = extend({\n      value: options.value,\n      onValueChanged: options.onValueChanged,\n      onKeyboardHandled: opts => this._keyboardHandler(opts)\n    }, {\n      stylingMode: this.option(\"stylingMode\")\n    });\n\n    if (editorType === NumberBox) {\n      editorOptions.min = options.min || 0;\n      editorOptions.max = options.max || 255;\n      editorOptions.step = options.step || 1;\n    }\n\n    var editor = new editorType($editor, editorOptions);\n    editor.registerKeyHandler(\"enter\", function (e) {\n      this._fireEnterKeyPressed(e);\n    }.bind(this));\n    this.setAria(\"label\", options.labelAriaText, $editor);\n    return $label;\n  },\n  hexInputOptions: function () {\n    return {\n      editorType: TextBox,\n      value: this._currentColor.toHex().replace(\"#\", \"\"),\n      onValueChanged: this._updateColor.bind(this, true),\n      labelClass: COLOR_VIEW_HEX_LABEL_CLASS,\n      labelText: \"#\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaHex\")\n    };\n  },\n  _renderHexInput: function () {\n    this._hexInput = TextBox.getInstance(this._renderEditorWithLabel(this.hexInputOptions()).appendTo(this._$controlsContainer).find(\".dx-textbox\"));\n  },\n  _renderAlphaChannelScale: function () {\n    var $alphaChannelScaleCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer, COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS);\n\n    var $alphaChannelBorder = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS).appendTo($alphaChannelScaleCell);\n    var $alphaChannelScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS).appendTo($alphaChannelBorder);\n    this._$alphaChannelScale = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS).appendTo($alphaChannelScaleWrapper);\n\n    this._makeCSSLinearGradient(this._$alphaChannelScale);\n\n    this._renderAlphaChannelHandle($alphaChannelScaleCell);\n  },\n  _makeCSSLinearGradient: function ($el) {\n    var color = this._currentColor;\n    var colorAsRgb = [color.r, color.g, color.b].join(\",\");\n    var colorAsHex = color.toHex().replace(\"#\", \"\");\n    $el.attr(\"style\", function (colorAsRgb, colorAsHex) {\n      var rtlEnabled = this.option(\"rtlEnabled\");\n      var startColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"1\" : \"0\") + \")\";\n      var finishColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"0\" : \"1\") + \")\";\n      return [\"background-image: -webkit-linear-gradient(180deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -moz-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -o-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\"].join(\";\");\n    }.call(this, colorAsRgb, colorAsHex));\n  },\n  _renderAlphaChannelInput: function () {\n    var that = this;\n\n    var $alphaChannelInputCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer);\n\n    that._alphaChannelInput = this._renderEditorWithLabel({\n      editorType: NumberBox,\n      value: this._currentColor.a,\n      max: 1,\n      step: .1,\n      onValueChanged: function (args) {\n        var value = args.value;\n        value = that._currentColor.isValidAlpha(value) ? value : that._currentColor.a;\n        args.event && that._saveValueChangeEvent(args.event);\n\n        that._updateColorTransparency(value);\n\n        that._placeAlphaChannelHandle();\n      },\n      labelClass: COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS,\n      labelText: \"Alpha\",\n      labelAriaText: messageLocalization.format(\"dxColorView-ariaAlpha\")\n    }).appendTo($alphaChannelInputCell).find(\".dx-numberbox\").dxNumberBox(\"instance\");\n  },\n  _updateColorTransparency: function (transparency) {\n    this._currentColor.a = transparency;\n    this.applyColor();\n  },\n  _renderAlphaChannelHandle: function ($parent) {\n    this._$alphaChannelHandle = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS).appendTo($parent);\n\n    this._createComponent(this._$alphaChannelHandle, Draggable, {\n      contentTemplate: null,\n      boundary: $parent,\n      allowMoveByClick: true,\n      dragDirection: \"horizontal\",\n      onDragMove: _ref3 => {\n        var {\n          event: event\n        } = _ref3;\n        this._updateByDrag = true;\n        var $alphaChannelHandle = this._$alphaChannelHandle;\n        var alphaChannelHandlePosition = locate($alphaChannelHandle).left + this._alphaChannelHandleWidth / 2;\n\n        this._saveValueChangeEvent(event);\n\n        this._calculateColorTransparencyByScaleWidth(alphaChannelHandlePosition);\n      }\n    });\n\n    this._alphaChannelHandleWidth = getWidth(this._$alphaChannelHandle);\n    this._alphaChannelScaleWorkWidth = getWidth($parent) - this._alphaChannelHandleWidth;\n\n    this._placeAlphaChannelHandle();\n  },\n  _calculateColorTransparencyByScaleWidth: function (handlePosition) {\n    var transparency = (handlePosition - this._alphaChannelHandleWidth / 2) / this._alphaChannelScaleWorkWidth;\n    var rtlEnabled = this.option(\"rtlEnabled\");\n    transparency = rtlEnabled ? transparency : 1 - transparency;\n\n    if (handlePosition >= this._alphaChannelScaleWorkWidth + this._alphaChannelHandleWidth / 2) {\n      transparency = rtlEnabled ? 1 : 0;\n    } else if (transparency < 1) {\n      transparency = transparency.toFixed(2);\n    }\n\n    var previousTransparency = this._alphaChannelInput.option(\"value\");\n\n    transparency = Math.max(transparency, 0);\n    transparency = Math.min(transparency, 1);\n\n    if (transparency === previousTransparency) {\n      this._updateByDrag = false;\n    } else {\n      this._alphaChannelInput.option(\"value\", transparency);\n    }\n  },\n  _placeAlphaChannelHandle: function () {\n    var left = this._alphaChannelScaleWorkWidth * (1 - this._currentColor.a);\n\n    if (left < 0) {\n      left = 0;\n    }\n\n    if (this._alphaChannelScaleWorkWidth < left) {\n      left = this._alphaChannelScaleWorkWidth;\n    }\n\n    move(this._$alphaChannelHandle, {\n      left: this.option(\"rtlEnabled\") ? this._alphaChannelScaleWorkWidth - left : left\n    });\n  },\n  applyColor: function () {\n    var previousValue = this.option(\"value\");\n    var colorValue = this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this._currentColor.toHex();\n\n    this._makeTransparentBackground(this._$currentColor, this._currentColor);\n\n    if (colorValue === previousValue) {\n      this._updateByDrag = false;\n    } else {\n      this.option(\"value\", colorValue);\n    }\n  },\n  cancelColor: function () {\n    this._initColorAndOpacity();\n\n    this._refreshMarkup();\n  },\n  _updateColor: function (isHex, args) {\n    var rgba;\n    var newColor;\n\n    if (isHex) {\n      newColor = this._validateHex(\"#\" + this._hexInput.option(\"value\"));\n    } else {\n      rgba = this._validateRgb();\n\n      if (this._alphaChannelInput) {\n        rgba.push(this._alphaChannelInput.option(\"value\"));\n        newColor = \"rgba(\" + rgba.join(\", \") + \")\";\n      } else {\n        newColor = \"rgb(\" + rgba.join(\", \") + \")\";\n      }\n    }\n\n    if (!this._suppressEditorsValueUpdating) {\n      this._currentColor = new Color(newColor);\n\n      this._saveValueChangeEvent(args.event);\n\n      this.applyColor();\n\n      this._refreshMarkup();\n    }\n  },\n  _validateHex: function (hex) {\n    return this._currentColor.isValidHex(hex) ? hex : this._currentColor.toHex();\n  },\n  _validateRgb: function () {\n    var r = this._rgbInputs[0].option(\"value\");\n\n    var g = this._rgbInputs[1].option(\"value\");\n\n    var b = this._rgbInputs[2].option(\"value\");\n\n    if (!this._currentColor.isValidRGB(r, g, b)) {\n      r = this._currentColor.r;\n      g = this._currentColor.g;\n      b = this._currentColor.b;\n    }\n\n    return [r, g, b];\n  },\n  _refreshMarkup: function () {\n    this._placeHueScaleHandle();\n\n    this._placePaletteHandle();\n\n    this._updateColorParamsAndColorPreview();\n\n    this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\n\n    if (this._$alphaChannelHandle) {\n      this._updateColorTransparency(this._currentColor.a);\n\n      this._placeAlphaChannelHandle();\n    }\n  },\n  _updateColorParamsAndColorPreview: function () {\n    this._suppressEditorsValueUpdating = true;\n\n    this._hexInput.option(\"value\", this._currentColor.toHex().replace(\"#\", \"\"));\n\n    this._rgbInputs[0].option(\"value\", this._currentColor.r);\n\n    this._rgbInputs[1].option(\"value\", this._currentColor.g);\n\n    this._rgbInputs[2].option(\"value\", this._currentColor.b);\n\n    this._suppressEditorsValueUpdating = false;\n\n    if (this.option(\"editAlphaChannel\")) {\n      this._makeCSSLinearGradient.call(this, this._$alphaChannelScale);\n\n      this._alphaChannelInput.option(\"value\", this._currentColor.a);\n    }\n  },\n  _optionChanged: function (args) {\n    var value = args.value;\n\n    switch (args.name) {\n      case \"value\":\n        this._setCurrentColor(value);\n\n        if (!this._updateByDrag) {\n          this._refreshMarkup();\n        }\n\n        this._updateByDrag = false;\n        this.callBase(args);\n        break;\n\n      case \"matchValue\":\n        this._setBaseColor(value);\n\n        break;\n\n      case \"onEnterKeyPressed\":\n        this._initEnterKeyPressedAction();\n\n        break;\n\n      case \"editAlphaChannel\":\n        if (this._$colorPickerContainer) {\n          this._renderHtmlRows(\"editAlphaChannel\");\n\n          this._renderAlphaChannelElements();\n        }\n\n        break;\n\n      case \"keyStep\":\n        break;\n\n      case \"stylingMode\":\n        this._renderControls();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nregisterComponent(\"dxColorView\", ColorView);\nexport default ColorView;","map":{"version":3,"names":["getHeight","getWidth","getOuterHeight","$","eventsEngine","locate","move","extend","Color","messageLocalization","devices","registerComponent","Editor","NumberBox","TextBox","Draggable","isCommandKeyPressed","name","clickEventName","COLOR_VIEW_CLASS","COLOR_VIEW_CONTAINER_CLASS","COLOR_VIEW_ROW_CLASS","COLOR_VIEW_CELL_CLASS","COLOR_VIEW_PALETTE_CLASS","COLOR_VIEW_PALETTE_CELL_CLASS","COLOR_VIEW_PALETTE_HANDLE_CLASS","COLOR_VIEW_PALETTE_GRADIENT_CLASS","COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS","COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS","COLOR_VIEW_HUE_SCALE_CLASS","COLOR_VIEW_HUE_SCALE_CELL_CLASS","COLOR_VIEW_HUE_SCALE_HANDLE_CLASS","COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS","COLOR_VIEW_CONTROLS_CONTAINER_CLASS","COLOR_VIEW_RED_LABEL_CLASS","COLOR_VIEW_GREEN_LABEL_CLASS","COLOR_VIEW_BLUE_LABEL_CLASS","COLOR_VIEW_HEX_LABEL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS","COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS","COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS","COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS","COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS","COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS","COLOR_VIEW_COLOR_PREVIEW","COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS","COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS","COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT","COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW","ColorView","inherit","_supportedKeys","isRTL","option","that","getHorizontalPaletteStep","e","step","_paletteWidth","shiftKey","Math","round","updateHorizontalPaletteValue","value","_currentColor","hsv","s","updatePaletteValue","getVerticalPaletteStep","_paletteHeight","updateVerticalPaletteValue","v","_placePaletteHandle","_updateColorFromHsv","h","getHueScaleStep","_hueScaleWrapperHeight","_hueScaleHandleHeight","updateHueScaleValue","_placeHueScaleHandle","handleLocation","_$hueScaleHandle","_updateColorHue","top","getAlphaScaleStep","_alphaChannelScaleWorkWidth","updateAlphaScaleValue","a","_placeAlphaChannelHandle","_$alphaChannelHandle","_calculateColorTransparencyByScaleWidth","left","_alphaChannelHandleWidth","callBase","upArrow","preventDefault","stopPropagation","_isTopColorHue","_saveValueChangeEvent","downArrow","rightArrow","leftArrow","enter","_fireEnterKeyPressed","_getDefaultOptions","matchValue","onEnterKeyPressed","editAlphaChannel","keyStep","stylingMode","_defaultOptionsRules","concat","device","real","deviceType","isSimulator","options","focusStateEnabled","_init","_initColorAndOpacity","_initEnterKeyPressedAction","_onEnterKeyPressedAction","_createActionByOption","event","_setCurrentColor","newColor","colorIsInvalid","_makeRgba","_$currentColor","_makeTransparentBackground","baseColor","_setBaseColor","color","isBaseColorChanged","_$baseColor","_initMarkup","$element","addClass","_renderColorPickerContainer","_render","_renderPalette","_renderHueScale","_renderControlsContainer","_renderControls","_renderAlphaChannelElements","$el","css","r","g","b","join","_renderValue","$parent","_$colorPickerContainer","appendTo","_renderHtmlRows","updatedOption","$renderedRows","find","renderedRowsCount","length","rowCount","delta","eq","remove","abs","rows","i","push","after","append","_renderHtmlCellInsideRow","index","$rowParent","additionalClass","$paletteCell","$paletteGradientWhite","$paletteGradientBlack","_$palette","getPureColor","toHex","_renderPaletteHandle","_$paletteHandle","_createComponent","contentTemplate","boundary","allowMoveByClick","boundOffset","_paletteHandleHeight","bind","onDragMove","_ref","paletteHandlePosition","_updateByDrag","_calculateColorSaturation","_calculateColorValue","_paletteHandleWidth","floor","saturation","hue","_updateColorParamsAndColorPreview","applyColor","$hueScaleCell","_$hueScaleWrapper","_$hueScale","_hueScaleHeight","_renderHueScaleHandle","dragDirection","_ref2","hueScaleHeight","handleHeight","handlePosition","$controlsContainerCell","_$controlsContainer","_renderColorsPreview","_renderRgbInputs","_renderHexInput","$colorsPreviewContainer","$colorsPreviewContainerInner","_renderAlphaChannelScale","_renderAlphaChannelInput","_rgbInputsWithLabels","_renderEditorWithLabel","editorType","onValueChanged","_updateColor","labelText","labelAriaText","format","labelClass","_rgbInputs","dxNumberBox","$editor","$label","text","off","on","editorOptions","onKeyboardHandled","opts","_keyboardHandler","min","max","editor","registerKeyHandler","setAria","hexInputOptions","replace","_hexInput","getInstance","$alphaChannelScaleCell","$alphaChannelBorder","$alphaChannelScaleWrapper","_$alphaChannelScale","_makeCSSLinearGradient","_renderAlphaChannelHandle","colorAsRgb","colorAsHex","attr","rtlEnabled","startColor","finishColor","call","$alphaChannelInputCell","_alphaChannelInput","args","isValidAlpha","_updateColorTransparency","transparency","_ref3","$alphaChannelHandle","alphaChannelHandlePosition","toFixed","previousTransparency","previousValue","colorValue","cancelColor","_refreshMarkup","isHex","rgba","_validateHex","_validateRgb","_suppressEditorsValueUpdating","hex","isValidHex","isValidRGB","_optionChanged"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/color_box/color_view.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/color_box/color_view.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getHeight,\r\n    getWidth,\r\n    getOuterHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    locate,\r\n    move\r\n} from \"../../animation/translator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport Color from \"../../color\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport devices from \"../../core/devices\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport Editor from \"../editor/editor\";\r\nimport NumberBox from \"../number_box\";\r\nimport TextBox from \"../text_box\";\r\nimport Draggable from \"../draggable\";\r\nimport {\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nvar COLOR_VIEW_CLASS = \"dx-colorview\";\r\nvar COLOR_VIEW_CONTAINER_CLASS = \"dx-colorview-container\";\r\nvar COLOR_VIEW_ROW_CLASS = \"dx-colorview-container-row\";\r\nvar COLOR_VIEW_CELL_CLASS = \"dx-colorview-container-cell\";\r\nvar COLOR_VIEW_PALETTE_CLASS = \"dx-colorview-palette\";\r\nvar COLOR_VIEW_PALETTE_CELL_CLASS = \"dx-colorview-palette-cell\";\r\nvar COLOR_VIEW_PALETTE_HANDLE_CLASS = \"dx-colorview-palette-handle\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_CLASS = \"dx-colorview-palette-gradient\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS = \"dx-colorview-palette-gradient-white\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS = \"dx-colorview-palette-gradient-black\";\r\nvar COLOR_VIEW_HUE_SCALE_CLASS = \"dx-colorview-hue-scale\";\r\nvar COLOR_VIEW_HUE_SCALE_CELL_CLASS = \"dx-colorview-hue-scale-cell\";\r\nvar COLOR_VIEW_HUE_SCALE_HANDLE_CLASS = \"dx-colorview-hue-scale-handle\";\r\nvar COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS = \"dx-colorview-hue-scale-wrapper\";\r\nvar COLOR_VIEW_CONTROLS_CONTAINER_CLASS = \"dx-colorview-controls-container\";\r\nvar COLOR_VIEW_RED_LABEL_CLASS = \"dx-colorview-label-red\";\r\nvar COLOR_VIEW_GREEN_LABEL_CLASS = \"dx-colorview-label-green\";\r\nvar COLOR_VIEW_BLUE_LABEL_CLASS = \"dx-colorview-label-blue\";\r\nvar COLOR_VIEW_HEX_LABEL_CLASS = \"dx-colorview-label-hex\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS = \"dx-colorview-alpha-channel-scale\";\r\nvar COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS = \"dx-colorview-alpha-channel-row\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS = \"dx-colorview-alpha-channel-wrapper\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS = \"dx-colorview-alpha-channel-label\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS = \"dx-colorview-alpha-channel-handle\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS = \"dx-colorview-alpha-channel-cell\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS = \"dx-colorview-alpha-channel-border\";\r\nvar COLOR_VIEW_COLOR_PREVIEW = \"dx-colorview-color-preview\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS = \"dx-colorview-color-preview-container\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS = \"dx-colorview-color-preview-container-inner\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT = \"dx-colorview-color-preview-color-current\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW = \"dx-colorview-color-preview-color-new\";\r\nvar ColorView = Editor.inherit({\r\n    _supportedKeys: function() {\r\n        var isRTL = this.option(\"rtlEnabled\");\r\n        var that = this;\r\n        var getHorizontalPaletteStep = function(e) {\r\n            var step = 100 / that._paletteWidth;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return Math.round(step)\r\n        };\r\n        var updateHorizontalPaletteValue = function(step) {\r\n            var value = that._currentColor.hsv.s + step;\r\n            if (value > 100) {\r\n                value = 100\r\n            } else if (value < 0) {\r\n                value = 0\r\n            }\r\n            that._currentColor.hsv.s = value;\r\n            updatePaletteValue()\r\n        };\r\n        var getVerticalPaletteStep = function(e) {\r\n            var step = 100 / that._paletteHeight;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return Math.round(step)\r\n        };\r\n        var updateVerticalPaletteValue = function(step) {\r\n            var value = that._currentColor.hsv.v + step;\r\n            if (value > 100) {\r\n                value = 100\r\n            } else if (value < 0) {\r\n                value = 0\r\n            }\r\n            that._currentColor.hsv.v = value;\r\n            updatePaletteValue()\r\n        };\r\n\r\n        function updatePaletteValue() {\r\n            that._placePaletteHandle();\r\n            that._updateColorFromHsv(that._currentColor.hsv.h, that._currentColor.hsv.s, that._currentColor.hsv.v)\r\n        }\r\n        var getHueScaleStep = function(e) {\r\n            var step = 360 / (that._hueScaleWrapperHeight - that._hueScaleHandleHeight);\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return step\r\n        };\r\n        var updateHueScaleValue = function(step) {\r\n            that._currentColor.hsv.h += step;\r\n            that._placeHueScaleHandle();\r\n            var handleLocation = locate(that._$hueScaleHandle);\r\n            that._updateColorHue(handleLocation.top + that._hueScaleHandleHeight / 2)\r\n        };\r\n        var getAlphaScaleStep = function(e) {\r\n            var step = 1 / that._alphaChannelScaleWorkWidth;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > .01 ? step : .01;\r\n            step = isRTL ? -step : step;\r\n            return step\r\n        };\r\n        var updateAlphaScaleValue = function(step) {\r\n            that._currentColor.a += step;\r\n            that._placeAlphaChannelHandle();\r\n            var handleLocation = locate(that._$alphaChannelHandle);\r\n            that._calculateColorTransparencyByScaleWidth(handleLocation.left + that._alphaChannelHandleWidth / 2)\r\n        };\r\n        return extend(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (isCommandKeyPressed(e)) {\r\n                    if (this._currentColor.hsv.h <= 360 && !this._isTopColorHue) {\r\n                        this._saveValueChangeEvent(e);\r\n                        updateHueScaleValue(getHueScaleStep(e))\r\n                    }\r\n                } else if (this._currentColor.hsv.v < 100) {\r\n                    this._saveValueChangeEvent(e);\r\n                    updateVerticalPaletteValue(getVerticalPaletteStep(e))\r\n                }\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (isCommandKeyPressed(e)) {\r\n                    if (this._currentColor.hsv.h >= 0) {\r\n                        if (this._isTopColorHue) {\r\n                            this._currentColor.hsv.h = 360\r\n                        }\r\n                        this._saveValueChangeEvent(e);\r\n                        updateHueScaleValue(-getHueScaleStep(e))\r\n                    }\r\n                } else if (this._currentColor.hsv.v > 0) {\r\n                    this._saveValueChangeEvent(e);\r\n                    updateVerticalPaletteValue(-getVerticalPaletteStep(e))\r\n                }\r\n            },\r\n            rightArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (isCommandKeyPressed(e)) {\r\n                    if (isRTL ? this._currentColor.a < 1 : this._currentColor.a > 0 && this.option(\"editAlphaChannel\")) {\r\n                        this._saveValueChangeEvent(e);\r\n                        updateAlphaScaleValue(-getAlphaScaleStep(e))\r\n                    }\r\n                } else if (this._currentColor.hsv.s < 100) {\r\n                    this._saveValueChangeEvent(e);\r\n                    updateHorizontalPaletteValue(getHorizontalPaletteStep(e))\r\n                }\r\n            },\r\n            leftArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (isCommandKeyPressed(e)) {\r\n                    if (isRTL ? this._currentColor.a > 0 : this._currentColor.a < 1 && this.option(\"editAlphaChannel\")) {\r\n                        this._saveValueChangeEvent(e);\r\n                        updateAlphaScaleValue(getAlphaScaleStep(e))\r\n                    }\r\n                } else if (this._currentColor.hsv.s > 0) {\r\n                    this._saveValueChangeEvent(e);\r\n                    updateHorizontalPaletteValue(-getHorizontalPaletteStep(e))\r\n                }\r\n            },\r\n            enter: function(e) {\r\n                this._fireEnterKeyPressed(e)\r\n            }\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: null,\r\n            matchValue: null,\r\n            onEnterKeyPressed: void 0,\r\n            editAlphaChannel: false,\r\n            keyStep: 1,\r\n            stylingMode: void 0\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return \"desktop\" === devices.real().deviceType && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }])\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._initColorAndOpacity();\r\n        this._initEnterKeyPressedAction()\r\n    },\r\n    _initEnterKeyPressedAction: function() {\r\n        this._onEnterKeyPressedAction = this._createActionByOption(\"onEnterKeyPressed\")\r\n    },\r\n    _fireEnterKeyPressed: function(e) {\r\n        if (!this._onEnterKeyPressedAction) {\r\n            return\r\n        }\r\n        this._onEnterKeyPressedAction({\r\n            event: e\r\n        })\r\n    },\r\n    _initColorAndOpacity: function() {\r\n        this._setCurrentColor(this.option(\"value\"))\r\n    },\r\n    _setCurrentColor: function(value) {\r\n        value = value || \"#000000\";\r\n        var newColor = new Color(value);\r\n        if (!newColor.colorIsInvalid) {\r\n            if (!this._currentColor || this._makeRgba(this._currentColor) !== this._makeRgba(newColor)) {\r\n                this._currentColor = newColor;\r\n                if (this._$currentColor) {\r\n                    this._makeTransparentBackground(this._$currentColor, newColor)\r\n                }\r\n            }\r\n        } else {\r\n            this.option(\"value\", this._currentColor.baseColor)\r\n        }\r\n    },\r\n    _setBaseColor: function(value) {\r\n        var color = value || \"#000000\";\r\n        var newColor = new Color(color);\r\n        if (!newColor.colorIsInvalid) {\r\n            var isBaseColorChanged = this._makeRgba(this.option(\"matchValue\") !== this._makeRgba(newColor));\r\n            if (isBaseColorChanged) {\r\n                if (this._$baseColor) {\r\n                    this._makeTransparentBackground(this._$baseColor, newColor)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        this.$element().addClass(COLOR_VIEW_CLASS);\r\n        this._renderColorPickerContainer()\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderPalette();\r\n        this._renderHueScale();\r\n        this._renderControlsContainer();\r\n        this._renderControls();\r\n        this._renderAlphaChannelElements()\r\n    },\r\n    _makeTransparentBackground: function($el, color) {\r\n        if (!(color instanceof Color)) {\r\n            color = new Color(color)\r\n        }\r\n        $el.css(\"backgroundColor\", this._makeRgba(color))\r\n    },\r\n    _makeRgba: function(color) {\r\n        if (!(color instanceof Color)) {\r\n            color = new Color(color)\r\n        }\r\n        return \"rgba(\" + [color.r, color.g, color.b, color.a].join(\", \") + \")\"\r\n    },\r\n    _renderValue: function() {\r\n        this.callBase(this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this.option(\"value\"))\r\n    },\r\n    _renderColorPickerContainer: function() {\r\n        var $parent = this.$element();\r\n        this._$colorPickerContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTAINER_CLASS).appendTo($parent);\r\n        this._renderHtmlRows()\r\n    },\r\n    _renderHtmlRows: function(updatedOption) {\r\n        var $renderedRows = this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS);\r\n        var renderedRowsCount = $renderedRows.length;\r\n        var rowCount = this.option(\"editAlphaChannel\") ? 2 : 1;\r\n        var delta = renderedRowsCount - rowCount;\r\n        if (delta > 0) {\r\n            $renderedRows.eq(-1).remove()\r\n        }\r\n        if (delta < 0) {\r\n            delta = Math.abs(delta);\r\n            var rows = [];\r\n            var i;\r\n            for (i = 0; i < delta; i++) {\r\n                rows.push($(\"<div>\").addClass(COLOR_VIEW_ROW_CLASS))\r\n            }\r\n            if (renderedRowsCount) {\r\n                for (i = 0; i < rows.length; i++) {\r\n                    $renderedRows.eq(0).after(rows[i])\r\n                }\r\n            } else {\r\n                this._$colorPickerContainer.append(rows)\r\n            }\r\n        }\r\n    },\r\n    _renderHtmlCellInsideRow: function(index, $rowParent, additionalClass) {\r\n        return $(\"<div>\").addClass(COLOR_VIEW_CELL_CLASS).addClass(additionalClass).appendTo($rowParent.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(index))\r\n    },\r\n    _renderPalette: function() {\r\n        var $paletteCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_PALETTE_CELL_CLASS);\r\n        var $paletteGradientWhite = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS].join(\" \"));\r\n        var $paletteGradientBlack = $(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS].join(\" \"));\r\n        this._$palette = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_CLASS).css(\"backgroundColor\", this._currentColor.getPureColor().toHex()).appendTo($paletteCell);\r\n        this._paletteHeight = getHeight(this._$palette);\r\n        this._paletteWidth = getWidth(this._$palette);\r\n        this._renderPaletteHandle();\r\n        this._$palette.append([$paletteGradientWhite, $paletteGradientBlack])\r\n    },\r\n    _renderPaletteHandle: function() {\r\n        this._$paletteHandle = $(\"<div>\").addClass(COLOR_VIEW_PALETTE_HANDLE_CLASS).appendTo(this._$palette);\r\n        this._createComponent(this._$paletteHandle, Draggable, {\r\n            contentTemplate: null,\r\n            boundary: this._$palette,\r\n            allowMoveByClick: true,\r\n            boundOffset: function() {\r\n                return -this._paletteHandleHeight / 2\r\n            }.bind(this),\r\n            onDragMove: _ref => {\r\n                var {\r\n                    event: event\r\n                } = _ref;\r\n                var paletteHandlePosition = locate(this._$paletteHandle);\r\n                this._updateByDrag = true;\r\n                this._saveValueChangeEvent(event);\r\n                this._updateColorFromHsv(this._currentColor.hsv.h, this._calculateColorSaturation(paletteHandlePosition), this._calculateColorValue(paletteHandlePosition))\r\n            }\r\n        });\r\n        this._paletteHandleWidth = getWidth(this._$paletteHandle);\r\n        this._paletteHandleHeight = getHeight(this._$paletteHandle);\r\n        this._placePaletteHandle()\r\n    },\r\n    _placePaletteHandle: function() {\r\n        move(this._$paletteHandle, {\r\n            left: Math.round(this._paletteWidth * this._currentColor.hsv.s / 100 - this._paletteHandleWidth / 2),\r\n            top: Math.round(this._paletteHeight - this._paletteHeight * this._currentColor.hsv.v / 100 - this._paletteHandleHeight / 2)\r\n        })\r\n    },\r\n    _calculateColorValue: function(paletteHandlePosition) {\r\n        var value = Math.floor(paletteHandlePosition.top + this._paletteHandleHeight / 2);\r\n        return 100 - Math.round(100 * value / this._paletteHeight)\r\n    },\r\n    _calculateColorSaturation: function(paletteHandlePosition) {\r\n        var saturation = Math.floor(paletteHandlePosition.left + this._paletteHandleWidth / 2);\r\n        return Math.round(100 * saturation / this._paletteWidth)\r\n    },\r\n    _updateColorFromHsv: function(hue, saturation, value) {\r\n        var a = this._currentColor.a;\r\n        this._currentColor = new Color(\"hsv(\" + [hue, saturation, value].join(\",\") + \")\");\r\n        this._currentColor.a = a;\r\n        this._updateColorParamsAndColorPreview();\r\n        this.applyColor()\r\n    },\r\n    _renderHueScale: function() {\r\n        var $hueScaleCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_HUE_SCALE_CELL_CLASS);\r\n        this._$hueScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS).appendTo($hueScaleCell);\r\n        this._$hueScale = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_CLASS).appendTo(this._$hueScaleWrapper);\r\n        this._hueScaleHeight = getHeight(this._$hueScale);\r\n        this._hueScaleWrapperHeight = getOuterHeight(this._$hueScaleWrapper);\r\n        this._renderHueScaleHandle()\r\n    },\r\n    _renderHueScaleHandle: function() {\r\n        this._$hueScaleHandle = $(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_HANDLE_CLASS).appendTo(this._$hueScaleWrapper);\r\n        this._createComponent(this._$hueScaleHandle, Draggable, {\r\n            contentTemplate: null,\r\n            boundary: this._$hueScaleWrapper,\r\n            allowMoveByClick: true,\r\n            dragDirection: \"vertical\",\r\n            onDragMove: _ref2 => {\r\n                var {\r\n                    event: event\r\n                } = _ref2;\r\n                this._updateByDrag = true;\r\n                this._saveValueChangeEvent(event);\r\n                this._updateColorHue(locate(this._$hueScaleHandle).top + this._hueScaleHandleHeight / 2)\r\n            }\r\n        });\r\n        this._hueScaleHandleHeight = getHeight(this._$hueScaleHandle);\r\n        this._placeHueScaleHandle()\r\n    },\r\n    _placeHueScaleHandle: function() {\r\n        var hueScaleHeight = this._hueScaleWrapperHeight;\r\n        var handleHeight = this._hueScaleHandleHeight;\r\n        var top = (hueScaleHeight - handleHeight) * (360 - this._currentColor.hsv.h) / 360;\r\n        if (hueScaleHeight < top + handleHeight) {\r\n            top = hueScaleHeight - handleHeight\r\n        }\r\n        if (top < 0) {\r\n            top = 0\r\n        }\r\n        move(this._$hueScaleHandle, {\r\n            top: Math.round(top)\r\n        })\r\n    },\r\n    _updateColorHue: function(handlePosition) {\r\n        var hue = 360 - Math.round(360 * (handlePosition - this._hueScaleHandleHeight / 2) / (this._hueScaleWrapperHeight - this._hueScaleHandleHeight));\r\n        var saturation = this._currentColor.hsv.s;\r\n        var value = this._currentColor.hsv.v;\r\n        this._isTopColorHue = false;\r\n        hue = hue < 0 ? 0 : hue;\r\n        if (hue >= 360) {\r\n            this._isTopColorHue = true;\r\n            hue = 0\r\n        }\r\n        this._updateColorFromHsv(hue, saturation, value);\r\n        this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex())\r\n    },\r\n    _renderControlsContainer: function() {\r\n        var $controlsContainerCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer);\r\n        this._$controlsContainer = $(\"<div>\").addClass(COLOR_VIEW_CONTROLS_CONTAINER_CLASS).appendTo($controlsContainerCell)\r\n    },\r\n    _renderControls: function() {\r\n        this._renderColorsPreview();\r\n        this._renderRgbInputs();\r\n        this._renderHexInput()\r\n    },\r\n    _renderColorsPreview: function() {\r\n        var $colorsPreviewContainer = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS).appendTo(this._$controlsContainer);\r\n        var $colorsPreviewContainerInner = $(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS).appendTo($colorsPreviewContainer);\r\n        this._$currentColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW].join(\" \"));\r\n        this._$baseColor = $(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT].join(\" \"));\r\n        this._makeTransparentBackground(this._$baseColor, this.option(\"matchValue\"));\r\n        this._makeTransparentBackground(this._$currentColor, this._currentColor);\r\n        $colorsPreviewContainerInner.append([this._$baseColor, this._$currentColor])\r\n    },\r\n    _renderAlphaChannelElements: function() {\r\n        if (this.option(\"editAlphaChannel\")) {\r\n            this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(1).addClass(COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS);\r\n            this._renderAlphaChannelScale();\r\n            this._renderAlphaChannelInput()\r\n        }\r\n    },\r\n    _renderRgbInputs: function() {\r\n        this._rgbInputsWithLabels = [this._renderEditorWithLabel({\r\n            editorType: NumberBox,\r\n            value: this._currentColor.r,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"R\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaRed\"),\r\n            labelClass: COLOR_VIEW_RED_LABEL_CLASS\r\n        }), this._renderEditorWithLabel({\r\n            editorType: NumberBox,\r\n            value: this._currentColor.g,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"G\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaGreen\"),\r\n            labelClass: COLOR_VIEW_GREEN_LABEL_CLASS\r\n        }), this._renderEditorWithLabel({\r\n            editorType: NumberBox,\r\n            value: this._currentColor.b,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"B\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaBlue\"),\r\n            labelClass: COLOR_VIEW_BLUE_LABEL_CLASS\r\n        })];\r\n        this._$controlsContainer.append(this._rgbInputsWithLabels);\r\n        this._rgbInputs = [this._rgbInputsWithLabels[0].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[1].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[2].find(\".dx-numberbox\").dxNumberBox(\"instance\")]\r\n    },\r\n    _renderEditorWithLabel: function(options) {\r\n        var $editor = $(\"<div>\");\r\n        var $label = $(\"<label>\").addClass(options.labelClass).text(options.labelText + \":\").append($editor);\r\n        eventsEngine.off($label, clickEventName);\r\n        eventsEngine.on($label, clickEventName, (function(e) {\r\n            e.preventDefault()\r\n        }));\r\n        var editorType = options.editorType;\r\n        var editorOptions = extend({\r\n            value: options.value,\r\n            onValueChanged: options.onValueChanged,\r\n            onKeyboardHandled: opts => this._keyboardHandler(opts)\r\n        }, {\r\n            stylingMode: this.option(\"stylingMode\")\r\n        });\r\n        if (editorType === NumberBox) {\r\n            editorOptions.min = options.min || 0;\r\n            editorOptions.max = options.max || 255;\r\n            editorOptions.step = options.step || 1\r\n        }\r\n        var editor = new editorType($editor, editorOptions);\r\n        editor.registerKeyHandler(\"enter\", function(e) {\r\n            this._fireEnterKeyPressed(e)\r\n        }.bind(this));\r\n        this.setAria(\"label\", options.labelAriaText, $editor);\r\n        return $label\r\n    },\r\n    hexInputOptions: function() {\r\n        return {\r\n            editorType: TextBox,\r\n            value: this._currentColor.toHex().replace(\"#\", \"\"),\r\n            onValueChanged: this._updateColor.bind(this, true),\r\n            labelClass: COLOR_VIEW_HEX_LABEL_CLASS,\r\n            labelText: \"#\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaHex\")\r\n        }\r\n    },\r\n    _renderHexInput: function() {\r\n        this._hexInput = TextBox.getInstance(this._renderEditorWithLabel(this.hexInputOptions()).appendTo(this._$controlsContainer).find(\".dx-textbox\"))\r\n    },\r\n    _renderAlphaChannelScale: function() {\r\n        var $alphaChannelScaleCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer, COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS);\r\n        var $alphaChannelBorder = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS).appendTo($alphaChannelScaleCell);\r\n        var $alphaChannelScaleWrapper = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS).appendTo($alphaChannelBorder);\r\n        this._$alphaChannelScale = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS).appendTo($alphaChannelScaleWrapper);\r\n        this._makeCSSLinearGradient(this._$alphaChannelScale);\r\n        this._renderAlphaChannelHandle($alphaChannelScaleCell)\r\n    },\r\n    _makeCSSLinearGradient: function($el) {\r\n        var color = this._currentColor;\r\n        var colorAsRgb = [color.r, color.g, color.b].join(\",\");\r\n        var colorAsHex = color.toHex().replace(\"#\", \"\");\r\n        $el.attr(\"style\", function(colorAsRgb, colorAsHex) {\r\n            var rtlEnabled = this.option(\"rtlEnabled\");\r\n            var startColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"1\" : \"0\") + \")\";\r\n            var finishColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"0\" : \"1\") + \")\";\r\n            return [\"background-image: -webkit-linear-gradient(180deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -moz-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -o-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\"].join(\";\")\r\n        }.call(this, colorAsRgb, colorAsHex))\r\n    },\r\n    _renderAlphaChannelInput: function() {\r\n        var that = this;\r\n        var $alphaChannelInputCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer);\r\n        that._alphaChannelInput = this._renderEditorWithLabel({\r\n            editorType: NumberBox,\r\n            value: this._currentColor.a,\r\n            max: 1,\r\n            step: .1,\r\n            onValueChanged: function(args) {\r\n                var value = args.value;\r\n                value = that._currentColor.isValidAlpha(value) ? value : that._currentColor.a;\r\n                args.event && that._saveValueChangeEvent(args.event);\r\n                that._updateColorTransparency(value);\r\n                that._placeAlphaChannelHandle()\r\n            },\r\n            labelClass: COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS,\r\n            labelText: \"Alpha\",\r\n            labelAriaText: messageLocalization.format(\"dxColorView-ariaAlpha\")\r\n        }).appendTo($alphaChannelInputCell).find(\".dx-numberbox\").dxNumberBox(\"instance\")\r\n    },\r\n    _updateColorTransparency: function(transparency) {\r\n        this._currentColor.a = transparency;\r\n        this.applyColor()\r\n    },\r\n    _renderAlphaChannelHandle: function($parent) {\r\n        this._$alphaChannelHandle = $(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS).appendTo($parent);\r\n        this._createComponent(this._$alphaChannelHandle, Draggable, {\r\n            contentTemplate: null,\r\n            boundary: $parent,\r\n            allowMoveByClick: true,\r\n            dragDirection: \"horizontal\",\r\n            onDragMove: _ref3 => {\r\n                var {\r\n                    event: event\r\n                } = _ref3;\r\n                this._updateByDrag = true;\r\n                var $alphaChannelHandle = this._$alphaChannelHandle;\r\n                var alphaChannelHandlePosition = locate($alphaChannelHandle).left + this._alphaChannelHandleWidth / 2;\r\n                this._saveValueChangeEvent(event);\r\n                this._calculateColorTransparencyByScaleWidth(alphaChannelHandlePosition)\r\n            }\r\n        });\r\n        this._alphaChannelHandleWidth = getWidth(this._$alphaChannelHandle);\r\n        this._alphaChannelScaleWorkWidth = getWidth($parent) - this._alphaChannelHandleWidth;\r\n        this._placeAlphaChannelHandle()\r\n    },\r\n    _calculateColorTransparencyByScaleWidth: function(handlePosition) {\r\n        var transparency = (handlePosition - this._alphaChannelHandleWidth / 2) / this._alphaChannelScaleWorkWidth;\r\n        var rtlEnabled = this.option(\"rtlEnabled\");\r\n        transparency = rtlEnabled ? transparency : 1 - transparency;\r\n        if (handlePosition >= this._alphaChannelScaleWorkWidth + this._alphaChannelHandleWidth / 2) {\r\n            transparency = rtlEnabled ? 1 : 0\r\n        } else if (transparency < 1) {\r\n            transparency = transparency.toFixed(2)\r\n        }\r\n        var previousTransparency = this._alphaChannelInput.option(\"value\");\r\n        transparency = Math.max(transparency, 0);\r\n        transparency = Math.min(transparency, 1);\r\n        if (transparency === previousTransparency) {\r\n            this._updateByDrag = false\r\n        } else {\r\n            this._alphaChannelInput.option(\"value\", transparency)\r\n        }\r\n    },\r\n    _placeAlphaChannelHandle: function() {\r\n        var left = this._alphaChannelScaleWorkWidth * (1 - this._currentColor.a);\r\n        if (left < 0) {\r\n            left = 0\r\n        }\r\n        if (this._alphaChannelScaleWorkWidth < left) {\r\n            left = this._alphaChannelScaleWorkWidth\r\n        }\r\n        move(this._$alphaChannelHandle, {\r\n            left: this.option(\"rtlEnabled\") ? this._alphaChannelScaleWorkWidth - left : left\r\n        })\r\n    },\r\n    applyColor: function() {\r\n        var previousValue = this.option(\"value\");\r\n        var colorValue = this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this._currentColor.toHex();\r\n        this._makeTransparentBackground(this._$currentColor, this._currentColor);\r\n        if (colorValue === previousValue) {\r\n            this._updateByDrag = false\r\n        } else {\r\n            this.option(\"value\", colorValue)\r\n        }\r\n    },\r\n    cancelColor: function() {\r\n        this._initColorAndOpacity();\r\n        this._refreshMarkup()\r\n    },\r\n    _updateColor: function(isHex, args) {\r\n        var rgba;\r\n        var newColor;\r\n        if (isHex) {\r\n            newColor = this._validateHex(\"#\" + this._hexInput.option(\"value\"))\r\n        } else {\r\n            rgba = this._validateRgb();\r\n            if (this._alphaChannelInput) {\r\n                rgba.push(this._alphaChannelInput.option(\"value\"));\r\n                newColor = \"rgba(\" + rgba.join(\", \") + \")\"\r\n            } else {\r\n                newColor = \"rgb(\" + rgba.join(\", \") + \")\"\r\n            }\r\n        }\r\n        if (!this._suppressEditorsValueUpdating) {\r\n            this._currentColor = new Color(newColor);\r\n            this._saveValueChangeEvent(args.event);\r\n            this.applyColor();\r\n            this._refreshMarkup()\r\n        }\r\n    },\r\n    _validateHex: function(hex) {\r\n        return this._currentColor.isValidHex(hex) ? hex : this._currentColor.toHex()\r\n    },\r\n    _validateRgb: function() {\r\n        var r = this._rgbInputs[0].option(\"value\");\r\n        var g = this._rgbInputs[1].option(\"value\");\r\n        var b = this._rgbInputs[2].option(\"value\");\r\n        if (!this._currentColor.isValidRGB(r, g, b)) {\r\n            r = this._currentColor.r;\r\n            g = this._currentColor.g;\r\n            b = this._currentColor.b\r\n        }\r\n        return [r, g, b]\r\n    },\r\n    _refreshMarkup: function() {\r\n        this._placeHueScaleHandle();\r\n        this._placePaletteHandle();\r\n        this._updateColorParamsAndColorPreview();\r\n        this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\r\n        if (this._$alphaChannelHandle) {\r\n            this._updateColorTransparency(this._currentColor.a);\r\n            this._placeAlphaChannelHandle()\r\n        }\r\n    },\r\n    _updateColorParamsAndColorPreview: function() {\r\n        this._suppressEditorsValueUpdating = true;\r\n        this._hexInput.option(\"value\", this._currentColor.toHex().replace(\"#\", \"\"));\r\n        this._rgbInputs[0].option(\"value\", this._currentColor.r);\r\n        this._rgbInputs[1].option(\"value\", this._currentColor.g);\r\n        this._rgbInputs[2].option(\"value\", this._currentColor.b);\r\n        this._suppressEditorsValueUpdating = false;\r\n        if (this.option(\"editAlphaChannel\")) {\r\n            this._makeCSSLinearGradient.call(this, this._$alphaChannelScale);\r\n            this._alphaChannelInput.option(\"value\", this._currentColor.a)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        var value = args.value;\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._setCurrentColor(value);\r\n                if (!this._updateByDrag) {\r\n                    this._refreshMarkup()\r\n                }\r\n                this._updateByDrag = false;\r\n                this.callBase(args);\r\n                break;\r\n            case \"matchValue\":\r\n                this._setBaseColor(value);\r\n                break;\r\n            case \"onEnterKeyPressed\":\r\n                this._initEnterKeyPressedAction();\r\n                break;\r\n            case \"editAlphaChannel\":\r\n                if (this._$colorPickerContainer) {\r\n                    this._renderHtmlRows(\"editAlphaChannel\");\r\n                    this._renderAlphaChannelElements()\r\n                }\r\n                break;\r\n            case \"keyStep\":\r\n                break;\r\n            case \"stylingMode\":\r\n                this._renderControls();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nregisterComponent(\"dxColorView\", ColorView);\r\nexport default ColorView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}