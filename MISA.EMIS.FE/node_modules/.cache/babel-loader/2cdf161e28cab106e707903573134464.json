{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/tree_map/plain_data_source.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport TreeMapBase from \"./tree_map.base\";\nvar proto = TreeMapBase.prototype;\nproto._optionChangesMap.idField = proto._optionChangesMap.parentField = \"NODES_CREATE\";\n\nproto._processDataSourceItems = function (items) {\n  var i;\n  var struct = {};\n  var currentItem;\n\n  var idField = this._getOption(\"idField\", true);\n\n  var parentField = this._getOption(\"parentField\", true);\n\n  var parentId;\n  var rootNodes = [];\n  var tmpItems;\n  var item;\n\n  if (!idField || !parentField || 0 === items.length) {\n    return {\n      items: items,\n      isPlain: false\n    };\n  }\n\n  for (i = 0; i < items.length; i++) {\n    currentItem = items[i];\n    parentId = currentItem[parentField];\n\n    if (parentId) {\n      struct[parentId] = struct[parentId] || {\n        items: []\n      };\n      tmpItems = struct[parentId].items;\n    } else {\n      tmpItems = rootNodes;\n    }\n\n    tmpItems.push(currentItem);\n  }\n\n  treeFiller({\n    struct: struct,\n    idField: idField\n  }, rootNodes);\n\n  for (item in struct) {\n    struct[item] && rootNodes.push(struct[item]);\n  }\n\n  return {\n    items: rootNodes,\n    isPlain: true\n  };\n};\n\nfunction treeFiller(context, items) {\n  var currentItem;\n  var i;\n  var struct = context.struct;\n  var id;\n\n  for (i = 0; i < items.length; i++) {\n    currentItem = items[i];\n    id = currentItem[context.idField];\n\n    if (struct[id]) {\n      currentItem.items = struct[id].items;\n      struct[id] = null;\n      treeFiller(context, currentItem.items);\n    }\n  }\n}","map":{"version":3,"names":["TreeMapBase","proto","prototype","_optionChangesMap","idField","parentField","_processDataSourceItems","items","i","struct","currentItem","_getOption","parentId","rootNodes","tmpItems","item","length","isPlain","push","treeFiller","context","id"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/viz/tree_map/plain_data_source.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/viz/tree_map/plain_data_source.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport TreeMapBase from \"./tree_map.base\";\r\nvar proto = TreeMapBase.prototype;\r\nproto._optionChangesMap.idField = proto._optionChangesMap.parentField = \"NODES_CREATE\";\r\nproto._processDataSourceItems = function(items) {\r\n    var i;\r\n    var struct = {};\r\n    var currentItem;\r\n    var idField = this._getOption(\"idField\", true);\r\n    var parentField = this._getOption(\"parentField\", true);\r\n    var parentId;\r\n    var rootNodes = [];\r\n    var tmpItems;\r\n    var item;\r\n    if (!idField || !parentField || 0 === items.length) {\r\n        return {\r\n            items: items,\r\n            isPlain: false\r\n        }\r\n    }\r\n    for (i = 0; i < items.length; i++) {\r\n        currentItem = items[i];\r\n        parentId = currentItem[parentField];\r\n        if (parentId) {\r\n            struct[parentId] = struct[parentId] || {\r\n                items: []\r\n            };\r\n            tmpItems = struct[parentId].items\r\n        } else {\r\n            tmpItems = rootNodes\r\n        }\r\n        tmpItems.push(currentItem)\r\n    }\r\n    treeFiller({\r\n        struct: struct,\r\n        idField: idField\r\n    }, rootNodes);\r\n    for (item in struct) {\r\n        struct[item] && rootNodes.push(struct[item])\r\n    }\r\n    return {\r\n        items: rootNodes,\r\n        isPlain: true\r\n    }\r\n};\r\n\r\nfunction treeFiller(context, items) {\r\n    var currentItem;\r\n    var i;\r\n    var struct = context.struct;\r\n    var id;\r\n    for (i = 0; i < items.length; i++) {\r\n        currentItem = items[i];\r\n        id = currentItem[context.idField];\r\n        if (struct[id]) {\r\n            currentItem.items = struct[id].items;\r\n            struct[id] = null;\r\n            treeFiller(context, currentItem.items)\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,WAAP,MAAwB,iBAAxB;AACA,IAAIC,KAAK,GAAGD,WAAW,CAACE,SAAxB;AACAD,KAAK,CAACE,iBAAN,CAAwBC,OAAxB,GAAkCH,KAAK,CAACE,iBAAN,CAAwBE,WAAxB,GAAsC,cAAxE;;AACAJ,KAAK,CAACK,uBAAN,GAAgC,UAASC,KAAT,EAAgB;EAC5C,IAAIC,CAAJ;EACA,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,WAAJ;;EACA,IAAIN,OAAO,GAAG,KAAKO,UAAL,CAAgB,SAAhB,EAA2B,IAA3B,CAAd;;EACA,IAAIN,WAAW,GAAG,KAAKM,UAAL,CAAgB,aAAhB,EAA+B,IAA/B,CAAlB;;EACA,IAAIC,QAAJ;EACA,IAAIC,SAAS,GAAG,EAAhB;EACA,IAAIC,QAAJ;EACA,IAAIC,IAAJ;;EACA,IAAI,CAACX,OAAD,IAAY,CAACC,WAAb,IAA4B,MAAME,KAAK,CAACS,MAA5C,EAAoD;IAChD,OAAO;MACHT,KAAK,EAAEA,KADJ;MAEHU,OAAO,EAAE;IAFN,CAAP;EAIH;;EACD,KAAKT,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,KAAK,CAACS,MAAtB,EAA8BR,CAAC,EAA/B,EAAmC;IAC/BE,WAAW,GAAGH,KAAK,CAACC,CAAD,CAAnB;IACAI,QAAQ,GAAGF,WAAW,CAACL,WAAD,CAAtB;;IACA,IAAIO,QAAJ,EAAc;MACVH,MAAM,CAACG,QAAD,CAAN,GAAmBH,MAAM,CAACG,QAAD,CAAN,IAAoB;QACnCL,KAAK,EAAE;MAD4B,CAAvC;MAGAO,QAAQ,GAAGL,MAAM,CAACG,QAAD,CAAN,CAAiBL,KAA5B;IACH,CALD,MAKO;MACHO,QAAQ,GAAGD,SAAX;IACH;;IACDC,QAAQ,CAACI,IAAT,CAAcR,WAAd;EACH;;EACDS,UAAU,CAAC;IACPV,MAAM,EAAEA,MADD;IAEPL,OAAO,EAAEA;EAFF,CAAD,EAGPS,SAHO,CAAV;;EAIA,KAAKE,IAAL,IAAaN,MAAb,EAAqB;IACjBA,MAAM,CAACM,IAAD,CAAN,IAAgBF,SAAS,CAACK,IAAV,CAAeT,MAAM,CAACM,IAAD,CAArB,CAAhB;EACH;;EACD,OAAO;IACHR,KAAK,EAAEM,SADJ;IAEHI,OAAO,EAAE;EAFN,CAAP;AAIH,CAxCD;;AA0CA,SAASE,UAAT,CAAoBC,OAApB,EAA6Bb,KAA7B,EAAoC;EAChC,IAAIG,WAAJ;EACA,IAAIF,CAAJ;EACA,IAAIC,MAAM,GAAGW,OAAO,CAACX,MAArB;EACA,IAAIY,EAAJ;;EACA,KAAKb,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,KAAK,CAACS,MAAtB,EAA8BR,CAAC,EAA/B,EAAmC;IAC/BE,WAAW,GAAGH,KAAK,CAACC,CAAD,CAAnB;IACAa,EAAE,GAAGX,WAAW,CAACU,OAAO,CAAChB,OAAT,CAAhB;;IACA,IAAIK,MAAM,CAACY,EAAD,CAAV,EAAgB;MACZX,WAAW,CAACH,KAAZ,GAAoBE,MAAM,CAACY,EAAD,CAAN,CAAWd,KAA/B;MACAE,MAAM,CAACY,EAAD,CAAN,GAAa,IAAb;MACAF,UAAU,CAACC,OAAD,EAAUV,WAAW,CAACH,KAAtB,CAAV;IACH;EACJ;AACJ"},"metadata":{},"sourceType":"module"}