{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth } from \"../../../core/utils/size\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\n\nclass HorizontalCurrentTimeShader extends CurrentTimeShader {\n  renderShader() {\n    var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\n\n    for (var i = 0; i < groupCount; i++) {\n      var isFirstShader = 0 === i;\n      var $shader = isFirstShader ? this._$shader : this.createShader();\n\n      if (this._workSpace.isGroupedByDate()) {\n        this._customizeGroupedByDateShader($shader, i);\n      } else {\n        this._customizeShader($shader, i);\n      }\n\n      !isFirstShader && this._shader.push($shader);\n    }\n  }\n\n  _customizeShader($shader, groupIndex) {\n    var shaderWidth = this._workSpace.getIndicationWidth();\n\n    this._applyShaderWidth($shader, shaderWidth);\n\n    if (groupIndex >= 1) {\n      var workSpace = this._workSpace;\n      var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\n      $shader.css(\"left\", indicationWidth);\n    } else {\n      $shader.css(\"left\", 0);\n    }\n  }\n\n  _applyShaderWidth($shader, width) {\n    var maxWidth = getBoundingRect(this._$container.get(0)).width;\n\n    if (width > maxWidth) {\n      width = maxWidth;\n    }\n\n    if (width > 0) {\n      setWidth($shader, width);\n    }\n  }\n\n  _customizeGroupedByDateShader($shader, groupIndex) {\n    var cellCount = this._workSpace.getIndicationCellCount();\n\n    var integerPart = Math.floor(cellCount);\n    var fractionPart = cellCount - integerPart;\n    var isFirstShaderPart = 0 === groupIndex;\n    var workSpace = this._workSpace;\n    var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\n    var shaderLeft;\n\n    this._applyShaderWidth($shader, shaderWidth);\n\n    if (isFirstShaderPart) {\n      shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex;\n    } else {\n      shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth();\n    }\n\n    $shader.css(\"left\", shaderLeft);\n  }\n\n}\n\nexport default HorizontalCurrentTimeShader;","map":{"version":3,"names":["setWidth","getBoundingRect","CurrentTimeShader","HorizontalCurrentTimeShader","renderShader","groupCount","_workSpace","_isHorizontalGroupedWorkSpace","_getGroupCount","i","isFirstShader","$shader","_$shader","createShader","isGroupedByDate","_customizeGroupedByDateShader","_customizeShader","_shader","push","groupIndex","shaderWidth","getIndicationWidth","_applyShaderWidth","workSpace","indicationWidth","_getCellCount","getCellWidth","css","width","maxWidth","_$container","get","cellCount","getIndicationCellCount","integerPart","Math","floor","fractionPart","isFirstShaderPart","shaderLeft"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.horizontal.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setWidth\r\n} from \"../../../core/utils/size\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\r\nclass HorizontalCurrentTimeShader extends CurrentTimeShader {\r\n    renderShader() {\r\n        var groupCount = this._workSpace._isHorizontalGroupedWorkSpace() ? this._workSpace._getGroupCount() : 1;\r\n        for (var i = 0; i < groupCount; i++) {\r\n            var isFirstShader = 0 === i;\r\n            var $shader = isFirstShader ? this._$shader : this.createShader();\r\n            if (this._workSpace.isGroupedByDate()) {\r\n                this._customizeGroupedByDateShader($shader, i)\r\n            } else {\r\n                this._customizeShader($shader, i)\r\n            }!isFirstShader && this._shader.push($shader)\r\n        }\r\n    }\r\n    _customizeShader($shader, groupIndex) {\r\n        var shaderWidth = this._workSpace.getIndicationWidth();\r\n        this._applyShaderWidth($shader, shaderWidth);\r\n        if (groupIndex >= 1) {\r\n            var workSpace = this._workSpace;\r\n            var indicationWidth = workSpace._getCellCount() * workSpace.getCellWidth();\r\n            $shader.css(\"left\", indicationWidth)\r\n        } else {\r\n            $shader.css(\"left\", 0)\r\n        }\r\n    }\r\n    _applyShaderWidth($shader, width) {\r\n        var maxWidth = getBoundingRect(this._$container.get(0)).width;\r\n        if (width > maxWidth) {\r\n            width = maxWidth\r\n        }\r\n        if (width > 0) {\r\n            setWidth($shader, width)\r\n        }\r\n    }\r\n    _customizeGroupedByDateShader($shader, groupIndex) {\r\n        var cellCount = this._workSpace.getIndicationCellCount();\r\n        var integerPart = Math.floor(cellCount);\r\n        var fractionPart = cellCount - integerPart;\r\n        var isFirstShaderPart = 0 === groupIndex;\r\n        var workSpace = this._workSpace;\r\n        var shaderWidth = isFirstShaderPart ? workSpace.getIndicationWidth() : fractionPart * workSpace.getCellWidth();\r\n        var shaderLeft;\r\n        this._applyShaderWidth($shader, shaderWidth);\r\n        if (isFirstShaderPart) {\r\n            shaderLeft = workSpace._getCellCount() * workSpace.getCellWidth() * groupIndex\r\n        } else {\r\n            shaderLeft = workSpace.getCellWidth() * integerPart * workSpace._getGroupCount() + groupIndex * workSpace.getCellWidth()\r\n        }\r\n        $shader.css(\"left\", shaderLeft)\r\n    }\r\n}\r\nexport default HorizontalCurrentTimeShader;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}