{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Quill from \"devextreme-quill\";\nimport $ from \"../../../core/renderer\";\nimport BaseModule from \"./base\";\nimport Toolbar from \"../../toolbar\";\nimport \"../../select_box\";\nimport \"../../color_box/color_view\";\nimport \"../../number_box\";\nimport errors from \"../../widget/ui.errors\";\nimport WidgetCollector from \"./widget_collector\";\nimport { each } from \"../../../core/utils/iterator\";\nimport { isString, isObject, isDefined, isEmptyObject } from \"../../../core/utils/type\";\nimport { extend } from \"../../../core/utils/extend\";\nimport localizationMessage from \"../../../localization/message\";\nimport { titleize, camelize } from \"../../../core/utils/inflector\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport { getTableFormats, TABLE_OPERATIONS } from \"../utils/table_helper\";\nimport { getFormatHandlers, getDefaultClickHandler, ICON_MAP, applyFormat } from \"../utils/toolbar_helper\";\nvar ToolbarModule = BaseModule;\n\nif (Quill) {\n  var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\n  var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\n  var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\n  var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\n  var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\n  var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\n  var ICON_CLASS = \"dx-icon\";\n  var SELECTION_CHANGE_EVENT = \"selection-change\";\n  var USER_ACTION = \"user\";\n  var SILENT_ACTION = \"silent\";\n  var FORMAT_HOTKEYS = {\n    66: \"bold\",\n    73: \"italic\",\n    85: \"underline\"\n  };\n  var KEY_CODES = {\n    b: 66,\n    i: 73,\n    u: 85\n  };\n\n  var localize = name => localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\n\n  var localizeValue = (value, name) => {\n    if (\"header\" === name) {\n      var isHeaderValue = isDefined(value) && false !== value;\n      return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\");\n    }\n\n    return localize(value) || value;\n  };\n\n  ToolbarModule = class extends BaseModule {\n    constructor(quill, options) {\n      super(quill, options);\n      this._toolbarWidgets = new WidgetCollector();\n      this._formatHandlers = getFormatHandlers(this);\n      this._tableFormats = getTableFormats(quill);\n\n      if (isDefined(options.items)) {\n        this._addCallbacks();\n\n        this._renderToolbar();\n\n        this.quill.on(\"editor-change\", (eventName, newValue, oldValue, eventSource) => {\n          var isSilentMode = eventSource === SILENT_ACTION && isEmptyObject(this.quill.getFormat());\n\n          if (!isSilentMode) {\n            var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\n\n            this._updateToolbar(isSelectionChanged);\n          }\n        });\n      }\n    }\n\n    _addCallbacks() {\n      this.addCleanCallback(this.clean.bind(this));\n      this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this));\n    }\n\n    _updateToolbar(isSelectionChanged) {\n      this.updateFormatWidgets(isSelectionChanged);\n      this.updateHistoryWidgets();\n      this.updateTableWidgets();\n    }\n\n    _updateFormatWidget(name, isApplied, formats) {\n      var widget = this._toolbarWidgets.getByName(name);\n\n      if (!widget) {\n        return;\n      }\n\n      if (isApplied) {\n        this._markActiveFormatWidget(name, widget, formats);\n      } else {\n        this._resetFormatWidget(name, widget);\n\n        if (Object.prototype.hasOwnProperty.call(name)) {\n          delete formats[name];\n        }\n      }\n\n      this._toggleClearFormatting(isApplied || !isEmptyObject(formats));\n    }\n\n    _renderToolbar() {\n      var container = this.options.container || this._getContainer();\n\n      this._$toolbar = $(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\n      this._$toolbarContainer = $(container).addClass(TOOLBAR_WRAPPER_CLASS);\n      eventsEngine.on(this._$toolbarContainer, addNamespace(\"mousedown\", this.editorInstance.NAME), e => {\n        e.preventDefault();\n      });\n\n      this._subscribeFormatHotKeys();\n\n      this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, Toolbar, this.toolbarConfig);\n      this.editorInstance.on(\"optionChanged\", _ref => {\n        var {\n          name: name\n        } = _ref;\n\n        if (\"readOnly\" === name || \"disabled\" === name) {\n          this.toolbarInstance.option(\"disabled\", this.isInteractionDisabled);\n        }\n      });\n    }\n\n    get toolbarConfig() {\n      return {\n        dataSource: this._prepareToolbarItems(),\n        disabled: this.isInteractionDisabled,\n        menuContainer: this._$toolbarContainer,\n        multiline: this.isMultilineMode()\n      };\n    }\n\n    get isInteractionDisabled() {\n      return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\");\n    }\n\n    isMultilineMode() {\n      var _this$options$multili;\n\n      return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true;\n    }\n\n    clean() {\n      this._toolbarWidgets.clear();\n\n      if (this._$toolbarContainer) {\n        this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS);\n      }\n    }\n\n    repaint() {\n      this.toolbarInstance && this.toolbarInstance.repaint();\n    }\n\n    _getContainer() {\n      var $container = $(\"<div>\");\n      this.editorInstance.$element().prepend($container);\n      return $container;\n    }\n\n    _detectRenamedOptions(item) {\n      if (isObject(item)) {\n        each([{\n          newName: \"name\",\n          oldName: \"formatName\"\n        }, {\n          newName: \"acceptedValues\",\n          oldName: \"formatValues\"\n        }], (index, optionName) => {\n          if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\n            errors.log(\"W1016\", optionName.oldName, optionName.newName);\n          }\n        });\n      }\n    }\n\n    _subscribeFormatHotKeys() {\n      this.quill.keyboard.addBinding({\n        which: KEY_CODES.b,\n        shortKey: true\n      }, this._handleFormatHotKey.bind(this));\n      this.quill.keyboard.addBinding({\n        which: KEY_CODES.i,\n        shortKey: true\n      }, this._handleFormatHotKey.bind(this));\n      this.quill.keyboard.addBinding({\n        which: KEY_CODES.u,\n        shortKey: true\n      }, this._handleFormatHotKey.bind(this));\n    }\n\n    _handleFormatHotKey(range, context, _ref2) {\n      var {\n        which: which\n      } = _ref2;\n      var formatName = FORMAT_HOTKEYS[which];\n\n      this._updateButtonState(formatName);\n    }\n\n    _updateButtonState(formatName) {\n      var formatWidget = this._toolbarWidgets.getByName(formatName);\n\n      var currentFormat = this.quill.getFormat();\n      var formatValue = currentFormat[formatName];\n\n      if (formatValue) {\n        this._markActiveFormatWidget(formatName, formatWidget, currentFormat);\n      } else {\n        this._resetFormatWidget(formatName, formatWidget);\n      }\n    }\n\n    _prepareToolbarItems() {\n      var resultItems = [];\n      each(this.options.items, (index, item) => {\n        var newItem;\n\n        this._detectRenamedOptions(item);\n\n        if (isObject(item)) {\n          newItem = this._handleObjectItem(item);\n        } else if (isString(item)) {\n          var buttonItemConfig = this._prepareButtonItemConfig(item);\n\n          newItem = this._getToolbarItem(buttonItemConfig);\n        }\n\n        if (newItem) {\n          resultItems.push(newItem);\n        }\n      });\n      return resultItems;\n    }\n\n    _handleObjectItem(item) {\n      if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\n        var selectItemConfig = this._prepareSelectItemConfig(item);\n\n        return this._getToolbarItem(selectItemConfig);\n      } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\n        var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\n\n        var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\n        return this._getToolbarItem(buttonItemConfig);\n      } else {\n        return this._getToolbarItem(item);\n      }\n    }\n\n    _isAcceptableItem(widget, acceptableWidgetName) {\n      return !widget || widget === acceptableWidgetName;\n    }\n\n    _prepareButtonItemConfig(name) {\n      var _ICON_MAP$name;\n\n      var iconName = null !== (_ICON_MAP$name = ICON_MAP[name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\n      var buttonText = titleize(name);\n      return {\n        widget: \"dxButton\",\n        name: name,\n        options: {\n          hint: localize(buttonText),\n          text: localize(buttonText),\n          icon: iconName.toLowerCase(),\n          onClick: this._formatHandlers[name] || getDefaultClickHandler(this, name),\n          stylingMode: \"text\"\n        },\n        showText: \"inMenu\"\n      };\n    }\n\n    _prepareSelectItemConfig(item) {\n      var {\n        name: name,\n        acceptedValues: acceptedValues\n      } = item;\n      return extend(true, {\n        widget: \"dxSelectBox\",\n        name: name,\n        options: {\n          stylingMode: \"filled\",\n          dataSource: acceptedValues,\n          displayExpr: value => localizeValue(value, name),\n          placeholder: localize(name),\n          onValueChanged: e => {\n            if (!this._isReset) {\n              this._hideAdaptiveMenu();\n\n              applyFormat(this, [name, e.value, USER_ACTION], e.event);\n\n              this._setValueSilent(e.component, e.value);\n            }\n          }\n        }\n      }, item);\n    }\n\n    _hideAdaptiveMenu() {\n      if (this.toolbarInstance.option(\"overflowMenuVisible\")) {\n        this.toolbarInstance.option(\"overflowMenuVisible\", false);\n      }\n    }\n\n    _getToolbarItem(item) {\n      var baseItem = {\n        options: {\n          onInitialized: e => {\n            if (item.name) {\n              e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\n              e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\n\n              this._toolbarWidgets.add(item.name, e.component);\n            }\n          }\n        }\n      };\n      var multilineItem = this.isMultilineMode() ? {\n        location: \"before\",\n        locateInMenu: \"never\"\n      } : {};\n      return extend(true, {\n        location: \"before\",\n        locateInMenu: \"auto\"\n      }, this._getDefaultConfig(item.name), item, baseItem, multilineItem);\n    }\n\n    _getDefaultItemsConfig() {\n      return {\n        clear: {\n          options: {\n            disabled: true\n          }\n        },\n        undo: {\n          options: {\n            disabled: true\n          }\n        },\n        redo: {\n          options: {\n            disabled: true\n          }\n        },\n        insertRowAbove: {\n          options: {\n            disabled: true\n          }\n        },\n        insertRowBelow: {\n          options: {\n            disabled: true\n          }\n        },\n        insertHeaderRow: {\n          options: {\n            disabled: true\n          }\n        },\n        insertColumnLeft: {\n          options: {\n            disabled: true\n          }\n        },\n        insertColumnRight: {\n          options: {\n            disabled: true\n          }\n        },\n        deleteRow: {\n          options: {\n            disabled: true\n          }\n        },\n        deleteColumn: {\n          options: {\n            disabled: true\n          }\n        },\n        deleteTable: {\n          options: {\n            disabled: true\n          }\n        },\n        cellProperties: {\n          options: {\n            disabled: true\n          }\n        },\n        tableProperties: {\n          options: {\n            disabled: true\n          }\n        },\n        separator: {\n          template: (data, index, element) => {\n            $(element).addClass(TOOLBAR_SEPARATOR_CLASS);\n          },\n          menuItemTemplate: (data, index, element) => {\n            $(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS);\n          }\n        }\n      };\n    }\n\n    _getDefaultConfig(name) {\n      return this._getDefaultItemsConfig()[name];\n    }\n\n    updateHistoryWidgets() {\n      var historyModule = this.quill.history;\n\n      if (!historyModule) {\n        return;\n      }\n\n      var {\n        undo: undoOps,\n        redo: redoOps\n      } = historyModule.stack;\n\n      this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\n\n      this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length));\n    }\n\n    updateTableWidgets() {\n      var table = this.quill.getModule(\"table\");\n\n      if (!table) {\n        return;\n      }\n\n      var selection = this.quill.getSelection();\n      var formats = selection && this.quill.getFormat(selection) || {};\n\n      var isTableOperationsEnabled = this._tableFormats.some(format => Boolean(formats[format]));\n\n      TABLE_OPERATIONS.forEach(operationName => {\n        var isInsertTable = \"insertTable\" === operationName;\n\n        var widget = this._toolbarWidgets.getByName(operationName);\n\n        this._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled);\n      });\n    }\n\n    _updateManipulationWidget(widget, isOperationEnabled) {\n      if (!widget) {\n        return;\n      }\n\n      widget.option(\"disabled\", !isOperationEnabled);\n    }\n\n    updateFormatWidgets(isResetRequired) {\n      var selection = this.quill.getSelection();\n\n      if (!selection) {\n        return;\n      }\n\n      var formats = this.quill.getFormat(selection);\n      var hasFormats = !isEmptyObject(formats);\n\n      if (!hasFormats || isResetRequired) {\n        this._resetFormatWidgets();\n      }\n\n      for (var formatName in formats) {\n        var widgetName = this._getFormatWidgetName(formatName, formats);\n\n        var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\n\n        if (!formatWidget) {\n          continue;\n        }\n\n        this._markActiveFormatWidget(formatName, formatWidget, formats);\n      }\n\n      this._toggleClearFormatting(hasFormats || selection.length > 1);\n    }\n\n    _markActiveFormatWidget(name, widget, formats) {\n      if (this._isColorFormat(name)) {\n        this._updateColorWidget(name, formats[name]);\n      }\n\n      if (\"value\" in widget.option()) {\n        this._setValueSilent(widget, formats[name]);\n      } else {\n        widget.$element().addClass(ACTIVE_FORMAT_CLASS);\n      }\n    }\n\n    _toggleClearFormatting(hasFormats) {\n      var clearWidget = this._toolbarWidgets.getByName(\"clear\");\n\n      if (clearWidget) {\n        clearWidget.option(\"disabled\", !hasFormats);\n      }\n    }\n\n    _isColorFormat(name) {\n      return \"color\" === name || \"background\" === name;\n    }\n\n    _updateColorWidget(name, color) {\n      var formatWidget = this._toolbarWidgets.getByName(name);\n\n      if (!formatWidget) {\n        return;\n      }\n\n      formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\");\n    }\n\n    _getFormatWidgetName(name, formats) {\n      var widgetName;\n\n      switch (name) {\n        case \"align\":\n          widgetName = name + titleize(formats[name]);\n          break;\n\n        case \"list\":\n          widgetName = formats[name] + titleize(name);\n          break;\n\n        case \"code-block\":\n          widgetName = \"codeBlock\";\n          break;\n\n        case \"script\":\n          widgetName = formats[name] + name;\n          break;\n\n        case \"imageSrc\":\n          widgetName = \"image\";\n          break;\n\n        default:\n          widgetName = name;\n      }\n\n      return widgetName;\n    }\n\n    _setValueSilent(widget, value) {\n      this._isReset = true;\n      widget.option(\"value\", value);\n      this._isReset = false;\n    }\n\n    _resetFormatWidgets() {\n      this._toolbarWidgets.each((name, widget) => {\n        this._resetFormatWidget(name, widget);\n      });\n    }\n\n    _resetFormatWidget(name, widget) {\n      widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\n\n      if (this._isColorFormat(name)) {\n        this._updateColorWidget(name);\n      }\n\n      if (\"clear\" === name) {\n        widget.option(\"disabled\", true);\n      }\n\n      if (\"dxSelectBox\" === widget.NAME) {\n        this._setValueSilent(widget, null);\n      }\n    }\n\n    addClickHandler(name, handler) {\n      this._formatHandlers[name] = handler;\n\n      var formatWidget = this._toolbarWidgets.getByName(name);\n\n      if (formatWidget && \"dxButton\" === formatWidget.NAME) {\n        formatWidget.option(\"onClick\", handler);\n      }\n    }\n\n  };\n}\n\nexport default ToolbarModule;","map":{"version":3,"names":["Quill","$","BaseModule","Toolbar","errors","WidgetCollector","each","isString","isObject","isDefined","isEmptyObject","extend","localizationMessage","titleize","camelize","eventsEngine","addNamespace","getTableFormats","TABLE_OPERATIONS","getFormatHandlers","getDefaultClickHandler","ICON_MAP","applyFormat","ToolbarModule","TOOLBAR_WRAPPER_CLASS","TOOLBAR_CLASS","TOOLBAR_FORMAT_WIDGET_CLASS","TOOLBAR_SEPARATOR_CLASS","TOOLBAR_MENU_SEPARATOR_CLASS","ACTIVE_FORMAT_CLASS","ICON_CLASS","SELECTION_CHANGE_EVENT","USER_ACTION","SILENT_ACTION","FORMAT_HOTKEYS","KEY_CODES","b","i","u","localize","name","format","concat","localizeValue","value","isHeaderValue","constructor","quill","options","_toolbarWidgets","_formatHandlers","_tableFormats","items","_addCallbacks","_renderToolbar","on","eventName","newValue","oldValue","eventSource","isSilentMode","getFormat","isSelectionChanged","_updateToolbar","addCleanCallback","clean","bind","editorInstance","addContentInitializedCallback","updateHistoryWidgets","updateFormatWidgets","updateTableWidgets","_updateFormatWidget","isApplied","formats","widget","getByName","_markActiveFormatWidget","_resetFormatWidget","Object","prototype","hasOwnProperty","call","_toggleClearFormatting","container","_getContainer","_$toolbar","addClass","appendTo","_$toolbarContainer","NAME","e","preventDefault","_subscribeFormatHotKeys","toolbarInstance","_createComponent","toolbarConfig","_ref","option","isInteractionDisabled","dataSource","_prepareToolbarItems","disabled","menuContainer","multiline","isMultilineMode","_this$options$multili","clear","empty","removeClass","repaint","$container","$element","prepend","_detectRenamedOptions","item","newName","oldName","index","optionName","log","keyboard","addBinding","which","shortKey","_handleFormatHotKey","range","context","_ref2","formatName","_updateButtonState","formatWidget","currentFormat","formatValue","resultItems","newItem","_handleObjectItem","buttonItemConfig","_prepareButtonItemConfig","_getToolbarItem","push","acceptedValues","_isAcceptableItem","selectItemConfig","_prepareSelectItemConfig","defaultButtonItemConfig","acceptableWidgetName","_ICON_MAP$name","iconName","buttonText","hint","text","icon","toLowerCase","onClick","stylingMode","showText","displayExpr","placeholder","onValueChanged","_isReset","_hideAdaptiveMenu","event","_setValueSilent","component","baseItem","onInitialized","toggleClass","add","multilineItem","location","locateInMenu","_getDefaultConfig","_getDefaultItemsConfig","undo","redo","insertRowAbove","insertRowBelow","insertHeaderRow","insertColumnLeft","insertColumnRight","deleteRow","deleteColumn","deleteTable","cellProperties","tableProperties","separator","template","data","element","menuItemTemplate","historyModule","history","undoOps","redoOps","stack","_updateManipulationWidget","Boolean","length","table","getModule","selection","getSelection","isTableOperationsEnabled","some","forEach","operationName","isInsertTable","isOperationEnabled","isResetRequired","hasFormats","_resetFormatWidgets","widgetName","_getFormatWidgetName","_isColorFormat","_updateColorWidget","clearWidget","color","find","css","addClickHandler","handler"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/html_editor/modules/toolbar.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Quill from \"devextreme-quill\";\r\nimport $ from \"../../../core/renderer\";\r\nimport BaseModule from \"./base\";\r\nimport Toolbar from \"../../toolbar\";\r\nimport \"../../select_box\";\r\nimport \"../../color_box/color_view\";\r\nimport \"../../number_box\";\r\nimport errors from \"../../widget/ui.errors\";\r\nimport WidgetCollector from \"./widget_collector\";\r\nimport {\r\n    each\r\n} from \"../../../core/utils/iterator\";\r\nimport {\r\n    isString,\r\n    isObject,\r\n    isDefined,\r\n    isEmptyObject\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport localizationMessage from \"../../../localization/message\";\r\nimport {\r\n    titleize,\r\n    camelize\r\n} from \"../../../core/utils/inflector\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../events/utils/index\";\r\nimport {\r\n    getTableFormats,\r\n    TABLE_OPERATIONS\r\n} from \"../utils/table_helper\";\r\nimport {\r\n    getFormatHandlers,\r\n    getDefaultClickHandler,\r\n    ICON_MAP,\r\n    applyFormat\r\n} from \"../utils/toolbar_helper\";\r\nvar ToolbarModule = BaseModule;\r\nif (Quill) {\r\n    var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\r\n    var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\r\n    var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\r\n    var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\r\n    var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\r\n    var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\r\n    var ICON_CLASS = \"dx-icon\";\r\n    var SELECTION_CHANGE_EVENT = \"selection-change\";\r\n    var USER_ACTION = \"user\";\r\n    var SILENT_ACTION = \"silent\";\r\n    var FORMAT_HOTKEYS = {\r\n        66: \"bold\",\r\n        73: \"italic\",\r\n        85: \"underline\"\r\n    };\r\n    var KEY_CODES = {\r\n        b: 66,\r\n        i: 73,\r\n        u: 85\r\n    };\r\n    var localize = name => localizationMessage.format(\"dxHtmlEditor-\".concat(camelize(name)));\r\n    var localizeValue = (value, name) => {\r\n        if (\"header\" === name) {\r\n            var isHeaderValue = isDefined(value) && false !== value;\r\n            return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\")\r\n        }\r\n        return localize(value) || value\r\n    };\r\n    ToolbarModule = class extends BaseModule {\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            this._toolbarWidgets = new WidgetCollector;\r\n            this._formatHandlers = getFormatHandlers(this);\r\n            this._tableFormats = getTableFormats(quill);\r\n            if (isDefined(options.items)) {\r\n                this._addCallbacks();\r\n                this._renderToolbar();\r\n                this.quill.on(\"editor-change\", (eventName, newValue, oldValue, eventSource) => {\r\n                    var isSilentMode = eventSource === SILENT_ACTION && isEmptyObject(this.quill.getFormat());\r\n                    if (!isSilentMode) {\r\n                        var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\r\n                        this._updateToolbar(isSelectionChanged)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        _addCallbacks() {\r\n            this.addCleanCallback(this.clean.bind(this));\r\n            this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this))\r\n        }\r\n        _updateToolbar(isSelectionChanged) {\r\n            this.updateFormatWidgets(isSelectionChanged);\r\n            this.updateHistoryWidgets();\r\n            this.updateTableWidgets()\r\n        }\r\n        _updateFormatWidget(name, isApplied, formats) {\r\n            var widget = this._toolbarWidgets.getByName(name);\r\n            if (!widget) {\r\n                return\r\n            }\r\n            if (isApplied) {\r\n                this._markActiveFormatWidget(name, widget, formats)\r\n            } else {\r\n                this._resetFormatWidget(name, widget);\r\n                if (Object.prototype.hasOwnProperty.call(name)) {\r\n                    delete formats[name]\r\n                }\r\n            }\r\n            this._toggleClearFormatting(isApplied || !isEmptyObject(formats))\r\n        }\r\n        _renderToolbar() {\r\n            var container = this.options.container || this._getContainer();\r\n            this._$toolbar = $(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\r\n            this._$toolbarContainer = $(container).addClass(TOOLBAR_WRAPPER_CLASS);\r\n            eventsEngine.on(this._$toolbarContainer, addNamespace(\"mousedown\", this.editorInstance.NAME), e => {\r\n                e.preventDefault()\r\n            });\r\n            this._subscribeFormatHotKeys();\r\n            this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, Toolbar, this.toolbarConfig);\r\n            this.editorInstance.on(\"optionChanged\", _ref => {\r\n                var {\r\n                    name: name\r\n                } = _ref;\r\n                if (\"readOnly\" === name || \"disabled\" === name) {\r\n                    this.toolbarInstance.option(\"disabled\", this.isInteractionDisabled)\r\n                }\r\n            })\r\n        }\r\n        get toolbarConfig() {\r\n            return {\r\n                dataSource: this._prepareToolbarItems(),\r\n                disabled: this.isInteractionDisabled,\r\n                menuContainer: this._$toolbarContainer,\r\n                multiline: this.isMultilineMode()\r\n            }\r\n        }\r\n        get isInteractionDisabled() {\r\n            return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\")\r\n        }\r\n        isMultilineMode() {\r\n            var _this$options$multili;\r\n            return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true\r\n        }\r\n        clean() {\r\n            this._toolbarWidgets.clear();\r\n            if (this._$toolbarContainer) {\r\n                this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS)\r\n            }\r\n        }\r\n        repaint() {\r\n            this.toolbarInstance && this.toolbarInstance.repaint()\r\n        }\r\n        _getContainer() {\r\n            var $container = $(\"<div>\");\r\n            this.editorInstance.$element().prepend($container);\r\n            return $container\r\n        }\r\n        _detectRenamedOptions(item) {\r\n            if (isObject(item)) {\r\n                each([{\r\n                    newName: \"name\",\r\n                    oldName: \"formatName\"\r\n                }, {\r\n                    newName: \"acceptedValues\",\r\n                    oldName: \"formatValues\"\r\n                }], (index, optionName) => {\r\n                    if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\r\n                        errors.log(\"W1016\", optionName.oldName, optionName.newName)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        _subscribeFormatHotKeys() {\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.b,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this));\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.i,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this));\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.u,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this))\r\n        }\r\n        _handleFormatHotKey(range, context, _ref2) {\r\n            var {\r\n                which: which\r\n            } = _ref2;\r\n            var formatName = FORMAT_HOTKEYS[which];\r\n            this._updateButtonState(formatName)\r\n        }\r\n        _updateButtonState(formatName) {\r\n            var formatWidget = this._toolbarWidgets.getByName(formatName);\r\n            var currentFormat = this.quill.getFormat();\r\n            var formatValue = currentFormat[formatName];\r\n            if (formatValue) {\r\n                this._markActiveFormatWidget(formatName, formatWidget, currentFormat)\r\n            } else {\r\n                this._resetFormatWidget(formatName, formatWidget)\r\n            }\r\n        }\r\n        _prepareToolbarItems() {\r\n            var resultItems = [];\r\n            each(this.options.items, (index, item) => {\r\n                var newItem;\r\n                this._detectRenamedOptions(item);\r\n                if (isObject(item)) {\r\n                    newItem = this._handleObjectItem(item)\r\n                } else if (isString(item)) {\r\n                    var buttonItemConfig = this._prepareButtonItemConfig(item);\r\n                    newItem = this._getToolbarItem(buttonItemConfig)\r\n                }\r\n                if (newItem) {\r\n                    resultItems.push(newItem)\r\n                }\r\n            });\r\n            return resultItems\r\n        }\r\n        _handleObjectItem(item) {\r\n            if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\r\n                var selectItemConfig = this._prepareSelectItemConfig(item);\r\n                return this._getToolbarItem(selectItemConfig)\r\n            } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\r\n                var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\r\n                var buttonItemConfig = extend(true, defaultButtonItemConfig, item);\r\n                return this._getToolbarItem(buttonItemConfig)\r\n            } else {\r\n                return this._getToolbarItem(item)\r\n            }\r\n        }\r\n        _isAcceptableItem(widget, acceptableWidgetName) {\r\n            return !widget || widget === acceptableWidgetName\r\n        }\r\n        _prepareButtonItemConfig(name) {\r\n            var _ICON_MAP$name;\r\n            var iconName = null !== (_ICON_MAP$name = ICON_MAP[name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\r\n            var buttonText = titleize(name);\r\n            return {\r\n                widget: \"dxButton\",\r\n                name: name,\r\n                options: {\r\n                    hint: localize(buttonText),\r\n                    text: localize(buttonText),\r\n                    icon: iconName.toLowerCase(),\r\n                    onClick: this._formatHandlers[name] || getDefaultClickHandler(this, name),\r\n                    stylingMode: \"text\"\r\n                },\r\n                showText: \"inMenu\"\r\n            }\r\n        }\r\n        _prepareSelectItemConfig(item) {\r\n            var {\r\n                name: name,\r\n                acceptedValues: acceptedValues\r\n            } = item;\r\n            return extend(true, {\r\n                widget: \"dxSelectBox\",\r\n                name: name,\r\n                options: {\r\n                    stylingMode: \"filled\",\r\n                    dataSource: acceptedValues,\r\n                    displayExpr: value => localizeValue(value, name),\r\n                    placeholder: localize(name),\r\n                    onValueChanged: e => {\r\n                        if (!this._isReset) {\r\n                            this._hideAdaptiveMenu();\r\n                            applyFormat(this, [name, e.value, USER_ACTION], e.event);\r\n                            this._setValueSilent(e.component, e.value)\r\n                        }\r\n                    }\r\n                }\r\n            }, item)\r\n        }\r\n        _hideAdaptiveMenu() {\r\n            if (this.toolbarInstance.option(\"overflowMenuVisible\")) {\r\n                this.toolbarInstance.option(\"overflowMenuVisible\", false)\r\n            }\r\n        }\r\n        _getToolbarItem(item) {\r\n            var baseItem = {\r\n                options: {\r\n                    onInitialized: e => {\r\n                        if (item.name) {\r\n                            e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\r\n                            e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\r\n                            this._toolbarWidgets.add(item.name, e.component)\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var multilineItem = this.isMultilineMode() ? {\r\n                location: \"before\",\r\n                locateInMenu: \"never\"\r\n            } : {};\r\n            return extend(true, {\r\n                location: \"before\",\r\n                locateInMenu: \"auto\"\r\n            }, this._getDefaultConfig(item.name), item, baseItem, multilineItem)\r\n        }\r\n        _getDefaultItemsConfig() {\r\n            return {\r\n                clear: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                undo: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                redo: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertRowAbove: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertRowBelow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertHeaderRow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertColumnLeft: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertColumnRight: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteRow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteColumn: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteTable: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                cellProperties: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                tableProperties: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                separator: {\r\n                    template: (data, index, element) => {\r\n                        $(element).addClass(TOOLBAR_SEPARATOR_CLASS)\r\n                    },\r\n                    menuItemTemplate: (data, index, element) => {\r\n                        $(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _getDefaultConfig(name) {\r\n            return this._getDefaultItemsConfig()[name]\r\n        }\r\n        updateHistoryWidgets() {\r\n            var historyModule = this.quill.history;\r\n            if (!historyModule) {\r\n                return\r\n            }\r\n            var {\r\n                undo: undoOps,\r\n                redo: redoOps\r\n            } = historyModule.stack;\r\n            this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\r\n            this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length))\r\n        }\r\n        updateTableWidgets() {\r\n            var table = this.quill.getModule(\"table\");\r\n            if (!table) {\r\n                return\r\n            }\r\n            var selection = this.quill.getSelection();\r\n            var formats = selection && this.quill.getFormat(selection) || {};\r\n            var isTableOperationsEnabled = this._tableFormats.some(format => Boolean(formats[format]));\r\n            TABLE_OPERATIONS.forEach(operationName => {\r\n                var isInsertTable = \"insertTable\" === operationName;\r\n                var widget = this._toolbarWidgets.getByName(operationName);\r\n                this._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled)\r\n            })\r\n        }\r\n        _updateManipulationWidget(widget, isOperationEnabled) {\r\n            if (!widget) {\r\n                return\r\n            }\r\n            widget.option(\"disabled\", !isOperationEnabled)\r\n        }\r\n        updateFormatWidgets(isResetRequired) {\r\n            var selection = this.quill.getSelection();\r\n            if (!selection) {\r\n                return\r\n            }\r\n            var formats = this.quill.getFormat(selection);\r\n            var hasFormats = !isEmptyObject(formats);\r\n            if (!hasFormats || isResetRequired) {\r\n                this._resetFormatWidgets()\r\n            }\r\n            for (var formatName in formats) {\r\n                var widgetName = this._getFormatWidgetName(formatName, formats);\r\n                var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\r\n                if (!formatWidget) {\r\n                    continue\r\n                }\r\n                this._markActiveFormatWidget(formatName, formatWidget, formats)\r\n            }\r\n            this._toggleClearFormatting(hasFormats || selection.length > 1)\r\n        }\r\n        _markActiveFormatWidget(name, widget, formats) {\r\n            if (this._isColorFormat(name)) {\r\n                this._updateColorWidget(name, formats[name])\r\n            }\r\n            if (\"value\" in widget.option()) {\r\n                this._setValueSilent(widget, formats[name])\r\n            } else {\r\n                widget.$element().addClass(ACTIVE_FORMAT_CLASS)\r\n            }\r\n        }\r\n        _toggleClearFormatting(hasFormats) {\r\n            var clearWidget = this._toolbarWidgets.getByName(\"clear\");\r\n            if (clearWidget) {\r\n                clearWidget.option(\"disabled\", !hasFormats)\r\n            }\r\n        }\r\n        _isColorFormat(name) {\r\n            return \"color\" === name || \"background\" === name\r\n        }\r\n        _updateColorWidget(name, color) {\r\n            var formatWidget = this._toolbarWidgets.getByName(name);\r\n            if (!formatWidget) {\r\n                return\r\n            }\r\n            formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\")\r\n        }\r\n        _getFormatWidgetName(name, formats) {\r\n            var widgetName;\r\n            switch (name) {\r\n                case \"align\":\r\n                    widgetName = name + titleize(formats[name]);\r\n                    break;\r\n                case \"list\":\r\n                    widgetName = formats[name] + titleize(name);\r\n                    break;\r\n                case \"code-block\":\r\n                    widgetName = \"codeBlock\";\r\n                    break;\r\n                case \"script\":\r\n                    widgetName = formats[name] + name;\r\n                    break;\r\n                case \"imageSrc\":\r\n                    widgetName = \"image\";\r\n                    break;\r\n                default:\r\n                    widgetName = name\r\n            }\r\n            return widgetName\r\n        }\r\n        _setValueSilent(widget, value) {\r\n            this._isReset = true;\r\n            widget.option(\"value\", value);\r\n            this._isReset = false\r\n        }\r\n        _resetFormatWidgets() {\r\n            this._toolbarWidgets.each((name, widget) => {\r\n                this._resetFormatWidget(name, widget)\r\n            })\r\n        }\r\n        _resetFormatWidget(name, widget) {\r\n            widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\r\n            if (this._isColorFormat(name)) {\r\n                this._updateColorWidget(name)\r\n            }\r\n            if (\"clear\" === name) {\r\n                widget.option(\"disabled\", true)\r\n            }\r\n            if (\"dxSelectBox\" === widget.NAME) {\r\n                this._setValueSilent(widget, null)\r\n            }\r\n        }\r\n        addClickHandler(name, handler) {\r\n            this._formatHandlers[name] = handler;\r\n            var formatWidget = this._toolbarWidgets.getByName(name);\r\n            if (formatWidget && \"dxButton\" === formatWidget.NAME) {\r\n                formatWidget.option(\"onClick\", handler)\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default ToolbarModule;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}