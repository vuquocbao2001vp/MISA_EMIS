{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport gridCore from \"../data_grid/ui.data_grid.core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { touch } from \"../../core/utils/support\";\nimport { name as clickEventName } from \"../../events/click\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace, isCommandKeyPressed } from \"../../events/utils/index\";\nimport holdEvent from \"../../events/hold\";\nimport Selection from \"../selection/selection\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport errors from \"../widget/ui.errors\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar ROW_SELECTION_CLASS = \"dx-selection\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\nvar SELECTION_MODE = \"selection.mode\";\n\nvar processLongTap = function (that, dxEvent) {\n  var selectionController = that.getController(\"selection\");\n  var rowsView = that.getView(\"rowsView\");\n  var $row = $(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\n  var rowIndex = rowsView.getRowIndex($row);\n\n  if (rowIndex < 0) {\n    return;\n  }\n\n  if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\n    if (selectionController.isSelectionWithCheckboxes()) {\n      selectionController.stopSelectionWithCheckboxes();\n    } else {\n      selectionController.startSelectionWithCheckboxes();\n    }\n  } else {\n    if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.startSelectionWithCheckboxes();\n    }\n\n    if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.changeItemSelection(rowIndex, {\n        control: true\n      });\n    }\n  }\n};\n\nvar SelectionController = gridCore.Controller.inherit(function () {\n  var selectionCellTemplate = (container, options) => {\n    var component = options.component;\n    var rowsView = component.getView(\"rowsView\");\n\n    if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\n      options.value = component.isRowSelected(options.row.key);\n    }\n\n    rowsView.renderSelectCheckBoxContainer($(container), options);\n  };\n\n  var selectionHeaderTemplate = (container, options) => {\n    var column = options.column;\n    var $cellElement = $(container);\n    var columnHeadersView = options.component.getView(\"columnHeadersView\");\n    $cellElement.addClass(EDITOR_CELL_CLASS);\n\n    columnHeadersView._renderSelectAllCheckBox($cellElement, column);\n\n    columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);\n  };\n\n  return {\n    init: function () {\n      var {\n        deferred: deferred,\n        selectAllMode: selectAllMode,\n        mode: mode\n      } = this.option(\"selection\") || {};\n\n      if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\n        errors.log(\"W1018\");\n      }\n\n      this._dataController = this.getController(\"data\");\n      this._selectionMode = mode;\n      this._isSelectionWithCheckboxes = false;\n      this._selection = this._createSelection();\n\n      this._updateSelectColumn();\n\n      this.createAction(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this._dataController && this._dataController.pushed.add(this._handleDataPushed.bind(this));\n    },\n    _handleDataPushed: function (changes) {\n      var removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\n      removedKeys.length && this.deselectRows(removedKeys);\n    },\n    _getSelectionConfig: function () {\n      var dataController = this._dataController;\n      var columnsController = this.getController(\"columns\");\n      var selectionOptions = this.option(\"selection\") || {};\n      var deferred = selectionOptions.deferred;\n      var scrollingMode = this.option(\"scrolling.mode\");\n      var virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n      var allowSelectAll = this.option(\"selection.allowSelectAll\");\n      var legacyScrollingMode = this.option(\"scrolling.legacyMode\");\n      return {\n        selectedKeys: this.option(\"selectedRowKeys\"),\n        mode: this._selectionMode,\n        deferred: deferred,\n        maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\n        selectionFilter: this.option(\"selectionFilter\"),\n        ignoreDisabledItems: true,\n        allowLoadByRange: function () {\n          var hasGroupColumns = columnsController.getGroupColumns().length > 0;\n          return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred;\n        },\n        key: function () {\n          return null === dataController || void 0 === dataController ? void 0 : dataController.key();\n        },\n        keyOf: function (item) {\n          return null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item);\n        },\n        dataFields: function () {\n          var _dataController$dataS;\n\n          return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select();\n        },\n        load: function (options) {\n          var _dataController$dataS2;\n\n          return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || new Deferred().resolve([]);\n        },\n        plainItems: function () {\n          return dataController.items(true);\n        },\n        isItemSelected: function (item) {\n          return item.selected;\n        },\n        isSelectableItem: function (item) {\n          return \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow;\n        },\n        getItemData: function (item) {\n          return (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) || item;\n        },\n        filter: function () {\n          return dataController.getCombinedFilter(deferred);\n        },\n        totalCount: () => dataController.totalCount(),\n        getLoadOptions: function (loadItemIndex, focusedItemIndex, shiftItemIndex) {\n          var _dataController$dataS3, _dataController$dataS4;\n\n          var {\n            sort: sort,\n            filter: filter\n          } = null !== (_dataController$dataS3 = null === (_dataController$dataS4 = dataController.dataSource()) || void 0 === _dataController$dataS4 ? void 0 : _dataController$dataS4.lastLoadOptions()) && void 0 !== _dataController$dataS3 ? _dataController$dataS3 : {};\n          var minIndex = Math.min(loadItemIndex, focusedItemIndex);\n          var maxIndex = Math.max(loadItemIndex, focusedItemIndex);\n\n          if (isDefined(shiftItemIndex)) {\n            minIndex = Math.min(shiftItemIndex, minIndex);\n            maxIndex = Math.max(shiftItemIndex, maxIndex);\n          }\n\n          var take = maxIndex - minIndex + 1;\n          return {\n            skip: minIndex,\n            take: take,\n            filter: filter,\n            sort: sort\n          };\n        },\n        onSelectionChanged: this._updateSelectedItems.bind(this)\n      };\n    },\n    _updateSelectColumn: function () {\n      var columnsController = this.getController(\"columns\");\n      var isSelectColumnVisible = this.isSelectColumnVisible();\n      columnsController.addCommandColumn({\n        type: \"selection\",\n        command: \"select\",\n        visible: isSelectColumnVisible,\n        visibleIndex: -1,\n        dataType: \"boolean\",\n        alignment: \"center\",\n        cssClass: COMMAND_SELECT_CLASS,\n        width: \"auto\",\n        cellTemplate: selectionCellTemplate,\n        headerCellTemplate: selectionHeaderTemplate\n      });\n      columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible);\n    },\n    _createSelection: function () {\n      var options = this._getSelectionConfig();\n\n      return new Selection(options);\n    },\n    _fireSelectionChanged: function (options) {\n      var argument = this.option(\"selection.deferred\") ? {\n        selectionFilter: this.option(\"selectionFilter\")\n      } : {\n        selectedRowKeys: this.option(\"selectedRowKeys\")\n      };\n      this.selectionChanged.fire(argument);\n\n      if (options) {\n        this.executeAction(\"onSelectionChanged\", options);\n      }\n    },\n    _updateCheckboxesState: function (options) {\n      var isDeferredMode = options.isDeferredMode;\n      var selectionFilter = options.selectionFilter;\n      var selectedItemKeys = options.selectedItemKeys;\n      var removedItemKeys = options.removedItemKeys;\n\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        if (isDeferredMode ? selectionFilter && function (that, selectionFilter) {\n          var keyIndex = 0;\n\n          var store = that._dataController.store();\n\n          var key = store && store.key();\n          var isComplexKey = Array.isArray(key);\n\n          if (!selectionFilter.length) {\n            return false;\n          }\n\n          if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\n            for (var i = 0; i < selectionFilter.length; i++) {\n              if (Array.isArray(selectionFilter[i])) {\n                if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\n                  return true;\n                }\n\n                keyIndex++;\n              }\n            }\n\n            return false;\n          }\n\n          return key !== selectionFilter[0];\n        }(this, selectionFilter) : selectedItemKeys.length > 1) {\n          this.startSelectionWithCheckboxes();\n        } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\n          this.stopSelectionWithCheckboxes();\n        }\n      }\n    },\n    _updateSelectedItems: function (args) {\n      var selectionChangedOptions;\n      var isDeferredMode = this.option(\"selection.deferred\");\n\n      var selectionFilter = this._selection.selectionFilter();\n\n      var dataController = this._dataController;\n      var items = dataController.items(true);\n      var visibleItems = dataController.items();\n\n      if (!items) {\n        return;\n      }\n\n      var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();\n      var changedItemIndexes = this.getChangedItemIndexes(items);\n      var visibleChangedItemIndexes = this.getChangedItemIndexes(visibleItems);\n\n      this._updateCheckboxesState({\n        selectedItemKeys: args.selectedItemKeys,\n        removedItemKeys: args.removedItemKeys,\n        selectionFilter: selectionFilter,\n        isDeferredMode: isDeferredMode\n      });\n\n      if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {\n        dataController.updateItems({\n          changeType: \"updateSelection\",\n          itemIndexes: visibleChangedItemIndexes\n        });\n      }\n\n      if (isDeferredMode) {\n        this.option(\"selectionFilter\", selectionFilter);\n        selectionChangedOptions = {};\n      } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\n        this._selectedItemsInternalChange = true;\n        this.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\n        this._selectedItemsInternalChange = false;\n        selectionChangedOptions = {\n          selectedRowsData: args.selectedItems.slice(0),\n          selectedRowKeys: args.selectedItemKeys.slice(0),\n          currentSelectedRowKeys: args.addedItemKeys.slice(0),\n          currentDeselectedRowKeys: args.removedItemKeys.slice(0)\n        };\n      }\n\n      this._fireSelectionChanged(selectionChangedOptions);\n    },\n    getChangedItemIndexes: function (items) {\n      var itemIndexes = [];\n      var isDeferredSelection = this.option(\"selection.deferred\");\n\n      for (var i = 0, length = items.length; i < length; i++) {\n        var row = items[i];\n        var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);\n\n        if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\n          itemIndexes.push(i);\n        }\n      }\n\n      return itemIndexes;\n    },\n    callbackNames: function () {\n      return [\"selectionChanged\"];\n    },\n    optionChanged: function (args) {\n      this.callBase(args);\n\n      switch (args.name) {\n        case \"selection\":\n          var oldSelectionMode = this._selectionMode;\n          this.init();\n\n          if (\"selection.showCheckBoxesMode\" !== args.fullName) {\n            var selectionMode = this._selectionMode;\n            var selectedRowKeys = this.option(\"selectedRowKeys\");\n\n            if (oldSelectionMode !== selectionMode) {\n              if (\"single\" === selectionMode) {\n                if (selectedRowKeys.length > 1) {\n                  selectedRowKeys = [selectedRowKeys[0]];\n                }\n              } else if (\"multiple\" !== selectionMode) {\n                selectedRowKeys = [];\n              }\n            }\n\n            this.selectRows(selectedRowKeys).always(() => {\n              this._fireSelectionChanged();\n            });\n          }\n\n          this.getController(\"columns\").updateColumns();\n          args.handled = true;\n          break;\n\n        case \"selectionFilter\":\n          this._selection.selectionFilter(args.value);\n\n          args.handled = true;\n          break;\n\n        case \"selectedRowKeys\":\n          var value = args.value || [];\n\n          if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\n            this.selectRows(value);\n          }\n\n          args.handled = true;\n      }\n    },\n    publicMethods: function () {\n      return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"];\n    },\n    isRowSelected: function (arg) {\n      return this._selection.isItemSelected(arg);\n    },\n    isSelectColumnVisible: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    _isOnePageSelectAll: function () {\n      return \"page\" === this.option(\"selection.selectAllMode\");\n    },\n    isSelectAll: function () {\n      return this._selection.getSelectAllState(this._isOnePageSelectAll());\n    },\n    selectAll: function () {\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        this.startSelectionWithCheckboxes();\n      }\n\n      return this._selection.selectAll(this._isOnePageSelectAll());\n    },\n    deselectAll: function () {\n      return this._selection.deselectAll(this._isOnePageSelectAll());\n    },\n    clearSelection: function () {\n      return this.selectedItemKeys([]);\n    },\n    refresh: function () {\n      var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n      if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\n        return this.selectedItemKeys(selectedRowKeys);\n      }\n\n      return new Deferred().resolve().promise();\n    },\n    selectedItemKeys: function (value, preserve, isDeselect, isSelectAll) {\n      return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll);\n    },\n    getSelectedRowKeys: function () {\n      return this._selection.getSelectedItemKeys();\n    },\n    selectRows: function (keys, preserve) {\n      return this.selectedItemKeys(keys, preserve);\n    },\n    deselectRows: function (keys) {\n      return this.selectedItemKeys(keys, true, true);\n    },\n    selectRowsByIndexes: function (indexes) {\n      var items = this._dataController.items();\n\n      var keys = [];\n\n      if (!Array.isArray(indexes)) {\n        indexes = Array.prototype.slice.call(arguments, 0);\n      }\n\n      each(indexes, function () {\n        var item = items[this];\n\n        if (item && \"data\" === item.rowType) {\n          keys.push(item.key);\n        }\n      });\n      return this.selectRows(keys);\n    },\n    getSelectedRowsData: function () {\n      return this._selection.getSelectedItems();\n    },\n    changeItemSelection: function (visibleItemIndex, keys, setFocusOnly) {\n      keys = keys || {};\n\n      if (this.isSelectionWithCheckboxes()) {\n        keys.control = true;\n      }\n\n      var loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\n\n      return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly);\n    },\n    focusedItemIndex: function (itemIndex) {\n      if (isDefined(itemIndex)) {\n        this._selection._focusedItemIndex = itemIndex;\n      } else {\n        return this._selection._focusedItemIndex;\n      }\n    },\n    isSelectionWithCheckboxes: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    startSelectionWithCheckboxes: function () {\n      if (\"multiple\" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {\n        this._isSelectionWithCheckboxes = true;\n\n        this._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    },\n    stopSelectionWithCheckboxes: function () {\n      if (this._isSelectionWithCheckboxes) {\n        this._isSelectionWithCheckboxes = false;\n\n        this._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    }\n  };\n}());\nexport var selectionModule = {\n  defaultOptions: function () {\n    return {\n      selection: {\n        mode: \"none\",\n        showCheckBoxesMode: \"onClick\",\n        allowSelectAll: true,\n        selectAllMode: \"allPages\",\n        maxFilterLengthInRequest: 1500,\n        deferred: false\n      },\n      selectionFilter: [],\n      selectedRowKeys: []\n    };\n  },\n  controllers: {\n    selection: SelectionController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          var selectionController = this.getController(\"selection\");\n          var isDeferredMode = this.option(\"selection.deferred\");\n          this.callBase.apply(this, arguments);\n\n          if (isDeferredMode) {\n            selectionController._updateCheckboxesState({\n              isDeferredMode: true,\n              selectionFilter: this.option(\"selectionFilter\")\n            });\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          return that.callBase().done(function () {\n            that.getController(\"selection\").refresh();\n          });\n        },\n        _processDataItem: function (item, options) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var hasSelectColumn = selectionController.isSelectColumnVisible();\n          var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\n          var dataItem = this.callBase.apply(this, arguments);\n          dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\n\n          if (hasSelectColumn && dataItem.values) {\n            for (var i = 0; i < options.visibleColumns.length; i++) {\n              if (\"select\" === options.visibleColumns[i].command) {\n                dataItem.values[i] = dataItem.isSelected;\n                break;\n              }\n            }\n          }\n\n          return dataItem;\n        },\n        refresh: function (options) {\n          var that = this;\n          var d = new Deferred();\n          this.callBase.apply(this, arguments).done(function () {\n            if (!options || options.selection) {\n              that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject);\n            } else {\n              d.resolve();\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _handleDataChanged: function (e) {\n          this.callBase.apply(this, arguments);\n\n          if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\n            this.getController(\"selection\").focusedItemIndex(-1);\n          }\n        },\n        _applyChange: function (change) {\n          if (change && \"updateSelection\" === change.changeType) {\n            change.items.forEach((item, index) => {\n              var currentItem = this._items[index];\n\n              if (currentItem) {\n                currentItem.isSelected = item.isSelected;\n                currentItem.values = item.values;\n              }\n            });\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n          var isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\n\n          if (isUpdateSelection) {\n            var itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\n            this._changes = [{\n              changeType: \"updateSelection\",\n              itemIndexes: itemIndexes\n            }];\n          }\n\n          this.callBase.apply(this, arguments);\n        }\n      },\n      contextMenu: {\n        _contextMenuPrepared: function (options) {\n          var dxEvent = options.event;\n\n          if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\n            return;\n          }\n\n          processLongTap(this, dxEvent);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        init: function () {\n          this.callBase();\n          this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this));\n        },\n        _updateSelectAllValue: function () {\n          var $element = this.element();\n          var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\n\n          if ($element && $editor.length && \"multiple\" === this.option(\"selection.mode\")) {\n            var selectAllValue = this.getController(\"selection\").isSelectAll();\n            var hasSelection = false !== selectAllValue;\n            var isVisible = this.option(\"selection.allowSelectAll\") ? !this.getController(\"data\").isEmpty() : hasSelection;\n            $editor.dxCheckBox(\"instance\").option({\n              visible: isVisible,\n              value: selectAllValue\n            });\n          }\n        },\n        _handleDataChanged: function (e) {\n          this.callBase(e);\n\n          if (!e || \"refresh\" === e.changeType) {\n            this._updateSelectAllValue();\n          }\n        },\n        _renderSelectAllCheckBox: function ($container, column) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var isEmptyData = that.getController(\"data\").isEmpty();\n          var groupElement = $(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\n          that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), $container);\n          that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\n            parentType: \"headerRow\",\n            dataType: \"boolean\",\n            value: selectionController.isSelectAll(),\n            editorOptions: {\n              visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\n            },\n            tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\n            setValue: function (value, e) {\n              var allowSelectAll = that.option(\"selection.allowSelectAll\");\n              e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\n\n              if (!e.event || selectionController.isSelectAll() === value) {\n                return;\n              }\n\n              if (e.value && !allowSelectAll) {\n                e.component.option(\"value\", false);\n              } else {\n                e.value ? selectionController.selectAll() : selectionController.deselectAll();\n              }\n\n              e.event.preventDefault();\n            }\n          }));\n          return groupElement;\n        },\n        _attachSelectAllCheckBoxClickEvent: function ($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            var event = e.event;\n\n            if (!$(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n              eventsEngine.trigger($(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), clickEventName);\n            }\n\n            event.preventDefault();\n          }));\n        }\n      },\n      rowsView: {\n        renderSelectCheckBoxContainer: function ($container, options) {\n          if (\"data\" === options.rowType && !options.row.isNewRow) {\n            $container.addClass(EDITOR_CELL_CLASS);\n\n            this._attachCheckBoxClickEvent($container);\n\n            this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), $container);\n\n            this._renderSelectCheckBox($container, options);\n          } else {\n            gridCoreUtils.setEmptyText($container);\n          }\n        },\n        _renderSelectCheckBox: function (container, options) {\n          var groupElement = $(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\n          this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\n            parentType: \"dataRow\",\n            dataType: \"boolean\",\n            lookup: null,\n            value: options.value,\n            setValue: function (value, e) {\n              var _e$event;\n\n              if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\n                eventsEngine.trigger(e.element, clickEventName, e);\n              }\n            },\n            row: options.row\n          }));\n          return groupElement;\n        },\n        _attachCheckBoxClickEvent: function ($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            var selectionController = this.getController(\"selection\");\n            var event = e.event;\n            var rowIndex = this.getRowIndex($(event.currentTarget).closest(\".\" + ROW_CLASS));\n\n            if (rowIndex >= 0) {\n              selectionController.startSelectionWithCheckboxes();\n              selectionController.changeItemSelection(rowIndex, {\n                shift: event.shiftKey\n              });\n\n              if ($(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n                this.getController(\"data\").updateItems({\n                  changeType: \"updateSelection\",\n                  itemIndexes: [rowIndex]\n                });\n              }\n            }\n          }));\n        },\n        _update: function (change) {\n          var that = this;\n          var tableElements = that.getTableElements();\n\n          if (\"updateSelection\" === change.changeType) {\n            if (tableElements.length > 0) {\n              each(tableElements, function (_, tableElement) {\n                each(change.itemIndexes || [], function (_, index) {\n                  var $row;\n\n                  if (change.items[index]) {\n                    $row = that._getRowElements($(tableElement)).eq(index);\n\n                    if ($row.length) {\n                      var isSelected = change.items[index].isSelected;\n                      $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\n                      that.setAria(\"selected\", isSelected, $row);\n                    }\n                  }\n                });\n              });\n\n              that._updateCheckboxesClass();\n            }\n          } else {\n            that.callBase(change);\n          }\n        },\n        _createTable: function () {\n          var that = this;\n          var selectionMode = that.option(\"selection.mode\");\n          var $table = that.callBase.apply(that, arguments);\n\n          if (\"none\" !== selectionMode) {\n            if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\n              eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction(function (e) {\n                processLongTap(that.component, e.event);\n                e.event.stopPropagation();\n              }));\n            }\n\n            eventsEngine.on($table, \"mousedown selectstart\", that.createAction(function (e) {\n              var event = e.event;\n\n              if (event.shiftKey) {\n                event.preventDefault();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isSelected = row.isSelected;\n\n            if (isSelected) {\n              $row.addClass(ROW_SELECTION_CLASS);\n            }\n\n            this.setAria(\"selected\", isSelected, $row);\n          }\n\n          return $row;\n        },\n        _rowClick: function (e) {\n          var dxEvent = e.event;\n          var isSelectionDisabled = $(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\n\n          if (!this.isClickableElement($(dxEvent.target))) {\n            if (!isSelectionDisabled && (\"multiple\" !== this.option(SELECTION_MODE) || \"always\" !== this.option(SHOW_CHECKBOXES_MODE))) {\n              if (this.getController(\"selection\").changeItemSelection(e.rowIndex, {\n                control: isCommandKeyPressed(dxEvent),\n                shift: dxEvent.shiftKey\n              })) {\n                dxEvent.preventDefault();\n                e.handled = true;\n              }\n            }\n\n            this.callBase(e);\n          }\n        },\n        isClickableElement: function ($target) {\n          var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\n          return !!isCommandSelect;\n        },\n        _renderCore: function (change) {\n          this.callBase(change);\n\n          this._updateCheckboxesClass();\n        },\n        _updateCheckboxesClass: function () {\n          var tableElements = this.getTableElements();\n          var selectionController = this.getController(\"selection\");\n          var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\n          each(tableElements, function (_, tableElement) {\n            $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["$","eventsEngine","gridCore","gridCoreUtils","isDefined","each","extend","touch","name","clickEventName","messageLocalization","addNamespace","isCommandKeyPressed","holdEvent","Selection","Deferred","errors","EDITOR_CELL_CLASS","ROW_CLASS","ROW_SELECTION_CLASS","SELECT_CHECKBOX_CLASS","CHECKBOXES_HIDDEN_CLASS","COMMAND_SELECT_CLASS","SELECTION_DISABLED_CLASS","DATA_ROW_CLASS","SHOW_CHECKBOXES_MODE","SELECTION_MODE","processLongTap","that","dxEvent","selectionController","getController","rowsView","getView","$row","target","closest","rowIndex","getRowIndex","option","isSelectionWithCheckboxes","stopSelectionWithCheckboxes","startSelectionWithCheckboxes","changeItemSelection","control","SelectionController","Controller","inherit","selectionCellTemplate","container","options","component","value","isRowSelected","row","key","renderSelectCheckBoxContainer","selectionHeaderTemplate","column","$cellElement","columnHeadersView","addClass","_renderSelectAllCheckBox","_attachSelectAllCheckBoxClickEvent","init","deferred","selectAllMode","mode","log","_dataController","_selectionMode","_isSelectionWithCheckboxes","_selection","_createSelection","_updateSelectColumn","createAction","excludeValidators","pushed","add","_handleDataPushed","bind","changes","removedKeys","filter","change","type","map","length","deselectRows","_getSelectionConfig","dataController","columnsController","selectionOptions","scrollingMode","virtualPaging","allowSelectAll","legacyScrollingMode","selectedKeys","maxFilterLengthInRequest","selectionFilter","ignoreDisabledItems","allowLoadByRange","hasGroupColumns","getGroupColumns","keyOf","item","dataFields","_dataController$dataS","dataSource","select","load","_dataController$dataS2","resolve","plainItems","items","isItemSelected","selected","isSelectableItem","rowType","isNewRow","getItemData","oldData","data","getCombinedFilter","totalCount","getLoadOptions","loadItemIndex","focusedItemIndex","shiftItemIndex","_dataController$dataS3","_dataController$dataS4","sort","lastLoadOptions","minIndex","Math","min","maxIndex","max","take","skip","onSelectionChanged","_updateSelectedItems","isSelectColumnVisible","addCommandColumn","command","visible","visibleIndex","dataType","alignment","cssClass","width","cellTemplate","headerCellTemplate","columnOption","_fireSelectionChanged","argument","selectedRowKeys","selectionChanged","fire","executeAction","_updateCheckboxesState","isDeferredMode","selectedItemKeys","removedItemKeys","keyIndex","store","isComplexKey","Array","isArray","i","args","selectionChangedOptions","visibleItems","changedItemIndexes","getChangedItemIndexes","visibleChangedItemIndexes","updateItems","changeType","itemIndexes","addedItemKeys","_selectedItemsInternalChange","slice","selectedRowsData","selectedItems","currentSelectedRowKeys","currentDeselectedRowKeys","isDeferredSelection","isDataItem","isSelected","push","callbackNames","optionChanged","callBase","oldSelectionMode","fullName","selectionMode","selectRows","always","updateColumns","handled","getDataSource","publicMethods","arg","_isOnePageSelectAll","isSelectAll","getSelectAllState","selectAll","deselectAll","clearSelection","refresh","promise","preserve","isDeselect","getSelectedRowKeys","getSelectedItemKeys","keys","selectRowsByIndexes","indexes","prototype","call","arguments","getSelectedRowsData","getSelectedItems","visibleItemIndex","setFocusOnly","loadedItemIndex","getRowIndexOffset","itemIndex","_focusedItemIndex","selectionModule","defaultOptions","selection","showCheckBoxesMode","controllers","extenders","apply","_loadDataSource","done","_processDataItem","hasSelectColumn","dataItem","values","visibleColumns","d","fail","reject","_handleDataChanged","e","_repaintChangesOnly","_applyChange","forEach","index","currentItem","_items","_endUpdateCore","_changes","isUpdateSelection","every","reduce","a","b","concat","contextMenu","_contextMenuPrepared","event","originalEvent","views","_updateSelectAllValue","$element","element","$editor","find","selectAllValue","hasSelection","isVisible","isEmpty","dxCheckBox","$container","isEmptyData","groupElement","appendTo","setAria","format","createEditor","parentType","editorOptions","tabIndex","setValue","preventDefault","on","trigger","currentTarget","children","_attachCheckBoxClickEvent","_renderSelectCheckBox","setEmptyText","lookup","_e$event","shift","shiftKey","_update","tableElements","getTableElements","_","tableElement","_getRowElements","eq","toggleClass","_updateCheckboxesClass","_createTable","$table","stopPropagation","_createRow","_rowClick","isSelectionDisabled","isClickableElement","$target","isCommandSelect","_renderCore","isCheckBoxesHidden"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.selection.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport gridCore from \"../data_grid/ui.data_grid.core\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    touch\r\n} from \"../../core/utils/support\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    addNamespace,\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nimport holdEvent from \"../../events/hold\";\r\nimport Selection from \"../selection/selection\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport errors from \"../widget/ui.errors\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar ROW_SELECTION_CLASS = \"dx-selection\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\r\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\r\nvar SELECTION_MODE = \"selection.mode\";\r\nvar processLongTap = function(that, dxEvent) {\r\n    var selectionController = that.getController(\"selection\");\r\n    var rowsView = that.getView(\"rowsView\");\r\n    var $row = $(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\r\n    var rowIndex = rowsView.getRowIndex($row);\r\n    if (rowIndex < 0) {\r\n        return\r\n    }\r\n    if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n        if (selectionController.isSelectionWithCheckboxes()) {\r\n            selectionController.stopSelectionWithCheckboxes()\r\n        } else {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n    } else {\r\n        if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n        if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.changeItemSelection(rowIndex, {\r\n                control: true\r\n            })\r\n        }\r\n    }\r\n};\r\nvar SelectionController = gridCore.Controller.inherit(function() {\r\n    var selectionCellTemplate = (container, options) => {\r\n        var component = options.component;\r\n        var rowsView = component.getView(\"rowsView\");\r\n        if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\r\n            options.value = component.isRowSelected(options.row.key)\r\n        }\r\n        rowsView.renderSelectCheckBoxContainer($(container), options)\r\n    };\r\n    var selectionHeaderTemplate = (container, options) => {\r\n        var column = options.column;\r\n        var $cellElement = $(container);\r\n        var columnHeadersView = options.component.getView(\"columnHeadersView\");\r\n        $cellElement.addClass(EDITOR_CELL_CLASS);\r\n        columnHeadersView._renderSelectAllCheckBox($cellElement, column);\r\n        columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement)\r\n    };\r\n    return {\r\n        init: function() {\r\n            var {\r\n                deferred: deferred,\r\n                selectAllMode: selectAllMode,\r\n                mode: mode\r\n            } = this.option(\"selection\") || {};\r\n            if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\r\n                errors.log(\"W1018\")\r\n            }\r\n            this._dataController = this.getController(\"data\");\r\n            this._selectionMode = mode;\r\n            this._isSelectionWithCheckboxes = false;\r\n            this._selection = this._createSelection();\r\n            this._updateSelectColumn();\r\n            this.createAction(\"onSelectionChanged\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this._dataController && this._dataController.pushed.add(this._handleDataPushed.bind(this))\r\n        },\r\n        _handleDataPushed: function(changes) {\r\n            var removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\r\n            removedKeys.length && this.deselectRows(removedKeys)\r\n        },\r\n        _getSelectionConfig: function() {\r\n            var dataController = this._dataController;\r\n            var columnsController = this.getController(\"columns\");\r\n            var selectionOptions = this.option(\"selection\") || {};\r\n            var deferred = selectionOptions.deferred;\r\n            var scrollingMode = this.option(\"scrolling.mode\");\r\n            var virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\r\n            var allowSelectAll = this.option(\"selection.allowSelectAll\");\r\n            var legacyScrollingMode = this.option(\"scrolling.legacyMode\");\r\n            return {\r\n                selectedKeys: this.option(\"selectedRowKeys\"),\r\n                mode: this._selectionMode,\r\n                deferred: deferred,\r\n                maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\r\n                selectionFilter: this.option(\"selectionFilter\"),\r\n                ignoreDisabledItems: true,\r\n                allowLoadByRange: function() {\r\n                    var hasGroupColumns = columnsController.getGroupColumns().length > 0;\r\n                    return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred\r\n                },\r\n                key: function() {\r\n                    return null === dataController || void 0 === dataController ? void 0 : dataController.key()\r\n                },\r\n                keyOf: function(item) {\r\n                    return null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item)\r\n                },\r\n                dataFields: function() {\r\n                    var _dataController$dataS;\r\n                    return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select()\r\n                },\r\n                load: function(options) {\r\n                    var _dataController$dataS2;\r\n                    return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || (new Deferred).resolve([])\r\n                },\r\n                plainItems: function() {\r\n                    return dataController.items(true)\r\n                },\r\n                isItemSelected: function(item) {\r\n                    return item.selected\r\n                },\r\n                isSelectableItem: function(item) {\r\n                    return \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow\r\n                },\r\n                getItemData: function(item) {\r\n                    return (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) || item\r\n                },\r\n                filter: function() {\r\n                    return dataController.getCombinedFilter(deferred)\r\n                },\r\n                totalCount: () => dataController.totalCount(),\r\n                getLoadOptions: function(loadItemIndex, focusedItemIndex, shiftItemIndex) {\r\n                    var _dataController$dataS3, _dataController$dataS4;\r\n                    var {\r\n                        sort: sort,\r\n                        filter: filter\r\n                    } = null !== (_dataController$dataS3 = null === (_dataController$dataS4 = dataController.dataSource()) || void 0 === _dataController$dataS4 ? void 0 : _dataController$dataS4.lastLoadOptions()) && void 0 !== _dataController$dataS3 ? _dataController$dataS3 : {};\r\n                    var minIndex = Math.min(loadItemIndex, focusedItemIndex);\r\n                    var maxIndex = Math.max(loadItemIndex, focusedItemIndex);\r\n                    if (isDefined(shiftItemIndex)) {\r\n                        minIndex = Math.min(shiftItemIndex, minIndex);\r\n                        maxIndex = Math.max(shiftItemIndex, maxIndex)\r\n                    }\r\n                    var take = maxIndex - minIndex + 1;\r\n                    return {\r\n                        skip: minIndex,\r\n                        take: take,\r\n                        filter: filter,\r\n                        sort: sort\r\n                    }\r\n                },\r\n                onSelectionChanged: this._updateSelectedItems.bind(this)\r\n            }\r\n        },\r\n        _updateSelectColumn: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var isSelectColumnVisible = this.isSelectColumnVisible();\r\n            columnsController.addCommandColumn({\r\n                type: \"selection\",\r\n                command: \"select\",\r\n                visible: isSelectColumnVisible,\r\n                visibleIndex: -1,\r\n                dataType: \"boolean\",\r\n                alignment: \"center\",\r\n                cssClass: COMMAND_SELECT_CLASS,\r\n                width: \"auto\",\r\n                cellTemplate: selectionCellTemplate,\r\n                headerCellTemplate: selectionHeaderTemplate\r\n            });\r\n            columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible)\r\n        },\r\n        _createSelection: function() {\r\n            var options = this._getSelectionConfig();\r\n            return new Selection(options)\r\n        },\r\n        _fireSelectionChanged: function(options) {\r\n            var argument = this.option(\"selection.deferred\") ? {\r\n                selectionFilter: this.option(\"selectionFilter\")\r\n            } : {\r\n                selectedRowKeys: this.option(\"selectedRowKeys\")\r\n            };\r\n            this.selectionChanged.fire(argument);\r\n            if (options) {\r\n                this.executeAction(\"onSelectionChanged\", options)\r\n            }\r\n        },\r\n        _updateCheckboxesState: function(options) {\r\n            var isDeferredMode = options.isDeferredMode;\r\n            var selectionFilter = options.selectionFilter;\r\n            var selectedItemKeys = options.selectedItemKeys;\r\n            var removedItemKeys = options.removedItemKeys;\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                if (isDeferredMode ? selectionFilter && function(that, selectionFilter) {\r\n                        var keyIndex = 0;\r\n                        var store = that._dataController.store();\r\n                        var key = store && store.key();\r\n                        var isComplexKey = Array.isArray(key);\r\n                        if (!selectionFilter.length) {\r\n                            return false\r\n                        }\r\n                        if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\r\n                            for (var i = 0; i < selectionFilter.length; i++) {\r\n                                if (Array.isArray(selectionFilter[i])) {\r\n                                    if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\r\n                                        return true\r\n                                    }\r\n                                    keyIndex++\r\n                                }\r\n                            }\r\n                            return false\r\n                        }\r\n                        return key !== selectionFilter[0]\r\n                    }(this, selectionFilter) : selectedItemKeys.length > 1) {\r\n                    this.startSelectionWithCheckboxes()\r\n                } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\r\n                    this.stopSelectionWithCheckboxes()\r\n                }\r\n            }\r\n        },\r\n        _updateSelectedItems: function(args) {\r\n            var selectionChangedOptions;\r\n            var isDeferredMode = this.option(\"selection.deferred\");\r\n            var selectionFilter = this._selection.selectionFilter();\r\n            var dataController = this._dataController;\r\n            var items = dataController.items(true);\r\n            var visibleItems = dataController.items();\r\n            if (!items) {\r\n                return\r\n            }\r\n            var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();\r\n            var changedItemIndexes = this.getChangedItemIndexes(items);\r\n            var visibleChangedItemIndexes = this.getChangedItemIndexes(visibleItems);\r\n            this._updateCheckboxesState({\r\n                selectedItemKeys: args.selectedItemKeys,\r\n                removedItemKeys: args.removedItemKeys,\r\n                selectionFilter: selectionFilter,\r\n                isDeferredMode: isDeferredMode\r\n            });\r\n            if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {\r\n                dataController.updateItems({\r\n                    changeType: \"updateSelection\",\r\n                    itemIndexes: visibleChangedItemIndexes\r\n                })\r\n            }\r\n            if (isDeferredMode) {\r\n                this.option(\"selectionFilter\", selectionFilter);\r\n                selectionChangedOptions = {}\r\n            } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\r\n                this._selectedItemsInternalChange = true;\r\n                this.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\r\n                this._selectedItemsInternalChange = false;\r\n                selectionChangedOptions = {\r\n                    selectedRowsData: args.selectedItems.slice(0),\r\n                    selectedRowKeys: args.selectedItemKeys.slice(0),\r\n                    currentSelectedRowKeys: args.addedItemKeys.slice(0),\r\n                    currentDeselectedRowKeys: args.removedItemKeys.slice(0)\r\n                }\r\n            }\r\n            this._fireSelectionChanged(selectionChangedOptions)\r\n        },\r\n        getChangedItemIndexes: function(items) {\r\n            var itemIndexes = [];\r\n            var isDeferredSelection = this.option(\"selection.deferred\");\r\n            for (var i = 0, length = items.length; i < length; i++) {\r\n                var row = items[i];\r\n                var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);\r\n                if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\r\n                    itemIndexes.push(i)\r\n                }\r\n            }\r\n            return itemIndexes\r\n        },\r\n        callbackNames: function() {\r\n            return [\"selectionChanged\"]\r\n        },\r\n        optionChanged: function(args) {\r\n            this.callBase(args);\r\n            switch (args.name) {\r\n                case \"selection\":\r\n                    var oldSelectionMode = this._selectionMode;\r\n                    this.init();\r\n                    if (\"selection.showCheckBoxesMode\" !== args.fullName) {\r\n                        var selectionMode = this._selectionMode;\r\n                        var selectedRowKeys = this.option(\"selectedRowKeys\");\r\n                        if (oldSelectionMode !== selectionMode) {\r\n                            if (\"single\" === selectionMode) {\r\n                                if (selectedRowKeys.length > 1) {\r\n                                    selectedRowKeys = [selectedRowKeys[0]]\r\n                                }\r\n                            } else if (\"multiple\" !== selectionMode) {\r\n                                selectedRowKeys = []\r\n                            }\r\n                        }\r\n                        this.selectRows(selectedRowKeys).always(() => {\r\n                            this._fireSelectionChanged()\r\n                        })\r\n                    }\r\n                    this.getController(\"columns\").updateColumns();\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectionFilter\":\r\n                    this._selection.selectionFilter(args.value);\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectedRowKeys\":\r\n                    var value = args.value || [];\r\n                    if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\r\n                        this.selectRows(value)\r\n                    }\r\n                    args.handled = true\r\n            }\r\n        },\r\n        publicMethods: function() {\r\n            return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"]\r\n        },\r\n        isRowSelected: function(arg) {\r\n            return this._selection.isItemSelected(arg)\r\n        },\r\n        isSelectColumnVisible: function() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        _isOnePageSelectAll: function() {\r\n            return \"page\" === this.option(\"selection.selectAllMode\")\r\n        },\r\n        isSelectAll: function() {\r\n            return this._selection.getSelectAllState(this._isOnePageSelectAll())\r\n        },\r\n        selectAll: function() {\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                this.startSelectionWithCheckboxes()\r\n            }\r\n            return this._selection.selectAll(this._isOnePageSelectAll())\r\n        },\r\n        deselectAll: function() {\r\n            return this._selection.deselectAll(this._isOnePageSelectAll())\r\n        },\r\n        clearSelection: function() {\r\n            return this.selectedItemKeys([])\r\n        },\r\n        refresh: function() {\r\n            var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\r\n            if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\r\n                return this.selectedItemKeys(selectedRowKeys)\r\n            }\r\n            return (new Deferred).resolve().promise()\r\n        },\r\n        selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {\r\n            return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll)\r\n        },\r\n        getSelectedRowKeys: function() {\r\n            return this._selection.getSelectedItemKeys()\r\n        },\r\n        selectRows: function(keys, preserve) {\r\n            return this.selectedItemKeys(keys, preserve)\r\n        },\r\n        deselectRows: function(keys) {\r\n            return this.selectedItemKeys(keys, true, true)\r\n        },\r\n        selectRowsByIndexes: function(indexes) {\r\n            var items = this._dataController.items();\r\n            var keys = [];\r\n            if (!Array.isArray(indexes)) {\r\n                indexes = Array.prototype.slice.call(arguments, 0)\r\n            }\r\n            each(indexes, (function() {\r\n                var item = items[this];\r\n                if (item && \"data\" === item.rowType) {\r\n                    keys.push(item.key)\r\n                }\r\n            }));\r\n            return this.selectRows(keys)\r\n        },\r\n        getSelectedRowsData: function() {\r\n            return this._selection.getSelectedItems()\r\n        },\r\n        changeItemSelection: function(visibleItemIndex, keys, setFocusOnly) {\r\n            keys = keys || {};\r\n            if (this.isSelectionWithCheckboxes()) {\r\n                keys.control = true\r\n            }\r\n            var loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\r\n            return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly)\r\n        },\r\n        focusedItemIndex: function(itemIndex) {\r\n            if (isDefined(itemIndex)) {\r\n                this._selection._focusedItemIndex = itemIndex\r\n            } else {\r\n                return this._selection._focusedItemIndex\r\n            }\r\n        },\r\n        isSelectionWithCheckboxes: function() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        startSelectionWithCheckboxes: function() {\r\n            if (\"multiple\" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {\r\n                this._isSelectionWithCheckboxes = true;\r\n                this._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        },\r\n        stopSelectionWithCheckboxes: function() {\r\n            if (this._isSelectionWithCheckboxes) {\r\n                this._isSelectionWithCheckboxes = false;\r\n                this._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}());\r\nexport var selectionModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            selection: {\r\n                mode: \"none\",\r\n                showCheckBoxesMode: \"onClick\",\r\n                allowSelectAll: true,\r\n                selectAllMode: \"allPages\",\r\n                maxFilterLengthInRequest: 1500,\r\n                deferred: false\r\n            },\r\n            selectionFilter: [],\r\n            selectedRowKeys: []\r\n        }\r\n    },\r\n    controllers: {\r\n        selection: SelectionController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isDeferredMode = this.option(\"selection.deferred\");\r\n                    this.callBase.apply(this, arguments);\r\n                    if (isDeferredMode) {\r\n                        selectionController._updateCheckboxesState({\r\n                            isDeferredMode: true,\r\n                            selectionFilter: this.option(\"selectionFilter\")\r\n                        })\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    return that.callBase().done((function() {\r\n                        that.getController(\"selection\").refresh()\r\n                    }))\r\n                },\r\n                _processDataItem: function(item, options) {\r\n                    var that = this;\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var hasSelectColumn = selectionController.isSelectColumnVisible();\r\n                    var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\r\n                    var dataItem = this.callBase.apply(this, arguments);\r\n                    dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\r\n                    if (hasSelectColumn && dataItem.values) {\r\n                        for (var i = 0; i < options.visibleColumns.length; i++) {\r\n                            if (\"select\" === options.visibleColumns[i].command) {\r\n                                dataItem.values[i] = dataItem.isSelected;\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataItem\r\n                },\r\n                refresh: function(options) {\r\n                    var that = this;\r\n                    var d = new Deferred;\r\n                    this.callBase.apply(this, arguments).done((function() {\r\n                        if (!options || options.selection) {\r\n                            that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            d.resolve()\r\n                        }\r\n                    })).fail(d.reject);\r\n                    return d.promise()\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\r\n                        this.getController(\"selection\").focusedItemIndex(-1)\r\n                    }\r\n                },\r\n                _applyChange: function(change) {\r\n                    if (change && \"updateSelection\" === change.changeType) {\r\n                        change.items.forEach((item, index) => {\r\n                            var currentItem = this._items[index];\r\n                            if (currentItem) {\r\n                                currentItem.isSelected = item.isSelected;\r\n                                currentItem.values = item.values\r\n                            }\r\n                        });\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    var isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\r\n                    if (isUpdateSelection) {\r\n                        var itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\r\n                        this._changes = [{\r\n                            changeType: \"updateSelection\",\r\n                            itemIndexes: itemIndexes\r\n                        }]\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                }\r\n            },\r\n            contextMenu: {\r\n                _contextMenuPrepared: function(options) {\r\n                    var dxEvent = options.event;\r\n                    if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\r\n                        return\r\n                    }\r\n                    processLongTap(this, dxEvent)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this))\r\n                },\r\n                _updateSelectAllValue: function() {\r\n                    var $element = this.element();\r\n                    var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\r\n                    if ($element && $editor.length && \"multiple\" === this.option(\"selection.mode\")) {\r\n                        var selectAllValue = this.getController(\"selection\").isSelectAll();\r\n                        var hasSelection = false !== selectAllValue;\r\n                        var isVisible = this.option(\"selection.allowSelectAll\") ? !this.getController(\"data\").isEmpty() : hasSelection;\r\n                        $editor.dxCheckBox(\"instance\").option({\r\n                            visible: isVisible,\r\n                            value: selectAllValue\r\n                        })\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    this.callBase(e);\r\n                    if (!e || \"refresh\" === e.changeType) {\r\n                        this._updateSelectAllValue()\r\n                    }\r\n                },\r\n                _renderSelectAllCheckBox: function($container, column) {\r\n                    var that = this;\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var isEmptyData = that.getController(\"data\").isEmpty();\r\n                    var groupElement = $(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\r\n                    that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), $container);\r\n                    that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\r\n                        parentType: \"headerRow\",\r\n                        dataType: \"boolean\",\r\n                        value: selectionController.isSelectAll(),\r\n                        editorOptions: {\r\n                            visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\r\n                        },\r\n                        tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\r\n                        setValue: function(value, e) {\r\n                            var allowSelectAll = that.option(\"selection.allowSelectAll\");\r\n                            e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\r\n                            if (!e.event || selectionController.isSelectAll() === value) {\r\n                                return\r\n                            }\r\n                            if (e.value && !allowSelectAll) {\r\n                                e.component.option(\"value\", false)\r\n                            } else {\r\n                                e.value ? selectionController.selectAll() : selectionController.deselectAll()\r\n                            }\r\n                            e.event.preventDefault()\r\n                        }\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachSelectAllCheckBoxClickEvent: function($element) {\r\n                    eventsEngine.on($element, clickEventName, this.createAction((function(e) {\r\n                        var event = e.event;\r\n                        if (!$(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n                            eventsEngine.trigger($(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), clickEventName)\r\n                        }\r\n                        event.preventDefault()\r\n                    })))\r\n                }\r\n            },\r\n            rowsView: {\r\n                renderSelectCheckBoxContainer: function($container, options) {\r\n                    if (\"data\" === options.rowType && !options.row.isNewRow) {\r\n                        $container.addClass(EDITOR_CELL_CLASS);\r\n                        this._attachCheckBoxClickEvent($container);\r\n                        this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), $container);\r\n                        this._renderSelectCheckBox($container, options)\r\n                    } else {\r\n                        gridCoreUtils.setEmptyText($container)\r\n                    }\r\n                },\r\n                _renderSelectCheckBox: function(container, options) {\r\n                    var groupElement = $(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\r\n                    this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\r\n                        parentType: \"dataRow\",\r\n                        dataType: \"boolean\",\r\n                        lookup: null,\r\n                        value: options.value,\r\n                        setValue: function(value, e) {\r\n                            var _e$event;\r\n                            if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\r\n                                eventsEngine.trigger(e.element, clickEventName, e)\r\n                            }\r\n                        },\r\n                        row: options.row\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachCheckBoxClickEvent: function($element) {\r\n                    eventsEngine.on($element, clickEventName, this.createAction((function(e) {\r\n                        var selectionController = this.getController(\"selection\");\r\n                        var event = e.event;\r\n                        var rowIndex = this.getRowIndex($(event.currentTarget).closest(\".\" + ROW_CLASS));\r\n                        if (rowIndex >= 0) {\r\n                            selectionController.startSelectionWithCheckboxes();\r\n                            selectionController.changeItemSelection(rowIndex, {\r\n                                shift: event.shiftKey\r\n                            });\r\n                            if ($(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n                                this.getController(\"data\").updateItems({\r\n                                    changeType: \"updateSelection\",\r\n                                    itemIndexes: [rowIndex]\r\n                                })\r\n                            }\r\n                        }\r\n                    })))\r\n                },\r\n                _update: function(change) {\r\n                    var that = this;\r\n                    var tableElements = that.getTableElements();\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        if (tableElements.length > 0) {\r\n                            each(tableElements, (function(_, tableElement) {\r\n                                each(change.itemIndexes || [], (function(_, index) {\r\n                                    var $row;\r\n                                    if (change.items[index]) {\r\n                                        $row = that._getRowElements($(tableElement)).eq(index);\r\n                                        if ($row.length) {\r\n                                            var isSelected = change.items[index].isSelected;\r\n                                            $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\r\n                                            that.setAria(\"selected\", isSelected, $row)\r\n                                        }\r\n                                    }\r\n                                }))\r\n                            }));\r\n                            that._updateCheckboxesClass()\r\n                        }\r\n                    } else {\r\n                        that.callBase(change)\r\n                    }\r\n                },\r\n                _createTable: function() {\r\n                    var that = this;\r\n                    var selectionMode = that.option(\"selection.mode\");\r\n                    var $table = that.callBase.apply(that, arguments);\r\n                    if (\"none\" !== selectionMode) {\r\n                        if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\r\n                            eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction((function(e) {\r\n                                processLongTap(that.component, e.event);\r\n                                e.event.stopPropagation()\r\n                            })))\r\n                        }\r\n                        eventsEngine.on($table, \"mousedown selectstart\", that.createAction((function(e) {\r\n                            var event = e.event;\r\n                            if (event.shiftKey) {\r\n                                event.preventDefault()\r\n                            }\r\n                        })))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isSelected = row.isSelected;\r\n                        if (isSelected) {\r\n                            $row.addClass(ROW_SELECTION_CLASS)\r\n                        }\r\n                        this.setAria(\"selected\", isSelected, $row)\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowClick: function(e) {\r\n                    var dxEvent = e.event;\r\n                    var isSelectionDisabled = $(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\r\n                    if (!this.isClickableElement($(dxEvent.target))) {\r\n                        if (!isSelectionDisabled && (\"multiple\" !== this.option(SELECTION_MODE) || \"always\" !== this.option(SHOW_CHECKBOXES_MODE))) {\r\n                            if (this.getController(\"selection\").changeItemSelection(e.rowIndex, {\r\n                                    control: isCommandKeyPressed(dxEvent),\r\n                                    shift: dxEvent.shiftKey\r\n                                })) {\r\n                                dxEvent.preventDefault();\r\n                                e.handled = true\r\n                            }\r\n                        }\r\n                        this.callBase(e)\r\n                    }\r\n                },\r\n                isClickableElement: function($target) {\r\n                    var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\r\n                    return !!isCommandSelect\r\n                },\r\n                _renderCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateCheckboxesClass()\r\n                },\r\n                _updateCheckboxesClass: function() {\r\n                    var tableElements = this.getTableElements();\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\r\n                    each(tableElements, (function(_, tableElement) {\r\n                        $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden)\r\n                    }))\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}