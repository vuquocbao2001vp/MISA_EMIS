{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/map/provider.dynamic.bing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth, getHeight } from \"../../core/utils/size\";\nimport { noop } from \"../../core/utils/common\";\nimport { getWindow } from \"../../core/utils/window\";\nvar window = getWindow();\nimport { extend } from \"../../core/utils/extend\";\nimport errors from \"../widget/ui.errors\";\nimport { map, each } from \"../../core/utils/iterator\";\nimport DynamicProvider from \"./provider.dynamic\";\nimport Color from \"../../color\";\nimport ajax from \"../../core/utils/ajax\";\nimport { isDefined } from \"../../core/utils/type\";\nvar BING_MAP_READY = \"_bingScriptReady\";\nvar BING_URL_V8 = \"https://www.bing.com/api/maps/mapcontrol?callback=\" + BING_MAP_READY;\nvar INFOBOX_V_OFFSET_V8 = 13;\nvar BING_CREDENTIALS = \"AhuxC0dQ1DBTNo8L-H9ToVMQStmizZzBJdraTSgCzDSWPsA1Qd8uIvFSflzxdaLH\";\nvar MIN_LOCATION_RECT_LENGTH = 1e-16;\n\nvar msMapsLoaded = function () {\n  return window.Microsoft && window.Microsoft.Maps;\n};\n\nvar msMapsLoader;\nvar BingProvider = DynamicProvider.inherit({\n  _mapType: function (type) {\n    var mapTypes = {\n      roadmap: Microsoft.Maps.MapTypeId.road,\n      hybrid: Microsoft.Maps.MapTypeId.aerial,\n      satellite: Microsoft.Maps.MapTypeId.aerial\n    };\n    return mapTypes[type] || mapTypes.road;\n  },\n  _movementMode: function (type) {\n    var movementTypes = {\n      driving: Microsoft.Maps.Directions.RouteMode.driving,\n      walking: Microsoft.Maps.Directions.RouteMode.walking\n    };\n    return movementTypes[type] || movementTypes.driving;\n  },\n  _resolveLocation: function (location) {\n    return new Promise(function (resolve) {\n      var latLng = this._getLatLng(location);\n\n      if (latLng) {\n        resolve(new Microsoft.Maps.Location(latLng.lat, latLng.lng));\n      } else {\n        this._geocodeLocation(location).then(function (geocodedLocation) {\n          resolve(geocodedLocation);\n        });\n      }\n    }.bind(this));\n  },\n  _geocodedLocations: {},\n  _geocodeLocationImpl: function (location) {\n    return new Promise(function (resolve) {\n      if (!isDefined(location)) {\n        resolve(new Microsoft.Maps.Location(0, 0));\n        return;\n      }\n\n      var searchManager = new Microsoft.Maps.Search.SearchManager(this._map);\n      var searchRequest = {\n        where: location,\n        count: 1,\n        callback: function (searchResponse) {\n          var result = searchResponse.results[0];\n\n          if (result) {\n            var boundsBox = searchResponse.results[0].location;\n            resolve(new Microsoft.Maps.Location(boundsBox.latitude, boundsBox.longitude));\n          } else {\n            resolve(new Microsoft.Maps.Location(0, 0));\n          }\n        }\n      };\n      searchManager.geocode(searchRequest);\n    }.bind(this));\n  },\n  _normalizeLocation: function (location) {\n    return {\n      lat: location.latitude,\n      lng: location.longitude\n    };\n  },\n  _normalizeLocationRect: function (locationRect) {\n    var northWest = this._normalizeLocation(locationRect.getNorthwest());\n\n    var southEast = this._normalizeLocation(locationRect.getSoutheast());\n\n    return {\n      northEast: {\n        lat: northWest.lat,\n        lng: southEast.lng\n      },\n      southWest: {\n        lat: southEast.lat,\n        lng: northWest.lng\n      }\n    };\n  },\n  _loadImpl: function () {\n    return new Promise(function (resolve) {\n      if (msMapsLoaded()) {\n        resolve();\n      } else {\n        if (!msMapsLoader) {\n          msMapsLoader = this._loadMapScript();\n        }\n\n        msMapsLoader.then(function () {\n          if (msMapsLoaded()) {\n            resolve();\n            return;\n          }\n\n          this._loadMapScript().then(resolve);\n        }.bind(this));\n      }\n    }.bind(this)).then(function () {\n      return Promise.all([new Promise(function (resolve) {\n        Microsoft.Maps.loadModule(\"Microsoft.Maps.Search\", {\n          callback: resolve\n        });\n      }), new Promise(function (resolve) {\n        Microsoft.Maps.loadModule(\"Microsoft.Maps.Directions\", {\n          callback: resolve\n        });\n      })]);\n    });\n  },\n  _loadMapScript: function () {\n    return new Promise(function (resolve) {\n      window[BING_MAP_READY] = resolve;\n      ajax.sendRequest({\n        url: BING_URL_V8,\n        dataType: \"script\"\n      });\n    }).then(function () {\n      try {\n        delete window[BING_MAP_READY];\n      } catch (e) {\n        window[BING_MAP_READY] = void 0;\n      }\n    });\n  },\n  _init: function () {\n    this._createMap();\n\n    return Promise.resolve();\n  },\n  _createMap: function () {\n    var controls = this._option(\"controls\");\n\n    this._map = new Microsoft.Maps.Map(this._$container[0], {\n      credentials: this._keyOption(\"bing\") || BING_CREDENTIALS,\n      zoom: this._option(\"zoom\"),\n      showDashboard: controls,\n      showMapTypeSelector: controls,\n      showScalebar: controls\n    });\n  },\n  _attachHandlers: function () {\n    this._providerViewChangeHandler = Microsoft.Maps.Events.addHandler(this._map, \"viewchange\", this._viewChangeHandler.bind(this));\n    this._providerClickHandler = Microsoft.Maps.Events.addHandler(this._map, \"click\", this._clickActionHandler.bind(this));\n  },\n  _viewChangeHandler: function () {\n    var bounds = this._map.getBounds();\n\n    this._option(\"bounds\", this._normalizeLocationRect(bounds));\n\n    var center = this._map.getCenter();\n\n    this._option(\"center\", this._normalizeLocation(center));\n\n    if (!this._preventZoomChangeEvent) {\n      this._option(\"zoom\", this._map.getZoom());\n    }\n  },\n  _clickActionHandler: function (e) {\n    if (\"map\" === e.targetType) {\n      this._fireClickAction({\n        location: this._normalizeLocation(e.location)\n      });\n    }\n  },\n  updateDimensions: function () {\n    var $container = this._$container;\n\n    this._map.setOptions({\n      width: getWidth($container),\n      height: getHeight($container)\n    });\n\n    return Promise.resolve();\n  },\n  updateMapType: function () {\n    var type = this._option(\"type\");\n\n    var labelOverlay = Microsoft.Maps.LabelOverlay;\n\n    this._map.setView({\n      animate: false,\n      mapTypeId: this._mapType(type),\n      labelOverlay: \"satellite\" === type ? labelOverlay.hidden : labelOverlay.visible\n    });\n\n    return Promise.resolve();\n  },\n  updateBounds: function () {\n    return Promise.all([this._resolveLocation(this._option(\"bounds.northEast\")), this._resolveLocation(this._option(\"bounds.southWest\"))]).then(function (result) {\n      var bounds = new Microsoft.Maps.LocationRect.fromLocations(result[0], result[1]);\n\n      this._map.setView({\n        animate: false,\n        bounds: bounds\n      });\n    }.bind(this));\n  },\n  updateCenter: function () {\n    return this._resolveLocation(this._option(\"center\")).then(function (center) {\n      this._map.setView({\n        animate: false,\n        center: center\n      });\n    }.bind(this));\n  },\n  updateZoom: function () {\n    this._map.setView({\n      animate: false,\n      zoom: this._option(\"zoom\")\n    });\n\n    return Promise.resolve();\n  },\n  updateControls: function () {\n    this.clean();\n    return this.render.apply(this, arguments);\n  },\n  _renderMarker: function (options) {\n    return this._resolveLocation(options.location).then(function (location) {\n      var pushpinOptions = {\n        icon: options.iconSrc || this._option(\"markerIconSrc\")\n      };\n\n      if (options.html) {\n        extend(pushpinOptions, {\n          htmlContent: options.html,\n          width: null,\n          height: null\n        });\n        var htmlOffset = options.htmlOffset;\n\n        if (htmlOffset) {\n          pushpinOptions.anchor = new Microsoft.Maps.Point(-htmlOffset.left, -htmlOffset.top);\n        }\n      }\n\n      var pushpin = new Microsoft.Maps.Pushpin(location, pushpinOptions);\n\n      this._map.entities.push(pushpin);\n\n      var infobox = this._renderTooltip(location, options.tooltip);\n\n      var handler;\n\n      if (options.onClick || options.tooltip) {\n        var markerClickAction = this._mapWidget._createAction(options.onClick || noop);\n\n        var markerNormalizedLocation = this._normalizeLocation(location);\n\n        handler = Microsoft.Maps.Events.addHandler(pushpin, \"click\", function () {\n          markerClickAction({\n            location: markerNormalizedLocation\n          });\n\n          if (infobox) {\n            infobox.setOptions({\n              visible: true\n            });\n          }\n        });\n      }\n\n      return {\n        location: location,\n        marker: pushpin,\n        infobox: infobox,\n        handler: handler\n      };\n    }.bind(this));\n  },\n  _renderTooltip: function (location, options) {\n    if (!options) {\n      return;\n    }\n\n    options = this._parseTooltipOptions(options);\n    var infobox = new Microsoft.Maps.Infobox(location, {\n      description: options.text,\n      offset: new Microsoft.Maps.Point(0, INFOBOX_V_OFFSET_V8),\n      visible: options.visible\n    });\n    infobox.setMap(this._map);\n    return infobox;\n  },\n  _destroyMarker: function (marker) {\n    this._map.entities.remove(marker.marker);\n\n    if (marker.infobox) {\n      marker.infobox.setMap(null);\n    }\n\n    if (marker.handler) {\n      Microsoft.Maps.Events.removeHandler(marker.handler);\n    }\n  },\n  _renderRoute: function (options) {\n    return Promise.all(map(options.locations, function (point) {\n      return this._resolveLocation(point);\n    }.bind(this))).then(function (locations) {\n      return new Promise(function (resolve) {\n        var direction = new Microsoft.Maps.Directions.DirectionsManager(this._map);\n        var color = new Color(options.color || this._defaultRouteColor()).toHex();\n        var routeColor = new Microsoft.Maps.Color.fromHex(color);\n        routeColor.a = 255 * (options.opacity || this._defaultRouteOpacity());\n        direction.setRenderOptions({\n          autoUpdateMapView: false,\n          displayRouteSelector: false,\n          waypointPushpinOptions: {\n            visible: false\n          },\n          drivingPolylineOptions: {\n            strokeColor: routeColor,\n            strokeThickness: options.weight || this._defaultRouteWeight()\n          },\n          walkingPolylineOptions: {\n            strokeColor: routeColor,\n            strokeThickness: options.weight || this._defaultRouteWeight()\n          }\n        });\n        direction.setRequestOptions({\n          routeMode: this._movementMode(options.mode),\n          routeDraggable: false\n        });\n        each(locations, function (_, location) {\n          var waypoint = new Microsoft.Maps.Directions.Waypoint({\n            location: location\n          });\n          direction.addWaypoint(waypoint);\n        });\n        var directionHandlers = [];\n        directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsUpdated\", function (args) {\n          while (directionHandlers.length) {\n            Microsoft.Maps.Events.removeHandler(directionHandlers.pop());\n          }\n\n          var routeSummary = args.routeSummary[0];\n          resolve({\n            instance: direction,\n            northEast: routeSummary.northEast,\n            southWest: routeSummary.southWest\n          });\n        }));\n        directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsError\", function (args) {\n          while (directionHandlers.length) {\n            Microsoft.Maps.Events.removeHandler(directionHandlers.pop());\n          }\n\n          var status = \"RouteResponseCode: \" + args.responseCode + \" - \" + args.message;\n          errors.log(\"W1006\", status);\n          resolve({\n            instance: direction\n          });\n        }));\n        direction.calculateDirections();\n      }.bind(this));\n    }.bind(this));\n  },\n  _destroyRoute: function (routeObject) {\n    routeObject.instance.dispose();\n  },\n  _fitBounds: function () {\n    this._updateBounds();\n\n    if (this._bounds && this._option(\"autoAdjust\")) {\n      var zoomBeforeFitting = this._map.getZoom();\n\n      this._preventZoomChangeEvent = true;\n\n      var bounds = this._bounds.clone();\n\n      bounds.height = 1.1 * bounds.height;\n      bounds.width = 1.1 * bounds.width;\n\n      this._map.setView({\n        animate: false,\n        bounds: bounds,\n        zoom: zoomBeforeFitting\n      });\n\n      var zoomAfterFitting = this._map.getZoom();\n\n      if (zoomBeforeFitting < zoomAfterFitting) {\n        this._map.setView({\n          animate: false,\n          zoom: zoomBeforeFitting\n        });\n      } else {\n        this._option(\"zoom\", zoomAfterFitting);\n      }\n\n      delete this._preventZoomChangeEvent;\n    }\n\n    return Promise.resolve();\n  },\n  _extendBounds: function (location) {\n    if (this._bounds) {\n      this._bounds = new Microsoft.Maps.LocationRect.fromLocations(this._bounds.getNorthwest(), this._bounds.getSoutheast(), location);\n    } else {\n      this._bounds = new Microsoft.Maps.LocationRect(location, MIN_LOCATION_RECT_LENGTH, MIN_LOCATION_RECT_LENGTH);\n    }\n  },\n  clean: function () {\n    if (this._map) {\n      Microsoft.Maps.Events.removeHandler(this._providerViewChangeHandler);\n      Microsoft.Maps.Events.removeHandler(this._providerClickHandler);\n\n      this._clearMarkers();\n\n      this._clearRoutes();\n\n      this._map.dispose();\n    }\n\n    return Promise.resolve();\n  }\n});\nexport default BingProvider;","map":{"version":3,"names":["getWidth","getHeight","noop","getWindow","window","extend","errors","map","each","DynamicProvider","Color","ajax","isDefined","BING_MAP_READY","BING_URL_V8","INFOBOX_V_OFFSET_V8","BING_CREDENTIALS","MIN_LOCATION_RECT_LENGTH","msMapsLoaded","Microsoft","Maps","msMapsLoader","BingProvider","inherit","_mapType","type","mapTypes","roadmap","MapTypeId","road","hybrid","aerial","satellite","_movementMode","movementTypes","driving","Directions","RouteMode","walking","_resolveLocation","location","Promise","resolve","latLng","_getLatLng","Location","lat","lng","_geocodeLocation","then","geocodedLocation","bind","_geocodedLocations","_geocodeLocationImpl","searchManager","Search","SearchManager","_map","searchRequest","where","count","callback","searchResponse","result","results","boundsBox","latitude","longitude","geocode","_normalizeLocation","_normalizeLocationRect","locationRect","northWest","getNorthwest","southEast","getSoutheast","northEast","southWest","_loadImpl","_loadMapScript","all","loadModule","sendRequest","url","dataType","e","_init","_createMap","controls","_option","Map","_$container","credentials","_keyOption","zoom","showDashboard","showMapTypeSelector","showScalebar","_attachHandlers","_providerViewChangeHandler","Events","addHandler","_viewChangeHandler","_providerClickHandler","_clickActionHandler","bounds","getBounds","center","getCenter","_preventZoomChangeEvent","getZoom","targetType","_fireClickAction","updateDimensions","$container","setOptions","width","height","updateMapType","labelOverlay","LabelOverlay","setView","animate","mapTypeId","hidden","visible","updateBounds","LocationRect","fromLocations","updateCenter","updateZoom","updateControls","clean","render","apply","arguments","_renderMarker","options","pushpinOptions","icon","iconSrc","html","htmlContent","htmlOffset","anchor","Point","left","top","pushpin","Pushpin","entities","push","infobox","_renderTooltip","tooltip","handler","onClick","markerClickAction","_mapWidget","_createAction","markerNormalizedLocation","marker","_parseTooltipOptions","Infobox","description","text","offset","setMap","_destroyMarker","remove","removeHandler","_renderRoute","locations","point","direction","DirectionsManager","color","_defaultRouteColor","toHex","routeColor","fromHex","a","opacity","_defaultRouteOpacity","setRenderOptions","autoUpdateMapView","displayRouteSelector","waypointPushpinOptions","drivingPolylineOptions","strokeColor","strokeThickness","weight","_defaultRouteWeight","walkingPolylineOptions","setRequestOptions","routeMode","mode","routeDraggable","_","waypoint","Waypoint","addWaypoint","directionHandlers","args","length","pop","routeSummary","instance","status","responseCode","message","log","calculateDirections","_destroyRoute","routeObject","dispose","_fitBounds","_updateBounds","_bounds","zoomBeforeFitting","clone","zoomAfterFitting","_extendBounds","_clearMarkers","_clearRoutes"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/map/provider.dynamic.bing.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/map/provider.dynamic.bing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth,\r\n    getHeight\r\n} from \"../../core/utils/size\";\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nvar window = getWindow();\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport {\r\n    map,\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport DynamicProvider from \"./provider.dynamic\";\r\nimport Color from \"../../color\";\r\nimport ajax from \"../../core/utils/ajax\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar BING_MAP_READY = \"_bingScriptReady\";\r\nvar BING_URL_V8 = \"https://www.bing.com/api/maps/mapcontrol?callback=\" + BING_MAP_READY;\r\nvar INFOBOX_V_OFFSET_V8 = 13;\r\nvar BING_CREDENTIALS = \"AhuxC0dQ1DBTNo8L-H9ToVMQStmizZzBJdraTSgCzDSWPsA1Qd8uIvFSflzxdaLH\";\r\nvar MIN_LOCATION_RECT_LENGTH = 1e-16;\r\nvar msMapsLoaded = function() {\r\n    return window.Microsoft && window.Microsoft.Maps\r\n};\r\nvar msMapsLoader;\r\nvar BingProvider = DynamicProvider.inherit({\r\n    _mapType: function(type) {\r\n        var mapTypes = {\r\n            roadmap: Microsoft.Maps.MapTypeId.road,\r\n            hybrid: Microsoft.Maps.MapTypeId.aerial,\r\n            satellite: Microsoft.Maps.MapTypeId.aerial\r\n        };\r\n        return mapTypes[type] || mapTypes.road\r\n    },\r\n    _movementMode: function(type) {\r\n        var movementTypes = {\r\n            driving: Microsoft.Maps.Directions.RouteMode.driving,\r\n            walking: Microsoft.Maps.Directions.RouteMode.walking\r\n        };\r\n        return movementTypes[type] || movementTypes.driving\r\n    },\r\n    _resolveLocation: function(location) {\r\n        return new Promise(function(resolve) {\r\n            var latLng = this._getLatLng(location);\r\n            if (latLng) {\r\n                resolve(new Microsoft.Maps.Location(latLng.lat, latLng.lng))\r\n            } else {\r\n                this._geocodeLocation(location).then((function(geocodedLocation) {\r\n                    resolve(geocodedLocation)\r\n                }))\r\n            }\r\n        }.bind(this))\r\n    },\r\n    _geocodedLocations: {},\r\n    _geocodeLocationImpl: function(location) {\r\n        return new Promise(function(resolve) {\r\n            if (!isDefined(location)) {\r\n                resolve(new Microsoft.Maps.Location(0, 0));\r\n                return\r\n            }\r\n            var searchManager = new Microsoft.Maps.Search.SearchManager(this._map);\r\n            var searchRequest = {\r\n                where: location,\r\n                count: 1,\r\n                callback: function(searchResponse) {\r\n                    var result = searchResponse.results[0];\r\n                    if (result) {\r\n                        var boundsBox = searchResponse.results[0].location;\r\n                        resolve(new Microsoft.Maps.Location(boundsBox.latitude, boundsBox.longitude))\r\n                    } else {\r\n                        resolve(new Microsoft.Maps.Location(0, 0))\r\n                    }\r\n                }\r\n            };\r\n            searchManager.geocode(searchRequest)\r\n        }.bind(this))\r\n    },\r\n    _normalizeLocation: function(location) {\r\n        return {\r\n            lat: location.latitude,\r\n            lng: location.longitude\r\n        }\r\n    },\r\n    _normalizeLocationRect: function(locationRect) {\r\n        var northWest = this._normalizeLocation(locationRect.getNorthwest());\r\n        var southEast = this._normalizeLocation(locationRect.getSoutheast());\r\n        return {\r\n            northEast: {\r\n                lat: northWest.lat,\r\n                lng: southEast.lng\r\n            },\r\n            southWest: {\r\n                lat: southEast.lat,\r\n                lng: northWest.lng\r\n            }\r\n        }\r\n    },\r\n    _loadImpl: function() {\r\n        return new Promise(function(resolve) {\r\n            if (msMapsLoaded()) {\r\n                resolve()\r\n            } else {\r\n                if (!msMapsLoader) {\r\n                    msMapsLoader = this._loadMapScript()\r\n                }\r\n                msMapsLoader.then(function() {\r\n                    if (msMapsLoaded()) {\r\n                        resolve();\r\n                        return\r\n                    }\r\n                    this._loadMapScript().then(resolve)\r\n                }.bind(this))\r\n            }\r\n        }.bind(this)).then((function() {\r\n            return Promise.all([new Promise((function(resolve) {\r\n                Microsoft.Maps.loadModule(\"Microsoft.Maps.Search\", {\r\n                    callback: resolve\r\n                })\r\n            })), new Promise((function(resolve) {\r\n                Microsoft.Maps.loadModule(\"Microsoft.Maps.Directions\", {\r\n                    callback: resolve\r\n                })\r\n            }))])\r\n        }))\r\n    },\r\n    _loadMapScript: function() {\r\n        return new Promise((function(resolve) {\r\n            window[BING_MAP_READY] = resolve;\r\n            ajax.sendRequest({\r\n                url: BING_URL_V8,\r\n                dataType: \"script\"\r\n            })\r\n        })).then((function() {\r\n            try {\r\n                delete window[BING_MAP_READY]\r\n            } catch (e) {\r\n                window[BING_MAP_READY] = void 0\r\n            }\r\n        }))\r\n    },\r\n    _init: function() {\r\n        this._createMap();\r\n        return Promise.resolve()\r\n    },\r\n    _createMap: function() {\r\n        var controls = this._option(\"controls\");\r\n        this._map = new Microsoft.Maps.Map(this._$container[0], {\r\n            credentials: this._keyOption(\"bing\") || BING_CREDENTIALS,\r\n            zoom: this._option(\"zoom\"),\r\n            showDashboard: controls,\r\n            showMapTypeSelector: controls,\r\n            showScalebar: controls\r\n        })\r\n    },\r\n    _attachHandlers: function() {\r\n        this._providerViewChangeHandler = Microsoft.Maps.Events.addHandler(this._map, \"viewchange\", this._viewChangeHandler.bind(this));\r\n        this._providerClickHandler = Microsoft.Maps.Events.addHandler(this._map, \"click\", this._clickActionHandler.bind(this))\r\n    },\r\n    _viewChangeHandler: function() {\r\n        var bounds = this._map.getBounds();\r\n        this._option(\"bounds\", this._normalizeLocationRect(bounds));\r\n        var center = this._map.getCenter();\r\n        this._option(\"center\", this._normalizeLocation(center));\r\n        if (!this._preventZoomChangeEvent) {\r\n            this._option(\"zoom\", this._map.getZoom())\r\n        }\r\n    },\r\n    _clickActionHandler: function(e) {\r\n        if (\"map\" === e.targetType) {\r\n            this._fireClickAction({\r\n                location: this._normalizeLocation(e.location)\r\n            })\r\n        }\r\n    },\r\n    updateDimensions: function() {\r\n        var $container = this._$container;\r\n        this._map.setOptions({\r\n            width: getWidth($container),\r\n            height: getHeight($container)\r\n        });\r\n        return Promise.resolve()\r\n    },\r\n    updateMapType: function() {\r\n        var type = this._option(\"type\");\r\n        var labelOverlay = Microsoft.Maps.LabelOverlay;\r\n        this._map.setView({\r\n            animate: false,\r\n            mapTypeId: this._mapType(type),\r\n            labelOverlay: \"satellite\" === type ? labelOverlay.hidden : labelOverlay.visible\r\n        });\r\n        return Promise.resolve()\r\n    },\r\n    updateBounds: function() {\r\n        return Promise.all([this._resolveLocation(this._option(\"bounds.northEast\")), this._resolveLocation(this._option(\"bounds.southWest\"))]).then(function(result) {\r\n            var bounds = new Microsoft.Maps.LocationRect.fromLocations(result[0], result[1]);\r\n            this._map.setView({\r\n                animate: false,\r\n                bounds: bounds\r\n            })\r\n        }.bind(this))\r\n    },\r\n    updateCenter: function() {\r\n        return this._resolveLocation(this._option(\"center\")).then(function(center) {\r\n            this._map.setView({\r\n                animate: false,\r\n                center: center\r\n            })\r\n        }.bind(this))\r\n    },\r\n    updateZoom: function() {\r\n        this._map.setView({\r\n            animate: false,\r\n            zoom: this._option(\"zoom\")\r\n        });\r\n        return Promise.resolve()\r\n    },\r\n    updateControls: function() {\r\n        this.clean();\r\n        return this.render.apply(this, arguments)\r\n    },\r\n    _renderMarker: function(options) {\r\n        return this._resolveLocation(options.location).then(function(location) {\r\n            var pushpinOptions = {\r\n                icon: options.iconSrc || this._option(\"markerIconSrc\")\r\n            };\r\n            if (options.html) {\r\n                extend(pushpinOptions, {\r\n                    htmlContent: options.html,\r\n                    width: null,\r\n                    height: null\r\n                });\r\n                var htmlOffset = options.htmlOffset;\r\n                if (htmlOffset) {\r\n                    pushpinOptions.anchor = new Microsoft.Maps.Point(-htmlOffset.left, -htmlOffset.top)\r\n                }\r\n            }\r\n            var pushpin = new Microsoft.Maps.Pushpin(location, pushpinOptions);\r\n            this._map.entities.push(pushpin);\r\n            var infobox = this._renderTooltip(location, options.tooltip);\r\n            var handler;\r\n            if (options.onClick || options.tooltip) {\r\n                var markerClickAction = this._mapWidget._createAction(options.onClick || noop);\r\n                var markerNormalizedLocation = this._normalizeLocation(location);\r\n                handler = Microsoft.Maps.Events.addHandler(pushpin, \"click\", (function() {\r\n                    markerClickAction({\r\n                        location: markerNormalizedLocation\r\n                    });\r\n                    if (infobox) {\r\n                        infobox.setOptions({\r\n                            visible: true\r\n                        })\r\n                    }\r\n                }))\r\n            }\r\n            return {\r\n                location: location,\r\n                marker: pushpin,\r\n                infobox: infobox,\r\n                handler: handler\r\n            }\r\n        }.bind(this))\r\n    },\r\n    _renderTooltip: function(location, options) {\r\n        if (!options) {\r\n            return\r\n        }\r\n        options = this._parseTooltipOptions(options);\r\n        var infobox = new Microsoft.Maps.Infobox(location, {\r\n            description: options.text,\r\n            offset: new Microsoft.Maps.Point(0, INFOBOX_V_OFFSET_V8),\r\n            visible: options.visible\r\n        });\r\n        infobox.setMap(this._map);\r\n        return infobox\r\n    },\r\n    _destroyMarker: function(marker) {\r\n        this._map.entities.remove(marker.marker);\r\n        if (marker.infobox) {\r\n            marker.infobox.setMap(null)\r\n        }\r\n        if (marker.handler) {\r\n            Microsoft.Maps.Events.removeHandler(marker.handler)\r\n        }\r\n    },\r\n    _renderRoute: function(options) {\r\n        return Promise.all(map(options.locations, function(point) {\r\n            return this._resolveLocation(point)\r\n        }.bind(this))).then(function(locations) {\r\n            return new Promise(function(resolve) {\r\n                var direction = new Microsoft.Maps.Directions.DirectionsManager(this._map);\r\n                var color = new Color(options.color || this._defaultRouteColor()).toHex();\r\n                var routeColor = new Microsoft.Maps.Color.fromHex(color);\r\n                routeColor.a = 255 * (options.opacity || this._defaultRouteOpacity());\r\n                direction.setRenderOptions({\r\n                    autoUpdateMapView: false,\r\n                    displayRouteSelector: false,\r\n                    waypointPushpinOptions: {\r\n                        visible: false\r\n                    },\r\n                    drivingPolylineOptions: {\r\n                        strokeColor: routeColor,\r\n                        strokeThickness: options.weight || this._defaultRouteWeight()\r\n                    },\r\n                    walkingPolylineOptions: {\r\n                        strokeColor: routeColor,\r\n                        strokeThickness: options.weight || this._defaultRouteWeight()\r\n                    }\r\n                });\r\n                direction.setRequestOptions({\r\n                    routeMode: this._movementMode(options.mode),\r\n                    routeDraggable: false\r\n                });\r\n                each(locations, (function(_, location) {\r\n                    var waypoint = new Microsoft.Maps.Directions.Waypoint({\r\n                        location: location\r\n                    });\r\n                    direction.addWaypoint(waypoint)\r\n                }));\r\n                var directionHandlers = [];\r\n                directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsUpdated\", (function(args) {\r\n                    while (directionHandlers.length) {\r\n                        Microsoft.Maps.Events.removeHandler(directionHandlers.pop())\r\n                    }\r\n                    var routeSummary = args.routeSummary[0];\r\n                    resolve({\r\n                        instance: direction,\r\n                        northEast: routeSummary.northEast,\r\n                        southWest: routeSummary.southWest\r\n                    })\r\n                })));\r\n                directionHandlers.push(Microsoft.Maps.Events.addHandler(direction, \"directionsError\", (function(args) {\r\n                    while (directionHandlers.length) {\r\n                        Microsoft.Maps.Events.removeHandler(directionHandlers.pop())\r\n                    }\r\n                    var status = \"RouteResponseCode: \" + args.responseCode + \" - \" + args.message;\r\n                    errors.log(\"W1006\", status);\r\n                    resolve({\r\n                        instance: direction\r\n                    })\r\n                })));\r\n                direction.calculateDirections()\r\n            }.bind(this))\r\n        }.bind(this))\r\n    },\r\n    _destroyRoute: function(routeObject) {\r\n        routeObject.instance.dispose()\r\n    },\r\n    _fitBounds: function() {\r\n        this._updateBounds();\r\n        if (this._bounds && this._option(\"autoAdjust\")) {\r\n            var zoomBeforeFitting = this._map.getZoom();\r\n            this._preventZoomChangeEvent = true;\r\n            var bounds = this._bounds.clone();\r\n            bounds.height = 1.1 * bounds.height;\r\n            bounds.width = 1.1 * bounds.width;\r\n            this._map.setView({\r\n                animate: false,\r\n                bounds: bounds,\r\n                zoom: zoomBeforeFitting\r\n            });\r\n            var zoomAfterFitting = this._map.getZoom();\r\n            if (zoomBeforeFitting < zoomAfterFitting) {\r\n                this._map.setView({\r\n                    animate: false,\r\n                    zoom: zoomBeforeFitting\r\n                })\r\n            } else {\r\n                this._option(\"zoom\", zoomAfterFitting)\r\n            }\r\n            delete this._preventZoomChangeEvent\r\n        }\r\n        return Promise.resolve()\r\n    },\r\n    _extendBounds: function(location) {\r\n        if (this._bounds) {\r\n            this._bounds = new Microsoft.Maps.LocationRect.fromLocations(this._bounds.getNorthwest(), this._bounds.getSoutheast(), location)\r\n        } else {\r\n            this._bounds = new Microsoft.Maps.LocationRect(location, MIN_LOCATION_RECT_LENGTH, MIN_LOCATION_RECT_LENGTH)\r\n        }\r\n    },\r\n    clean: function() {\r\n        if (this._map) {\r\n            Microsoft.Maps.Events.removeHandler(this._providerViewChangeHandler);\r\n            Microsoft.Maps.Events.removeHandler(this._providerClickHandler);\r\n            this._clearMarkers();\r\n            this._clearRoutes();\r\n            this._map.dispose()\r\n        }\r\n        return Promise.resolve()\r\n    }\r\n});\r\nexport default BingProvider;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,QADJ,EAEIC,SAFJ,QAGO,uBAHP;AAIA,SACIC,IADJ,QAEO,yBAFP;AAGA,SACIC,SADJ,QAEO,yBAFP;AAGA,IAAIC,MAAM,GAAGD,SAAS,EAAtB;AACA,SACIE,MADJ,QAEO,yBAFP;AAGA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SACIC,GADJ,EAEIC,IAFJ,QAGO,2BAHP;AAIA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SACIC,SADJ,QAEO,uBAFP;AAGA,IAAIC,cAAc,GAAG,kBAArB;AACA,IAAIC,WAAW,GAAG,uDAAuDD,cAAzE;AACA,IAAIE,mBAAmB,GAAG,EAA1B;AACA,IAAIC,gBAAgB,GAAG,kEAAvB;AACA,IAAIC,wBAAwB,GAAG,KAA/B;;AACA,IAAIC,YAAY,GAAG,YAAW;EAC1B,OAAOd,MAAM,CAACe,SAAP,IAAoBf,MAAM,CAACe,SAAP,CAAiBC,IAA5C;AACH,CAFD;;AAGA,IAAIC,YAAJ;AACA,IAAIC,YAAY,GAAGb,eAAe,CAACc,OAAhB,CAAwB;EACvCC,QAAQ,EAAE,UAASC,IAAT,EAAe;IACrB,IAAIC,QAAQ,GAAG;MACXC,OAAO,EAAER,SAAS,CAACC,IAAV,CAAeQ,SAAf,CAAyBC,IADvB;MAEXC,MAAM,EAAEX,SAAS,CAACC,IAAV,CAAeQ,SAAf,CAAyBG,MAFtB;MAGXC,SAAS,EAAEb,SAAS,CAACC,IAAV,CAAeQ,SAAf,CAAyBG;IAHzB,CAAf;IAKA,OAAOL,QAAQ,CAACD,IAAD,CAAR,IAAkBC,QAAQ,CAACG,IAAlC;EACH,CARsC;EASvCI,aAAa,EAAE,UAASR,IAAT,EAAe;IAC1B,IAAIS,aAAa,GAAG;MAChBC,OAAO,EAAEhB,SAAS,CAACC,IAAV,CAAegB,UAAf,CAA0BC,SAA1B,CAAoCF,OAD7B;MAEhBG,OAAO,EAAEnB,SAAS,CAACC,IAAV,CAAegB,UAAf,CAA0BC,SAA1B,CAAoCC;IAF7B,CAApB;IAIA,OAAOJ,aAAa,CAACT,IAAD,CAAb,IAAuBS,aAAa,CAACC,OAA5C;EACH,CAfsC;EAgBvCI,gBAAgB,EAAE,UAASC,QAAT,EAAmB;IACjC,OAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkB;MACjC,IAAIC,MAAM,GAAG,KAAKC,UAAL,CAAgBJ,QAAhB,CAAb;;MACA,IAAIG,MAAJ,EAAY;QACRD,OAAO,CAAC,IAAIvB,SAAS,CAACC,IAAV,CAAeyB,QAAnB,CAA4BF,MAAM,CAACG,GAAnC,EAAwCH,MAAM,CAACI,GAA/C,CAAD,CAAP;MACH,CAFD,MAEO;QACH,KAAKC,gBAAL,CAAsBR,QAAtB,EAAgCS,IAAhC,CAAsC,UAASC,gBAAT,EAA2B;UAC7DR,OAAO,CAACQ,gBAAD,CAAP;QACH,CAFD;MAGH;IACJ,CATkB,CASjBC,IATiB,CASZ,IATY,CAAZ,CAAP;EAUH,CA3BsC;EA4BvCC,kBAAkB,EAAE,EA5BmB;EA6BvCC,oBAAoB,EAAE,UAASb,QAAT,EAAmB;IACrC,OAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkB;MACjC,IAAI,CAAC9B,SAAS,CAAC4B,QAAD,CAAd,EAA0B;QACtBE,OAAO,CAAC,IAAIvB,SAAS,CAACC,IAAV,CAAeyB,QAAnB,CAA4B,CAA5B,EAA+B,CAA/B,CAAD,CAAP;QACA;MACH;;MACD,IAAIS,aAAa,GAAG,IAAInC,SAAS,CAACC,IAAV,CAAemC,MAAf,CAAsBC,aAA1B,CAAwC,KAAKC,IAA7C,CAApB;MACA,IAAIC,aAAa,GAAG;QAChBC,KAAK,EAAEnB,QADS;QAEhBoB,KAAK,EAAE,CAFS;QAGhBC,QAAQ,EAAE,UAASC,cAAT,EAAyB;UAC/B,IAAIC,MAAM,GAAGD,cAAc,CAACE,OAAf,CAAuB,CAAvB,CAAb;;UACA,IAAID,MAAJ,EAAY;YACR,IAAIE,SAAS,GAAGH,cAAc,CAACE,OAAf,CAAuB,CAAvB,EAA0BxB,QAA1C;YACAE,OAAO,CAAC,IAAIvB,SAAS,CAACC,IAAV,CAAeyB,QAAnB,CAA4BoB,SAAS,CAACC,QAAtC,EAAgDD,SAAS,CAACE,SAA1D,CAAD,CAAP;UACH,CAHD,MAGO;YACHzB,OAAO,CAAC,IAAIvB,SAAS,CAACC,IAAV,CAAeyB,QAAnB,CAA4B,CAA5B,EAA+B,CAA/B,CAAD,CAAP;UACH;QACJ;MAXe,CAApB;MAaAS,aAAa,CAACc,OAAd,CAAsBV,aAAtB;IACH,CApBkB,CAoBjBP,IApBiB,CAoBZ,IApBY,CAAZ,CAAP;EAqBH,CAnDsC;EAoDvCkB,kBAAkB,EAAE,UAAS7B,QAAT,EAAmB;IACnC,OAAO;MACHM,GAAG,EAAEN,QAAQ,CAAC0B,QADX;MAEHnB,GAAG,EAAEP,QAAQ,CAAC2B;IAFX,CAAP;EAIH,CAzDsC;EA0DvCG,sBAAsB,EAAE,UAASC,YAAT,EAAuB;IAC3C,IAAIC,SAAS,GAAG,KAAKH,kBAAL,CAAwBE,YAAY,CAACE,YAAb,EAAxB,CAAhB;;IACA,IAAIC,SAAS,GAAG,KAAKL,kBAAL,CAAwBE,YAAY,CAACI,YAAb,EAAxB,CAAhB;;IACA,OAAO;MACHC,SAAS,EAAE;QACP9B,GAAG,EAAE0B,SAAS,CAAC1B,GADR;QAEPC,GAAG,EAAE2B,SAAS,CAAC3B;MAFR,CADR;MAKH8B,SAAS,EAAE;QACP/B,GAAG,EAAE4B,SAAS,CAAC5B,GADR;QAEPC,GAAG,EAAEyB,SAAS,CAACzB;MAFR;IALR,CAAP;EAUH,CAvEsC;EAwEvC+B,SAAS,EAAE,YAAW;IAClB,OAAO,IAAIrC,OAAJ,CAAY,UAASC,OAAT,EAAkB;MACjC,IAAIxB,YAAY,EAAhB,EAAoB;QAChBwB,OAAO;MACV,CAFD,MAEO;QACH,IAAI,CAACrB,YAAL,EAAmB;UACfA,YAAY,GAAG,KAAK0D,cAAL,EAAf;QACH;;QACD1D,YAAY,CAAC4B,IAAb,CAAkB,YAAW;UACzB,IAAI/B,YAAY,EAAhB,EAAoB;YAChBwB,OAAO;YACP;UACH;;UACD,KAAKqC,cAAL,GAAsB9B,IAAtB,CAA2BP,OAA3B;QACH,CANiB,CAMhBS,IANgB,CAMX,IANW,CAAlB;MAOH;IACJ,CAfkB,CAejBA,IAfiB,CAeZ,IAfY,CAAZ,EAeOF,IAfP,CAea,YAAW;MAC3B,OAAOR,OAAO,CAACuC,GAAR,CAAY,CAAC,IAAIvC,OAAJ,CAAa,UAASC,OAAT,EAAkB;QAC/CvB,SAAS,CAACC,IAAV,CAAe6D,UAAf,CAA0B,uBAA1B,EAAmD;UAC/CpB,QAAQ,EAAEnB;QADqC,CAAnD;MAGH,CAJmB,CAAD,EAId,IAAID,OAAJ,CAAa,UAASC,OAAT,EAAkB;QAChCvB,SAAS,CAACC,IAAV,CAAe6D,UAAf,CAA0B,2BAA1B,EAAuD;UACnDpB,QAAQ,EAAEnB;QADyC,CAAvD;MAGH,CAJI,CAJc,CAAZ,CAAP;IASH,CAzBM,CAAP;EA0BH,CAnGsC;EAoGvCqC,cAAc,EAAE,YAAW;IACvB,OAAO,IAAItC,OAAJ,CAAa,UAASC,OAAT,EAAkB;MAClCtC,MAAM,CAACS,cAAD,CAAN,GAAyB6B,OAAzB;MACA/B,IAAI,CAACuE,WAAL,CAAiB;QACbC,GAAG,EAAErE,WADQ;QAEbsE,QAAQ,EAAE;MAFG,CAAjB;IAIH,CANM,EAMHnC,IANG,CAMG,YAAW;MACjB,IAAI;QACA,OAAO7C,MAAM,CAACS,cAAD,CAAb;MACH,CAFD,CAEE,OAAOwE,CAAP,EAAU;QACRjF,MAAM,CAACS,cAAD,CAAN,GAAyB,KAAK,CAA9B;MACH;IACJ,CAZM,CAAP;EAaH,CAlHsC;EAmHvCyE,KAAK,EAAE,YAAW;IACd,KAAKC,UAAL;;IACA,OAAO9C,OAAO,CAACC,OAAR,EAAP;EACH,CAtHsC;EAuHvC6C,UAAU,EAAE,YAAW;IACnB,IAAIC,QAAQ,GAAG,KAAKC,OAAL,CAAa,UAAb,CAAf;;IACA,KAAKhC,IAAL,GAAY,IAAItC,SAAS,CAACC,IAAV,CAAesE,GAAnB,CAAuB,KAAKC,WAAL,CAAiB,CAAjB,CAAvB,EAA4C;MACpDC,WAAW,EAAE,KAAKC,UAAL,CAAgB,MAAhB,KAA2B7E,gBADY;MAEpD8E,IAAI,EAAE,KAAKL,OAAL,CAAa,MAAb,CAF8C;MAGpDM,aAAa,EAAEP,QAHqC;MAIpDQ,mBAAmB,EAAER,QAJ+B;MAKpDS,YAAY,EAAET;IALsC,CAA5C,CAAZ;EAOH,CAhIsC;EAiIvCU,eAAe,EAAE,YAAW;IACxB,KAAKC,0BAAL,GAAkChF,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiC,KAAK5C,IAAtC,EAA4C,YAA5C,EAA0D,KAAK6C,kBAAL,CAAwBnD,IAAxB,CAA6B,IAA7B,CAA1D,CAAlC;IACA,KAAKoD,qBAAL,GAA6BpF,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiC,KAAK5C,IAAtC,EAA4C,OAA5C,EAAqD,KAAK+C,mBAAL,CAAyBrD,IAAzB,CAA8B,IAA9B,CAArD,CAA7B;EACH,CApIsC;EAqIvCmD,kBAAkB,EAAE,YAAW;IAC3B,IAAIG,MAAM,GAAG,KAAKhD,IAAL,CAAUiD,SAAV,EAAb;;IACA,KAAKjB,OAAL,CAAa,QAAb,EAAuB,KAAKnB,sBAAL,CAA4BmC,MAA5B,CAAvB;;IACA,IAAIE,MAAM,GAAG,KAAKlD,IAAL,CAAUmD,SAAV,EAAb;;IACA,KAAKnB,OAAL,CAAa,QAAb,EAAuB,KAAKpB,kBAAL,CAAwBsC,MAAxB,CAAvB;;IACA,IAAI,CAAC,KAAKE,uBAAV,EAAmC;MAC/B,KAAKpB,OAAL,CAAa,MAAb,EAAqB,KAAKhC,IAAL,CAAUqD,OAAV,EAArB;IACH;EACJ,CA7IsC;EA8IvCN,mBAAmB,EAAE,UAASnB,CAAT,EAAY;IAC7B,IAAI,UAAUA,CAAC,CAAC0B,UAAhB,EAA4B;MACxB,KAAKC,gBAAL,CAAsB;QAClBxE,QAAQ,EAAE,KAAK6B,kBAAL,CAAwBgB,CAAC,CAAC7C,QAA1B;MADQ,CAAtB;IAGH;EACJ,CApJsC;EAqJvCyE,gBAAgB,EAAE,YAAW;IACzB,IAAIC,UAAU,GAAG,KAAKvB,WAAtB;;IACA,KAAKlC,IAAL,CAAU0D,UAAV,CAAqB;MACjBC,KAAK,EAAEpH,QAAQ,CAACkH,UAAD,CADE;MAEjBG,MAAM,EAAEpH,SAAS,CAACiH,UAAD;IAFA,CAArB;;IAIA,OAAOzE,OAAO,CAACC,OAAR,EAAP;EACH,CA5JsC;EA6JvC4E,aAAa,EAAE,YAAW;IACtB,IAAI7F,IAAI,GAAG,KAAKgE,OAAL,CAAa,MAAb,CAAX;;IACA,IAAI8B,YAAY,GAAGpG,SAAS,CAACC,IAAV,CAAeoG,YAAlC;;IACA,KAAK/D,IAAL,CAAUgE,OAAV,CAAkB;MACdC,OAAO,EAAE,KADK;MAEdC,SAAS,EAAE,KAAKnG,QAAL,CAAcC,IAAd,CAFG;MAGd8F,YAAY,EAAE,gBAAgB9F,IAAhB,GAAuB8F,YAAY,CAACK,MAApC,GAA6CL,YAAY,CAACM;IAH1D,CAAlB;;IAKA,OAAOpF,OAAO,CAACC,OAAR,EAAP;EACH,CAtKsC;EAuKvCoF,YAAY,EAAE,YAAW;IACrB,OAAOrF,OAAO,CAACuC,GAAR,CAAY,CAAC,KAAKzC,gBAAL,CAAsB,KAAKkD,OAAL,CAAa,kBAAb,CAAtB,CAAD,EAA0D,KAAKlD,gBAAL,CAAsB,KAAKkD,OAAL,CAAa,kBAAb,CAAtB,CAA1D,CAAZ,EAAgIxC,IAAhI,CAAqI,UAASc,MAAT,EAAiB;MACzJ,IAAI0C,MAAM,GAAG,IAAItF,SAAS,CAACC,IAAV,CAAe2G,YAAf,CAA4BC,aAAhC,CAA8CjE,MAAM,CAAC,CAAD,CAApD,EAAyDA,MAAM,CAAC,CAAD,CAA/D,CAAb;;MACA,KAAKN,IAAL,CAAUgE,OAAV,CAAkB;QACdC,OAAO,EAAE,KADK;QAEdjB,MAAM,EAAEA;MAFM,CAAlB;IAIH,CAN2I,CAM1ItD,IAN0I,CAMrI,IANqI,CAArI,CAAP;EAOH,CA/KsC;EAgLvC8E,YAAY,EAAE,YAAW;IACrB,OAAO,KAAK1F,gBAAL,CAAsB,KAAKkD,OAAL,CAAa,QAAb,CAAtB,EAA8CxC,IAA9C,CAAmD,UAAS0D,MAAT,EAAiB;MACvE,KAAKlD,IAAL,CAAUgE,OAAV,CAAkB;QACdC,OAAO,EAAE,KADK;QAEdf,MAAM,EAAEA;MAFM,CAAlB;IAIH,CALyD,CAKxDxD,IALwD,CAKnD,IALmD,CAAnD,CAAP;EAMH,CAvLsC;EAwLvC+E,UAAU,EAAE,YAAW;IACnB,KAAKzE,IAAL,CAAUgE,OAAV,CAAkB;MACdC,OAAO,EAAE,KADK;MAEd5B,IAAI,EAAE,KAAKL,OAAL,CAAa,MAAb;IAFQ,CAAlB;;IAIA,OAAOhD,OAAO,CAACC,OAAR,EAAP;EACH,CA9LsC;EA+LvCyF,cAAc,EAAE,YAAW;IACvB,KAAKC,KAAL;IACA,OAAO,KAAKC,MAAL,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAP;EACH,CAlMsC;EAmMvCC,aAAa,EAAE,UAASC,OAAT,EAAkB;IAC7B,OAAO,KAAKlG,gBAAL,CAAsBkG,OAAO,CAACjG,QAA9B,EAAwCS,IAAxC,CAA6C,UAAST,QAAT,EAAmB;MACnE,IAAIkG,cAAc,GAAG;QACjBC,IAAI,EAAEF,OAAO,CAACG,OAAR,IAAmB,KAAKnD,OAAL,CAAa,eAAb;MADR,CAArB;;MAGA,IAAIgD,OAAO,CAACI,IAAZ,EAAkB;QACdxI,MAAM,CAACqI,cAAD,EAAiB;UACnBI,WAAW,EAAEL,OAAO,CAACI,IADF;UAEnBzB,KAAK,EAAE,IAFY;UAGnBC,MAAM,EAAE;QAHW,CAAjB,CAAN;QAKA,IAAI0B,UAAU,GAAGN,OAAO,CAACM,UAAzB;;QACA,IAAIA,UAAJ,EAAgB;UACZL,cAAc,CAACM,MAAf,GAAwB,IAAI7H,SAAS,CAACC,IAAV,CAAe6H,KAAnB,CAAyB,CAACF,UAAU,CAACG,IAArC,EAA2C,CAACH,UAAU,CAACI,GAAvD,CAAxB;QACH;MACJ;;MACD,IAAIC,OAAO,GAAG,IAAIjI,SAAS,CAACC,IAAV,CAAeiI,OAAnB,CAA2B7G,QAA3B,EAAqCkG,cAArC,CAAd;;MACA,KAAKjF,IAAL,CAAU6F,QAAV,CAAmBC,IAAnB,CAAwBH,OAAxB;;MACA,IAAII,OAAO,GAAG,KAAKC,cAAL,CAAoBjH,QAApB,EAA8BiG,OAAO,CAACiB,OAAtC,CAAd;;MACA,IAAIC,OAAJ;;MACA,IAAIlB,OAAO,CAACmB,OAAR,IAAmBnB,OAAO,CAACiB,OAA/B,EAAwC;QACpC,IAAIG,iBAAiB,GAAG,KAAKC,UAAL,CAAgBC,aAAhB,CAA8BtB,OAAO,CAACmB,OAAR,IAAmB1J,IAAjD,CAAxB;;QACA,IAAI8J,wBAAwB,GAAG,KAAK3F,kBAAL,CAAwB7B,QAAxB,CAA/B;;QACAmH,OAAO,GAAGxI,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiC+C,OAAjC,EAA0C,OAA1C,EAAoD,YAAW;UACrES,iBAAiB,CAAC;YACdrH,QAAQ,EAAEwH;UADI,CAAD,CAAjB;;UAGA,IAAIR,OAAJ,EAAa;YACTA,OAAO,CAACrC,UAAR,CAAmB;cACfU,OAAO,EAAE;YADM,CAAnB;UAGH;QACJ,CATS,CAAV;MAUH;;MACD,OAAO;QACHrF,QAAQ,EAAEA,QADP;QAEHyH,MAAM,EAAEb,OAFL;QAGHI,OAAO,EAAEA,OAHN;QAIHG,OAAO,EAAEA;MAJN,CAAP;IAMH,CAvCmD,CAuClDxG,IAvCkD,CAuC7C,IAvC6C,CAA7C,CAAP;EAwCH,CA5OsC;EA6OvCsG,cAAc,EAAE,UAASjH,QAAT,EAAmBiG,OAAnB,EAA4B;IACxC,IAAI,CAACA,OAAL,EAAc;MACV;IACH;;IACDA,OAAO,GAAG,KAAKyB,oBAAL,CAA0BzB,OAA1B,CAAV;IACA,IAAIe,OAAO,GAAG,IAAIrI,SAAS,CAACC,IAAV,CAAe+I,OAAnB,CAA2B3H,QAA3B,EAAqC;MAC/C4H,WAAW,EAAE3B,OAAO,CAAC4B,IAD0B;MAE/CC,MAAM,EAAE,IAAInJ,SAAS,CAACC,IAAV,CAAe6H,KAAnB,CAAyB,CAAzB,EAA4BlI,mBAA5B,CAFuC;MAG/C8G,OAAO,EAAEY,OAAO,CAACZ;IAH8B,CAArC,CAAd;IAKA2B,OAAO,CAACe,MAAR,CAAe,KAAK9G,IAApB;IACA,OAAO+F,OAAP;EACH,CAzPsC;EA0PvCgB,cAAc,EAAE,UAASP,MAAT,EAAiB;IAC7B,KAAKxG,IAAL,CAAU6F,QAAV,CAAmBmB,MAAnB,CAA0BR,MAAM,CAACA,MAAjC;;IACA,IAAIA,MAAM,CAACT,OAAX,EAAoB;MAChBS,MAAM,CAACT,OAAP,CAAee,MAAf,CAAsB,IAAtB;IACH;;IACD,IAAIN,MAAM,CAACN,OAAX,EAAoB;MAChBxI,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBsE,aAAtB,CAAoCT,MAAM,CAACN,OAA3C;IACH;EACJ,CAlQsC;EAmQvCgB,YAAY,EAAE,UAASlC,OAAT,EAAkB;IAC5B,OAAOhG,OAAO,CAACuC,GAAR,CAAYzE,GAAG,CAACkI,OAAO,CAACmC,SAAT,EAAoB,UAASC,KAAT,EAAgB;MACtD,OAAO,KAAKtI,gBAAL,CAAsBsI,KAAtB,CAAP;IACH,CAFyC,CAExC1H,IAFwC,CAEnC,IAFmC,CAApB,CAAf,EAEQF,IAFR,CAEa,UAAS2H,SAAT,EAAoB;MACpC,OAAO,IAAInI,OAAJ,CAAY,UAASC,OAAT,EAAkB;QACjC,IAAIoI,SAAS,GAAG,IAAI3J,SAAS,CAACC,IAAV,CAAegB,UAAf,CAA0B2I,iBAA9B,CAAgD,KAAKtH,IAArD,CAAhB;QACA,IAAIuH,KAAK,GAAG,IAAItK,KAAJ,CAAU+H,OAAO,CAACuC,KAAR,IAAiB,KAAKC,kBAAL,EAA3B,EAAsDC,KAAtD,EAAZ;QACA,IAAIC,UAAU,GAAG,IAAIhK,SAAS,CAACC,IAAV,CAAeV,KAAf,CAAqB0K,OAAzB,CAAiCJ,KAAjC,CAAjB;QACAG,UAAU,CAACE,CAAX,GAAe,OAAO5C,OAAO,CAAC6C,OAAR,IAAmB,KAAKC,oBAAL,EAA1B,CAAf;QACAT,SAAS,CAACU,gBAAV,CAA2B;UACvBC,iBAAiB,EAAE,KADI;UAEvBC,oBAAoB,EAAE,KAFC;UAGvBC,sBAAsB,EAAE;YACpB9D,OAAO,EAAE;UADW,CAHD;UAMvB+D,sBAAsB,EAAE;YACpBC,WAAW,EAAEV,UADO;YAEpBW,eAAe,EAAErD,OAAO,CAACsD,MAAR,IAAkB,KAAKC,mBAAL;UAFf,CAND;UAUvBC,sBAAsB,EAAE;YACpBJ,WAAW,EAAEV,UADO;YAEpBW,eAAe,EAAErD,OAAO,CAACsD,MAAR,IAAkB,KAAKC,mBAAL;UAFf;QAVD,CAA3B;QAeAlB,SAAS,CAACoB,iBAAV,CAA4B;UACxBC,SAAS,EAAE,KAAKlK,aAAL,CAAmBwG,OAAO,CAAC2D,IAA3B,CADa;UAExBC,cAAc,EAAE;QAFQ,CAA5B;QAIA7L,IAAI,CAACoK,SAAD,EAAa,UAAS0B,CAAT,EAAY9J,QAAZ,EAAsB;UACnC,IAAI+J,QAAQ,GAAG,IAAIpL,SAAS,CAACC,IAAV,CAAegB,UAAf,CAA0BoK,QAA9B,CAAuC;YAClDhK,QAAQ,EAAEA;UADwC,CAAvC,CAAf;UAGAsI,SAAS,CAAC2B,WAAV,CAAsBF,QAAtB;QACH,CALG,CAAJ;QAMA,IAAIG,iBAAiB,GAAG,EAAxB;QACAA,iBAAiB,CAACnD,IAAlB,CAAuBpI,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiCyE,SAAjC,EAA4C,mBAA5C,EAAkE,UAAS6B,IAAT,EAAe;UACpG,OAAOD,iBAAiB,CAACE,MAAzB,EAAiC;YAC7BzL,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBsE,aAAtB,CAAoCgC,iBAAiB,CAACG,GAAlB,EAApC;UACH;;UACD,IAAIC,YAAY,GAAGH,IAAI,CAACG,YAAL,CAAkB,CAAlB,CAAnB;UACApK,OAAO,CAAC;YACJqK,QAAQ,EAAEjC,SADN;YAEJlG,SAAS,EAAEkI,YAAY,CAAClI,SAFpB;YAGJC,SAAS,EAAEiI,YAAY,CAACjI;UAHpB,CAAD,CAAP;QAKH,CAVsB,CAAvB;QAWA6H,iBAAiB,CAACnD,IAAlB,CAAuBpI,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBC,UAAtB,CAAiCyE,SAAjC,EAA4C,iBAA5C,EAAgE,UAAS6B,IAAT,EAAe;UAClG,OAAOD,iBAAiB,CAACE,MAAzB,EAAiC;YAC7BzL,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBsE,aAAtB,CAAoCgC,iBAAiB,CAACG,GAAlB,EAApC;UACH;;UACD,IAAIG,MAAM,GAAG,wBAAwBL,IAAI,CAACM,YAA7B,GAA4C,KAA5C,GAAoDN,IAAI,CAACO,OAAtE;UACA5M,MAAM,CAAC6M,GAAP,CAAW,OAAX,EAAoBH,MAApB;UACAtK,OAAO,CAAC;YACJqK,QAAQ,EAAEjC;UADN,CAAD,CAAP;QAGH,CATsB,CAAvB;QAUAA,SAAS,CAACsC,mBAAV;MACH,CArDkB,CAqDjBjK,IArDiB,CAqDZ,IArDY,CAAZ,CAAP;IAsDH,CAvDmB,CAuDlBA,IAvDkB,CAuDb,IAvDa,CAFb,CAAP;EA0DH,CA9TsC;EA+TvCkK,aAAa,EAAE,UAASC,WAAT,EAAsB;IACjCA,WAAW,CAACP,QAAZ,CAAqBQ,OAArB;EACH,CAjUsC;EAkUvCC,UAAU,EAAE,YAAW;IACnB,KAAKC,aAAL;;IACA,IAAI,KAAKC,OAAL,IAAgB,KAAKjI,OAAL,CAAa,YAAb,CAApB,EAAgD;MAC5C,IAAIkI,iBAAiB,GAAG,KAAKlK,IAAL,CAAUqD,OAAV,EAAxB;;MACA,KAAKD,uBAAL,GAA+B,IAA/B;;MACA,IAAIJ,MAAM,GAAG,KAAKiH,OAAL,CAAaE,KAAb,EAAb;;MACAnH,MAAM,CAACY,MAAP,GAAgB,MAAMZ,MAAM,CAACY,MAA7B;MACAZ,MAAM,CAACW,KAAP,GAAe,MAAMX,MAAM,CAACW,KAA5B;;MACA,KAAK3D,IAAL,CAAUgE,OAAV,CAAkB;QACdC,OAAO,EAAE,KADK;QAEdjB,MAAM,EAAEA,MAFM;QAGdX,IAAI,EAAE6H;MAHQ,CAAlB;;MAKA,IAAIE,gBAAgB,GAAG,KAAKpK,IAAL,CAAUqD,OAAV,EAAvB;;MACA,IAAI6G,iBAAiB,GAAGE,gBAAxB,EAA0C;QACtC,KAAKpK,IAAL,CAAUgE,OAAV,CAAkB;UACdC,OAAO,EAAE,KADK;UAEd5B,IAAI,EAAE6H;QAFQ,CAAlB;MAIH,CALD,MAKO;QACH,KAAKlI,OAAL,CAAa,MAAb,EAAqBoI,gBAArB;MACH;;MACD,OAAO,KAAKhH,uBAAZ;IACH;;IACD,OAAOpE,OAAO,CAACC,OAAR,EAAP;EACH,CA3VsC;EA4VvCoL,aAAa,EAAE,UAAStL,QAAT,EAAmB;IAC9B,IAAI,KAAKkL,OAAT,EAAkB;MACd,KAAKA,OAAL,GAAe,IAAIvM,SAAS,CAACC,IAAV,CAAe2G,YAAf,CAA4BC,aAAhC,CAA8C,KAAK0F,OAAL,CAAajJ,YAAb,EAA9C,EAA2E,KAAKiJ,OAAL,CAAa/I,YAAb,EAA3E,EAAwGnC,QAAxG,CAAf;IACH,CAFD,MAEO;MACH,KAAKkL,OAAL,GAAe,IAAIvM,SAAS,CAACC,IAAV,CAAe2G,YAAnB,CAAgCvF,QAAhC,EAA0CvB,wBAA1C,EAAoEA,wBAApE,CAAf;IACH;EACJ,CAlWsC;EAmWvCmH,KAAK,EAAE,YAAW;IACd,IAAI,KAAK3E,IAAT,EAAe;MACXtC,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBsE,aAAtB,CAAoC,KAAKvE,0BAAzC;MACAhF,SAAS,CAACC,IAAV,CAAegF,MAAf,CAAsBsE,aAAtB,CAAoC,KAAKnE,qBAAzC;;MACA,KAAKwH,aAAL;;MACA,KAAKC,YAAL;;MACA,KAAKvK,IAAL,CAAU8J,OAAV;IACH;;IACD,OAAO9K,OAAO,CAACC,OAAR,EAAP;EACH;AA5WsC,CAAxB,CAAnB;AA8WA,eAAepB,YAAf"},"metadata":{},"sourceType":"module"}