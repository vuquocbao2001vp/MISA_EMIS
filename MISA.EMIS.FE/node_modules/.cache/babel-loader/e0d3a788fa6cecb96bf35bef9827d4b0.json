{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.toolbar.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport messageLocalization from \"../../localization/message\";\nimport { extendAttributes } from \"./ui.file_manager.common\";\nimport Widget from \"../widget/ui.widget\";\nimport Toolbar from \"../toolbar\";\nimport \"../drop_down_button\";\nvar FILE_MANAGER_TOOLBAR_CLASS = \"dx-filemanager-toolbar\";\nvar FILE_MANAGER_GENERAL_TOOLBAR_CLASS = \"dx-filemanager-general-toolbar\";\nvar FILE_MANAGER_FILE_TOOLBAR_CLASS = \"dx-filemanager-file-toolbar\";\nvar FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-separator-item\";\nvar FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-viewmode-item\";\nvar FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-has-large-icon\";\nvar FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS = \"dx-filemanager-view-switcher-popup\";\nvar DEFAULT_ITEM_CONFIGS = {\n  showNavPane: {\n    location: \"before\"\n  },\n  create: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  upload: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  refresh: {\n    location: \"after\",\n    showText: \"inMenu\",\n    cssClass: FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS,\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  switchView: {\n    location: \"after\"\n  },\n  download: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  move: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  copy: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  rename: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\",\n      locateInMenu: \"auto\"\n    }\n  },\n  delete: {\n    location: \"before\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  clearSelection: {\n    location: \"after\",\n    locateInMenu: \"never\",\n    compactMode: {\n      showText: \"inMenu\"\n    }\n  },\n  separator: {\n    location: \"before\"\n  }\n};\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"visible\", \"location\", \"locateInMenu\", \"disabled\", \"showText\"];\nvar DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES = [\"accessKey\", \"elementAttr\", \"height\", \"hint\", \"icon\", \"stylingMode\", \"tabIndex\", \"text\", \"width\"];\nvar ALWAYS_VISIBLE_TOOLBAR_ITEMS = [\"separator\", \"switchView\"];\nvar REFRESH_ICON_MAP = {\n  default: \"dx-filemanager-i dx-filemanager-i-refresh\",\n  progress: \"dx-filemanager-i dx-filemanager-i-progress\",\n  success: \"dx-filemanager-i dx-filemanager-i-done\",\n  error: \"dx-filemanager-i dx-filemanager-i-danger\"\n};\nvar REFRESH_ITEM_PROGRESS_MESSAGE_DELAY = 500;\n\nclass FileManagerToolbar extends Widget {\n  _init() {\n    super._init();\n\n    this._generalToolbarVisible = true;\n    this._refreshItemState = {\n      message: \"\",\n      status: \"default\"\n    };\n  }\n\n  _initMarkup() {\n    this._createItemClickedAction();\n\n    this._$viewSwitcherPopup = $(\"<div>\").addClass(FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS);\n    this._generalToolbar = this._createToolbar(this.option(\"generalItems\"), !this._generalToolbarVisible);\n    this._fileToolbar = this._createToolbar(this.option(\"fileItems\"), this._generalToolbarVisible);\n\n    this._$viewSwitcherPopup.appendTo(this.$element());\n\n    this.$element().addClass(FILE_MANAGER_TOOLBAR_CLASS + \" \" + FILE_MANAGER_GENERAL_TOOLBAR_CLASS);\n  }\n\n  _render() {\n    super._render();\n\n    var toolbar = this._getVisibleToolbar();\n\n    this._checkCompactMode(toolbar);\n  }\n\n  _clean() {\n    delete this._commandManager;\n    delete this._itemClickedAction;\n    delete this._$viewSwitcherPopup;\n    delete this._generalToolbar;\n    delete this._fileToolbar;\n\n    super._clean();\n  }\n\n  _dimensionChanged(dimension) {\n    if (!dimension || \"height\" !== dimension) {\n      var toolbar = this._getVisibleToolbar();\n\n      this._checkCompactMode(toolbar);\n    }\n  }\n\n  _getVisibleToolbar() {\n    return this._generalToolbarVisible ? this._generalToolbar : this._fileToolbar;\n  }\n\n  _createToolbar(items, hidden) {\n    var toolbarItems = this._getPreparedItems(items);\n\n    var $toolbar = $(\"<div>\").appendTo(this.$element());\n\n    var result = this._createComponent($toolbar, Toolbar, {\n      items: toolbarItems,\n      visible: !hidden,\n      onItemClick: args => this._raiseItemClicked(args)\n    });\n\n    result.compactMode = false;\n    return result;\n  }\n\n  _getPreparedItems(items) {\n    items = items.map(item => {\n      var extendedItem = item;\n\n      if (isString(item)) {\n        extendedItem = {\n          name: item\n        };\n      }\n\n      var commandName = extendedItem.name;\n\n      var preparedItem = this._configureItemByCommandName(commandName, extendedItem);\n\n      preparedItem.originalItemData = item;\n\n      if (\"separator\" !== commandName) {\n        this._setItemVisibleAvailable(preparedItem);\n      }\n\n      return preparedItem;\n    });\n\n    this._updateSeparatorsVisibility(items);\n\n    return items;\n  }\n\n  _updateSeparatorsVisibility(items, toolbar) {\n    var hasModifications = false;\n\n    var menuItems = this._getMenuItems(toolbar);\n\n    var hasItemsBefore = {\n      before: false,\n      center: false,\n      after: false\n    };\n    var itemGroups = {\n      before: this._getItemsInGroup(items, menuItems, \"before\"),\n      center: this._getItemsInGroup(items, menuItems, \"center\"),\n      after: this._getItemsInGroup(items, menuItems, \"after\")\n    };\n    items.forEach((item, i) => {\n      var itemLocation = item.location;\n\n      if (\"separator\" === item.name) {\n        var isSeparatorVisible = hasItemsBefore[itemLocation] && this._groupHasItemsAfter(itemGroups[itemLocation]);\n\n        if (item.visible !== isSeparatorVisible) {\n          hasModifications = true;\n          item.visible = isSeparatorVisible;\n        }\n\n        hasItemsBefore[itemLocation] = false;\n      } else {\n        if (!this._isItemInMenu(menuItems, item)) {\n          hasItemsBefore[itemLocation] = hasItemsBefore[itemLocation] || item.visible;\n        }\n\n        itemGroups[itemLocation].shift();\n      }\n    });\n\n    if (toolbar && hasModifications) {\n      toolbar.repaint();\n    }\n\n    return hasModifications;\n  }\n\n  _getMenuItems(toolbar) {\n    var result = toolbar ? toolbar._getMenuItems() : [];\n    return result.map(menuItem => menuItem.originalItemData);\n  }\n\n  _isItemInMenu(menuItems, item) {\n    return !!menuItems.length && \"never\" !== ensureDefined(item.locateInMenu, \"never\") && -1 !== menuItems.indexOf(item.originalItemData);\n  }\n\n  _getItemsInGroup(items, menuItems, groupName) {\n    return items.filter(item => item.location === groupName && !this._isItemInMenu(menuItems, item));\n  }\n\n  _groupHasItemsAfter(items) {\n    for (var i = 0; i < items.length; i++) {\n      if (\"separator\" !== items[i].name && items[i].visible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _configureItemByCommandName(commandName, item) {\n    var _result$options;\n\n    var result = {};\n\n    var command = this._commandManager.getCommandByName(commandName);\n\n    if (command) {\n      result = this._createCommandItem(command);\n    }\n\n    switch (commandName) {\n      case \"separator\":\n        result = this._createSeparatorItem();\n        break;\n\n      case \"switchView\":\n        result = this._createViewModeItem();\n    }\n\n    if (this._isDefaultItem(commandName)) {\n      var defaultConfig = DEFAULT_ITEM_CONFIGS[commandName];\n      extend(true, result, defaultConfig);\n      var resultCssClass = result.cssClass || \"\";\n      extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\n\n      if (isDefined(item.options)) {\n        extendAttributes(result.options, item.options, DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES);\n      }\n\n      extendAttributes(result.options, item, [\"text\", \"icon\"]);\n\n      if (item.cssClass) {\n        resultCssClass = \"\".concat(resultCssClass, \" \").concat(item.cssClass);\n      }\n\n      if (resultCssClass) {\n        result.cssClass = resultCssClass;\n      }\n\n      if (!isDefined(item.visible)) {\n        result._autoHide = true;\n      }\n\n      if (\"dxButton\" === result.widget) {\n        if (\"inMenu\" === result.showText && !isDefined(result.options.hint)) {\n          result.options.hint = result.options.text;\n        }\n\n        if (result.compactMode && !isDefined(result.options.hint)) {\n          this._configureHintForCompactMode(result);\n        }\n      }\n    } else {\n      extend(true, result, item);\n\n      if (!result.widget) {\n        result.widget = \"dxButton\";\n      }\n\n      if (\"dxButton\" === result.widget && !result.compactMode && !result.showText && result.options && result.options.icon && result.options.text) {\n        result.compactMode = {\n          showText: \"inMenu\"\n        };\n      }\n    }\n\n    if (commandName && !result.name) {\n      extend(result, {\n        name: commandName\n      });\n    }\n\n    result.location = ensureDefined(result.location, \"before\");\n\n    if (!isDefined(null === (_result$options = result.options) || void 0 === _result$options ? void 0 : _result$options.stylingMode)) {\n      if (\"dxButton\" === result.widget) {\n        extend(true, result, {\n          options: {\n            stylingMode: \"text\"\n          }\n        });\n      }\n\n      if (\"dxSelectBox\" === result.widget) {\n        extend(true, result, {\n          options: {\n            stylingMode: \"filled\"\n          }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  _isDefaultItem(commandName) {\n    return !!DEFAULT_ITEM_CONFIGS[commandName];\n  }\n\n  _createCommandItem(command) {\n    return {\n      widget: \"dxButton\",\n      options: {\n        text: command.text,\n        hint: command.hint,\n        commandText: command.text,\n        icon: command.icon,\n        stylingMode: \"text\",\n        onClick: e => this._executeCommand(command)\n      }\n    };\n  }\n\n  _createSeparatorItem() {\n    return {\n      template: (data, index, element) => {\n        $(element).addClass(FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS);\n      }\n    };\n  }\n\n  _createViewModeItem() {\n    var commandItems = [\"details\", \"thumbnails\"].map(name => {\n      var {\n        text: text,\n        icon: icon\n      } = this._commandManager.getCommandByName(name);\n\n      return {\n        name: name,\n        text: text,\n        icon: icon\n      };\n    });\n    var selectedIndex = \"thumbnails\" === this.option(\"itemViewMode\") ? 1 : 0;\n    return {\n      cssClass: FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS,\n      widget: \"dxDropDownButton\",\n      options: {\n        items: commandItems,\n        keyExpr: \"name\",\n        selectedItemKey: this.option(\"itemViewMode\"),\n        displayExpr: \" \",\n        hint: commandItems[selectedIndex].text,\n        stylingMode: \"text\",\n        showArrowIcon: false,\n        useSelectMode: true,\n        dropDownOptions: {\n          container: this._$viewSwitcherPopup\n        },\n        onItemClick: e => this._executeCommand(e.itemData.name)\n      }\n    };\n  }\n\n  _configureHintForCompactMode(item) {\n    item.options.hint = \"\";\n    item.compactMode.options = item.compactMode.options || {};\n    item.compactMode.options.hint = item.options.text;\n  }\n\n  _checkCompactMode(toolbar) {\n    if (toolbar.compactMode) {\n      this._toggleCompactMode(toolbar, false);\n    }\n\n    var useCompactMode = this._toolbarHasItemsOverflow(toolbar);\n\n    if (toolbar.compactMode !== useCompactMode) {\n      if (!toolbar.compactMode) {\n        this._toggleCompactMode(toolbar, useCompactMode);\n      }\n\n      toolbar.compactMode = useCompactMode;\n    } else if (toolbar.compactMode) {\n      this._toggleCompactMode(toolbar, true);\n    }\n  }\n\n  _toolbarHasItemsOverflow(toolbar) {\n    var toolbarWidth = getWidth(toolbar.$element());\n\n    var itemsWidth = toolbar._getItemsWidth();\n\n    return toolbarWidth < itemsWidth;\n  }\n\n  _toggleCompactMode(toolbar, useCompactMode) {\n    var hasModifications = false;\n    var items = toolbar.option(\"items\");\n    items.forEach(item => {\n      if (item.compactMode) {\n        var optionsSource = null;\n\n        if (useCompactMode) {\n          item.saved = this._getCompactModeOptions(item, item._available);\n          optionsSource = item.compactMode;\n        } else {\n          optionsSource = item.saved;\n        }\n\n        var options = this._getCompactModeOptions(optionsSource, item._available);\n\n        extend(true, item, options);\n        hasModifications = true;\n      }\n    });\n    hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n    if (hasModifications) {\n      toolbar.repaint();\n    }\n\n    this._updateSeparatorsVisibility(items, toolbar);\n  }\n\n  _getCompactModeOptions(_ref, available) {\n    var {\n      showText: showText,\n      locateInMenu: locateInMenu,\n      options: options\n    } = _ref;\n    return {\n      visible: available,\n      showText: ensureDefined(showText, \"always\"),\n      locateInMenu: ensureDefined(locateInMenu, \"never\"),\n      options: {\n        hint: null === options || void 0 === options ? void 0 : options.hint\n      }\n    };\n  }\n\n  _ensureAvailableCommandsVisible(toolbar) {\n    var hasModifications = false;\n    var items = toolbar.option(\"items\");\n    items.forEach(item => {\n      if (\"separator\" !== item.name) {\n        var itemVisible = item._available;\n\n        this._setItemVisibleAvailable(item);\n\n        if (item._available !== itemVisible) {\n          hasModifications = true;\n        }\n      }\n    });\n    hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\n\n    if (hasModifications) {\n      toolbar.repaint();\n    }\n\n    this._updateSeparatorsVisibility(items, toolbar);\n  }\n\n  _setItemVisibleAvailable(item) {\n    var _item$originalItemDat;\n\n    var originalVisible = null === (_item$originalItemDat = item.originalItemData) || void 0 === _item$originalItemDat ? void 0 : _item$originalItemDat.visible;\n    item._available = this._isToolbarItemAvailable(item);\n    item.visible = isDefined(originalVisible) ? originalVisible : item._available;\n  }\n\n  _fileToolbarHasEffectiveItems() {\n    var items = this._fileToolbar.option(\"items\");\n\n    return items.some(item => this._isFileToolbarItemAvailable(item));\n  }\n\n  _executeCommand(command) {\n    this._commandManager.executeCommand(command);\n  }\n\n  _isToolbarItemAvailable(toolbarItem) {\n    if (!this._isDefaultItem(toolbarItem.name) || !toolbarItem._autoHide) {\n      return ensureDefined(toolbarItem.visible, true);\n    }\n\n    if (\"refresh\" === toolbarItem.name) {\n      return this._generalToolbarVisible || !!this._isRefreshVisibleInFileToolbar;\n    }\n\n    if (ALWAYS_VISIBLE_TOOLBAR_ITEMS.indexOf(toolbarItem.name) > -1) {\n      return true;\n    }\n\n    return this._isCommandAvailable(toolbarItem.name);\n  }\n\n  _isFileToolbarItemAvailable(_ref2) {\n    var {\n      name: name,\n      visible: visible\n    } = _ref2;\n    return !this._isDefaultItem(name) && ensureDefined(visible, true) || \"clearSelection\" !== name && \"refresh\" !== name && this._isCommandAvailable(name);\n  }\n\n  _isCommandAvailable(name) {\n    return this._commandManager.isCommandAvailable(name, this.option(\"contextItems\"));\n  }\n\n  _updateItemInToolbar(toolbar, commandName, options) {\n    toolbar.beginUpdate();\n    var items = toolbar.option(\"items\");\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (item.name === commandName) {\n        toolbar.option(\"items[\".concat(i, \"]\"), options);\n        break;\n      }\n    }\n\n    toolbar.endUpdate();\n  }\n\n  _raiseItemClicked(args) {\n    var changedArgs = extend(true, {}, args);\n    changedArgs.itemData = args.itemData.originalItemData;\n\n    this._itemClickedAction(changedArgs);\n  }\n\n  _createItemClickedAction() {\n    this._itemClickedAction = this._createActionByOption(\"onItemClick\");\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      commandManager: null,\n      generalItems: [],\n      fileItems: [],\n      contextItems: [],\n      itemViewMode: \"details\",\n      onItemClick: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"commandManager\":\n      case \"itemViewMode\":\n      case \"generalItems\":\n      case \"fileItems\":\n        this.repaint();\n        break;\n\n      case \"contextItems\":\n        this._update();\n\n        break;\n\n      case \"onItemClick\":\n        this._itemClickedAction = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  updateItemPermissions() {\n    this.repaint();\n\n    this._restoreRefreshItemState();\n  }\n\n  _restoreRefreshItemState() {\n    this.updateRefreshItem(this._refreshItemState.message, this._refreshItemState.status);\n  }\n\n  updateRefreshItem(message, status) {\n    var generalToolbarOptions = null;\n    var text = messageLocalization.format(\"dxFileManager-commandRefresh\");\n    var showText = \"inMenu\";\n    this._isRefreshVisibleInFileToolbar = false;\n    this._refreshItemState = {\n      message: message,\n      status: status\n    };\n\n    if (\"default\" === status) {\n      generalToolbarOptions = {\n        options: {\n          icon: REFRESH_ICON_MAP.default\n        }\n      };\n    } else {\n      generalToolbarOptions = {\n        options: {\n          icon: REFRESH_ICON_MAP[status]\n        }\n      };\n      this._isRefreshVisibleInFileToolbar = true;\n      text = message;\n      showText = \"always\";\n    }\n\n    var fileToolbarOptions = extend({}, generalToolbarOptions, {\n      visible: this._isRefreshVisibleInFileToolbar\n    });\n\n    this._applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions);\n\n    this._refreshItemTextTimeout = this._updateRefreshItemText(\"progress\" === status, text, showText);\n  }\n\n  _updateRefreshItemText(isDeferredUpdate, text, showText) {\n    var options = {\n      showText: showText,\n      options: {\n        text: text\n      }\n    };\n\n    if (isDeferredUpdate) {\n      return setTimeout(() => {\n        this._applyRefreshItemOptions(options);\n\n        this._refreshItemTextTimeout = void 0;\n      }, REFRESH_ITEM_PROGRESS_MESSAGE_DELAY);\n    } else {\n      if (this._refreshItemTextTimeout) {\n        clearTimeout(this._refreshItemTextTimeout);\n      }\n\n      this._applyRefreshItemOptions(options);\n\n      return;\n    }\n  }\n\n  _applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions) {\n    if (!fileToolbarOptions) {\n      fileToolbarOptions = extend({}, generalToolbarOptions);\n    }\n\n    this._updateItemInToolbar(this._generalToolbar, \"refresh\", generalToolbarOptions);\n\n    this._updateItemInToolbar(this._fileToolbar, \"refresh\", fileToolbarOptions);\n  }\n\n  _update() {\n    var showGeneralToolbar = 0 === this.option(\"contextItems\").length || !this._fileToolbarHasEffectiveItems();\n\n    if (this._generalToolbarVisible !== showGeneralToolbar) {\n      this._generalToolbar.option(\"visible\", showGeneralToolbar);\n\n      this._fileToolbar.option(\"visible\", !showGeneralToolbar);\n\n      this._generalToolbarVisible = showGeneralToolbar;\n      this.$element().toggleClass(FILE_MANAGER_GENERAL_TOOLBAR_CLASS, showGeneralToolbar);\n      this.$element().toggleClass(FILE_MANAGER_FILE_TOOLBAR_CLASS, !showGeneralToolbar);\n    }\n\n    var toolbar = this._getVisibleToolbar();\n\n    this._ensureAvailableCommandsVisible(toolbar);\n\n    this._checkCompactMode(toolbar);\n  }\n\n  get _commandManager() {\n    return this.option(\"commandManager\");\n  }\n\n}\n\nexport default FileManagerToolbar;","map":{"version":3,"names":["getWidth","$","extend","isDefined","isString","ensureDefined","messageLocalization","extendAttributes","Widget","Toolbar","FILE_MANAGER_TOOLBAR_CLASS","FILE_MANAGER_GENERAL_TOOLBAR_CLASS","FILE_MANAGER_FILE_TOOLBAR_CLASS","FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS","FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS","FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS","FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS","DEFAULT_ITEM_CONFIGS","showNavPane","location","create","compactMode","showText","locateInMenu","upload","refresh","cssClass","switchView","download","move","copy","rename","delete","clearSelection","separator","DEFAULT_ITEM_ALLOWED_PROPERTIES","DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES","ALWAYS_VISIBLE_TOOLBAR_ITEMS","REFRESH_ICON_MAP","default","progress","success","error","REFRESH_ITEM_PROGRESS_MESSAGE_DELAY","FileManagerToolbar","_init","_generalToolbarVisible","_refreshItemState","message","status","_initMarkup","_createItemClickedAction","_$viewSwitcherPopup","addClass","_generalToolbar","_createToolbar","option","_fileToolbar","appendTo","$element","_render","toolbar","_getVisibleToolbar","_checkCompactMode","_clean","_commandManager","_itemClickedAction","_dimensionChanged","dimension","items","hidden","toolbarItems","_getPreparedItems","$toolbar","result","_createComponent","visible","onItemClick","args","_raiseItemClicked","map","item","extendedItem","name","commandName","preparedItem","_configureItemByCommandName","originalItemData","_setItemVisibleAvailable","_updateSeparatorsVisibility","hasModifications","menuItems","_getMenuItems","hasItemsBefore","before","center","after","itemGroups","_getItemsInGroup","forEach","i","itemLocation","isSeparatorVisible","_groupHasItemsAfter","_isItemInMenu","shift","repaint","menuItem","length","indexOf","groupName","filter","_result$options","command","getCommandByName","_createCommandItem","_createSeparatorItem","_createViewModeItem","_isDefaultItem","defaultConfig","resultCssClass","options","concat","_autoHide","widget","hint","text","_configureHintForCompactMode","icon","stylingMode","commandText","onClick","e","_executeCommand","template","data","index","element","commandItems","selectedIndex","keyExpr","selectedItemKey","displayExpr","showArrowIcon","useSelectMode","dropDownOptions","container","itemData","_toggleCompactMode","useCompactMode","_toolbarHasItemsOverflow","toolbarWidth","itemsWidth","_getItemsWidth","optionsSource","saved","_getCompactModeOptions","_available","_ref","available","_ensureAvailableCommandsVisible","itemVisible","_item$originalItemDat","originalVisible","_isToolbarItemAvailable","_fileToolbarHasEffectiveItems","some","_isFileToolbarItemAvailable","executeCommand","toolbarItem","_isRefreshVisibleInFileToolbar","_isCommandAvailable","_ref2","isCommandAvailable","_updateItemInToolbar","beginUpdate","endUpdate","changedArgs","_createActionByOption","_getDefaultOptions","commandManager","generalItems","fileItems","contextItems","itemViewMode","_optionChanged","_update","updateItemPermissions","_restoreRefreshItemState","updateRefreshItem","generalToolbarOptions","format","fileToolbarOptions","_applyRefreshItemOptions","_refreshItemTextTimeout","_updateRefreshItemText","isDeferredUpdate","setTimeout","clearTimeout","showGeneralToolbar","toggleClass"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.toolbar.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.toolbar.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    extendAttributes\r\n} from \"./ui.file_manager.common\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Toolbar from \"../toolbar\";\r\nimport \"../drop_down_button\";\r\nvar FILE_MANAGER_TOOLBAR_CLASS = \"dx-filemanager-toolbar\";\r\nvar FILE_MANAGER_GENERAL_TOOLBAR_CLASS = \"dx-filemanager-general-toolbar\";\r\nvar FILE_MANAGER_FILE_TOOLBAR_CLASS = \"dx-filemanager-file-toolbar\";\r\nvar FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-separator-item\";\r\nvar FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-viewmode-item\";\r\nvar FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS = FILE_MANAGER_TOOLBAR_CLASS + \"-has-large-icon\";\r\nvar FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS = \"dx-filemanager-view-switcher-popup\";\r\nvar DEFAULT_ITEM_CONFIGS = {\r\n    showNavPane: {\r\n        location: \"before\"\r\n    },\r\n    create: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    upload: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    refresh: {\r\n        location: \"after\",\r\n        showText: \"inMenu\",\r\n        cssClass: FILE_MANAGER_TOOLBAR_HAS_LARGE_ICON_CLASS,\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    switchView: {\r\n        location: \"after\"\r\n    },\r\n    download: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    move: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    copy: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    rename: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\",\r\n            locateInMenu: \"auto\"\r\n        }\r\n    },\r\n    delete: {\r\n        location: \"before\",\r\n        compactMode: {\r\n            showText: \"inMenu\"\r\n        }\r\n    },\r\n    clearSelection: {\r\n        location: \"after\",\r\n        locateInMenu: \"never\",\r\n        compactMode: {\r\n            showText: \"inMenu\"\r\n        }\r\n    },\r\n    separator: {\r\n        location: \"before\"\r\n    }\r\n};\r\nvar DEFAULT_ITEM_ALLOWED_PROPERTIES = [\"visible\", \"location\", \"locateInMenu\", \"disabled\", \"showText\"];\r\nvar DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES = [\"accessKey\", \"elementAttr\", \"height\", \"hint\", \"icon\", \"stylingMode\", \"tabIndex\", \"text\", \"width\"];\r\nvar ALWAYS_VISIBLE_TOOLBAR_ITEMS = [\"separator\", \"switchView\"];\r\nvar REFRESH_ICON_MAP = {\r\n    default: \"dx-filemanager-i dx-filemanager-i-refresh\",\r\n    progress: \"dx-filemanager-i dx-filemanager-i-progress\",\r\n    success: \"dx-filemanager-i dx-filemanager-i-done\",\r\n    error: \"dx-filemanager-i dx-filemanager-i-danger\"\r\n};\r\nvar REFRESH_ITEM_PROGRESS_MESSAGE_DELAY = 500;\r\nclass FileManagerToolbar extends Widget {\r\n    _init() {\r\n        super._init();\r\n        this._generalToolbarVisible = true;\r\n        this._refreshItemState = {\r\n            message: \"\",\r\n            status: \"default\"\r\n        }\r\n    }\r\n    _initMarkup() {\r\n        this._createItemClickedAction();\r\n        this._$viewSwitcherPopup = $(\"<div>\").addClass(FILE_MANAGER_VIEW_SWITCHER_POPUP_CLASS);\r\n        this._generalToolbar = this._createToolbar(this.option(\"generalItems\"), !this._generalToolbarVisible);\r\n        this._fileToolbar = this._createToolbar(this.option(\"fileItems\"), this._generalToolbarVisible);\r\n        this._$viewSwitcherPopup.appendTo(this.$element());\r\n        this.$element().addClass(FILE_MANAGER_TOOLBAR_CLASS + \" \" + FILE_MANAGER_GENERAL_TOOLBAR_CLASS)\r\n    }\r\n    _render() {\r\n        super._render();\r\n        var toolbar = this._getVisibleToolbar();\r\n        this._checkCompactMode(toolbar)\r\n    }\r\n    _clean() {\r\n        delete this._commandManager;\r\n        delete this._itemClickedAction;\r\n        delete this._$viewSwitcherPopup;\r\n        delete this._generalToolbar;\r\n        delete this._fileToolbar;\r\n        super._clean()\r\n    }\r\n    _dimensionChanged(dimension) {\r\n        if (!dimension || \"height\" !== dimension) {\r\n            var toolbar = this._getVisibleToolbar();\r\n            this._checkCompactMode(toolbar)\r\n        }\r\n    }\r\n    _getVisibleToolbar() {\r\n        return this._generalToolbarVisible ? this._generalToolbar : this._fileToolbar\r\n    }\r\n    _createToolbar(items, hidden) {\r\n        var toolbarItems = this._getPreparedItems(items);\r\n        var $toolbar = $(\"<div>\").appendTo(this.$element());\r\n        var result = this._createComponent($toolbar, Toolbar, {\r\n            items: toolbarItems,\r\n            visible: !hidden,\r\n            onItemClick: args => this._raiseItemClicked(args)\r\n        });\r\n        result.compactMode = false;\r\n        return result\r\n    }\r\n    _getPreparedItems(items) {\r\n        items = items.map(item => {\r\n            var extendedItem = item;\r\n            if (isString(item)) {\r\n                extendedItem = {\r\n                    name: item\r\n                }\r\n            }\r\n            var commandName = extendedItem.name;\r\n            var preparedItem = this._configureItemByCommandName(commandName, extendedItem);\r\n            preparedItem.originalItemData = item;\r\n            if (\"separator\" !== commandName) {\r\n                this._setItemVisibleAvailable(preparedItem)\r\n            }\r\n            return preparedItem\r\n        });\r\n        this._updateSeparatorsVisibility(items);\r\n        return items\r\n    }\r\n    _updateSeparatorsVisibility(items, toolbar) {\r\n        var hasModifications = false;\r\n        var menuItems = this._getMenuItems(toolbar);\r\n        var hasItemsBefore = {\r\n            before: false,\r\n            center: false,\r\n            after: false\r\n        };\r\n        var itemGroups = {\r\n            before: this._getItemsInGroup(items, menuItems, \"before\"),\r\n            center: this._getItemsInGroup(items, menuItems, \"center\"),\r\n            after: this._getItemsInGroup(items, menuItems, \"after\")\r\n        };\r\n        items.forEach((item, i) => {\r\n            var itemLocation = item.location;\r\n            if (\"separator\" === item.name) {\r\n                var isSeparatorVisible = hasItemsBefore[itemLocation] && this._groupHasItemsAfter(itemGroups[itemLocation]);\r\n                if (item.visible !== isSeparatorVisible) {\r\n                    hasModifications = true;\r\n                    item.visible = isSeparatorVisible\r\n                }\r\n                hasItemsBefore[itemLocation] = false\r\n            } else {\r\n                if (!this._isItemInMenu(menuItems, item)) {\r\n                    hasItemsBefore[itemLocation] = hasItemsBefore[itemLocation] || item.visible\r\n                }\r\n                itemGroups[itemLocation].shift()\r\n            }\r\n        });\r\n        if (toolbar && hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        return hasModifications\r\n    }\r\n    _getMenuItems(toolbar) {\r\n        var result = toolbar ? toolbar._getMenuItems() : [];\r\n        return result.map(menuItem => menuItem.originalItemData)\r\n    }\r\n    _isItemInMenu(menuItems, item) {\r\n        return !!menuItems.length && \"never\" !== ensureDefined(item.locateInMenu, \"never\") && -1 !== menuItems.indexOf(item.originalItemData)\r\n    }\r\n    _getItemsInGroup(items, menuItems, groupName) {\r\n        return items.filter(item => item.location === groupName && !this._isItemInMenu(menuItems, item))\r\n    }\r\n    _groupHasItemsAfter(items) {\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (\"separator\" !== items[i].name && items[i].visible) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _configureItemByCommandName(commandName, item) {\r\n        var _result$options;\r\n        var result = {};\r\n        var command = this._commandManager.getCommandByName(commandName);\r\n        if (command) {\r\n            result = this._createCommandItem(command)\r\n        }\r\n        switch (commandName) {\r\n            case \"separator\":\r\n                result = this._createSeparatorItem();\r\n                break;\r\n            case \"switchView\":\r\n                result = this._createViewModeItem()\r\n        }\r\n        if (this._isDefaultItem(commandName)) {\r\n            var defaultConfig = DEFAULT_ITEM_CONFIGS[commandName];\r\n            extend(true, result, defaultConfig);\r\n            var resultCssClass = result.cssClass || \"\";\r\n            extendAttributes(result, item, DEFAULT_ITEM_ALLOWED_PROPERTIES);\r\n            if (isDefined(item.options)) {\r\n                extendAttributes(result.options, item.options, DEFAULT_ITEM_ALLOWED_OPTION_PROPERTIES)\r\n            }\r\n            extendAttributes(result.options, item, [\"text\", \"icon\"]);\r\n            if (item.cssClass) {\r\n                resultCssClass = \"\".concat(resultCssClass, \" \").concat(item.cssClass)\r\n            }\r\n            if (resultCssClass) {\r\n                result.cssClass = resultCssClass\r\n            }\r\n            if (!isDefined(item.visible)) {\r\n                result._autoHide = true\r\n            }\r\n            if (\"dxButton\" === result.widget) {\r\n                if (\"inMenu\" === result.showText && !isDefined(result.options.hint)) {\r\n                    result.options.hint = result.options.text\r\n                }\r\n                if (result.compactMode && !isDefined(result.options.hint)) {\r\n                    this._configureHintForCompactMode(result)\r\n                }\r\n            }\r\n        } else {\r\n            extend(true, result, item);\r\n            if (!result.widget) {\r\n                result.widget = \"dxButton\"\r\n            }\r\n            if (\"dxButton\" === result.widget && !result.compactMode && !result.showText && result.options && result.options.icon && result.options.text) {\r\n                result.compactMode = {\r\n                    showText: \"inMenu\"\r\n                }\r\n            }\r\n        }\r\n        if (commandName && !result.name) {\r\n            extend(result, {\r\n                name: commandName\r\n            })\r\n        }\r\n        result.location = ensureDefined(result.location, \"before\");\r\n        if (!isDefined(null === (_result$options = result.options) || void 0 === _result$options ? void 0 : _result$options.stylingMode)) {\r\n            if (\"dxButton\" === result.widget) {\r\n                extend(true, result, {\r\n                    options: {\r\n                        stylingMode: \"text\"\r\n                    }\r\n                })\r\n            }\r\n            if (\"dxSelectBox\" === result.widget) {\r\n                extend(true, result, {\r\n                    options: {\r\n                        stylingMode: \"filled\"\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _isDefaultItem(commandName) {\r\n        return !!DEFAULT_ITEM_CONFIGS[commandName]\r\n    }\r\n    _createCommandItem(command) {\r\n        return {\r\n            widget: \"dxButton\",\r\n            options: {\r\n                text: command.text,\r\n                hint: command.hint,\r\n                commandText: command.text,\r\n                icon: command.icon,\r\n                stylingMode: \"text\",\r\n                onClick: e => this._executeCommand(command)\r\n            }\r\n        }\r\n    }\r\n    _createSeparatorItem() {\r\n        return {\r\n            template: (data, index, element) => {\r\n                $(element).addClass(FILE_MANAGER_TOOLBAR_SEPARATOR_ITEM_CLASS)\r\n            }\r\n        }\r\n    }\r\n    _createViewModeItem() {\r\n        var commandItems = [\"details\", \"thumbnails\"].map(name => {\r\n            var {\r\n                text: text,\r\n                icon: icon\r\n            } = this._commandManager.getCommandByName(name);\r\n            return {\r\n                name: name,\r\n                text: text,\r\n                icon: icon\r\n            }\r\n        });\r\n        var selectedIndex = \"thumbnails\" === this.option(\"itemViewMode\") ? 1 : 0;\r\n        return {\r\n            cssClass: FILE_MANAGER_TOOLBAR_VIEWMODE_ITEM_CLASS,\r\n            widget: \"dxDropDownButton\",\r\n            options: {\r\n                items: commandItems,\r\n                keyExpr: \"name\",\r\n                selectedItemKey: this.option(\"itemViewMode\"),\r\n                displayExpr: \" \",\r\n                hint: commandItems[selectedIndex].text,\r\n                stylingMode: \"text\",\r\n                showArrowIcon: false,\r\n                useSelectMode: true,\r\n                dropDownOptions: {\r\n                    container: this._$viewSwitcherPopup\r\n                },\r\n                onItemClick: e => this._executeCommand(e.itemData.name)\r\n            }\r\n        }\r\n    }\r\n    _configureHintForCompactMode(item) {\r\n        item.options.hint = \"\";\r\n        item.compactMode.options = item.compactMode.options || {};\r\n        item.compactMode.options.hint = item.options.text\r\n    }\r\n    _checkCompactMode(toolbar) {\r\n        if (toolbar.compactMode) {\r\n            this._toggleCompactMode(toolbar, false)\r\n        }\r\n        var useCompactMode = this._toolbarHasItemsOverflow(toolbar);\r\n        if (toolbar.compactMode !== useCompactMode) {\r\n            if (!toolbar.compactMode) {\r\n                this._toggleCompactMode(toolbar, useCompactMode)\r\n            }\r\n            toolbar.compactMode = useCompactMode\r\n        } else if (toolbar.compactMode) {\r\n            this._toggleCompactMode(toolbar, true)\r\n        }\r\n    }\r\n    _toolbarHasItemsOverflow(toolbar) {\r\n        var toolbarWidth = getWidth(toolbar.$element());\r\n        var itemsWidth = toolbar._getItemsWidth();\r\n        return toolbarWidth < itemsWidth\r\n    }\r\n    _toggleCompactMode(toolbar, useCompactMode) {\r\n        var hasModifications = false;\r\n        var items = toolbar.option(\"items\");\r\n        items.forEach(item => {\r\n            if (item.compactMode) {\r\n                var optionsSource = null;\r\n                if (useCompactMode) {\r\n                    item.saved = this._getCompactModeOptions(item, item._available);\r\n                    optionsSource = item.compactMode\r\n                } else {\r\n                    optionsSource = item.saved\r\n                }\r\n                var options = this._getCompactModeOptions(optionsSource, item._available);\r\n                extend(true, item, options);\r\n                hasModifications = true\r\n            }\r\n        });\r\n        hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\r\n        if (hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        this._updateSeparatorsVisibility(items, toolbar)\r\n    }\r\n    _getCompactModeOptions(_ref, available) {\r\n        var {\r\n            showText: showText,\r\n            locateInMenu: locateInMenu,\r\n            options: options\r\n        } = _ref;\r\n        return {\r\n            visible: available,\r\n            showText: ensureDefined(showText, \"always\"),\r\n            locateInMenu: ensureDefined(locateInMenu, \"never\"),\r\n            options: {\r\n                hint: null === options || void 0 === options ? void 0 : options.hint\r\n            }\r\n        }\r\n    }\r\n    _ensureAvailableCommandsVisible(toolbar) {\r\n        var hasModifications = false;\r\n        var items = toolbar.option(\"items\");\r\n        items.forEach(item => {\r\n            if (\"separator\" !== item.name) {\r\n                var itemVisible = item._available;\r\n                this._setItemVisibleAvailable(item);\r\n                if (item._available !== itemVisible) {\r\n                    hasModifications = true\r\n                }\r\n            }\r\n        });\r\n        hasModifications = this._updateSeparatorsVisibility(items) || hasModifications;\r\n        if (hasModifications) {\r\n            toolbar.repaint()\r\n        }\r\n        this._updateSeparatorsVisibility(items, toolbar)\r\n    }\r\n    _setItemVisibleAvailable(item) {\r\n        var _item$originalItemDat;\r\n        var originalVisible = null === (_item$originalItemDat = item.originalItemData) || void 0 === _item$originalItemDat ? void 0 : _item$originalItemDat.visible;\r\n        item._available = this._isToolbarItemAvailable(item);\r\n        item.visible = isDefined(originalVisible) ? originalVisible : item._available\r\n    }\r\n    _fileToolbarHasEffectiveItems() {\r\n        var items = this._fileToolbar.option(\"items\");\r\n        return items.some(item => this._isFileToolbarItemAvailable(item))\r\n    }\r\n    _executeCommand(command) {\r\n        this._commandManager.executeCommand(command)\r\n    }\r\n    _isToolbarItemAvailable(toolbarItem) {\r\n        if (!this._isDefaultItem(toolbarItem.name) || !toolbarItem._autoHide) {\r\n            return ensureDefined(toolbarItem.visible, true)\r\n        }\r\n        if (\"refresh\" === toolbarItem.name) {\r\n            return this._generalToolbarVisible || !!this._isRefreshVisibleInFileToolbar\r\n        }\r\n        if (ALWAYS_VISIBLE_TOOLBAR_ITEMS.indexOf(toolbarItem.name) > -1) {\r\n            return true\r\n        }\r\n        return this._isCommandAvailable(toolbarItem.name)\r\n    }\r\n    _isFileToolbarItemAvailable(_ref2) {\r\n        var {\r\n            name: name,\r\n            visible: visible\r\n        } = _ref2;\r\n        return !this._isDefaultItem(name) && ensureDefined(visible, true) || \"clearSelection\" !== name && \"refresh\" !== name && this._isCommandAvailable(name)\r\n    }\r\n    _isCommandAvailable(name) {\r\n        return this._commandManager.isCommandAvailable(name, this.option(\"contextItems\"))\r\n    }\r\n    _updateItemInToolbar(toolbar, commandName, options) {\r\n        toolbar.beginUpdate();\r\n        var items = toolbar.option(\"items\");\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            if (item.name === commandName) {\r\n                toolbar.option(\"items[\".concat(i, \"]\"), options);\r\n                break\r\n            }\r\n        }\r\n        toolbar.endUpdate()\r\n    }\r\n    _raiseItemClicked(args) {\r\n        var changedArgs = extend(true, {}, args);\r\n        changedArgs.itemData = args.itemData.originalItemData;\r\n        this._itemClickedAction(changedArgs)\r\n    }\r\n    _createItemClickedAction() {\r\n        this._itemClickedAction = this._createActionByOption(\"onItemClick\")\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            commandManager: null,\r\n            generalItems: [],\r\n            fileItems: [],\r\n            contextItems: [],\r\n            itemViewMode: \"details\",\r\n            onItemClick: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"commandManager\":\r\n            case \"itemViewMode\":\r\n            case \"generalItems\":\r\n            case \"fileItems\":\r\n                this.repaint();\r\n                break;\r\n            case \"contextItems\":\r\n                this._update();\r\n                break;\r\n            case \"onItemClick\":\r\n                this._itemClickedAction = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    updateItemPermissions() {\r\n        this.repaint();\r\n        this._restoreRefreshItemState()\r\n    }\r\n    _restoreRefreshItemState() {\r\n        this.updateRefreshItem(this._refreshItemState.message, this._refreshItemState.status)\r\n    }\r\n    updateRefreshItem(message, status) {\r\n        var generalToolbarOptions = null;\r\n        var text = messageLocalization.format(\"dxFileManager-commandRefresh\");\r\n        var showText = \"inMenu\";\r\n        this._isRefreshVisibleInFileToolbar = false;\r\n        this._refreshItemState = {\r\n            message: message,\r\n            status: status\r\n        };\r\n        if (\"default\" === status) {\r\n            generalToolbarOptions = {\r\n                options: {\r\n                    icon: REFRESH_ICON_MAP.default\r\n                }\r\n            }\r\n        } else {\r\n            generalToolbarOptions = {\r\n                options: {\r\n                    icon: REFRESH_ICON_MAP[status]\r\n                }\r\n            };\r\n            this._isRefreshVisibleInFileToolbar = true;\r\n            text = message;\r\n            showText = \"always\"\r\n        }\r\n        var fileToolbarOptions = extend({}, generalToolbarOptions, {\r\n            visible: this._isRefreshVisibleInFileToolbar\r\n        });\r\n        this._applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions);\r\n        this._refreshItemTextTimeout = this._updateRefreshItemText(\"progress\" === status, text, showText)\r\n    }\r\n    _updateRefreshItemText(isDeferredUpdate, text, showText) {\r\n        var options = {\r\n            showText: showText,\r\n            options: {\r\n                text: text\r\n            }\r\n        };\r\n        if (isDeferredUpdate) {\r\n            return setTimeout(() => {\r\n                this._applyRefreshItemOptions(options);\r\n                this._refreshItemTextTimeout = void 0\r\n            }, REFRESH_ITEM_PROGRESS_MESSAGE_DELAY)\r\n        } else {\r\n            if (this._refreshItemTextTimeout) {\r\n                clearTimeout(this._refreshItemTextTimeout)\r\n            }\r\n            this._applyRefreshItemOptions(options);\r\n            return\r\n        }\r\n    }\r\n    _applyRefreshItemOptions(generalToolbarOptions, fileToolbarOptions) {\r\n        if (!fileToolbarOptions) {\r\n            fileToolbarOptions = extend({}, generalToolbarOptions)\r\n        }\r\n        this._updateItemInToolbar(this._generalToolbar, \"refresh\", generalToolbarOptions);\r\n        this._updateItemInToolbar(this._fileToolbar, \"refresh\", fileToolbarOptions)\r\n    }\r\n    _update() {\r\n        var showGeneralToolbar = 0 === this.option(\"contextItems\").length || !this._fileToolbarHasEffectiveItems();\r\n        if (this._generalToolbarVisible !== showGeneralToolbar) {\r\n            this._generalToolbar.option(\"visible\", showGeneralToolbar);\r\n            this._fileToolbar.option(\"visible\", !showGeneralToolbar);\r\n            this._generalToolbarVisible = showGeneralToolbar;\r\n            this.$element().toggleClass(FILE_MANAGER_GENERAL_TOOLBAR_CLASS, showGeneralToolbar);\r\n            this.$element().toggleClass(FILE_MANAGER_FILE_TOOLBAR_CLASS, !showGeneralToolbar)\r\n        }\r\n        var toolbar = this._getVisibleToolbar();\r\n        this._ensureAvailableCommandsVisible(toolbar);\r\n        this._checkCompactMode(toolbar)\r\n    }\r\n    get _commandManager() {\r\n        return this.option(\"commandManager\")\r\n    }\r\n}\r\nexport default FileManagerToolbar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}