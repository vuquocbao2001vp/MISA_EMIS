{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth, setHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { animation } from \"./ui.drawer.animation\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\n\nclass DrawerStrategy {\n  constructor(drawer) {\n    this._drawer = drawer;\n  }\n\n  getDrawerInstance() {\n    return this._drawer;\n  }\n\n  renderPanelContent(whenPanelContentRendered) {\n    var drawer = this.getDrawerInstance();\n\n    var template = drawer._getTemplate(drawer.option(\"template\"));\n\n    if (template) {\n      template.render({\n        container: drawer.content(),\n        onRendered: () => {\n          whenPanelContentRendered.resolve();\n        }\n      });\n    }\n  }\n\n  renderPosition(changePositionUsingFxAnimation, animationDuration) {\n    var whenPositionAnimationCompleted = new Deferred();\n    var whenShaderAnimationCompleted = new Deferred();\n    var drawer = this.getDrawerInstance();\n\n    if (changePositionUsingFxAnimation) {\n      when.apply($, [whenPositionAnimationCompleted, whenShaderAnimationCompleted]).done(() => {\n        drawer._animationCompleteHandler();\n      });\n    }\n\n    this._internalRenderPosition(changePositionUsingFxAnimation, whenPositionAnimationCompleted);\n\n    if (!changePositionUsingFxAnimation) {\n      drawer.resizeViewContent();\n    }\n\n    this.renderShaderVisibility(changePositionUsingFxAnimation, animationDuration, whenShaderAnimationCompleted);\n  }\n\n  _getPanelOffset(isDrawerOpened) {\n    var drawer = this.getDrawerInstance();\n    var size = drawer.isHorizontalDirection() ? drawer.getRealPanelWidth() : drawer.getRealPanelHeight();\n\n    if (isDrawerOpened) {\n      return -(size - drawer.getMaxSize());\n    } else {\n      return -(size - drawer.getMinSize());\n    }\n  }\n\n  _getPanelSize(isDrawerOpened) {\n    return isDrawerOpened ? this.getDrawerInstance().getMaxSize() : this.getDrawerInstance().getMinSize();\n  }\n\n  renderShaderVisibility(changePositionUsingFxAnimation, duration, whenAnimationCompleted) {\n    var drawer = this.getDrawerInstance();\n    var isShaderVisible = drawer.option(\"opened\");\n    var fadeConfig = isShaderVisible ? {\n      from: 0,\n      to: 1\n    } : {\n      from: 1,\n      to: 0\n    };\n\n    if (changePositionUsingFxAnimation) {\n      animation.fade($(drawer._$shader), fadeConfig, duration, () => {\n        this._drawer._toggleShaderVisibility(isShaderVisible);\n\n        whenAnimationCompleted.resolve();\n      });\n    } else {\n      drawer._toggleShaderVisibility(isShaderVisible);\n\n      drawer._$shader.css(\"opacity\", fadeConfig.to);\n    }\n  }\n\n  getPanelContent() {\n    return $(this.getDrawerInstance().content());\n  }\n\n  setPanelSize(calcFromRealPanelSize) {\n    this.refreshPanelElementSize(calcFromRealPanelSize);\n  }\n\n  refreshPanelElementSize(calcFromRealPanelSize) {\n    var drawer = this.getDrawerInstance();\n\n    var panelSize = this._getPanelSize(drawer.option(\"opened\"));\n\n    if (drawer.isHorizontalDirection()) {\n      setWidth($(drawer.content()), calcFromRealPanelSize ? drawer.getRealPanelWidth() : panelSize);\n    } else {\n      setHeight($(drawer.content()), calcFromRealPanelSize ? drawer.getRealPanelHeight() : panelSize);\n    }\n  }\n\n  isViewContentFirst() {\n    return false;\n  }\n\n  onPanelContentRendered() {}\n\n}\n\nexport default DrawerStrategy;","map":{"version":3,"names":["setWidth","setHeight","$","animation","Deferred","when","DrawerStrategy","constructor","drawer","_drawer","getDrawerInstance","renderPanelContent","whenPanelContentRendered","template","_getTemplate","option","render","container","content","onRendered","resolve","renderPosition","changePositionUsingFxAnimation","animationDuration","whenPositionAnimationCompleted","whenShaderAnimationCompleted","apply","done","_animationCompleteHandler","_internalRenderPosition","resizeViewContent","renderShaderVisibility","_getPanelOffset","isDrawerOpened","size","isHorizontalDirection","getRealPanelWidth","getRealPanelHeight","getMaxSize","getMinSize","_getPanelSize","duration","whenAnimationCompleted","isShaderVisible","fadeConfig","from","to","fade","_$shader","_toggleShaderVisibility","css","getPanelContent","setPanelSize","calcFromRealPanelSize","refreshPanelElementSize","panelSize","isViewContentFirst","onPanelContentRendered"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/drawer/ui.drawer.rendering.strategy.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/drawer/ui.drawer.rendering.strategy.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setWidth,\r\n    setHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    animation\r\n} from \"./ui.drawer.animation\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nclass DrawerStrategy {\r\n    constructor(drawer) {\r\n        this._drawer = drawer\r\n    }\r\n    getDrawerInstance() {\r\n        return this._drawer\r\n    }\r\n    renderPanelContent(whenPanelContentRendered) {\r\n        var drawer = this.getDrawerInstance();\r\n        var template = drawer._getTemplate(drawer.option(\"template\"));\r\n        if (template) {\r\n            template.render({\r\n                container: drawer.content(),\r\n                onRendered: () => {\r\n                    whenPanelContentRendered.resolve()\r\n                }\r\n            })\r\n        }\r\n    }\r\n    renderPosition(changePositionUsingFxAnimation, animationDuration) {\r\n        var whenPositionAnimationCompleted = new Deferred;\r\n        var whenShaderAnimationCompleted = new Deferred;\r\n        var drawer = this.getDrawerInstance();\r\n        if (changePositionUsingFxAnimation) {\r\n            when.apply($, [whenPositionAnimationCompleted, whenShaderAnimationCompleted]).done(() => {\r\n                drawer._animationCompleteHandler()\r\n            })\r\n        }\r\n        this._internalRenderPosition(changePositionUsingFxAnimation, whenPositionAnimationCompleted);\r\n        if (!changePositionUsingFxAnimation) {\r\n            drawer.resizeViewContent()\r\n        }\r\n        this.renderShaderVisibility(changePositionUsingFxAnimation, animationDuration, whenShaderAnimationCompleted)\r\n    }\r\n    _getPanelOffset(isDrawerOpened) {\r\n        var drawer = this.getDrawerInstance();\r\n        var size = drawer.isHorizontalDirection() ? drawer.getRealPanelWidth() : drawer.getRealPanelHeight();\r\n        if (isDrawerOpened) {\r\n            return -(size - drawer.getMaxSize())\r\n        } else {\r\n            return -(size - drawer.getMinSize())\r\n        }\r\n    }\r\n    _getPanelSize(isDrawerOpened) {\r\n        return isDrawerOpened ? this.getDrawerInstance().getMaxSize() : this.getDrawerInstance().getMinSize()\r\n    }\r\n    renderShaderVisibility(changePositionUsingFxAnimation, duration, whenAnimationCompleted) {\r\n        var drawer = this.getDrawerInstance();\r\n        var isShaderVisible = drawer.option(\"opened\");\r\n        var fadeConfig = isShaderVisible ? {\r\n            from: 0,\r\n            to: 1\r\n        } : {\r\n            from: 1,\r\n            to: 0\r\n        };\r\n        if (changePositionUsingFxAnimation) {\r\n            animation.fade($(drawer._$shader), fadeConfig, duration, () => {\r\n                this._drawer._toggleShaderVisibility(isShaderVisible);\r\n                whenAnimationCompleted.resolve()\r\n            })\r\n        } else {\r\n            drawer._toggleShaderVisibility(isShaderVisible);\r\n            drawer._$shader.css(\"opacity\", fadeConfig.to)\r\n        }\r\n    }\r\n    getPanelContent() {\r\n        return $(this.getDrawerInstance().content())\r\n    }\r\n    setPanelSize(calcFromRealPanelSize) {\r\n        this.refreshPanelElementSize(calcFromRealPanelSize)\r\n    }\r\n    refreshPanelElementSize(calcFromRealPanelSize) {\r\n        var drawer = this.getDrawerInstance();\r\n        var panelSize = this._getPanelSize(drawer.option(\"opened\"));\r\n        if (drawer.isHorizontalDirection()) {\r\n            setWidth($(drawer.content()), calcFromRealPanelSize ? drawer.getRealPanelWidth() : panelSize)\r\n        } else {\r\n            setHeight($(drawer.content()), calcFromRealPanelSize ? drawer.getRealPanelHeight() : panelSize)\r\n        }\r\n    }\r\n    isViewContentFirst() {\r\n        return false\r\n    }\r\n    onPanelContentRendered() {}\r\n}\r\nexport default DrawerStrategy;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}