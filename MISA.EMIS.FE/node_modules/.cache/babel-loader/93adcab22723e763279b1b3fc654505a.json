{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/axes/smart_formatter.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport formatHelper from \"../../format_helper\";\nimport { isDefined, isFunction, isExponential, isObject } from \"../../core/utils/type\";\nimport dateUtils from \"../../core/utils/date\";\nimport { adjust, getPrecision, getExponent } from \"../../core/utils/math\";\nimport { getAdjustedLog10 as log10 } from \"../core/utils\";\nvar _format = formatHelper.format;\nvar {\n  abs: abs,\n  floor: floor\n} = Math;\nvar EXPONENTIAL = \"exponential\";\nvar formats = [\"fixedPoint\", \"thousands\", \"millions\", \"billions\", \"trillions\", EXPONENTIAL];\nvar dateUnitIntervals = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"];\n\nfunction getDatesDifferences(prevDate, curDate, nextDate, tickFormat) {\n  var prevDifferences;\n  var nextDifferences;\n  var dateUnitInterval;\n  var dateUnitsLength = dateUnitIntervals.length;\n  var i;\n  var j;\n\n  if (\"week\" === tickFormat) {\n    tickFormat = \"day\";\n  } else if (\"quarter\" === tickFormat) {\n    tickFormat = \"month\";\n  } else if (\"shorttime\" === tickFormat) {\n    tickFormat = \"hour\";\n  } else if (\"longtime\" === tickFormat) {\n    tickFormat = \"second\";\n  }\n\n  var tickFormatIndex = dateUnitIntervals.indexOf(tickFormat);\n\n  if (nextDate) {\n    nextDifferences = dateUtils.getDatesDifferences(curDate, nextDate);\n    prevDifferences = dateUtils.getDatesDifferences(curDate, prevDate);\n\n    if (nextDifferences[tickFormat]) {\n      for (i = dateUnitsLength - 1; i >= tickFormatIndex; i--) {\n        dateUnitInterval = dateUnitIntervals[i];\n\n        if (i === tickFormatIndex) {\n          setDateUnitInterval(nextDifferences, tickFormatIndex + (nextDifferences.millisecond ? 2 : 1));\n        } else if (nextDifferences[dateUnitInterval]) {\n          resetDateUnitInterval(nextDifferences, i);\n          break;\n        }\n      }\n    }\n  } else {\n    prevDifferences = dateUtils.getDatesDifferences(prevDate, curDate);\n\n    for (i = dateUnitsLength - 1; i >= tickFormatIndex; i--) {\n      dateUnitInterval = dateUnitIntervals[i];\n\n      if (prevDifferences[dateUnitInterval]) {\n        if (i - tickFormatIndex > 1) {\n          for (j = tickFormatIndex + 1; j >= 0; j--) {\n            resetDateUnitInterval(prevDifferences, j);\n          }\n\n          break;\n        } else if (isDateTimeStart(curDate, dateUnitInterval)) {\n          for (j = i - 1; j > 0; j--) {\n            resetDateUnitInterval(prevDifferences, j);\n          }\n\n          break;\n        }\n      }\n    }\n  }\n\n  return nextDate ? nextDifferences : prevDifferences;\n}\n\nfunction isDateTimeStart(date, dateUnitInterval) {\n  var unitNumbers = [date.getMilliseconds(), date.getSeconds(), date.getMinutes(), date.getHours(), date.getDate(), date.getMonth()];\n  var unitIndex = dateUnitIntervals.indexOf(dateUnitInterval);\n  var i;\n\n  for (i = 0; i < unitIndex; i++) {\n    if (4 === i && 1 !== unitNumbers[i] || 4 !== i && 0 !== unitNumbers[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction resetDateUnitInterval(differences, intervalIndex) {\n  var dateUnitInterval = dateUnitIntervals[intervalIndex];\n\n  if (differences[dateUnitInterval]) {\n    differences[dateUnitInterval] = false;\n    differences.count--;\n  }\n}\n\nfunction setDateUnitInterval(differences, intervalIndex) {\n  var dateUnitInterval = dateUnitIntervals[intervalIndex];\n\n  if (false === differences[dateUnitInterval]) {\n    differences[dateUnitInterval] = true;\n    differences.count++;\n  }\n}\n\nfunction getNoZeroIndex(str) {\n  return str.length - parseInt(str).toString().length;\n}\n\nfunction getTransitionTickIndex(ticks, value) {\n  var i;\n  var curDiff;\n  var minDiff;\n  var nearestTickIndex = 0;\n  minDiff = abs(value - ticks[0]);\n\n  for (i = 1; i < ticks.length; i++) {\n    curDiff = abs(value - ticks[i]);\n\n    if (curDiff < minDiff) {\n      minDiff = curDiff;\n      nearestTickIndex = i;\n    }\n  }\n\n  return nearestTickIndex;\n}\n\nfunction splitDecimalNumber(value) {\n  return value.toString().split(\".\");\n}\n\nfunction createFormat(type) {\n  var formatter;\n\n  if (isFunction(type)) {\n    formatter = type;\n    type = null;\n  }\n\n  return {\n    type: type,\n    formatter: formatter\n  };\n}\n\nexport function smartFormatter(tick, options) {\n  var tickInterval = options.tickInterval;\n  var tickIntervalIndex;\n  var tickIndex;\n  var actualIndex;\n  var stringTick = abs(tick).toString();\n  var precision = 0;\n  var typeFormat;\n  var offset = 0;\n  var separatedTickInterval;\n  var indexOfFormat = 0;\n  var indexOfTick = -1;\n  var datesDifferences;\n  var format = options.labelOptions.format;\n  var ticks = options.ticks;\n  var log10Tick;\n  var prevDateIndex;\n  var nextDateIndex;\n  var isLogarithmic = \"logarithmic\" === options.type;\n\n  if (1 === ticks.length && 0 === ticks.indexOf(tick) && !isDefined(tickInterval)) {\n    tickInterval = abs(tick) >= 1 ? 1 : adjust(1 - abs(tick), tick);\n  }\n\n  if (Object.is(tick, -0)) {\n    tick = 0;\n  }\n\n  if (!isDefined(format) && \"discrete\" !== options.type && tick && (10 === options.logarithmBase || !isLogarithmic)) {\n    if (\"datetime\" !== options.dataType && isDefined(tickInterval)) {\n      if (ticks.length && -1 === ticks.indexOf(tick)) {\n        indexOfTick = getTransitionTickIndex(ticks, tick);\n        tickInterval = adjust(abs(tick - ticks[indexOfTick]), tick);\n      }\n\n      separatedTickInterval = splitDecimalNumber(tickInterval);\n\n      if (separatedTickInterval < 2) {\n        separatedTickInterval = splitDecimalNumber(tick);\n      }\n\n      if (isLogarithmic) {\n        log10Tick = log10(abs(tick));\n\n        if (log10Tick > 0) {\n          typeFormat = formats[floor(log10Tick / 3)] || EXPONENTIAL;\n        } else if (log10Tick < -4) {\n          typeFormat = EXPONENTIAL;\n        } else {\n          return _format(adjust(tick));\n        }\n      } else if (separatedTickInterval.length > 1 && !isExponential(tickInterval)) {\n        precision = separatedTickInterval[1].length;\n        typeFormat = formats[indexOfFormat];\n      } else if (isExponential(tickInterval) && (-1 !== stringTick.indexOf(\".\") || isExponential(tick))) {\n        typeFormat = EXPONENTIAL;\n\n        if (!isExponential(tick)) {\n          precision = abs(getNoZeroIndex(stringTick.split(\".\")[1]) - getExponent(tickInterval) + 1);\n        } else {\n          precision = Math.max(abs(getExponent(tick) - getExponent(tickInterval)), abs(getPrecision(tick) - getPrecision(tickInterval)));\n        }\n      } else {\n        tickIntervalIndex = floor(log10(tickInterval));\n        actualIndex = tickIndex = floor(log10(abs(tick)));\n\n        if (tickIndex - tickIntervalIndex >= 2) {\n          actualIndex = tickIntervalIndex;\n        }\n\n        indexOfFormat = floor(actualIndex / 3);\n        offset = 3 * indexOfFormat;\n\n        if (indexOfFormat < 5) {\n          if (tickIntervalIndex - offset === 2 && tickIndex >= 3) {\n            indexOfFormat++;\n            offset = 3 * indexOfFormat;\n          }\n\n          typeFormat = formats[indexOfFormat];\n        } else {\n          typeFormat = formats[formats.length - 1];\n        }\n\n        if (offset > 0) {\n          separatedTickInterval = splitDecimalNumber(tickInterval / Math.pow(10, offset));\n\n          if (separatedTickInterval[1]) {\n            precision = separatedTickInterval[1].length;\n          }\n        }\n      }\n\n      if (void 0 !== typeFormat || void 0 !== precision) {\n        format = {\n          type: typeFormat,\n          precision: precision\n        };\n      }\n    } else if (\"datetime\" === options.dataType) {\n      typeFormat = dateUtils.getDateFormatByTickInterval(tickInterval);\n\n      if (options.showTransition && ticks.length) {\n        indexOfTick = ticks.map(Number).indexOf(+tick);\n\n        if (1 === ticks.length && 0 === indexOfTick) {\n          typeFormat = formatHelper.getDateFormatByTicks(ticks);\n        } else {\n          if (-1 === indexOfTick) {\n            prevDateIndex = getTransitionTickIndex(ticks, tick);\n          } else {\n            prevDateIndex = 0 === indexOfTick ? ticks.length - 1 : indexOfTick - 1;\n            nextDateIndex = 0 === indexOfTick ? 1 : -1;\n          }\n\n          datesDifferences = getDatesDifferences(ticks[prevDateIndex], tick, ticks[nextDateIndex], typeFormat);\n          typeFormat = formatHelper.getDateFormatByDifferences(datesDifferences, typeFormat);\n        }\n      }\n\n      format = createFormat(typeFormat);\n    }\n  }\n\n  return _format(tick, format);\n}\n\nfunction getHighDiffFormat(diff) {\n  var stop = false;\n\n  for (var i in diff) {\n    if (true === diff[i] || \"hour\" === i || stop) {\n      diff[i] = false;\n      stop = true;\n    } else if (false === diff[i]) {\n      diff[i] = true;\n    }\n  }\n\n  return createFormat(formatHelper.getDateFormatByDifferences(diff));\n}\n\nfunction getHighAndSelfDiffFormat(diff, interval) {\n  var stop = false;\n\n  for (var i in diff) {\n    if (stop) {\n      diff[i] = false;\n    } else if (i === interval) {\n      stop = true;\n    } else {\n      diff[i] = true;\n    }\n  }\n\n  return createFormat(formatHelper.getDateFormatByDifferences(diff));\n}\n\nfunction formatDateRange(startValue, endValue, tickInterval) {\n  var diff = getDatesDifferences(startValue, endValue);\n  var typeFormat = dateUtils.getDateFormatByTickInterval(tickInterval);\n  var diffFormatType = formatHelper.getDateFormatByDifferences(diff, typeFormat);\n  var diffFormat = createFormat(diffFormatType);\n  var values = [];\n\n  if (tickInterval in diff) {\n    var rangeFormat = getHighAndSelfDiffFormat(getDatesDifferences(startValue, endValue), tickInterval);\n\n    var value = _format(startValue, rangeFormat);\n\n    if (value) {\n      values.push(value);\n    }\n  } else {\n    var _rangeFormat = getHighDiffFormat(getDatesDifferences(startValue, endValue));\n\n    var highValue = _format(startValue, _rangeFormat);\n\n    if (highValue) {\n      values.push(highValue);\n    }\n\n    values.push(\"\".concat(_format(startValue, diffFormat), \" - \").concat(_format(endValue, diffFormat)));\n  }\n\n  return values.join(\", \");\n}\n\nfunction processDateInterval(interval) {\n  if (isObject(interval)) {\n    var dateUnits = Object.keys(interval);\n    var sum = dateUnits.reduce((sum, k) => interval[k] + sum, 0);\n\n    if (1 === sum) {\n      var dateUnit = dateUnits.filter(k => 1 === interval[k])[0];\n      return dateUnit.slice(0, dateUnit.length - 1);\n    }\n  }\n\n  return interval;\n}\n\nexport function formatRange(_ref) {\n  var {\n    startValue: startValue,\n    endValue: endValue,\n    tickInterval: tickInterval,\n    argumentFormat: argumentFormat,\n    axisOptions: {\n      dataType: dataType,\n      type: type,\n      logarithmBase: logarithmBase\n    }\n  } = _ref;\n\n  if (\"discrete\" === type) {\n    return \"\";\n  }\n\n  if (\"datetime\" === dataType) {\n    return formatDateRange(startValue, endValue, processDateInterval(tickInterval));\n  }\n\n  var formatOptions = {\n    ticks: [],\n    type: type,\n    dataType: dataType,\n    tickInterval: tickInterval,\n    logarithmBase: logarithmBase,\n    labelOptions: {\n      format: argumentFormat\n    }\n  };\n  return \"\".concat(smartFormatter(startValue, formatOptions), \" - \").concat(smartFormatter(endValue, formatOptions));\n}","map":{"version":3,"names":["formatHelper","isDefined","isFunction","isExponential","isObject","dateUtils","adjust","getPrecision","getExponent","getAdjustedLog10","log10","_format","format","abs","floor","Math","EXPONENTIAL","formats","dateUnitIntervals","getDatesDifferences","prevDate","curDate","nextDate","tickFormat","prevDifferences","nextDifferences","dateUnitInterval","dateUnitsLength","length","i","j","tickFormatIndex","indexOf","setDateUnitInterval","millisecond","resetDateUnitInterval","isDateTimeStart","date","unitNumbers","getMilliseconds","getSeconds","getMinutes","getHours","getDate","getMonth","unitIndex","differences","intervalIndex","count","getNoZeroIndex","str","parseInt","toString","getTransitionTickIndex","ticks","value","curDiff","minDiff","nearestTickIndex","splitDecimalNumber","split","createFormat","type","formatter","smartFormatter","tick","options","tickInterval","tickIntervalIndex","tickIndex","actualIndex","stringTick","precision","typeFormat","offset","separatedTickInterval","indexOfFormat","indexOfTick","datesDifferences","labelOptions","log10Tick","prevDateIndex","nextDateIndex","isLogarithmic","Object","is","logarithmBase","dataType","max","pow","getDateFormatByTickInterval","showTransition","map","Number","getDateFormatByTicks","getDateFormatByDifferences","getHighDiffFormat","diff","stop","getHighAndSelfDiffFormat","interval","formatDateRange","startValue","endValue","diffFormatType","diffFormat","values","rangeFormat","push","_rangeFormat","highValue","concat","join","processDateInterval","dateUnits","keys","sum","reduce","k","dateUnit","filter","slice","formatRange","_ref","argumentFormat","axisOptions","formatOptions"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/viz/axes/smart_formatter.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/viz/axes/smart_formatter.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport formatHelper from \"../../format_helper\";\r\nimport {\r\n    isDefined,\r\n    isFunction,\r\n    isExponential,\r\n    isObject\r\n} from \"../../core/utils/type\";\r\nimport dateUtils from \"../../core/utils/date\";\r\nimport {\r\n    adjust,\r\n    getPrecision,\r\n    getExponent\r\n} from \"../../core/utils/math\";\r\nimport {\r\n    getAdjustedLog10 as log10\r\n} from \"../core/utils\";\r\nvar _format = formatHelper.format;\r\nvar {\r\n    abs: abs,\r\n    floor: floor\r\n} = Math;\r\nvar EXPONENTIAL = \"exponential\";\r\nvar formats = [\"fixedPoint\", \"thousands\", \"millions\", \"billions\", \"trillions\", EXPONENTIAL];\r\nvar dateUnitIntervals = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"];\r\n\r\nfunction getDatesDifferences(prevDate, curDate, nextDate, tickFormat) {\r\n    var prevDifferences;\r\n    var nextDifferences;\r\n    var dateUnitInterval;\r\n    var dateUnitsLength = dateUnitIntervals.length;\r\n    var i;\r\n    var j;\r\n    if (\"week\" === tickFormat) {\r\n        tickFormat = \"day\"\r\n    } else if (\"quarter\" === tickFormat) {\r\n        tickFormat = \"month\"\r\n    } else if (\"shorttime\" === tickFormat) {\r\n        tickFormat = \"hour\"\r\n    } else if (\"longtime\" === tickFormat) {\r\n        tickFormat = \"second\"\r\n    }\r\n    var tickFormatIndex = dateUnitIntervals.indexOf(tickFormat);\r\n    if (nextDate) {\r\n        nextDifferences = dateUtils.getDatesDifferences(curDate, nextDate);\r\n        prevDifferences = dateUtils.getDatesDifferences(curDate, prevDate);\r\n        if (nextDifferences[tickFormat]) {\r\n            for (i = dateUnitsLength - 1; i >= tickFormatIndex; i--) {\r\n                dateUnitInterval = dateUnitIntervals[i];\r\n                if (i === tickFormatIndex) {\r\n                    setDateUnitInterval(nextDifferences, tickFormatIndex + (nextDifferences.millisecond ? 2 : 1))\r\n                } else if (nextDifferences[dateUnitInterval]) {\r\n                    resetDateUnitInterval(nextDifferences, i);\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        prevDifferences = dateUtils.getDatesDifferences(prevDate, curDate);\r\n        for (i = dateUnitsLength - 1; i >= tickFormatIndex; i--) {\r\n            dateUnitInterval = dateUnitIntervals[i];\r\n            if (prevDifferences[dateUnitInterval]) {\r\n                if (i - tickFormatIndex > 1) {\r\n                    for (j = tickFormatIndex + 1; j >= 0; j--) {\r\n                        resetDateUnitInterval(prevDifferences, j)\r\n                    }\r\n                    break\r\n                } else if (isDateTimeStart(curDate, dateUnitInterval)) {\r\n                    for (j = i - 1; j > 0; j--) {\r\n                        resetDateUnitInterval(prevDifferences, j)\r\n                    }\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return nextDate ? nextDifferences : prevDifferences\r\n}\r\n\r\nfunction isDateTimeStart(date, dateUnitInterval) {\r\n    var unitNumbers = [date.getMilliseconds(), date.getSeconds(), date.getMinutes(), date.getHours(), date.getDate(), date.getMonth()];\r\n    var unitIndex = dateUnitIntervals.indexOf(dateUnitInterval);\r\n    var i;\r\n    for (i = 0; i < unitIndex; i++) {\r\n        if (4 === i && 1 !== unitNumbers[i] || 4 !== i && 0 !== unitNumbers[i]) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction resetDateUnitInterval(differences, intervalIndex) {\r\n    var dateUnitInterval = dateUnitIntervals[intervalIndex];\r\n    if (differences[dateUnitInterval]) {\r\n        differences[dateUnitInterval] = false;\r\n        differences.count--\r\n    }\r\n}\r\n\r\nfunction setDateUnitInterval(differences, intervalIndex) {\r\n    var dateUnitInterval = dateUnitIntervals[intervalIndex];\r\n    if (false === differences[dateUnitInterval]) {\r\n        differences[dateUnitInterval] = true;\r\n        differences.count++\r\n    }\r\n}\r\n\r\nfunction getNoZeroIndex(str) {\r\n    return str.length - parseInt(str).toString().length\r\n}\r\n\r\nfunction getTransitionTickIndex(ticks, value) {\r\n    var i;\r\n    var curDiff;\r\n    var minDiff;\r\n    var nearestTickIndex = 0;\r\n    minDiff = abs(value - ticks[0]);\r\n    for (i = 1; i < ticks.length; i++) {\r\n        curDiff = abs(value - ticks[i]);\r\n        if (curDiff < minDiff) {\r\n            minDiff = curDiff;\r\n            nearestTickIndex = i\r\n        }\r\n    }\r\n    return nearestTickIndex\r\n}\r\n\r\nfunction splitDecimalNumber(value) {\r\n    return value.toString().split(\".\")\r\n}\r\n\r\nfunction createFormat(type) {\r\n    var formatter;\r\n    if (isFunction(type)) {\r\n        formatter = type;\r\n        type = null\r\n    }\r\n    return {\r\n        type: type,\r\n        formatter: formatter\r\n    }\r\n}\r\nexport function smartFormatter(tick, options) {\r\n    var tickInterval = options.tickInterval;\r\n    var tickIntervalIndex;\r\n    var tickIndex;\r\n    var actualIndex;\r\n    var stringTick = abs(tick).toString();\r\n    var precision = 0;\r\n    var typeFormat;\r\n    var offset = 0;\r\n    var separatedTickInterval;\r\n    var indexOfFormat = 0;\r\n    var indexOfTick = -1;\r\n    var datesDifferences;\r\n    var format = options.labelOptions.format;\r\n    var ticks = options.ticks;\r\n    var log10Tick;\r\n    var prevDateIndex;\r\n    var nextDateIndex;\r\n    var isLogarithmic = \"logarithmic\" === options.type;\r\n    if (1 === ticks.length && 0 === ticks.indexOf(tick) && !isDefined(tickInterval)) {\r\n        tickInterval = abs(tick) >= 1 ? 1 : adjust(1 - abs(tick), tick)\r\n    }\r\n    if (Object.is(tick, -0)) {\r\n        tick = 0\r\n    }\r\n    if (!isDefined(format) && \"discrete\" !== options.type && tick && (10 === options.logarithmBase || !isLogarithmic)) {\r\n        if (\"datetime\" !== options.dataType && isDefined(tickInterval)) {\r\n            if (ticks.length && -1 === ticks.indexOf(tick)) {\r\n                indexOfTick = getTransitionTickIndex(ticks, tick);\r\n                tickInterval = adjust(abs(tick - ticks[indexOfTick]), tick)\r\n            }\r\n            separatedTickInterval = splitDecimalNumber(tickInterval);\r\n            if (separatedTickInterval < 2) {\r\n                separatedTickInterval = splitDecimalNumber(tick)\r\n            }\r\n            if (isLogarithmic) {\r\n                log10Tick = log10(abs(tick));\r\n                if (log10Tick > 0) {\r\n                    typeFormat = formats[floor(log10Tick / 3)] || EXPONENTIAL\r\n                } else if (log10Tick < -4) {\r\n                    typeFormat = EXPONENTIAL\r\n                } else {\r\n                    return _format(adjust(tick))\r\n                }\r\n            } else if (separatedTickInterval.length > 1 && !isExponential(tickInterval)) {\r\n                precision = separatedTickInterval[1].length;\r\n                typeFormat = formats[indexOfFormat]\r\n            } else if (isExponential(tickInterval) && (-1 !== stringTick.indexOf(\".\") || isExponential(tick))) {\r\n                typeFormat = EXPONENTIAL;\r\n                if (!isExponential(tick)) {\r\n                    precision = abs(getNoZeroIndex(stringTick.split(\".\")[1]) - getExponent(tickInterval) + 1)\r\n                } else {\r\n                    precision = Math.max(abs(getExponent(tick) - getExponent(tickInterval)), abs(getPrecision(tick) - getPrecision(tickInterval)))\r\n                }\r\n            } else {\r\n                tickIntervalIndex = floor(log10(tickInterval));\r\n                actualIndex = tickIndex = floor(log10(abs(tick)));\r\n                if (tickIndex - tickIntervalIndex >= 2) {\r\n                    actualIndex = tickIntervalIndex\r\n                }\r\n                indexOfFormat = floor(actualIndex / 3);\r\n                offset = 3 * indexOfFormat;\r\n                if (indexOfFormat < 5) {\r\n                    if (tickIntervalIndex - offset === 2 && tickIndex >= 3) {\r\n                        indexOfFormat++;\r\n                        offset = 3 * indexOfFormat\r\n                    }\r\n                    typeFormat = formats[indexOfFormat]\r\n                } else {\r\n                    typeFormat = formats[formats.length - 1]\r\n                }\r\n                if (offset > 0) {\r\n                    separatedTickInterval = splitDecimalNumber(tickInterval / Math.pow(10, offset));\r\n                    if (separatedTickInterval[1]) {\r\n                        precision = separatedTickInterval[1].length\r\n                    }\r\n                }\r\n            }\r\n            if (void 0 !== typeFormat || void 0 !== precision) {\r\n                format = {\r\n                    type: typeFormat,\r\n                    precision: precision\r\n                }\r\n            }\r\n        } else if (\"datetime\" === options.dataType) {\r\n            typeFormat = dateUtils.getDateFormatByTickInterval(tickInterval);\r\n            if (options.showTransition && ticks.length) {\r\n                indexOfTick = ticks.map(Number).indexOf(+tick);\r\n                if (1 === ticks.length && 0 === indexOfTick) {\r\n                    typeFormat = formatHelper.getDateFormatByTicks(ticks)\r\n                } else {\r\n                    if (-1 === indexOfTick) {\r\n                        prevDateIndex = getTransitionTickIndex(ticks, tick)\r\n                    } else {\r\n                        prevDateIndex = 0 === indexOfTick ? ticks.length - 1 : indexOfTick - 1;\r\n                        nextDateIndex = 0 === indexOfTick ? 1 : -1\r\n                    }\r\n                    datesDifferences = getDatesDifferences(ticks[prevDateIndex], tick, ticks[nextDateIndex], typeFormat);\r\n                    typeFormat = formatHelper.getDateFormatByDifferences(datesDifferences, typeFormat)\r\n                }\r\n            }\r\n            format = createFormat(typeFormat)\r\n        }\r\n    }\r\n    return _format(tick, format)\r\n}\r\n\r\nfunction getHighDiffFormat(diff) {\r\n    var stop = false;\r\n    for (var i in diff) {\r\n        if (true === diff[i] || \"hour\" === i || stop) {\r\n            diff[i] = false;\r\n            stop = true\r\n        } else if (false === diff[i]) {\r\n            diff[i] = true\r\n        }\r\n    }\r\n    return createFormat(formatHelper.getDateFormatByDifferences(diff))\r\n}\r\n\r\nfunction getHighAndSelfDiffFormat(diff, interval) {\r\n    var stop = false;\r\n    for (var i in diff) {\r\n        if (stop) {\r\n            diff[i] = false\r\n        } else if (i === interval) {\r\n            stop = true\r\n        } else {\r\n            diff[i] = true\r\n        }\r\n    }\r\n    return createFormat(formatHelper.getDateFormatByDifferences(diff))\r\n}\r\n\r\nfunction formatDateRange(startValue, endValue, tickInterval) {\r\n    var diff = getDatesDifferences(startValue, endValue);\r\n    var typeFormat = dateUtils.getDateFormatByTickInterval(tickInterval);\r\n    var diffFormatType = formatHelper.getDateFormatByDifferences(diff, typeFormat);\r\n    var diffFormat = createFormat(diffFormatType);\r\n    var values = [];\r\n    if (tickInterval in diff) {\r\n        var rangeFormat = getHighAndSelfDiffFormat(getDatesDifferences(startValue, endValue), tickInterval);\r\n        var value = _format(startValue, rangeFormat);\r\n        if (value) {\r\n            values.push(value)\r\n        }\r\n    } else {\r\n        var _rangeFormat = getHighDiffFormat(getDatesDifferences(startValue, endValue));\r\n        var highValue = _format(startValue, _rangeFormat);\r\n        if (highValue) {\r\n            values.push(highValue)\r\n        }\r\n        values.push(\"\".concat(_format(startValue, diffFormat), \" - \").concat(_format(endValue, diffFormat)))\r\n    }\r\n    return values.join(\", \")\r\n}\r\n\r\nfunction processDateInterval(interval) {\r\n    if (isObject(interval)) {\r\n        var dateUnits = Object.keys(interval);\r\n        var sum = dateUnits.reduce((sum, k) => interval[k] + sum, 0);\r\n        if (1 === sum) {\r\n            var dateUnit = dateUnits.filter(k => 1 === interval[k])[0];\r\n            return dateUnit.slice(0, dateUnit.length - 1)\r\n        }\r\n    }\r\n    return interval\r\n}\r\nexport function formatRange(_ref) {\r\n    var {\r\n        startValue: startValue,\r\n        endValue: endValue,\r\n        tickInterval: tickInterval,\r\n        argumentFormat: argumentFormat,\r\n        axisOptions: {\r\n            dataType: dataType,\r\n            type: type,\r\n            logarithmBase: logarithmBase\r\n        }\r\n    } = _ref;\r\n    if (\"discrete\" === type) {\r\n        return \"\"\r\n    }\r\n    if (\"datetime\" === dataType) {\r\n        return formatDateRange(startValue, endValue, processDateInterval(tickInterval))\r\n    }\r\n    var formatOptions = {\r\n        ticks: [],\r\n        type: type,\r\n        dataType: dataType,\r\n        tickInterval: tickInterval,\r\n        logarithmBase: logarithmBase,\r\n        labelOptions: {\r\n            format: argumentFormat\r\n        }\r\n    };\r\n    return \"\".concat(smartFormatter(startValue, formatOptions), \" - \").concat(smartFormatter(endValue, formatOptions))\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}