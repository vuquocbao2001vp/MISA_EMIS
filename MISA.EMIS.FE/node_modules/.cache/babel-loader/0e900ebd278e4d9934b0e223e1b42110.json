{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.editing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { each } from \"../../core/utils/iterator\";\nimport { format } from \"../../core/utils/string\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport FileManagerDialogManager from \"./ui.file_manager.dialog_manager\";\nimport FileManagerFileUploader from \"./ui.file_manager.file_uploader\";\nimport { ErrorCode, FileManagerMessages } from \"./ui.file_manager.messages\";\n\nclass FileManagerEditingControl extends Widget {\n  _initMarkup() {\n    super._initMarkup();\n\n    this._initActions();\n\n    this._controller = this.option(\"controller\");\n\n    this._controller.on(\"EditActionStarting\", this._onEditActionStarting.bind(this));\n\n    this._controller.on(\"EditActionResultAcquired\", this._onEditActionResultAcquired.bind(this));\n\n    this._controller.on(\"EditActionItemError\", this._onEditActionItemError.bind(this));\n\n    this._controller.on(\"EditActionError\", this._onEditActionError.bind(this));\n\n    this._controller.on(\"CompleteEditActionItem\", this._onCompleteEditActionItem.bind(this));\n\n    this._controller.on(\"CompleteEditAction\", this._onCompleteEditAction.bind(this));\n\n    this._model = this.option(\"model\");\n    this._uploadOperationInfoMap = {};\n    this._dialogManager = new FileManagerDialogManager(this.$element(), {\n      chooseDirectoryDialog: {\n        provider: this._controller._fileProvider,\n        getDirectories: this._controller.getDirectories.bind(this._controller),\n        getCurrentDirectory: this._controller.getCurrentDirectory.bind(this._controller)\n      },\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      onDialogClosed: this._onDialogClosed.bind(this)\n    });\n    this._fileUploader = this._createFileUploader();\n    var notificationControl = this.option(\"notificationControl\");\n\n    if (notificationControl) {\n      this._initNotificationControl(notificationControl);\n    }\n\n    this._createMetadataMap();\n  }\n\n  _initNotificationControl(notificationControl) {\n    this._notificationControl = notificationControl;\n\n    this._notificationControl.option({\n      onOperationCanceled: _ref => {\n        var {\n          info: info\n        } = _ref;\n        return this._onCancelUploadSession(info);\n      },\n      onOperationItemCanceled: _ref2 => {\n        var {\n          item: item,\n          itemIndex: itemIndex\n        } = _ref2;\n        return this._onCancelFileUpload(item, itemIndex);\n      }\n    });\n  }\n\n  _getFileUploaderComponent() {\n    return FileManagerFileUploader;\n  }\n\n  _createFileUploader() {\n    var $fileUploader = $(\"<div>\").appendTo(this.$element());\n    return this._createComponent($fileUploader, this._getFileUploaderComponent(), {\n      getController: this._getFileUploaderController.bind(this),\n      dropZonePlaceholderContainer: this.option(\"uploadDropZonePlaceholderContainer\"),\n      onUploadSessionStarted: e => this._onUploadSessionStarted(e),\n      onUploadProgress: e => this._onUploadProgress(e)\n    });\n  }\n\n  setUploaderDropZone($element) {\n    this._fileUploader.option(\"dropZone\", $element);\n  }\n\n  setUploaderSplitterElement(element) {\n    this._fileUploader.option(\"splitterElement\", element);\n  }\n\n  _getFileUploaderController() {\n    var uploadDirectory = this.uploadDirectoryInfo.fileItem;\n    return {\n      chunkSize: this._controller.getFileUploadChunkSize(),\n      uploadFileChunk: (fileData, chunksInfo) => this._controller.uploadFileChunk(fileData, chunksInfo, uploadDirectory),\n      abortFileUpload: (fileData, chunksInfo) => this._controller.abortFileUpload(fileData, chunksInfo, uploadDirectory)\n    };\n  }\n\n  _createMetadataMap() {\n    this._metadataMap = {\n      create: {\n        action: arg => this._tryCreate(arg),\n        affectsAllItems: true,\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateCommonErrorMessage\")\n      },\n      rename: {\n        action: arg => this._tryRename(arg),\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameCommonErrorMessage\")\n      },\n      delete: {\n        action: arg => this._tryDelete(arg),\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemProcessingMessage\"),\n        multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemSuccessMessage\"),\n        multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteCommonErrorMessage\")\n      },\n      move: {\n        action: arg => this._tryMove(arg),\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemProcessingMessage\"),\n        multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemSuccessMessage\"),\n        multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveCommonErrorMessage\")\n      },\n      copy: {\n        action: arg => this._tryCopy(arg),\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemProcessingMessage\"),\n        multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemSuccessMessage\"),\n        multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsErrorMessage\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyCommonErrorMessage\")\n      },\n      upload: {\n        action: arg => this._tryUpload(arg),\n        allowCancel: true,\n        allowItemProgress: true,\n        singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemProcessingMessage\"),\n        multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsProcessingMessage\"),\n        singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemSuccessMessage\"),\n        multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsSuccessMessage\"),\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsErrorMessage\"),\n        canceledMessage: messageLocalization.format(\"dxFileManager-editingUploadCanceledMessage\")\n      },\n      download: {\n        action: arg => this._download(arg),\n        singleItemProcessingMessage: \"\",\n        multipleItemsProcessingMessage: \"\",\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDownloadSingleItemErrorMessage\"),\n        multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDownloadMultipleItemsErrorMessage\")\n      },\n      getItemContent: {\n        action: arg => this._getItemContent(arg)\n      },\n      getItems: {\n        singleItemProcessingMessage: \"\",\n        singleItemErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\"),\n        commonErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\")\n      }\n    };\n  }\n\n  getCommandActions() {\n    var result = {};\n    each(this._metadataMap, name => {\n      if (Object.prototype.hasOwnProperty.call(this._metadataMap, name)) {\n        result[name] = arg => this._executeAction(name, arg);\n      }\n    });\n    return result;\n  }\n\n  _executeAction(actionName, arg) {\n    var actionMetadata = this._metadataMap[actionName];\n    return actionMetadata ? actionMetadata.action(arg) : null;\n  }\n\n  _onCancelUploadSession(info) {\n    this._fileUploader.cancelUpload(info.uploadSessionId);\n  }\n\n  _onCancelFileUpload(item, itemIndex) {\n    this._fileUploader.cancelFileUpload(item.info.uploadSessionId, itemIndex);\n  }\n\n  _onUploadProgress(_ref3) {\n    var {\n      sessionId: sessionId,\n      fileIndex: fileIndex,\n      commonValue: commonValue,\n      fileValue: fileValue\n    } = _ref3;\n    var operationInfo = this._uploadOperationInfoMap[sessionId];\n\n    this._notificationControl.updateOperationItemProgress(operationInfo, fileIndex, 100 * fileValue, 100 * commonValue);\n  }\n\n  _onUploadSessionStarted(_ref4) {\n    var {\n      sessionInfo: sessionInfo\n    } = _ref4;\n\n    this._controller.processUploadSession(sessionInfo, this.uploadDirectoryInfo);\n  }\n\n  _onEditActionStarting(actionInfo) {\n    var actionMetadata = this._metadataMap[actionInfo.name];\n    var context = new FileManagerActionContext(actionMetadata, actionInfo.itemInfos, actionInfo.directory);\n\n    var operationInfo = this._notificationControl.addOperation(context.processingMessage, actionMetadata.allowCancel, !actionMetadata.allowItemProgress);\n\n    extend(actionInfo.customData, {\n      context: context,\n      operationInfo: operationInfo\n    });\n\n    switch (actionInfo.name) {\n      case \"upload\":\n        var sessionId = actionInfo.customData.sessionInfo.sessionId;\n        operationInfo.uploadSessionId = sessionId;\n        this._uploadOperationInfoMap[sessionId] = operationInfo;\n        break;\n\n      case \"rename\":\n        actionInfo.customData.context.itemNewName = actionInfo.customData.itemNewName;\n    }\n  }\n\n  _onEditActionResultAcquired(actionInfo) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n    context.singleRequest = actionInfo.singleRequest;\n    var details = context.itemInfos.map(itemInfo => this._getItemProgressDisplayInfo(itemInfo));\n\n    this._notificationControl.addOperationDetails(operationInfo, details, context.actionMetadata.allowCancel);\n  }\n\n  _onEditActionError(actionInfo, errorInfo) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n    context.singleRequest = actionInfo.singleRequest;\n\n    this._handleActionError(operationInfo, context, errorInfo);\n\n    this._completeAction(operationInfo, context);\n  }\n\n  _onEditActionItemError(actionInfo, errorInfo) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n\n    this._handleActionError(operationInfo, context, errorInfo);\n  }\n\n  _onCompleteEditActionItem(actionInfo, info) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n\n    if (!info.result || !info.result.canceled) {\n      context.completeOperationItem(info.index);\n\n      this._notificationControl.completeOperationItem(operationInfo, info.index, context.commonProgress);\n    }\n  }\n\n  _onCompleteEditAction(actionInfo) {\n    var {\n      context: context,\n      operationInfo: operationInfo\n    } = actionInfo.customData;\n\n    this._completeAction(operationInfo, context);\n\n    if (\"upload\" === actionInfo.name) {\n      delete this._uploadOperationInfoMap[actionInfo.customData.sessionInfo.sessionId];\n    }\n  }\n\n  _tryCreate(parentDirectories) {\n    var parentDirectoryInfo = parentDirectories && parentDirectories[0] || this._getCurrentDirectory();\n\n    var newDirName = messageLocalization.format(\"dxFileManager-newDirectoryName\");\n    return this._showDialog(this._dialogManager.getCreateItemDialog(), newDirName).then(_ref5 => {\n      var {\n        name: name\n      } = _ref5;\n      return this._controller.createDirectory(parentDirectoryInfo, name);\n    });\n  }\n\n  _tryRename(itemInfos) {\n    var itemInfo = itemInfos && itemInfos[0] || this._model.getMultipleSelectedItems()[0];\n\n    if (!itemInfo) {\n      return new Deferred().reject().promise();\n    }\n\n    return this._showDialog(this._dialogManager.getRenameItemDialog(), itemInfo.fileItem.name).then(_ref6 => {\n      var {\n        name: name\n      } = _ref6;\n      return this._controller.renameItem(itemInfo, name);\n    });\n  }\n\n  _tryDelete(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n    if (0 === itemInfos.length) {\n      return new Deferred().reject().promise();\n    }\n\n    var itemName = itemInfos[0].fileItem.name;\n    var itemCount = itemInfos.length;\n    return this._showDialog(this._dialogManager.getDeleteItemDialog(), {\n      itemName: itemName,\n      itemCount: itemCount\n    }).then(() => this._controller.deleteItems(itemInfos));\n  }\n\n  _tryMove(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n    if (0 === itemInfos.length) {\n      return new Deferred().reject().promise();\n    }\n\n    return this._showDialog(this._dialogManager.getMoveDialog(itemInfos)).then(_ref7 => {\n      var {\n        folder: folder\n      } = _ref7;\n      return this._controller.moveItems(itemInfos, folder);\n    });\n  }\n\n  _tryCopy(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n    if (0 === itemInfos.length) {\n      return new Deferred().reject().promise();\n    }\n\n    return this._showDialog(this._dialogManager.getCopyDialog(itemInfos)).then(_ref8 => {\n      var {\n        folder: folder\n      } = _ref8;\n      return this._controller.copyItems(itemInfos, folder);\n    });\n  }\n\n  _tryUpload(destinationFolder) {\n    this._uploadDirectoryInfo = null === destinationFolder || void 0 === destinationFolder ? void 0 : destinationFolder[0];\n\n    this._fileUploader.tryUpload();\n  }\n\n  _download(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n\n    if (0 === itemInfos.length) {\n      return new Deferred().reject().promise();\n    }\n\n    return this._controller.downloadItems(itemInfos);\n  }\n\n  _getItemContent(itemInfos) {\n    itemInfos = itemInfos || this._model.getMultipleSelectedItems();\n    return this._controller.getItemContent(itemInfos);\n  }\n\n  _completeAction(operationInfo, context) {\n    this._notificationControl.completeOperation(operationInfo, context.completionMessage, !context.success, context.statusText);\n\n    if (context.hasModifiedItems()) {\n      this._raiseOnSuccess(context.onlyFiles);\n    }\n  }\n\n  _handleActionError(operationInfo, context, errorInfo) {\n    operationInfo.hasError = true;\n\n    if (context.singleRequest) {\n      this._handleSingleRequestActionError(operationInfo, context, errorInfo);\n    } else {\n      this._handleMultipleRequestActionError(operationInfo, context, errorInfo);\n    }\n  }\n\n  _handleSingleRequestActionError(operationInfo, context, errorInfo) {\n    var itemInfo = context.getItemForSingleRequestError();\n    var itemName = context.getItemName(errorInfo.errorCode);\n\n    var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\n\n    context.processSingleRequestError(errorText);\n\n    var operationErrorInfo = this._getOperationErrorInfo(context);\n\n    this._notificationControl.completeSingleOperationWithError(operationInfo, operationErrorInfo);\n\n    if (context.multipleItems) {\n      this._raiseOnSuccess(context.onlyFiles);\n    }\n  }\n\n  _handleMultipleRequestActionError(operationInfo, context, errorInfo) {\n    var itemInfo = context.getItemForMultipleRequestError(errorInfo.index);\n    var itemName = context.getItemName(errorInfo.errorCode, errorInfo.index);\n\n    var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\n\n    context.processMultipleRequestError(errorInfo.index, errorText);\n\n    var operationErrorInfo = this._getOperationErrorInfo(context);\n\n    this._notificationControl.addOperationDetailsError(operationInfo, operationErrorInfo);\n  }\n\n  _getOperationErrorInfo(context) {\n    var detailError = context.errorState.currentDetailError;\n    return {\n      commonErrorText: context.errorState.commonErrorText,\n      item: detailError.itemInfo ? this._getItemProgressDisplayInfo(detailError.itemInfo) : null,\n      itemIndex: detailError.itemIndex,\n      detailErrorText: detailError.errorText\n    };\n  }\n\n  _getErrorText(errorInfo, itemInfo, itemName) {\n    var errorText = errorInfo.errorText || FileManagerMessages.get(errorInfo.errorCode, itemName);\n    var errorArgs = {\n      fileSystemItem: null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem,\n      errorCode: errorInfo.errorCode,\n      errorText: errorText\n    };\n\n    this._raiseOnError(errorArgs);\n\n    return errorArgs.errorText;\n  }\n\n  _getItemProgressDisplayInfo(itemInfo) {\n    return {\n      commonText: itemInfo.fileItem.name,\n      imageUrl: this._getItemThumbnail(itemInfo)\n    };\n  }\n\n  _showDialog(dialog, dialogArgument) {\n    this._dialogDeferred = new Deferred();\n    dialog.show(dialogArgument);\n    return this._dialogDeferred.promise();\n  }\n\n  _onDialogClosed(e) {\n    var result = e.dialogResult;\n\n    if (result) {\n      this._dialogDeferred.resolve(result);\n    } else {\n      this._dialogDeferred.reject();\n    }\n  }\n\n  updateDialogRtl(value) {\n    this._dialogManager.updateDialogRtl(value);\n  }\n\n  _getItemThumbnail(item) {\n    var itemThumbnailGetter = this.option(\"getItemThumbnail\");\n\n    if (!itemThumbnailGetter) {\n      return null;\n    }\n\n    var info = itemThumbnailGetter(item);\n    return info ? info.thumbnail : null;\n  }\n\n  _initActions() {\n    this._actions = {\n      onSuccess: this._createActionByOption(\"onSuccess\"),\n      onError: this._createActionByOption(\"onError\")\n    };\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      model: {\n        getMultipleSelectedItems: null\n      },\n      notificationControl: null,\n      getItemThumbnail: null,\n      onSuccess: null,\n      onError: null\n    });\n  }\n\n  _optionChanged(args) {\n    var name = args.name;\n\n    switch (name) {\n      case \"model\":\n        this.repaint();\n        break;\n\n      case \"notificationControl\":\n        this._initNotificationControl(args.value);\n\n        break;\n\n      case \"getItemThumbnail\":\n        break;\n\n      case \"uploadDropZonePlaceholderContainer\":\n        this._fileUploader.option(\"dropZonePlaceholderContainer\", args.value);\n\n        break;\n\n      case \"onSuccess\":\n      case \"onError\":\n        this._actions[name] = this._createActionByOption(name);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _raiseOnSuccess(updatedOnlyFiles) {\n    this._actions.onSuccess({\n      updatedOnlyFiles: updatedOnlyFiles\n    });\n  }\n\n  _raiseOnError(args) {\n    this._actions.onError(args);\n  }\n\n  _getCurrentDirectory() {\n    return this._controller.getCurrentDirectory();\n  }\n\n  get uploadDirectoryInfo() {\n    return this._uploadDirectoryInfo || this._getCurrentDirectory();\n  }\n\n}\n\nclass FileManagerActionContext {\n  constructor(actionMetadata, itemInfos, directoryInfo) {\n    this._actionMetadata = actionMetadata;\n    this._itemInfos = itemInfos;\n    this._onlyFiles = !this._actionMetadata.affectsAllItems && this._itemInfos.every(info => !info.fileItem.isDirectory);\n    this._items = this._itemInfos.map(itemInfo => itemInfo.fileItem);\n    this._multipleItems = this._items.length > 1;\n    this._location = directoryInfo.getDisplayName();\n    this._singleRequest = true;\n    this._completedItems = [];\n    this._commonProgress = 0;\n    this._errorState = {\n      failedCount: 0\n    };\n    this._itemNewName = \"\";\n  }\n\n  completeOperationItem(itemIndex) {\n    if (this._singleRequest) {\n      this._completedItems = [...this._items];\n    } else {\n      var item = this._items[itemIndex];\n\n      this._completedItems.push(item);\n    }\n\n    if (!this._actionMetadata.allowItemProgress) {\n      this._commonProgress = this._completedItems.length / this._items.length * 100;\n    }\n  }\n\n  processSingleRequestError(errorText) {\n    this._errorState.failedCount = 1;\n    this._errorState.commonErrorText = this._multipleItems ? this._actionMetadata.commonErrorMessage : this._actionMetadata.singleItemErrorMessage;\n    var itemIndex = this._multipleItems ? -1 : 1;\n    var itemInfo = this.getItemForSingleRequestError();\n\n    this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n  }\n\n  processMultipleRequestError(itemIndex, errorText) {\n    this._errorState.failedCount++;\n    this._errorState.commonErrorText = this._errorState.failedCount > 1 ? format(this._actionMetadata.multipleItemsErrorMessage, this._errorState.failedCount) : this._actionMetadata.singleItemErrorMessage;\n    var itemInfo = this.getItemForMultipleRequestError(itemIndex);\n\n    this._setCurrentDetailError(itemIndex, itemInfo, errorText);\n  }\n\n  hasModifiedItems() {\n    return this._hasCompletedItems() || this._singleRequest && !this.success && this._multipleItems;\n  }\n\n  getItemForSingleRequestError() {\n    return this._multipleItems ? null : this._itemInfos[0];\n  }\n\n  getItemForMultipleRequestError(itemIndex) {\n    return this._itemInfos[itemIndex];\n  }\n\n  getItemName(errorCode, itemIndex) {\n    var itemInfo = this.singleRequest ? this.getItemForSingleRequestError() : this.getItemForMultipleRequestError(itemIndex);\n    var result = null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem.name;\n\n    if (this.itemNewName && this._isItemExistsErrorCode(errorCode)) {\n      result = this.itemNewName;\n    }\n\n    return result;\n  }\n\n  _isItemExistsErrorCode(errorCode) {\n    return errorCode === ErrorCode.DirectoryExists || errorCode === ErrorCode.FileExists;\n  }\n\n  _setCurrentDetailError(itemIndex, itemInfo, errorText) {\n    this._errorState.currentDetailError = {\n      itemIndex: itemIndex,\n      itemInfo: itemInfo,\n      errorText: errorText\n    };\n  }\n\n  _hasCompletedItems() {\n    return this._completedItems.length > 0;\n  }\n\n  get actionMetadata() {\n    return this._actionMetadata;\n  }\n\n  get itemInfos() {\n    return this._itemInfos;\n  }\n\n  get itemNewName() {\n    return this._itemNewName;\n  }\n\n  set itemNewName(value) {\n    this._itemNewName = value;\n  }\n\n  get errorState() {\n    return this._errorState;\n  }\n\n  get singleRequest() {\n    return this._singleRequest;\n  }\n\n  set singleRequest(value) {\n    this._singleRequest = value;\n  }\n\n  get multipleItems() {\n    return this._multipleItems;\n  }\n\n  get onlyFiles() {\n    return this._onlyFiles;\n  }\n\n  get processingMessage() {\n    return this._multipleItems ? format(this._actionMetadata.multipleItemsProcessingMessage, this._items.length, this._location) : format(this._actionMetadata.singleItemProcessingMessage, this._location);\n  }\n\n  get successMessage() {\n    if (this._hasCompletedItems()) {\n      return this._multipleItems ? format(this._actionMetadata.multipleItemsSuccessMessage, this._completedItems.length, this._location) : format(this._actionMetadata.singleItemSuccessMessage, this._location);\n    } else {\n      return this._multipleItems ? format(this._actionMetadata.multipleItemsErrorMessage, this._items.length) : this._actionMetadata.singleItemErrorMessage;\n    }\n  }\n\n  get completionMessage() {\n    return this.success ? this.successMessage : this.errorState.commonErrorText;\n  }\n\n  get statusText() {\n    return this.success && !this._hasCompletedItems() ? this._actionMetadata.canceledMessage : void 0;\n  }\n\n  get commonProgress() {\n    return this._commonProgress;\n  }\n\n  get success() {\n    return !this._errorState.failedCount;\n  }\n\n}\n\nexport default FileManagerEditingControl;","map":{"version":3,"names":["$","extend","Deferred","each","format","messageLocalization","Widget","FileManagerDialogManager","FileManagerFileUploader","ErrorCode","FileManagerMessages","FileManagerEditingControl","_initMarkup","_initActions","_controller","option","on","_onEditActionStarting","bind","_onEditActionResultAcquired","_onEditActionItemError","_onEditActionError","_onCompleteEditActionItem","_onCompleteEditAction","_model","_uploadOperationInfoMap","_dialogManager","$element","chooseDirectoryDialog","provider","_fileProvider","getDirectories","getCurrentDirectory","rtlEnabled","onDialogClosed","_onDialogClosed","_fileUploader","_createFileUploader","notificationControl","_initNotificationControl","_createMetadataMap","_notificationControl","onOperationCanceled","_ref","info","_onCancelUploadSession","onOperationItemCanceled","_ref2","item","itemIndex","_onCancelFileUpload","_getFileUploaderComponent","$fileUploader","appendTo","_createComponent","getController","_getFileUploaderController","dropZonePlaceholderContainer","onUploadSessionStarted","e","_onUploadSessionStarted","onUploadProgress","_onUploadProgress","setUploaderDropZone","setUploaderSplitterElement","element","uploadDirectory","uploadDirectoryInfo","fileItem","chunkSize","getFileUploadChunkSize","uploadFileChunk","fileData","chunksInfo","abortFileUpload","_metadataMap","create","action","arg","_tryCreate","affectsAllItems","singleItemProcessingMessage","singleItemSuccessMessage","singleItemErrorMessage","commonErrorMessage","rename","_tryRename","delete","_tryDelete","multipleItemsProcessingMessage","multipleItemsSuccessMessage","multipleItemsErrorMessage","move","_tryMove","copy","_tryCopy","upload","_tryUpload","allowCancel","allowItemProgress","canceledMessage","download","_download","getItemContent","_getItemContent","getItems","getCommandActions","result","name","Object","prototype","hasOwnProperty","call","_executeAction","actionName","actionMetadata","cancelUpload","uploadSessionId","cancelFileUpload","_ref3","sessionId","fileIndex","commonValue","fileValue","operationInfo","updateOperationItemProgress","_ref4","sessionInfo","processUploadSession","actionInfo","context","FileManagerActionContext","itemInfos","directory","addOperation","processingMessage","customData","itemNewName","singleRequest","details","map","itemInfo","_getItemProgressDisplayInfo","addOperationDetails","errorInfo","_handleActionError","_completeAction","canceled","completeOperationItem","index","commonProgress","parentDirectories","parentDirectoryInfo","_getCurrentDirectory","newDirName","_showDialog","getCreateItemDialog","then","_ref5","createDirectory","getMultipleSelectedItems","reject","promise","getRenameItemDialog","_ref6","renameItem","length","itemName","itemCount","getDeleteItemDialog","deleteItems","getMoveDialog","_ref7","folder","moveItems","getCopyDialog","_ref8","copyItems","destinationFolder","_uploadDirectoryInfo","tryUpload","downloadItems","completeOperation","completionMessage","success","statusText","hasModifiedItems","_raiseOnSuccess","onlyFiles","hasError","_handleSingleRequestActionError","_handleMultipleRequestActionError","getItemForSingleRequestError","getItemName","errorCode","errorText","_getErrorText","processSingleRequestError","operationErrorInfo","_getOperationErrorInfo","completeSingleOperationWithError","multipleItems","getItemForMultipleRequestError","processMultipleRequestError","addOperationDetailsError","detailError","errorState","currentDetailError","commonErrorText","detailErrorText","get","errorArgs","fileSystemItem","_raiseOnError","commonText","imageUrl","_getItemThumbnail","dialog","dialogArgument","_dialogDeferred","show","dialogResult","resolve","updateDialogRtl","value","itemThumbnailGetter","thumbnail","_actions","onSuccess","_createActionByOption","onError","_getDefaultOptions","model","getItemThumbnail","_optionChanged","args","repaint","updatedOnlyFiles","constructor","directoryInfo","_actionMetadata","_itemInfos","_onlyFiles","every","isDirectory","_items","_multipleItems","_location","getDisplayName","_singleRequest","_completedItems","_commonProgress","_errorState","failedCount","_itemNewName","push","_setCurrentDetailError","_hasCompletedItems","_isItemExistsErrorCode","DirectoryExists","FileExists","successMessage"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/file_manager/ui.file_manager.editing.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/file_manager/ui.file_manager.editing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    format\r\n} from \"../../core/utils/string\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport FileManagerDialogManager from \"./ui.file_manager.dialog_manager\";\r\nimport FileManagerFileUploader from \"./ui.file_manager.file_uploader\";\r\nimport {\r\n    ErrorCode,\r\n    FileManagerMessages\r\n} from \"./ui.file_manager.messages\";\r\nclass FileManagerEditingControl extends Widget {\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._initActions();\r\n        this._controller = this.option(\"controller\");\r\n        this._controller.on(\"EditActionStarting\", this._onEditActionStarting.bind(this));\r\n        this._controller.on(\"EditActionResultAcquired\", this._onEditActionResultAcquired.bind(this));\r\n        this._controller.on(\"EditActionItemError\", this._onEditActionItemError.bind(this));\r\n        this._controller.on(\"EditActionError\", this._onEditActionError.bind(this));\r\n        this._controller.on(\"CompleteEditActionItem\", this._onCompleteEditActionItem.bind(this));\r\n        this._controller.on(\"CompleteEditAction\", this._onCompleteEditAction.bind(this));\r\n        this._model = this.option(\"model\");\r\n        this._uploadOperationInfoMap = {};\r\n        this._dialogManager = new FileManagerDialogManager(this.$element(), {\r\n            chooseDirectoryDialog: {\r\n                provider: this._controller._fileProvider,\r\n                getDirectories: this._controller.getDirectories.bind(this._controller),\r\n                getCurrentDirectory: this._controller.getCurrentDirectory.bind(this._controller)\r\n            },\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            onDialogClosed: this._onDialogClosed.bind(this)\r\n        });\r\n        this._fileUploader = this._createFileUploader();\r\n        var notificationControl = this.option(\"notificationControl\");\r\n        if (notificationControl) {\r\n            this._initNotificationControl(notificationControl)\r\n        }\r\n        this._createMetadataMap()\r\n    }\r\n    _initNotificationControl(notificationControl) {\r\n        this._notificationControl = notificationControl;\r\n        this._notificationControl.option({\r\n            onOperationCanceled: _ref => {\r\n                var {\r\n                    info: info\r\n                } = _ref;\r\n                return this._onCancelUploadSession(info)\r\n            },\r\n            onOperationItemCanceled: _ref2 => {\r\n                var {\r\n                    item: item,\r\n                    itemIndex: itemIndex\r\n                } = _ref2;\r\n                return this._onCancelFileUpload(item, itemIndex)\r\n            }\r\n        })\r\n    }\r\n    _getFileUploaderComponent() {\r\n        return FileManagerFileUploader\r\n    }\r\n    _createFileUploader() {\r\n        var $fileUploader = $(\"<div>\").appendTo(this.$element());\r\n        return this._createComponent($fileUploader, this._getFileUploaderComponent(), {\r\n            getController: this._getFileUploaderController.bind(this),\r\n            dropZonePlaceholderContainer: this.option(\"uploadDropZonePlaceholderContainer\"),\r\n            onUploadSessionStarted: e => this._onUploadSessionStarted(e),\r\n            onUploadProgress: e => this._onUploadProgress(e)\r\n        })\r\n    }\r\n    setUploaderDropZone($element) {\r\n        this._fileUploader.option(\"dropZone\", $element)\r\n    }\r\n    setUploaderSplitterElement(element) {\r\n        this._fileUploader.option(\"splitterElement\", element)\r\n    }\r\n    _getFileUploaderController() {\r\n        var uploadDirectory = this.uploadDirectoryInfo.fileItem;\r\n        return {\r\n            chunkSize: this._controller.getFileUploadChunkSize(),\r\n            uploadFileChunk: (fileData, chunksInfo) => this._controller.uploadFileChunk(fileData, chunksInfo, uploadDirectory),\r\n            abortFileUpload: (fileData, chunksInfo) => this._controller.abortFileUpload(fileData, chunksInfo, uploadDirectory)\r\n        }\r\n    }\r\n    _createMetadataMap() {\r\n        this._metadataMap = {\r\n            create: {\r\n                action: arg => this._tryCreate(arg),\r\n                affectsAllItems: true,\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateSingleItemErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCreateCommonErrorMessage\")\r\n            },\r\n            rename: {\r\n                action: arg => this._tryRename(arg),\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameSingleItemErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingRenameCommonErrorMessage\")\r\n            },\r\n            delete: {\r\n                action: arg => this._tryDelete(arg),\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemProcessingMessage\"),\r\n                multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemSuccessMessage\"),\r\n                multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteSingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteMultipleItemsErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingDeleteCommonErrorMessage\")\r\n            },\r\n            move: {\r\n                action: arg => this._tryMove(arg),\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemProcessingMessage\"),\r\n                multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemSuccessMessage\"),\r\n                multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveSingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveMultipleItemsErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingMoveCommonErrorMessage\")\r\n            },\r\n            copy: {\r\n                action: arg => this._tryCopy(arg),\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemProcessingMessage\"),\r\n                multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemSuccessMessage\"),\r\n                multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingCopySingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyMultipleItemsErrorMessage\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-editingCopyCommonErrorMessage\")\r\n            },\r\n            upload: {\r\n                action: arg => this._tryUpload(arg),\r\n                allowCancel: true,\r\n                allowItemProgress: true,\r\n                singleItemProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemProcessingMessage\"),\r\n                multipleItemsProcessingMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsProcessingMessage\"),\r\n                singleItemSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemSuccessMessage\"),\r\n                multipleItemsSuccessMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsSuccessMessage\"),\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadSingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingUploadMultipleItemsErrorMessage\"),\r\n                canceledMessage: messageLocalization.format(\"dxFileManager-editingUploadCanceledMessage\")\r\n            },\r\n            download: {\r\n                action: arg => this._download(arg),\r\n                singleItemProcessingMessage: \"\",\r\n                multipleItemsProcessingMessage: \"\",\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-editingDownloadSingleItemErrorMessage\"),\r\n                multipleItemsErrorMessage: messageLocalization.format(\"dxFileManager-editingDownloadMultipleItemsErrorMessage\")\r\n            },\r\n            getItemContent: {\r\n                action: arg => this._getItemContent(arg)\r\n            },\r\n            getItems: {\r\n                singleItemProcessingMessage: \"\",\r\n                singleItemErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\"),\r\n                commonErrorMessage: messageLocalization.format(\"dxFileManager-errorDirectoryOpenFailed\")\r\n            }\r\n        }\r\n    }\r\n    getCommandActions() {\r\n        var result = {};\r\n        each(this._metadataMap, name => {\r\n            if (Object.prototype.hasOwnProperty.call(this._metadataMap, name)) {\r\n                result[name] = arg => this._executeAction(name, arg)\r\n            }\r\n        });\r\n        return result\r\n    }\r\n    _executeAction(actionName, arg) {\r\n        var actionMetadata = this._metadataMap[actionName];\r\n        return actionMetadata ? actionMetadata.action(arg) : null\r\n    }\r\n    _onCancelUploadSession(info) {\r\n        this._fileUploader.cancelUpload(info.uploadSessionId)\r\n    }\r\n    _onCancelFileUpload(item, itemIndex) {\r\n        this._fileUploader.cancelFileUpload(item.info.uploadSessionId, itemIndex)\r\n    }\r\n    _onUploadProgress(_ref3) {\r\n        var {\r\n            sessionId: sessionId,\r\n            fileIndex: fileIndex,\r\n            commonValue: commonValue,\r\n            fileValue: fileValue\r\n        } = _ref3;\r\n        var operationInfo = this._uploadOperationInfoMap[sessionId];\r\n        this._notificationControl.updateOperationItemProgress(operationInfo, fileIndex, 100 * fileValue, 100 * commonValue)\r\n    }\r\n    _onUploadSessionStarted(_ref4) {\r\n        var {\r\n            sessionInfo: sessionInfo\r\n        } = _ref4;\r\n        this._controller.processUploadSession(sessionInfo, this.uploadDirectoryInfo)\r\n    }\r\n    _onEditActionStarting(actionInfo) {\r\n        var actionMetadata = this._metadataMap[actionInfo.name];\r\n        var context = new FileManagerActionContext(actionMetadata, actionInfo.itemInfos, actionInfo.directory);\r\n        var operationInfo = this._notificationControl.addOperation(context.processingMessage, actionMetadata.allowCancel, !actionMetadata.allowItemProgress);\r\n        extend(actionInfo.customData, {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        });\r\n        switch (actionInfo.name) {\r\n            case \"upload\":\r\n                var sessionId = actionInfo.customData.sessionInfo.sessionId;\r\n                operationInfo.uploadSessionId = sessionId;\r\n                this._uploadOperationInfoMap[sessionId] = operationInfo;\r\n                break;\r\n            case \"rename\":\r\n                actionInfo.customData.context.itemNewName = actionInfo.customData.itemNewName\r\n        }\r\n    }\r\n    _onEditActionResultAcquired(actionInfo) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        context.singleRequest = actionInfo.singleRequest;\r\n        var details = context.itemInfos.map(itemInfo => this._getItemProgressDisplayInfo(itemInfo));\r\n        this._notificationControl.addOperationDetails(operationInfo, details, context.actionMetadata.allowCancel)\r\n    }\r\n    _onEditActionError(actionInfo, errorInfo) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        context.singleRequest = actionInfo.singleRequest;\r\n        this._handleActionError(operationInfo, context, errorInfo);\r\n        this._completeAction(operationInfo, context)\r\n    }\r\n    _onEditActionItemError(actionInfo, errorInfo) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        this._handleActionError(operationInfo, context, errorInfo)\r\n    }\r\n    _onCompleteEditActionItem(actionInfo, info) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        if (!info.result || !info.result.canceled) {\r\n            context.completeOperationItem(info.index);\r\n            this._notificationControl.completeOperationItem(operationInfo, info.index, context.commonProgress)\r\n        }\r\n    }\r\n    _onCompleteEditAction(actionInfo) {\r\n        var {\r\n            context: context,\r\n            operationInfo: operationInfo\r\n        } = actionInfo.customData;\r\n        this._completeAction(operationInfo, context);\r\n        if (\"upload\" === actionInfo.name) {\r\n            delete this._uploadOperationInfoMap[actionInfo.customData.sessionInfo.sessionId]\r\n        }\r\n    }\r\n    _tryCreate(parentDirectories) {\r\n        var parentDirectoryInfo = parentDirectories && parentDirectories[0] || this._getCurrentDirectory();\r\n        var newDirName = messageLocalization.format(\"dxFileManager-newDirectoryName\");\r\n        return this._showDialog(this._dialogManager.getCreateItemDialog(), newDirName).then(_ref5 => {\r\n            var {\r\n                name: name\r\n            } = _ref5;\r\n            return this._controller.createDirectory(parentDirectoryInfo, name)\r\n        })\r\n    }\r\n    _tryRename(itemInfos) {\r\n        var itemInfo = itemInfos && itemInfos[0] || this._model.getMultipleSelectedItems()[0];\r\n        if (!itemInfo) {\r\n            return (new Deferred).reject().promise()\r\n        }\r\n        return this._showDialog(this._dialogManager.getRenameItemDialog(), itemInfo.fileItem.name).then(_ref6 => {\r\n            var {\r\n                name: name\r\n            } = _ref6;\r\n            return this._controller.renameItem(itemInfo, name)\r\n        })\r\n    }\r\n    _tryDelete(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        if (0 === itemInfos.length) {\r\n            return (new Deferred).reject().promise()\r\n        }\r\n        var itemName = itemInfos[0].fileItem.name;\r\n        var itemCount = itemInfos.length;\r\n        return this._showDialog(this._dialogManager.getDeleteItemDialog(), {\r\n            itemName: itemName,\r\n            itemCount: itemCount\r\n        }).then(() => this._controller.deleteItems(itemInfos))\r\n    }\r\n    _tryMove(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        if (0 === itemInfos.length) {\r\n            return (new Deferred).reject().promise()\r\n        }\r\n        return this._showDialog(this._dialogManager.getMoveDialog(itemInfos)).then(_ref7 => {\r\n            var {\r\n                folder: folder\r\n            } = _ref7;\r\n            return this._controller.moveItems(itemInfos, folder)\r\n        })\r\n    }\r\n    _tryCopy(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        if (0 === itemInfos.length) {\r\n            return (new Deferred).reject().promise()\r\n        }\r\n        return this._showDialog(this._dialogManager.getCopyDialog(itemInfos)).then(_ref8 => {\r\n            var {\r\n                folder: folder\r\n            } = _ref8;\r\n            return this._controller.copyItems(itemInfos, folder)\r\n        })\r\n    }\r\n    _tryUpload(destinationFolder) {\r\n        this._uploadDirectoryInfo = null === destinationFolder || void 0 === destinationFolder ? void 0 : destinationFolder[0];\r\n        this._fileUploader.tryUpload()\r\n    }\r\n    _download(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        if (0 === itemInfos.length) {\r\n            return (new Deferred).reject().promise()\r\n        }\r\n        return this._controller.downloadItems(itemInfos)\r\n    }\r\n    _getItemContent(itemInfos) {\r\n        itemInfos = itemInfos || this._model.getMultipleSelectedItems();\r\n        return this._controller.getItemContent(itemInfos)\r\n    }\r\n    _completeAction(operationInfo, context) {\r\n        this._notificationControl.completeOperation(operationInfo, context.completionMessage, !context.success, context.statusText);\r\n        if (context.hasModifiedItems()) {\r\n            this._raiseOnSuccess(context.onlyFiles)\r\n        }\r\n    }\r\n    _handleActionError(operationInfo, context, errorInfo) {\r\n        operationInfo.hasError = true;\r\n        if (context.singleRequest) {\r\n            this._handleSingleRequestActionError(operationInfo, context, errorInfo)\r\n        } else {\r\n            this._handleMultipleRequestActionError(operationInfo, context, errorInfo)\r\n        }\r\n    }\r\n    _handleSingleRequestActionError(operationInfo, context, errorInfo) {\r\n        var itemInfo = context.getItemForSingleRequestError();\r\n        var itemName = context.getItemName(errorInfo.errorCode);\r\n        var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\r\n        context.processSingleRequestError(errorText);\r\n        var operationErrorInfo = this._getOperationErrorInfo(context);\r\n        this._notificationControl.completeSingleOperationWithError(operationInfo, operationErrorInfo);\r\n        if (context.multipleItems) {\r\n            this._raiseOnSuccess(context.onlyFiles)\r\n        }\r\n    }\r\n    _handleMultipleRequestActionError(operationInfo, context, errorInfo) {\r\n        var itemInfo = context.getItemForMultipleRequestError(errorInfo.index);\r\n        var itemName = context.getItemName(errorInfo.errorCode, errorInfo.index);\r\n        var errorText = this._getErrorText(errorInfo, itemInfo, itemName);\r\n        context.processMultipleRequestError(errorInfo.index, errorText);\r\n        var operationErrorInfo = this._getOperationErrorInfo(context);\r\n        this._notificationControl.addOperationDetailsError(operationInfo, operationErrorInfo)\r\n    }\r\n    _getOperationErrorInfo(context) {\r\n        var detailError = context.errorState.currentDetailError;\r\n        return {\r\n            commonErrorText: context.errorState.commonErrorText,\r\n            item: detailError.itemInfo ? this._getItemProgressDisplayInfo(detailError.itemInfo) : null,\r\n            itemIndex: detailError.itemIndex,\r\n            detailErrorText: detailError.errorText\r\n        }\r\n    }\r\n    _getErrorText(errorInfo, itemInfo, itemName) {\r\n        var errorText = errorInfo.errorText || FileManagerMessages.get(errorInfo.errorCode, itemName);\r\n        var errorArgs = {\r\n            fileSystemItem: null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem,\r\n            errorCode: errorInfo.errorCode,\r\n            errorText: errorText\r\n        };\r\n        this._raiseOnError(errorArgs);\r\n        return errorArgs.errorText\r\n    }\r\n    _getItemProgressDisplayInfo(itemInfo) {\r\n        return {\r\n            commonText: itemInfo.fileItem.name,\r\n            imageUrl: this._getItemThumbnail(itemInfo)\r\n        }\r\n    }\r\n    _showDialog(dialog, dialogArgument) {\r\n        this._dialogDeferred = new Deferred;\r\n        dialog.show(dialogArgument);\r\n        return this._dialogDeferred.promise()\r\n    }\r\n    _onDialogClosed(e) {\r\n        var result = e.dialogResult;\r\n        if (result) {\r\n            this._dialogDeferred.resolve(result)\r\n        } else {\r\n            this._dialogDeferred.reject()\r\n        }\r\n    }\r\n    updateDialogRtl(value) {\r\n        this._dialogManager.updateDialogRtl(value)\r\n    }\r\n    _getItemThumbnail(item) {\r\n        var itemThumbnailGetter = this.option(\"getItemThumbnail\");\r\n        if (!itemThumbnailGetter) {\r\n            return null\r\n        }\r\n        var info = itemThumbnailGetter(item);\r\n        return info ? info.thumbnail : null\r\n    }\r\n    _initActions() {\r\n        this._actions = {\r\n            onSuccess: this._createActionByOption(\"onSuccess\"),\r\n            onError: this._createActionByOption(\"onError\")\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            model: {\r\n                getMultipleSelectedItems: null\r\n            },\r\n            notificationControl: null,\r\n            getItemThumbnail: null,\r\n            onSuccess: null,\r\n            onError: null\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"model\":\r\n                this.repaint();\r\n                break;\r\n            case \"notificationControl\":\r\n                this._initNotificationControl(args.value);\r\n                break;\r\n            case \"getItemThumbnail\":\r\n                break;\r\n            case \"uploadDropZonePlaceholderContainer\":\r\n                this._fileUploader.option(\"dropZonePlaceholderContainer\", args.value);\r\n                break;\r\n            case \"onSuccess\":\r\n            case \"onError\":\r\n                this._actions[name] = this._createActionByOption(name);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _raiseOnSuccess(updatedOnlyFiles) {\r\n        this._actions.onSuccess({\r\n            updatedOnlyFiles: updatedOnlyFiles\r\n        })\r\n    }\r\n    _raiseOnError(args) {\r\n        this._actions.onError(args)\r\n    }\r\n    _getCurrentDirectory() {\r\n        return this._controller.getCurrentDirectory()\r\n    }\r\n    get uploadDirectoryInfo() {\r\n        return this._uploadDirectoryInfo || this._getCurrentDirectory()\r\n    }\r\n}\r\nclass FileManagerActionContext {\r\n    constructor(actionMetadata, itemInfos, directoryInfo) {\r\n        this._actionMetadata = actionMetadata;\r\n        this._itemInfos = itemInfos;\r\n        this._onlyFiles = !this._actionMetadata.affectsAllItems && this._itemInfos.every(info => !info.fileItem.isDirectory);\r\n        this._items = this._itemInfos.map(itemInfo => itemInfo.fileItem);\r\n        this._multipleItems = this._items.length > 1;\r\n        this._location = directoryInfo.getDisplayName();\r\n        this._singleRequest = true;\r\n        this._completedItems = [];\r\n        this._commonProgress = 0;\r\n        this._errorState = {\r\n            failedCount: 0\r\n        };\r\n        this._itemNewName = \"\"\r\n    }\r\n    completeOperationItem(itemIndex) {\r\n        if (this._singleRequest) {\r\n            this._completedItems = [...this._items]\r\n        } else {\r\n            var item = this._items[itemIndex];\r\n            this._completedItems.push(item)\r\n        }\r\n        if (!this._actionMetadata.allowItemProgress) {\r\n            this._commonProgress = this._completedItems.length / this._items.length * 100\r\n        }\r\n    }\r\n    processSingleRequestError(errorText) {\r\n        this._errorState.failedCount = 1;\r\n        this._errorState.commonErrorText = this._multipleItems ? this._actionMetadata.commonErrorMessage : this._actionMetadata.singleItemErrorMessage;\r\n        var itemIndex = this._multipleItems ? -1 : 1;\r\n        var itemInfo = this.getItemForSingleRequestError();\r\n        this._setCurrentDetailError(itemIndex, itemInfo, errorText)\r\n    }\r\n    processMultipleRequestError(itemIndex, errorText) {\r\n        this._errorState.failedCount++;\r\n        this._errorState.commonErrorText = this._errorState.failedCount > 1 ? format(this._actionMetadata.multipleItemsErrorMessage, this._errorState.failedCount) : this._actionMetadata.singleItemErrorMessage;\r\n        var itemInfo = this.getItemForMultipleRequestError(itemIndex);\r\n        this._setCurrentDetailError(itemIndex, itemInfo, errorText)\r\n    }\r\n    hasModifiedItems() {\r\n        return this._hasCompletedItems() || this._singleRequest && !this.success && this._multipleItems\r\n    }\r\n    getItemForSingleRequestError() {\r\n        return this._multipleItems ? null : this._itemInfos[0]\r\n    }\r\n    getItemForMultipleRequestError(itemIndex) {\r\n        return this._itemInfos[itemIndex]\r\n    }\r\n    getItemName(errorCode, itemIndex) {\r\n        var itemInfo = this.singleRequest ? this.getItemForSingleRequestError() : this.getItemForMultipleRequestError(itemIndex);\r\n        var result = null === itemInfo || void 0 === itemInfo ? void 0 : itemInfo.fileItem.name;\r\n        if (this.itemNewName && this._isItemExistsErrorCode(errorCode)) {\r\n            result = this.itemNewName\r\n        }\r\n        return result\r\n    }\r\n    _isItemExistsErrorCode(errorCode) {\r\n        return errorCode === ErrorCode.DirectoryExists || errorCode === ErrorCode.FileExists\r\n    }\r\n    _setCurrentDetailError(itemIndex, itemInfo, errorText) {\r\n        this._errorState.currentDetailError = {\r\n            itemIndex: itemIndex,\r\n            itemInfo: itemInfo,\r\n            errorText: errorText\r\n        }\r\n    }\r\n    _hasCompletedItems() {\r\n        return this._completedItems.length > 0\r\n    }\r\n    get actionMetadata() {\r\n        return this._actionMetadata\r\n    }\r\n    get itemInfos() {\r\n        return this._itemInfos\r\n    }\r\n    get itemNewName() {\r\n        return this._itemNewName\r\n    }\r\n    set itemNewName(value) {\r\n        this._itemNewName = value\r\n    }\r\n    get errorState() {\r\n        return this._errorState\r\n    }\r\n    get singleRequest() {\r\n        return this._singleRequest\r\n    }\r\n    set singleRequest(value) {\r\n        this._singleRequest = value\r\n    }\r\n    get multipleItems() {\r\n        return this._multipleItems\r\n    }\r\n    get onlyFiles() {\r\n        return this._onlyFiles\r\n    }\r\n    get processingMessage() {\r\n        return this._multipleItems ? format(this._actionMetadata.multipleItemsProcessingMessage, this._items.length, this._location) : format(this._actionMetadata.singleItemProcessingMessage, this._location)\r\n    }\r\n    get successMessage() {\r\n        if (this._hasCompletedItems()) {\r\n            return this._multipleItems ? format(this._actionMetadata.multipleItemsSuccessMessage, this._completedItems.length, this._location) : format(this._actionMetadata.singleItemSuccessMessage, this._location)\r\n        } else {\r\n            return this._multipleItems ? format(this._actionMetadata.multipleItemsErrorMessage, this._items.length) : this._actionMetadata.singleItemErrorMessage\r\n        }\r\n    }\r\n    get completionMessage() {\r\n        return this.success ? this.successMessage : this.errorState.commonErrorText\r\n    }\r\n    get statusText() {\r\n        return this.success && !this._hasCompletedItems() ? this._actionMetadata.canceledMessage : void 0\r\n    }\r\n    get commonProgress() {\r\n        return this._commonProgress\r\n    }\r\n    get success() {\r\n        return !this._errorState.failedCount\r\n    }\r\n}\r\nexport default FileManagerEditingControl;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}