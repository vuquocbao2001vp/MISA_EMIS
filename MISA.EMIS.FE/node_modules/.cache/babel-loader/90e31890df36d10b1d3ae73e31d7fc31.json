{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { AppointmentViewModelGenerator } from \"./appointments/viewModelGenerator\";\nimport { getGroupCount } from \"./resources/utils\";\nimport { getCellWidth, getCellHeight, getAllDayHeight } from \"./workspaces/helpers/positionHelper\";\nimport { getCellDuration } from \"../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getAppointmentRenderingStrategyName } from \"../../renovation/ui/scheduler/model/appointments\";\n\nclass AppointmentLayoutManager {\n  constructor(instance) {\n    this.instance = instance;\n    this.appointmentViewModel = new AppointmentViewModelGenerator();\n  }\n\n  get appointmentRenderingStrategyName() {\n    return getAppointmentRenderingStrategyName(this.instance.currentViewType);\n  }\n\n  getCellDimensions(options) {\n    if (this.instance._workSpace) {\n      return {\n        width: this.instance._workSpace.getCellWidth(),\n        height: this.instance._workSpace.getCellHeight(),\n        allDayHeight: this.instance._workSpace.getAllDayHeight()\n      };\n    }\n  }\n\n  _getRenderingStrategyOptions() {\n    var workspace = this.instance.getWorkSpace();\n    var {\n      virtualScrollingDispatcher: virtualScrollingDispatcher\n    } = this.instance.getWorkSpace();\n    var {\n      cellCountInsideLeftVirtualCell: cellCountInsideLeftVirtualCell,\n      cellCountInsideTopVirtualRow: cellCountInsideTopVirtualRow\n    } = virtualScrollingDispatcher;\n    var groupCount = getGroupCount(this.instance.option(\"loadedResources\"));\n    var DOMMetaData = workspace.getDOMElementsMetaData();\n    var allDayHeight = getAllDayHeight(workspace.option(\"showAllDayPanel\"), workspace._isVerticalGroupedWorkSpace(), DOMMetaData);\n\n    var rowCount = workspace._getRowCount();\n\n    var {\n      positionHelper: positionHelper,\n      viewDataProvider: viewDataProvider\n    } = workspace;\n    var visibleDayDuration = viewDataProvider.getVisibleDayDuration(workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\n    var cellDuration = getCellDuration(workspace.type, workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\n    return {\n      resources: this.instance.option(\"resources\"),\n      loadedResources: this.instance.option(\"loadedResources\"),\n      getAppointmentColor: this.instance.createGetAppointmentColor(),\n      dataAccessors: this.instance._dataAccessors,\n      isRenovatedAppointments: this.instance.option(\"isRenovatedAppointments\"),\n      appointmentRenderingStrategyName: this.appointmentRenderingStrategyName,\n      adaptivityEnabled: this.instance.option(\"adaptivityEnabled\"),\n      rtlEnabled: this.instance.option(\"rtlEnabled\"),\n      startDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\n      endDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\n      maxAppointmentsPerCell: this.instance._getCurrentViewOption(\"maxAppointmentsPerCell\"),\n      currentDate: this.instance.option(\"currentDate\"),\n      isVirtualScrolling: this.instance.isVirtualScrolling(),\n      leftVirtualCellCount: cellCountInsideLeftVirtualCell,\n      topVirtualCellCount: cellCountInsideTopVirtualRow,\n      intervalCount: workspace.option(\"intervalCount\"),\n      hoursInterval: workspace.option(\"hoursInterval\"),\n      showAllDayPanel: workspace.option(\"showAllDayPanel\"),\n      isGroupedAllDayPanel: workspace.isGroupedAllDayPanel(),\n      groups: this.instance._getCurrentViewOption(\"groups\"),\n      groupCount: groupCount,\n      rowCount: rowCount,\n      appointmentCountPerCell: this.instance.option(\"_appointmentCountPerCell\"),\n      appointmentOffset: this.instance.option(\"_appointmentOffset\"),\n      allowResizing: this.instance._allowResizing(),\n      allowAllDayResizing: this.instance._allowAllDayResizing(),\n      startViewDate: workspace.getStartViewDate(),\n      groupOrientation: workspace._getRealGroupOrientation(),\n      cellWidth: getCellWidth(DOMMetaData),\n      cellHeight: getCellHeight(DOMMetaData),\n      allDayHeight: allDayHeight,\n      resizableStep: positionHelper.getResizableStep(),\n      visibleDayDuration: visibleDayDuration,\n      allDayPanelMode: this.instance._getCurrentViewOption(\"allDayPanelMode\"),\n      timeZoneCalculator: this.instance.timeZoneCalculator,\n      timeZone: this.instance.option(\"timeZone\"),\n      firstDayOfWeek: this.instance.getFirstDayOfWeek(),\n      viewStartDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\n      viewEndDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\n      viewType: workspace.type,\n      endViewDate: workspace.getEndViewDate(),\n      positionHelper: positionHelper,\n      isGroupedByDate: workspace.isGroupedByDate(),\n      cellDuration: cellDuration,\n      cellDurationInMinutes: workspace.option(\"cellDuration\"),\n      viewDataProvider: workspace.viewDataProvider,\n      supportAllDayRow: workspace.supportAllDayRow(),\n      dateRange: workspace.getDateRange(),\n      intervalDuration: workspace.getIntervalDuration(),\n      allDayIntervalDuration: workspace.getIntervalDuration(true),\n      isVerticalGroupOrientation: workspace.isVerticalOrientation(),\n      DOMMetaData: DOMMetaData,\n      instance: this.instance,\n      agendaDuration: workspace.option(\"agendaDuration\")\n    };\n  }\n\n  createAppointmentsMap(items) {\n    var renderingStrategyOptions = this._getRenderingStrategyOptions();\n\n    var {\n      viewModel: viewModel,\n      positionMap: positionMap\n    } = this.appointmentViewModel.generate(items, renderingStrategyOptions);\n    this._positionMap = positionMap;\n    return viewModel;\n  }\n\n  _isDataChanged(data) {\n    var appointmentDataProvider = this.instance.appointmentDataProvider;\n    var updatedData = appointmentDataProvider.getUpdatedAppointment();\n    return updatedData === data || appointmentDataProvider.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value);\n  }\n\n  _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\n    return currentAppointment.needRepaint && sourceAppointment.needRemove;\n  }\n\n  _isSettingChanged(settings, sourceSetting) {\n    if (settings.length !== sourceSetting.length) {\n      return true;\n    }\n\n    var createSettingsToCompare = (settings, index) => {\n      var currentSetting = settings[index];\n      var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\n      var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\n      var columnIndex = currentSetting.columnIndex + leftVirtualCellCount;\n      var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\n      var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\n      var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\n      return _extends({}, currentSetting, {\n        columnIndex: columnIndex,\n        rowIndex: rowIndex,\n        positionByMap: void 0,\n        topVirtualCellCount: void 0,\n        leftVirtualCellCount: void 0,\n        leftVirtualWidth: void 0,\n        topVirtualHeight: void 0,\n        hMax: hMax,\n        vMax: vMax,\n        info: {}\n      });\n    };\n\n    for (var i = 0; i < settings.length; i++) {\n      var newSettings = createSettingsToCompare(settings, i);\n      var oldSettings = createSettingsToCompare(sourceSetting, i);\n\n      if (oldSettings) {\n        oldSettings.sortedIndex = newSettings.sortedIndex;\n      }\n\n      if (!equalByValue(newSettings, oldSettings)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\n    for (var i = 0; i < sourceAppointments.length; i++) {\n      var item = sourceAppointments[i];\n\n      if (item.itemData === currentAppointment.itemData) {\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  _getDeletedAppointments(currentAppointments, sourceAppointments) {\n    var result = [];\n\n    for (var i = 0; i < sourceAppointments.length; i++) {\n      var sourceAppointment = sourceAppointments[i];\n\n      var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\n\n      if (!currentAppointment) {\n        sourceAppointment.needRemove = true;\n        result.push(sourceAppointment);\n      }\n    }\n\n    return result;\n  }\n\n  getRepaintedAppointments(currentAppointments, sourceAppointments) {\n    if (0 === sourceAppointments.length || \"agenda\" === this.appointmentRenderingStrategyName) {\n      return currentAppointments;\n    }\n\n    currentAppointments.forEach(appointment => {\n      var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\n\n      if (sourceAppointment) {\n        var isDataChanged = this._isDataChanged(appointment.itemData);\n\n        var isSettingChanged = this._isSettingChanged(appointment.settings, sourceAppointment.settings);\n\n        var isAppointmentShouldAppear = this._isAppointmentShouldAppear(appointment, sourceAppointment);\n\n        appointment.needRepaint = isDataChanged || isSettingChanged || isAppointmentShouldAppear;\n      }\n    });\n    return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments));\n  }\n\n  getRenderingStrategyInstance() {\n    var renderingStrategy = this.appointmentViewModel.getRenderingStrategy();\n\n    if (!renderingStrategy) {\n      var options = this._getRenderingStrategyOptions();\n\n      this.appointmentViewModel.initRenderingStrategy(options);\n    }\n\n    return this.appointmentViewModel.getRenderingStrategy();\n  }\n\n}\n\nexport default AppointmentLayoutManager;","map":{"version":3,"names":["_extends","equalByValue","AppointmentViewModelGenerator","getGroupCount","getCellWidth","getCellHeight","getAllDayHeight","getCellDuration","getAppointmentRenderingStrategyName","AppointmentLayoutManager","constructor","instance","appointmentViewModel","appointmentRenderingStrategyName","currentViewType","getCellDimensions","options","_workSpace","width","height","allDayHeight","_getRenderingStrategyOptions","workspace","getWorkSpace","virtualScrollingDispatcher","cellCountInsideLeftVirtualCell","cellCountInsideTopVirtualRow","groupCount","option","DOMMetaData","getDOMElementsMetaData","_isVerticalGroupedWorkSpace","rowCount","_getRowCount","positionHelper","viewDataProvider","visibleDayDuration","getVisibleDayDuration","cellDuration","type","resources","loadedResources","getAppointmentColor","createGetAppointmentColor","dataAccessors","_dataAccessors","isRenovatedAppointments","adaptivityEnabled","rtlEnabled","startDayHour","_getCurrentViewOption","endDayHour","maxAppointmentsPerCell","currentDate","isVirtualScrolling","leftVirtualCellCount","topVirtualCellCount","intervalCount","hoursInterval","showAllDayPanel","isGroupedAllDayPanel","groups","appointmentCountPerCell","appointmentOffset","allowResizing","_allowResizing","allowAllDayResizing","_allowAllDayResizing","startViewDate","getStartViewDate","groupOrientation","_getRealGroupOrientation","cellWidth","cellHeight","resizableStep","getResizableStep","allDayPanelMode","timeZoneCalculator","timeZone","firstDayOfWeek","getFirstDayOfWeek","viewStartDayHour","viewEndDayHour","viewType","endViewDate","getEndViewDate","isGroupedByDate","cellDurationInMinutes","supportAllDayRow","dateRange","getDateRange","intervalDuration","getIntervalDuration","allDayIntervalDuration","isVerticalGroupOrientation","isVerticalOrientation","agendaDuration","createAppointmentsMap","items","renderingStrategyOptions","viewModel","positionMap","generate","_positionMap","_isDataChanged","data","appointmentDataProvider","updatedData","getUpdatedAppointment","getUpdatedAppointmentKeys","some","item","key","value","_isAppointmentShouldAppear","currentAppointment","sourceAppointment","needRepaint","needRemove","_isSettingChanged","settings","sourceSetting","length","createSettingsToCompare","index","currentSetting","columnIndex","rowIndex","hMax","reduced","vMax","positionByMap","leftVirtualWidth","topVirtualHeight","info","i","newSettings","oldSettings","sortedIndex","_getAssociatedSourceAppointment","sourceAppointments","itemData","_getDeletedAppointments","currentAppointments","result","push","getRepaintedAppointments","forEach","appointment","isDataChanged","isSettingChanged","isAppointmentShouldAppear","concat","getRenderingStrategyInstance","renderingStrategy","getRenderingStrategy","initRenderingStrategy"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/scheduler/appointments.layout_manager.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    AppointmentViewModelGenerator\r\n} from \"./appointments/viewModelGenerator\";\r\nimport {\r\n    getGroupCount\r\n} from \"./resources/utils\";\r\nimport {\r\n    getCellWidth,\r\n    getCellHeight,\r\n    getAllDayHeight\r\n} from \"./workspaces/helpers/positionHelper\";\r\nimport {\r\n    getCellDuration\r\n} from \"../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    getAppointmentRenderingStrategyName\r\n} from \"../../renovation/ui/scheduler/model/appointments\";\r\nclass AppointmentLayoutManager {\r\n    constructor(instance) {\r\n        this.instance = instance;\r\n        this.appointmentViewModel = new AppointmentViewModelGenerator\r\n    }\r\n    get appointmentRenderingStrategyName() {\r\n        return getAppointmentRenderingStrategyName(this.instance.currentViewType)\r\n    }\r\n    getCellDimensions(options) {\r\n        if (this.instance._workSpace) {\r\n            return {\r\n                width: this.instance._workSpace.getCellWidth(),\r\n                height: this.instance._workSpace.getCellHeight(),\r\n                allDayHeight: this.instance._workSpace.getAllDayHeight()\r\n            }\r\n        }\r\n    }\r\n    _getRenderingStrategyOptions() {\r\n        var workspace = this.instance.getWorkSpace();\r\n        var {\r\n            virtualScrollingDispatcher: virtualScrollingDispatcher\r\n        } = this.instance.getWorkSpace();\r\n        var {\r\n            cellCountInsideLeftVirtualCell: cellCountInsideLeftVirtualCell,\r\n            cellCountInsideTopVirtualRow: cellCountInsideTopVirtualRow\r\n        } = virtualScrollingDispatcher;\r\n        var groupCount = getGroupCount(this.instance.option(\"loadedResources\"));\r\n        var DOMMetaData = workspace.getDOMElementsMetaData();\r\n        var allDayHeight = getAllDayHeight(workspace.option(\"showAllDayPanel\"), workspace._isVerticalGroupedWorkSpace(), DOMMetaData);\r\n        var rowCount = workspace._getRowCount();\r\n        var {\r\n            positionHelper: positionHelper,\r\n            viewDataProvider: viewDataProvider\r\n        } = workspace;\r\n        var visibleDayDuration = viewDataProvider.getVisibleDayDuration(workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\r\n        var cellDuration = getCellDuration(workspace.type, workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\r\n        return {\r\n            resources: this.instance.option(\"resources\"),\r\n            loadedResources: this.instance.option(\"loadedResources\"),\r\n            getAppointmentColor: this.instance.createGetAppointmentColor(),\r\n            dataAccessors: this.instance._dataAccessors,\r\n            isRenovatedAppointments: this.instance.option(\"isRenovatedAppointments\"),\r\n            appointmentRenderingStrategyName: this.appointmentRenderingStrategyName,\r\n            adaptivityEnabled: this.instance.option(\"adaptivityEnabled\"),\r\n            rtlEnabled: this.instance.option(\"rtlEnabled\"),\r\n            startDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\r\n            endDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\r\n            maxAppointmentsPerCell: this.instance._getCurrentViewOption(\"maxAppointmentsPerCell\"),\r\n            currentDate: this.instance.option(\"currentDate\"),\r\n            isVirtualScrolling: this.instance.isVirtualScrolling(),\r\n            leftVirtualCellCount: cellCountInsideLeftVirtualCell,\r\n            topVirtualCellCount: cellCountInsideTopVirtualRow,\r\n            intervalCount: workspace.option(\"intervalCount\"),\r\n            hoursInterval: workspace.option(\"hoursInterval\"),\r\n            showAllDayPanel: workspace.option(\"showAllDayPanel\"),\r\n            isGroupedAllDayPanel: workspace.isGroupedAllDayPanel(),\r\n            groups: this.instance._getCurrentViewOption(\"groups\"),\r\n            groupCount: groupCount,\r\n            rowCount: rowCount,\r\n            appointmentCountPerCell: this.instance.option(\"_appointmentCountPerCell\"),\r\n            appointmentOffset: this.instance.option(\"_appointmentOffset\"),\r\n            allowResizing: this.instance._allowResizing(),\r\n            allowAllDayResizing: this.instance._allowAllDayResizing(),\r\n            startViewDate: workspace.getStartViewDate(),\r\n            groupOrientation: workspace._getRealGroupOrientation(),\r\n            cellWidth: getCellWidth(DOMMetaData),\r\n            cellHeight: getCellHeight(DOMMetaData),\r\n            allDayHeight: allDayHeight,\r\n            resizableStep: positionHelper.getResizableStep(),\r\n            visibleDayDuration: visibleDayDuration,\r\n            allDayPanelMode: this.instance._getCurrentViewOption(\"allDayPanelMode\"),\r\n            timeZoneCalculator: this.instance.timeZoneCalculator,\r\n            timeZone: this.instance.option(\"timeZone\"),\r\n            firstDayOfWeek: this.instance.getFirstDayOfWeek(),\r\n            viewStartDayHour: this.instance._getCurrentViewOption(\"startDayHour\"),\r\n            viewEndDayHour: this.instance._getCurrentViewOption(\"endDayHour\"),\r\n            viewType: workspace.type,\r\n            endViewDate: workspace.getEndViewDate(),\r\n            positionHelper: positionHelper,\r\n            isGroupedByDate: workspace.isGroupedByDate(),\r\n            cellDuration: cellDuration,\r\n            cellDurationInMinutes: workspace.option(\"cellDuration\"),\r\n            viewDataProvider: workspace.viewDataProvider,\r\n            supportAllDayRow: workspace.supportAllDayRow(),\r\n            dateRange: workspace.getDateRange(),\r\n            intervalDuration: workspace.getIntervalDuration(),\r\n            allDayIntervalDuration: workspace.getIntervalDuration(true),\r\n            isVerticalGroupOrientation: workspace.isVerticalOrientation(),\r\n            DOMMetaData: DOMMetaData,\r\n            instance: this.instance,\r\n            agendaDuration: workspace.option(\"agendaDuration\")\r\n        }\r\n    }\r\n    createAppointmentsMap(items) {\r\n        var renderingStrategyOptions = this._getRenderingStrategyOptions();\r\n        var {\r\n            viewModel: viewModel,\r\n            positionMap: positionMap\r\n        } = this.appointmentViewModel.generate(items, renderingStrategyOptions);\r\n        this._positionMap = positionMap;\r\n        return viewModel\r\n    }\r\n    _isDataChanged(data) {\r\n        var appointmentDataProvider = this.instance.appointmentDataProvider;\r\n        var updatedData = appointmentDataProvider.getUpdatedAppointment();\r\n        return updatedData === data || appointmentDataProvider.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value)\r\n    }\r\n    _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\r\n        return currentAppointment.needRepaint && sourceAppointment.needRemove\r\n    }\r\n    _isSettingChanged(settings, sourceSetting) {\r\n        if (settings.length !== sourceSetting.length) {\r\n            return true\r\n        }\r\n        var createSettingsToCompare = (settings, index) => {\r\n            var currentSetting = settings[index];\r\n            var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\r\n            var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\r\n            var columnIndex = currentSetting.columnIndex + leftVirtualCellCount;\r\n            var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\r\n            var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\r\n            var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\r\n            return _extends({}, currentSetting, {\r\n                columnIndex: columnIndex,\r\n                rowIndex: rowIndex,\r\n                positionByMap: void 0,\r\n                topVirtualCellCount: void 0,\r\n                leftVirtualCellCount: void 0,\r\n                leftVirtualWidth: void 0,\r\n                topVirtualHeight: void 0,\r\n                hMax: hMax,\r\n                vMax: vMax,\r\n                info: {}\r\n            })\r\n        };\r\n        for (var i = 0; i < settings.length; i++) {\r\n            var newSettings = createSettingsToCompare(settings, i);\r\n            var oldSettings = createSettingsToCompare(sourceSetting, i);\r\n            if (oldSettings) {\r\n                oldSettings.sortedIndex = newSettings.sortedIndex\r\n            }\r\n            if (!equalByValue(newSettings, oldSettings)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var item = sourceAppointments[i];\r\n            if (item.itemData === currentAppointment.itemData) {\r\n                return item\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    _getDeletedAppointments(currentAppointments, sourceAppointments) {\r\n        var result = [];\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var sourceAppointment = sourceAppointments[i];\r\n            var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\r\n            if (!currentAppointment) {\r\n                sourceAppointment.needRemove = true;\r\n                result.push(sourceAppointment)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    getRepaintedAppointments(currentAppointments, sourceAppointments) {\r\n        if (0 === sourceAppointments.length || \"agenda\" === this.appointmentRenderingStrategyName) {\r\n            return currentAppointments\r\n        }\r\n        currentAppointments.forEach(appointment => {\r\n            var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\r\n            if (sourceAppointment) {\r\n                var isDataChanged = this._isDataChanged(appointment.itemData);\r\n                var isSettingChanged = this._isSettingChanged(appointment.settings, sourceAppointment.settings);\r\n                var isAppointmentShouldAppear = this._isAppointmentShouldAppear(appointment, sourceAppointment);\r\n                appointment.needRepaint = isDataChanged || isSettingChanged || isAppointmentShouldAppear\r\n            }\r\n        });\r\n        return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments))\r\n    }\r\n    getRenderingStrategyInstance() {\r\n        var renderingStrategy = this.appointmentViewModel.getRenderingStrategy();\r\n        if (!renderingStrategy) {\r\n            var options = this._getRenderingStrategyOptions();\r\n            this.appointmentViewModel.initRenderingStrategy(options)\r\n        }\r\n        return this.appointmentViewModel.getRenderingStrategy()\r\n    }\r\n}\r\nexport default AppointmentLayoutManager;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}