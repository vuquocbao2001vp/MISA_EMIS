{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { resetActiveElement } from \"../../core/utils/dom\";\nimport { isDefined, isObject, isFunction, isEmptyObject } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport modules from \"./ui.grid_core.modules\";\nimport { name as clickEventName } from \"../../events/click\";\nimport pointerEvents from \"../../events/pointer\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { createObjectWithChanges } from \"../../data/array_utils\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { confirm } from \"../dialog\";\nimport messageLocalization from \"../../localization/message\";\nimport devices from \"../../core/devices\";\nimport { when, Deferred, fromPromise } from \"../../core/utils/deferred\";\nimport { equalByValue, noop } from \"../../core/utils/common\";\nimport * as iconUtils from \"../../core/utils/icon\";\nimport { EDITOR_CELL_CLASS, ROW_CLASS, EDIT_FORM_CLASS, DATA_EDIT_DATA_INSERT_TYPE, DATA_EDIT_DATA_REMOVE_TYPE, EDITING_POPUP_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, TARGET_COMPONENT_NAME, EDITORS_INPUT_SELECTOR, FOCUSABLE_ELEMENT_SELECTOR, EDIT_MODE_ROW, EDIT_MODES, ROW_BASED_MODES, FIRST_NEW_ROW_POSITION, LAST_NEW_ROW_POSITION, PAGE_BOTTOM_NEW_ROW_POSITION, PAGE_TOP_NEW_ROW_POSITION, VIEWPORT_BOTTOM_NEW_ROW_POSITION, VIEWPORT_TOP_NEW_ROW_POSITION } from \"./ui.grid_core.editing_constants\";\nvar READONLY_CLASS = \"readonly\";\nvar LINK_CLASS = \"dx-link\";\nvar ROW_SELECTED = \"dx-selection\";\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar ROW_MODIFIED = \"dx-row-modified\";\nvar CELL_MODIFIED = \"dx-cell-modified\";\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\nvar DEFAULT_START_EDIT_ACTION = \"click\";\nvar EDIT_LINK_CLASS = {\n  save: \"dx-link-save\",\n  cancel: \"dx-link-cancel\",\n  edit: \"dx-link-edit\",\n  undelete: \"dx-link-undelete\",\n  delete: \"dx-link-delete\",\n  add: \"dx-link-add\"\n};\nvar EDIT_ICON_CLASS = {\n  save: \"save\",\n  cancel: \"revert\",\n  edit: \"edit\",\n  undelete: \"revert\",\n  delete: \"trash\",\n  add: \"add\"\n};\nvar METHOD_NAMES = {\n  edit: \"editRow\",\n  delete: \"deleteRow\",\n  undelete: \"undeleteRow\",\n  save: \"saveEditData\",\n  cancel: \"cancelEditData\",\n  add: \"addRowByRowIndex\"\n};\nvar ACTION_OPTION_NAMES = {\n  add: \"allowAdding\",\n  edit: \"allowUpdating\",\n  delete: \"allowDeleting\"\n};\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\n\nvar createFailureHandler = function (deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\n\nvar isEditingCell = function (isEditRow, cellOptions) {\n  return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing;\n};\n\nvar isEditingOrShowEditorAlwaysDataCell = function (isEditRow, cellOptions) {\n  var isCommandCell = !!cellOptions.column.command;\n  var isEditing = isEditingCell(isEditRow, cellOptions);\n  var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\n  return \"data\" === cellOptions.rowType && isEditorCell;\n};\n\nvar EditingController = modules.ViewController.inherit(function () {\n  var getButtonIndex = (buttons, name) => {\n    var result = -1;\n    buttons.some((button, index) => {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  function getButtonName(button) {\n    return isObject(button) ? button.name : button;\n  }\n\n  return {\n    init: function () {\n      this._columnsController = this.getController(\"columns\");\n      this._dataController = this.getController(\"data\");\n      this._rowsView = this.getView(\"rowsView\");\n      this._lastOperation = null;\n\n      if (this._deferreds) {\n        this._deferreds.forEach(d => d.reject(\"cancel\"));\n      }\n\n      this._deferreds = [];\n\n      if (!this._dataChangedHandler) {\n        this._dataChangedHandler = this._handleDataChanged.bind(this);\n\n        this._dataController.changed.add(this._dataChangedHandler);\n      }\n\n      if (!this._saveEditorHandler) {\n        this.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onSaving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceling\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        this.createAction(\"onEditCanceled\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n      }\n\n      this._updateEditColumn();\n\n      this._updateEditButtons();\n\n      if (!this._internalState) {\n        this._internalState = [];\n      }\n\n      this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\n      this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;\n    },\n    getEditMode: function () {\n      var editMode = this.option(\"editing.mode\");\n\n      if (-1 !== EDIT_MODES.indexOf(editMode)) {\n        return editMode;\n      }\n\n      return EDIT_MODE_ROW;\n    },\n    _getDefaultEditorTemplate: function () {\n      return (container, options) => {\n        var $editor = $(\"<div>\").appendTo(container);\n        this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\n          value: options.value,\n          setValue: options.setValue,\n          row: options.row,\n          parentType: \"dataRow\",\n          width: null,\n          readOnly: !options.setValue,\n          isOnForm: options.isOnForm,\n          id: options.id\n        }));\n      };\n    },\n    _getNewRowPosition: function () {\n      var newRowPosition = this.option(\"editing.newRowPosition\");\n      var scrollingMode = this.option(\"scrolling.mode\");\n\n      if (\"virtual\" === scrollingMode) {\n        switch (newRowPosition) {\n          case PAGE_TOP_NEW_ROW_POSITION:\n            return VIEWPORT_TOP_NEW_ROW_POSITION;\n\n          case PAGE_BOTTOM_NEW_ROW_POSITION:\n            return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n\n          default:\n            return newRowPosition;\n        }\n      }\n\n      return newRowPosition;\n    },\n    getChanges: function () {\n      return this.option(EDITING_CHANGES_OPTION_NAME);\n    },\n    getInsertRowCount: function () {\n      var changes = this.option(EDITING_CHANGES_OPTION_NAME);\n      return changes.filter(change => \"insert\" === change.type).length;\n    },\n    resetChanges: function () {\n      var changes = this.getChanges();\n      var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\n\n      if (needReset) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\n      }\n    },\n    _getInternalData: function (key) {\n      return this._internalState.filter(item => equalByValue(item.key, key))[0];\n    },\n    _addInternalData: function (params) {\n      var internalData = this._getInternalData(params.key);\n\n      if (internalData) {\n        return extend(internalData, params);\n      }\n\n      this._internalState.push(params);\n\n      return params;\n    },\n    _getOldData: function (key) {\n      var _this$_getInternalDat;\n\n      return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData;\n    },\n    getUpdatedData: function (data) {\n      var key = this._dataController.keyOf(data);\n\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (changes[editIndex]) {\n        return createObjectWithChanges(data, changes[editIndex].data);\n      }\n\n      return data;\n    },\n    getInsertedData: function () {\n      return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data);\n    },\n    getRemovedData: function () {\n      return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key));\n    },\n    _fireDataErrorOccurred: function (arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n\n      var $popupContent = this.getPopupContent();\n\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: noop,\n    _closeEditItem: noop,\n    _handleDataChanged: noop,\n    _isDefaultButtonVisible: function (button, options) {\n      var result = true;\n\n      switch (button.name) {\n        case \"delete\":\n          result = this.allowDeleting(options);\n          break;\n\n        case \"undelete\":\n          result = false;\n      }\n\n      return result;\n    },\n    _isButtonVisible: function (button, options) {\n      var visible = button.visible;\n\n      if (!isDefined(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n\n      return isFunction(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _isButtonDisabled: function (button, options) {\n      var disabled = button.disabled;\n      return isFunction(disabled) ? disabled.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : !!disabled;\n    },\n    _getButtonConfig: function (button, options) {\n      var config = isObject(button) ? button : {};\n      var buttonName = getButtonName(button);\n\n      var editingTexts = (options => {\n        var editingTexts = options.component.option(\"editing.texts\") || {};\n        return {\n          save: editingTexts.saveRowChanges,\n          cancel: editingTexts.cancelRowChanges,\n          edit: editingTexts.editRow,\n          undelete: editingTexts.undeleteRow,\n          delete: editingTexts.deleteRow,\n          add: editingTexts.addRowToNode\n        };\n      })(options);\n\n      var methodName = METHOD_NAMES[buttonName];\n      var editingOptions = this.option(\"editing\");\n      var actionName = ACTION_OPTION_NAMES[buttonName];\n      var allowAction = actionName ? editingOptions[actionName] : true;\n      return extend({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName]\n      }, {\n        onClick: methodName && (e => {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(() => {\n            options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex);\n          });\n        })\n      }, config);\n    },\n    _getEditingButtons: function (options) {\n      var buttonIndex;\n      var haveCustomButtons = !!options.column.buttons;\n      var buttons = (options.column.buttons || []).slice();\n\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n\n      return buttons.map(button => this._getButtonConfig(button, options));\n    },\n    _renderEditingButtons: function ($container, buttons, options, change) {\n      buttons.forEach(button => {\n        if (this._isButtonVisible(button, options)) {\n          this._createButton($container, button, options, change);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function () {\n      return (container, options, change) => {\n        var $container = $(container);\n\n        if (\"data\" === options.rowType) {\n          var buttons = this._getEditingButtons(options);\n\n          this._renderEditingButtons($container, buttons, options, change);\n\n          options.watch && options.watch(() => buttons.map(button => this._isButtonVisible(button, options)), () => {\n            $container.empty();\n\n            this._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          gridCoreUtils.setEmptyText($container);\n        }\n      };\n    },\n    isRowBasedEditMode: function () {\n      var editMode = this.getEditMode();\n      return -1 !== ROW_BASED_MODES.indexOf(editMode);\n    },\n    getFirstEditableColumnIndex: function () {\n      var columnsController = this.getController(\"columns\");\n      var columnIndex;\n      var visibleColumns = columnsController.getVisibleColumns();\n      each(visibleColumns, function (index, column) {\n        if (column.allowEditing) {\n          columnIndex = index;\n          return false;\n        }\n      });\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function (rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function (rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function (key, items) {\n      return gridCoreUtils.getIndexByKey(key, items);\n    },\n    hasChanges: function (rowIndex) {\n      var changes = this.getChanges();\n      var result = false;\n\n      for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\n        if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n\n      return result;\n    },\n    dispose: function () {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\n      eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler);\n    },\n    optionChanged: function (args) {\n      if (\"editing\" === args.name) {\n        var fullName = args.fullName;\n\n        if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\n          this._handleEditRowKeyChange(args);\n        } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\n          this._handleChangesChange(args);\n        } else if (!args.handled) {\n          this._columnsController.reinit();\n\n          this.init();\n          this.resetChanges();\n\n          this._resetEditColumnName();\n\n          this._resetEditRowKey();\n        }\n\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _handleEditRowKeyChange: function (args) {\n      var rowIndex = this._dataController.getRowIndexByKey(args.value);\n\n      var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n\n      var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n\n      if (isDefined(args.value)) {\n        if (args.value !== args.previousValue) {\n          this._editRowFromOptionChanged(rowIndex, oldRowIndex);\n        }\n      } else {\n        this.cancelEditData();\n      }\n    },\n    _handleChangesChange: function (args) {\n      var dataController = this._dataController;\n\n      if (!args.value.length && !args.previousValue.length) {\n        return;\n      }\n\n      this._processInsertChanges(args.value);\n\n      dataController.updateItems({\n        repaintChangesOnly: true,\n        isLiveUpdate: false\n      });\n    },\n    _processInsertChanges: function (changes) {\n      changes.forEach(change => {\n        if (\"insert\" === change.type) {\n          this._addInsertInfo(change);\n        }\n      });\n    },\n    publicMethods: function () {\n      return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function () {\n      if (!isDefined(this._pageIndex)) {\n        return;\n      }\n\n      this._refreshCore.apply(this, arguments);\n    },\n    _refreshCore: noop,\n    isEditing: function () {\n      var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n      return isEditRowKeyDefined;\n    },\n    isEditRow: function () {\n      return false;\n    },\n    _setEditRowKey: function (value, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value);\n      } else {\n        this.option(EDITING_EDITROWKEY_OPTION_NAME, value);\n      }\n    },\n    _setEditRowKeyByIndex: function (rowIndex, silent) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      if (void 0 === key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      this._setEditRowKey(key, silent);\n    },\n    getEditRowIndex: function () {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function () {\n      return -1;\n    },\n\n    isEditRowByIndex(rowIndex) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\n\n      if (isKeyEqual) {\n        return this._getVisibleEditRowIndex() === rowIndex;\n      }\n\n      return isKeyEqual;\n    },\n\n    isEditCell: function (visibleRowIndex, columnIndex) {\n      return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex;\n    },\n    getPopupContent: noop,\n    _isProcessedItem: function (item) {\n      return false;\n    },\n    _getInsertRowIndex: function (items, change, isProcessedItems) {\n      var result = -1;\n      var dataController = this._dataController;\n\n      var key = this._getInsertAfterOrBeforeKey(change);\n\n      if (!isDefined(key) && 0 === items.length) {\n        result = 0;\n      } else if (isDefined(key)) {\n        items.some((item, index) => {\n          var isProcessedItem = isProcessedItems || this._isProcessedItem(item);\n\n          if (isObject(item)) {\n            if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\n              if (equalByValue(item.key, key)) {\n                result = index;\n              }\n            } else if (equalByValue(dataController.keyOf(item), key)) {\n              result = index;\n            }\n          }\n\n          if (result >= 0) {\n            var nextItem = items[result + 1];\n\n            if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\n              return;\n            }\n\n            if (isDefined(change.insertAfterKey)) {\n              result += 1;\n            }\n\n            return true;\n          }\n        });\n      }\n\n      return result;\n    },\n    _generateNewItem: function (key) {\n      var _this$_getInternalDat2;\n\n      var item = {\n        key: key\n      };\n      var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\n\n      if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\n        item[INSERT_INDEX] = insertInfo[INSERT_INDEX];\n      }\n\n      return item;\n    },\n    _getLoadedRowIndex: function (items, change, isProcessedItems) {\n      var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\n\n      var dataController = this._dataController;\n\n      if (loadedRowIndex < 0) {\n        var newRowPosition = this._getNewRowPosition();\n\n        var pageIndex = dataController.pageIndex();\n\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\n          loadedRowIndex = 0;\n        } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\n          loadedRowIndex = items.length;\n        }\n      }\n\n      return loadedRowIndex;\n    },\n    processItems: function (items, e) {\n      var changeType = e.changeType;\n      this.update(changeType);\n      var changes = this.getChanges();\n      changes.forEach(change => {\n        var _this$_getInternalDat3;\n\n        var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\n\n        if (!isInsert) {\n          return;\n        }\n\n        var key = change.key;\n        var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\n\n        if (!isDefined(key) || !isDefined(insertInfo)) {\n          insertInfo = this._addInsertInfo(change);\n          key = insertInfo.key;\n        }\n\n        var loadedRowIndex = this._getLoadedRowIndex(items, change);\n\n        var item = this._generateNewItem(key);\n\n        if (loadedRowIndex >= 0) {\n          items.splice(loadedRowIndex, 0, item);\n        }\n      });\n      return items;\n    },\n    processDataItem: function (item, options, generateDataValues) {\n      var columns = options.visibleColumns;\n      var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n      item.isEditing = false;\n\n      if (editIndex >= 0) {\n        this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues);\n      }\n    },\n    _processDataItemCore: function (item, change, key, columns, generateDataValues) {\n      var {\n        data: data,\n        type: type\n      } = change;\n\n      switch (type) {\n        case DATA_EDIT_DATA_INSERT_TYPE:\n          item.isNewRow = true;\n          item.key = key;\n          item.data = data;\n          break;\n\n        case DATA_EDIT_DATA_UPDATE_TYPE:\n          item.modified = true;\n          item.oldData = item.data;\n          item.data = createObjectWithChanges(item.data, data);\n          item.modifiedValues = generateDataValues(data, columns, true);\n          break;\n\n        case DATA_EDIT_DATA_REMOVE_TYPE:\n          item.removed = true;\n      }\n    },\n    _initNewRow: function (options) {\n      this.executeAction(\"onInitNewRow\", options);\n\n      if (options.promise) {\n        var deferred = new Deferred();\n        when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n        return deferred;\n      }\n    },\n    _createInsertInfo: function () {\n      var insertInfo = {};\n      insertInfo[INSERT_INDEX] = this._getInsertIndex();\n      return insertInfo;\n    },\n    _addInsertInfo: function (change, parentKey) {\n      var _this$_getInternalDat4;\n\n      var insertInfo;\n      var {\n        key: key\n      } = change;\n\n      if (!isDefined(key)) {\n        key = String(new Guid());\n        change.key = key;\n      }\n\n      insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\n\n      if (!isDefined(insertInfo)) {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        insertInfo = this._createInsertInfo();\n\n        if (!isDefined(insertAfterOrBeforeKey)) {\n          this._setInsertAfterOrBeforeKey(change, parentKey);\n        }\n      }\n\n      this._addInternalData({\n        insertInfo: insertInfo,\n        key: key\n      });\n\n      return {\n        insertInfo: insertInfo,\n        key: key\n      };\n    },\n    _setInsertAfterOrBeforeKey: function (change, parentKey) {\n      var dataController = this._dataController;\n      var allItems = dataController.items(true);\n      var rowsView = this.getView(\"rowsView\");\n\n      var newRowPosition = this._getNewRowPosition();\n\n      switch (newRowPosition) {\n        case FIRST_NEW_ROW_POSITION:\n        case LAST_NEW_ROW_POSITION:\n          break;\n\n        case PAGE_TOP_NEW_ROW_POSITION:\n        case PAGE_BOTTOM_NEW_ROW_POSITION:\n          if (allItems.length) {\n            var itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\n            change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key;\n          }\n\n          break;\n\n        default:\n          var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\n          var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\n          var row = dataController.getVisibleRows()[visibleItemIndex];\n\n          if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n            visibleItemIndex++;\n          }\n\n          var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\n\n          if (isDefined(insertKey)) {\n            change.insertBeforeKey = insertKey;\n          }\n\n      }\n    },\n    _getInsertIndex: function () {\n      var maxInsertIndex = 0;\n      this.getChanges().forEach(editItem => {\n        var _this$_getInternalDat5;\n\n        var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\n\n        if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = insertInfo[INSERT_INDEX];\n        }\n      });\n      return maxInsertIndex + 1;\n    },\n    _getInsertAfterOrBeforeKey: function (insertChange) {\n      var _insertChange$insertA;\n\n      return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey;\n    },\n    _getPageIndexToInsertRow: function () {\n      var newRowPosition = this._getNewRowPosition();\n\n      var dataController = this._dataController;\n      var pageIndex = dataController.pageIndex();\n      var lastPageIndex = dataController.pageCount() - 1;\n\n      if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\n        return 0;\n      } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\n        return lastPageIndex;\n      }\n\n      return -1;\n    },\n    addRow: function (parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return new Deferred().reject();\n      }\n\n      return this._addRow(parentKey);\n    },\n    _addRow: function (parentKey) {\n      var dataController = this._dataController;\n      var store = dataController.store();\n      var key = store && store.key();\n      var param = {\n        data: {}\n      };\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var deferred = new Deferred();\n      this.refresh({\n        allowCancelEditing: true\n      });\n\n      if (!this._allowRowAdding()) {\n        when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        return deferred.promise();\n      }\n\n      if (!key) {\n        param.data.__KEY__ = String(new Guid());\n      }\n\n      when(this._initNewRow(param, parentKey)).done(() => {\n        if (this._allowRowAdding()) {\n          when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _allowRowAdding: function () {\n      var insertIndex = this._getInsertIndex();\n\n      if (insertIndex > 1) {\n        return false;\n      }\n\n      return true;\n    },\n    _addRowCore: function (data, parentKey, initialOldEditRowIndex) {\n      var change = {\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      };\n\n      var editRowIndex = this._getVisibleEditRowIndex();\n\n      var insertInfo = this._addInsertInfo(change, parentKey);\n\n      var key = insertInfo.key;\n\n      this._setEditRowKey(key, true);\n\n      this._addChange(change);\n\n      return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex);\n    },\n    _navigateToNewRow: function (oldEditRowIndex, change, editRowIndex) {\n      var _editRowIndex, _change;\n\n      var d = new Deferred();\n      var dataController = this._dataController;\n      var focusController = this.getController(\"focus\");\n      editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\n      change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\n\n      if (!change) {\n        return d.reject(\"cancel\").promise();\n      }\n\n      var pageIndexToInsertRow = this._getPageIndexToInsertRow();\n\n      var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\n\n      var navigateToRowByKey = key => {\n        when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {\n          rowIndex = dataController.getRowIndexByKey(change.key);\n          d.resolve();\n        });\n      };\n\n      var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n      if (pageIndexToInsertRow >= 0) {\n        dataController.pageIndex(pageIndexToInsertRow).done(() => {\n          navigateToRowByKey(change.key);\n        }).fail(d.reject);\n      } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\n        navigateToRowByKey(insertAfterOrBeforeKey);\n      } else {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\n        });\n        rowIndex = dataController.getRowIndexByKey(change.key);\n\n        if (rowIndex < 0) {\n          navigateToRowByKey(change.key);\n        } else {\n          d.resolve();\n        }\n      }\n\n      d.done(() => {\n        this._showAddedRow(rowIndex);\n\n        this._afterInsertRow(change.key);\n      });\n      return d.promise();\n    },\n    _showAddedRow: function (rowIndex) {\n      this._focusFirstEditableCellInRow(rowIndex);\n    },\n    _beforeFocusElementInRow: noop,\n    _focusFirstEditableCellInRow: function (rowIndex) {\n      var dataController = this._dataController;\n      var key = dataController.getKeyByRowIndex(rowIndex);\n      var $firstCell = this.getFirstEditableCellInRow(rowIndex);\n      this._editCellInProgress = true;\n\n      this._delayedInputFocus($firstCell, () => {\n        rowIndex = dataController.getRowIndexByKey(key);\n        this._editCellInProgress = false;\n\n        this._beforeFocusElementInRow(rowIndex);\n      });\n    },\n    _isEditingStart: function (options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeUpdateItems: noop,\n    _getVisibleEditColumnIndex: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n\n      if (!isDefined(editColumnName)) {\n        return -1;\n      }\n\n      return this._columnsController.getVisibleColumnIndex(editColumnName);\n    },\n    _setEditColumnNameByIndex: function (index, silent) {\n      var _visibleColumns$index;\n\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent);\n    },\n    _setEditColumnName: function (name, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      } else {\n        this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      }\n    },\n    _resetEditColumnName: function () {\n      this._setEditColumnName(null, true);\n    },\n    _getEditColumn: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n      return this._getColumnByName(editColumnName);\n    },\n    _getColumnByName: function (name) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var editColumn;\n      isDefined(name) && visibleColumns.some(column => {\n        if (column.name === name) {\n          editColumn = column;\n          return true;\n        }\n      });\n      return editColumn;\n    },\n    _getVisibleEditRowIndex: function (columnName) {\n      var dataController = this._dataController;\n      var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n      var rowIndex = dataController.getRowIndexByKey(editRowKey);\n\n      if (-1 === rowIndex) {\n        return rowIndex;\n      }\n\n      return rowIndex + this._getEditRowIndexCorrection(columnName);\n    },\n    _getEditRowIndexCorrection: function (columnName) {\n      var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\n      var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\n      return isColumnHidden ? 1 : 0;\n    },\n    _resetEditRowKey: function () {\n      this._setEditRowKey(null, true);\n    },\n    _resetEditIndices: function () {\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n    },\n    editRow: function (rowIndex) {\n      var _item$oldData;\n\n      var dataController = this._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n\n      var oldRowIndex = this._getVisibleEditRowIndex();\n\n      if (!item) {\n        return;\n      }\n\n      if (rowIndex === oldRowIndex) {\n        return true;\n      }\n\n      if (void 0 === item.key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (this._isEditingStart(params)) {\n        return;\n      }\n\n      this.resetChanges();\n      this.init();\n\n      this._resetEditColumnName();\n\n      this._pageIndex = dataController.pageIndex();\n\n      this._addInternalData({\n        key: item.key,\n        oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\n      });\n\n      this._setEditRowKey(item.key);\n    },\n    _editRowFromOptionChanged: function (rowIndex, oldRowIndex) {\n      var rowIndices = [oldRowIndex, rowIndex];\n\n      this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\n\n      this._editRowFromOptionChangedCore(rowIndices, rowIndex);\n    },\n    _editRowFromOptionChangedCore: function (rowIndices, rowIndex, preventRendering) {\n      this._needFocusEditor = true;\n\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: rowIndices,\n        cancel: preventRendering\n      });\n    },\n    _focusEditorIfNeed: noop,\n    _showEditPopup: noop,\n    _repaintEditPopup: noop,\n    _getEditPopupHiddenHandler: function () {\n      return e => {\n        if (this.isEditing()) {\n          this.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: noop,\n    _getSaveButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeInternalData: function (key) {\n      var internalData = this._getInternalData(key);\n\n      var index = this._internalState.indexOf(internalData);\n\n      if (index > -1) {\n        this._internalState.splice(index, 1);\n      }\n    },\n    _updateInsertAfterOrBeforeKeys: function (changes, index) {\n      var removeChange = changes[index];\n      changes.forEach(change => {\n        var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\n\n        if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\n          change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange);\n        }\n      });\n    },\n    _removeChange: function (index) {\n      if (index >= 0) {\n        var changes = [...this.getChanges()];\n        var key = changes[index].key;\n\n        this._removeInternalData(key);\n\n        this._updateInsertAfterOrBeforeKeys(changes, index);\n\n        changes.splice(index, 1);\n\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n        if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\n          this._resetEditIndices();\n        }\n      }\n    },\n    executeOperation: function (deferred, func) {\n      this._lastOperation && this._lastOperation.reject();\n      this._lastOperation = deferred;\n      this.waitForDeferredOperations().done(() => {\n        if (\"rejected\" === deferred.state()) {\n          return;\n        }\n\n        func();\n        this._lastOperation = null;\n      }).fail(() => {\n        deferred.reject();\n        this._lastOperation = null;\n      });\n    },\n    waitForDeferredOperations: function () {\n      return when(...this._deferreds);\n    },\n    _processCanceledEditingCell: noop,\n    _repaintEditCell: function (column, oldColumn, oldEditRowIndex) {\n      this._needFocusEditor = true;\n\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        this._editCellInProgress = true;\n        this.getController(\"editorFactory\").loseFocus();\n\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\n        });\n      } else if (column !== oldColumn) {\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: []\n        });\n      }\n    },\n    _delayedInputFocus: function ($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var inputFocus = () => {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n          gridCoreUtils.focusAndSelectElement(this, $focusableElement);\n        }\n\n        this._beforeFocusCallback = null;\n      };\n\n      if (devices.real().ios || devices.real().android) {\n        inputFocus();\n      } else {\n        if (this._beforeFocusCallback) {\n          this._beforeFocusCallback();\n        }\n\n        clearTimeout(this._inputFocusTimeoutID);\n\n        if (callBeforeFocusCallbackAlways) {\n          this._beforeFocusCallback = beforeFocusCallback;\n        }\n\n        this._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function (beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var rowsView = this.getView(\"rowsView\");\n\n      var editColumnIndex = this._getVisibleEditColumnIndex();\n\n      $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n\n      if ($editCell) {\n        this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n      }\n    },\n    deleteRow: function (rowIndex) {\n      this._checkAndDeleteRow(rowIndex);\n    },\n    _checkAndDeleteRow: function (rowIndex) {\n      var editingOptions = this.option(\"editing\");\n      var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\n      var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\n      var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\n\n      var item = this._dataController.items()[rowIndex];\n\n      var allowDeleting = !this.isEditing() || item.isNewRow;\n\n      if (item && allowDeleting) {\n        if (!confirmDelete || !confirmDeleteMessage) {\n          this._deleteRowCore(rowIndex);\n        } else {\n          var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n          var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n          confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\n            if (confirmResult) {\n              this._deleteRowCore(rowIndex);\n            }\n          });\n        }\n      }\n    },\n    _deleteRowCore: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var key = item && item.key;\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      this.refresh();\n      var changes = this.getChanges();\n      var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n      if (editIndex >= 0) {\n        if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n          this._removeChange(editIndex);\n        } else {\n          this._addChange({\n            key: key,\n            type: DATA_EDIT_DATA_REMOVE_TYPE\n          });\n        }\n      } else {\n        this._addChange({\n          key: key,\n          oldData: item.data,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n\n      return this._afterDeleteRow(rowIndex, oldEditRowIndex);\n    },\n    _afterDeleteRow: function (rowIndex, oldEditRowIndex) {\n      return this.saveEditData();\n    },\n    undeleteRow: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var key = item && item.key;\n      var changes = this.getChanges();\n\n      if (item) {\n        var editIndex = gridCoreUtils.getIndexByKey(key, changes);\n\n        if (editIndex >= 0) {\n          var {\n            data: data\n          } = changes[editIndex];\n\n          if (isEmptyObject(data)) {\n            this._removeChange(editIndex);\n          } else {\n            this._addChange({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _fireOnSaving: function () {\n      var onSavingParams = {\n        cancel: false,\n        promise: null,\n        changes: [...this.getChanges()]\n      };\n      this.executeAction(\"onSaving\", onSavingParams);\n      var d = new Deferred();\n      when(fromPromise(onSavingParams.promise)).done(() => {\n        d.resolve(onSavingParams);\n      }).fail(arg => {\n        createFailureHandler(d);\n\n        this._fireDataErrorOccurred(arg);\n\n        d.resolve({\n          cancel: true\n        });\n      });\n      return d;\n    },\n    _executeEditingAction: function (actionName, params, func) {\n      if (this.component._disposed) {\n        return null;\n      }\n\n      var deferred = new Deferred();\n      this.executeAction(actionName, params);\n      when(fromPromise(params.cancel)).done(function (cancel) {\n        if (cancel) {\n          setTimeout(function () {\n            deferred.resolve(\"cancel\");\n          });\n        } else {\n          func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n        }\n      }).fail(createFailureHandler(deferred));\n      return deferred;\n    },\n    _processChanges: function (deferreds, results, dataChanges, changes) {\n      var store = this._dataController.store();\n\n      each(changes, (index, change) => {\n        var oldData = this._getOldData(change.key);\n\n        var {\n          data: data,\n          type: type\n        } = change;\n\n        var changeCopy = _extends({}, change);\n\n        var deferred;\n        var params;\n\n        if (this._beforeSaveEditData(change, index)) {\n          return;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(change.key).done(function (key) {\n                dataChanges.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if (isDefined(key)) {\n                  changeCopy.key = key;\n                }\n\n                if (data && isObject(data) && data !== params.data) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = this._executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(change.key, params.newData).done(function (data, key) {\n                if (data && isObject(data) && data !== params.newData) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n\n        changes[index] = changeCopy;\n\n        if (deferred) {\n          var doneDeferred = new Deferred();\n          deferred.always(function (data) {\n            results.push({\n              key: change.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n    },\n    _processRemoveIfError: function (changes, editIndex) {\n      var change = changes[editIndex];\n\n      if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\n        if (editIndex >= 0) {\n          changes.splice(editIndex, 1);\n        }\n      }\n\n      return true;\n    },\n    _processRemove: function (changes, editIndex, cancel) {\n      var change = changes[editIndex];\n\n      if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n        return this._processRemoveCore(changes, editIndex, !cancel || !change);\n      }\n    },\n    _processRemoveCore: function (changes, editIndex) {\n      if (editIndex >= 0) {\n        changes.splice(editIndex, 1);\n      }\n\n      return true;\n    },\n    _processSaveEditDataResult: function (results) {\n      var hasSavedData = false;\n      var changes = [...this.getChanges()];\n      var changesLength = changes.length;\n\n      for (var i = 0; i < results.length; i++) {\n        var arg = results[i].result;\n        var cancel = \"cancel\" === arg;\n        var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\n        var change = changes[editIndex];\n        var isError = arg && arg instanceof Error;\n\n        if (isError) {\n          if (change) {\n            this._addInternalData({\n              key: change.key,\n              error: arg\n            });\n          }\n\n          this._fireDataErrorOccurred(arg);\n\n          if (this._processRemoveIfError(changes, editIndex)) {\n            break;\n          }\n        } else if (this._processRemove(changes, editIndex, cancel)) {\n          hasSavedData = !cancel;\n        }\n      }\n\n      if (changes.length < changesLength) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      }\n\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function (changes) {\n      each(changes, (_, _ref) => {\n        var {\n          data: data,\n          key: key,\n          type: type\n        } = _ref;\n\n        var internalData = this._addInternalData({\n          key: key\n        });\n\n        var params = {\n          key: key,\n          data: data\n        };\n\n        if (internalData.error) {\n          params.error = internalData.error;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            this.executeAction(\"onRowRemoved\", extend({}, params, {\n              data: internalData.oldData\n            }));\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            this.executeAction(\"onRowInserted\", params);\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            this.executeAction(\"onRowUpdated\", params);\n        }\n      });\n      this.executeAction(\"onSaved\", {\n        changes: changes\n      });\n    },\n    saveEditData: function () {\n      var deferred = new Deferred();\n      this.waitForDeferredOperations().done(() => {\n        if (this.isSaving()) {\n          this._resolveAfterSave(deferred);\n\n          return;\n        }\n\n        when(this._beforeSaveEditData()).done(cancel => {\n          if (cancel) {\n            this._resolveAfterSave(deferred, {\n              cancel: cancel\n            });\n\n            return;\n          }\n\n          this._saving = true;\n          var options = {};\n\n          this._saveEditDataInner(options).always(() => {\n            this._saving = false;\n            options.needFocusEditCell && this._focusEditingCell();\n          }).done(deferred.resolve).fail(deferred.reject);\n        }).fail(deferred.reject);\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _resolveAfterSave: function (deferred) {\n      var {\n        cancel: cancel,\n        error: error\n      } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\n      when(this._afterSaveEditData(cancel)).done(function () {\n        deferred.resolve(error);\n      }).fail(deferred.reject);\n    },\n    _saveEditDataInner: function (options) {\n      var results = [];\n      var deferreds = [];\n      var dataChanges = [];\n      var dataController = this._dataController;\n      var dataSource = dataController.dataSource();\n      var result = new Deferred();\n      when(this._fireOnSaving()).done(_ref2 => {\n        var {\n          cancel: cancel,\n          changes: changes\n        } = _ref2;\n\n        if (cancel) {\n          return result.resolve().promise();\n        }\n\n        this._processChanges(deferreds, results, dataChanges, changes);\n\n        if (deferreds.length) {\n          null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\n          when(...deferreds).done(() => {\n            if (this._processSaveEditDataResult(results)) {\n              this._endSaving(dataChanges, changes, result);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n              result.resolve();\n            }\n          }).fail(error => {\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n            result.resolve(error);\n          });\n          return result.always(() => {\n            options.needFocusEditCell = true;\n          }).promise();\n        }\n\n        this._cancelSaving(result);\n      }).fail(result.reject);\n      return result.promise();\n    },\n    _beforeEndSaving: function (changes) {\n      this._resetEditIndices();\n    },\n    _endSaving: function (dataChanges, changes, deferred) {\n      var dataSource = this._dataController.dataSource();\n\n      this._beforeEndSaving(changes);\n\n      null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n\n      this._refreshDataAfterSave(dataChanges, changes, deferred);\n    },\n    _cancelSaving: function (result) {\n      this.executeAction(\"onSaved\", {\n        changes: []\n      });\n\n      this._resolveAfterSave(result);\n    },\n    _refreshDataAfterSave: function (dataChanges, changes, deferred) {\n      var dataController = this._dataController;\n      var refreshMode = this.option(\"editing.refreshMode\");\n      var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n\n      if (!isFullRefresh) {\n        dataController.push(dataChanges);\n      }\n\n      when(dataController.refresh({\n        selection: isFullRefresh,\n        reload: isFullRefresh,\n        load: \"reshape\" === refreshMode,\n        changesOnly: this.option(\"repaintChangesOnly\")\n      })).always(() => {\n        this._fireSaveEditDataEvents(changes);\n      }).done(() => {\n        this._resolveAfterSave(deferred);\n      }).fail(error => {\n        this._resolveAfterSave(deferred, {\n          error: error\n        });\n      });\n    },\n    isSaving: function () {\n      return this._saving;\n    },\n    _updateEditColumn: function () {\n      var isEditColumnVisible = this._isEditColumnVisible();\n\n      var useIcons = this.option(\"editing.useIcons\");\n      var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n\n      this._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: this._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n\n      this._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function () {\n      var editingOptions = this.option(\"editing\");\n      return editingOptions.allowDeleting;\n    },\n    _isEditButtonDisabled: function () {\n      var hasChanges = this.hasChanges();\n      var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\n      return !(isEditRowDefined || hasChanges);\n    },\n    _updateEditButtons: function () {\n      var headerPanel = this.getView(\"headerPanel\");\n\n      var isButtonDisabled = this._isEditButtonDisabled();\n\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled);\n      }\n    },\n    _applyModified: function ($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: noop,\n    cancelEditData: function () {\n      var changes = this.getChanges();\n      var params = {\n        cancel: false,\n        changes: changes\n      };\n      this.executeAction(\"onEditCanceling\", params);\n\n      if (!params.cancel) {\n        this._cancelEditDataCore();\n\n        this.executeAction(\"onEditCanceled\", {\n          changes: changes\n        });\n      }\n    },\n    _cancelEditDataCore: function () {\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      this._beforeCancelEditData();\n\n      this.init();\n      this.resetChanges();\n\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n\n      this._afterCancelEditData(rowIndex);\n    },\n    _afterCancelEditData: function (rowIndex) {\n      var dataController = this._dataController;\n      dataController.updateItems({\n        repaintChangesOnly: this.option(\"repaintChangesOnly\")\n      });\n    },\n    _hideEditPopup: noop,\n    hasEditData: function () {\n      return this.hasChanges();\n    },\n    update: function (changeType) {\n      var dataController = this._dataController;\n\n      if (dataController && this._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          this.refresh({\n            isPageChanged: true\n          });\n        }\n\n        this._pageIndex = dataController.pageIndex();\n      }\n\n      this._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function (row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    addDeferred: function (deferred) {\n      if (this._deferreds.indexOf(deferred) < 0) {\n        this._deferreds.push(deferred);\n\n        deferred.always(() => {\n          var index = this._deferreds.indexOf(deferred);\n\n          if (index >= 0) {\n            this._deferreds.splice(index, 1);\n          }\n        });\n      }\n    },\n    _prepareChange: function (options, value, text) {\n      var _options$row;\n\n      var newData = {};\n      var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 !== rowKey) {\n        options.value = value;\n        var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\n\n        if (isDefined(text) && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n\n        this._updateRowValues(options);\n\n        this.addDeferred(deferred);\n      }\n\n      return deferred;\n    },\n    _updateRowValues: function (options) {\n      if (options.values) {\n        var dataController = this._dataController;\n        var rowIndex = dataController.getRowIndexByKey(options.key);\n        var row = dataController.getVisibleRows()[rowIndex];\n\n        if (row) {\n          options.values = row.values;\n        }\n\n        options.values[options.columnIndex] = options.value;\n      }\n    },\n    updateFieldValue: function (options, value, text, forceUpdateRow) {\n      var rowKey = options.key;\n      var deferred = new Deferred();\n\n      if (void 0 === rowKey) {\n        this._dataController.fireError(\"E1043\");\n      }\n\n      if (options.column.setCellValue) {\n        this._prepareChange(options, value, text).done(params => {\n          when(this._applyChange(options, params, forceUpdateRow)).always(() => {\n            deferred.resolve();\n          });\n        });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise();\n    },\n    _focusPreviousEditingCellIfNeed: function (options) {\n      if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\n        this._focusEditingCell();\n\n        this._updateEditRow(options.row, true);\n\n        return true;\n      }\n    },\n    _needUpdateRow: function (column) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      if (!column) {\n        column = this._getEditColumn();\n      }\n\n      var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n      var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\n      return isCustomSetCellValue || isCustomCalculateCellValue;\n    },\n    _applyChange: function (options, params, forceUpdateRow) {\n      var changeOptions = _extends({}, options, {\n        forceUpdateRow: forceUpdateRow\n      });\n\n      this._addChange(params, changeOptions);\n\n      this._updateEditButtons();\n\n      return this._applyChangeCore(options, changeOptions.forceUpdateRow);\n    },\n    _applyChangeCore: function (options, forceUpdateRow) {\n      var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n      var row = options.row;\n\n      if (row) {\n        if (forceUpdateRow || isCustomSetCellValue) {\n          this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n        } else if (row.update) {\n          row.update();\n        }\n      }\n    },\n    _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n      this._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n      });\n    },\n    _updateEditRow: function (row, forceUpdateRow, isCustomSetCellValue) {\n      if (forceUpdateRow) {\n        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);\n      } else {\n        this._updateRowWithDelay(row, isCustomSetCellValue);\n      }\n    },\n    _updateRowImmediately: function (row, forceUpdateRow, isCustomSetCellValue) {\n      this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n\n      this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n      if (!forceUpdateRow) {\n        this._focusEditingCell();\n      }\n    },\n    _updateRowWithDelay: function (row, isCustomSetCellValue) {\n      var deferred = new Deferred();\n      this.addDeferred(deferred);\n      setTimeout(() => {\n        var $focusedElement = $(domAdapter.getActiveElement());\n\n        var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\n\n        var focusedElement = $focusedElement.get(0);\n        var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\n\n        this._updateEditRowCore(row, false, isCustomSetCellValue);\n\n        this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\n\n        if (columnIndex >= 0) {\n          var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\n\n          this._delayedInputFocus($focusedItem, () => {\n            setTimeout(() => {\n              focusedElement = domAdapter.getActiveElement();\n\n              if (selectionRange.selectionStart >= 0) {\n                gridCoreUtils.setSelectionRange(focusedElement, selectionRange);\n              }\n            });\n          });\n        }\n\n        deferred.resolve();\n      });\n    },\n    _validateEditFormAfterUpdate: noop,\n    _addChange: function (changeParams, options) {\n      var _this$getChanges;\n\n      var row = null === options || void 0 === options ? void 0 : options.row;\n      var changes = [...this.getChanges()];\n      var index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\n\n      if (index < 0) {\n        index = changes.length;\n\n        this._addInternalData({\n          key: changeParams.key,\n          oldData: changeParams.oldData\n        });\n\n        delete changeParams.oldData;\n        changes.push(changeParams);\n      }\n\n      var change = _extends({}, changes[index]);\n\n      if (change) {\n        if (changeParams.data) {\n          change.data = createObjectWithChanges(change.data, changeParams.data);\n        }\n\n        if ((!change.type || !changeParams.data) && changeParams.type) {\n          change.type = changeParams.type;\n        }\n\n        if (row) {\n          row.oldData = this._getOldData(row.key);\n          row.data = createObjectWithChanges(row.data, changeParams.data);\n        }\n      }\n\n      changes[index] = change;\n\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n      if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\n        options.forceUpdateRow = true;\n      }\n\n      return change;\n    },\n    _getFormEditItemTemplate: function (cellOptions, column) {\n      return column.editCellTemplate || this._getDefaultEditorTemplate();\n    },\n    getColumnTemplate: function (options) {\n      var column = options.column;\n      var rowIndex = options.row && options.row.rowIndex;\n      var template;\n      var isRowMode = this.isRowBasedEditMode();\n      var isRowEditing = this.isEditRow(rowIndex);\n      var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\n      var editingStartOptions;\n\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        var allowUpdating = this.allowUpdating(options);\n\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n\n            this._isEditingStart(editingStartOptions);\n          }\n\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = (value, text) => {\n              this.updateFieldValue(options, value, text);\n            };\n          }\n        }\n\n        template = column.editCellTemplate || this._getDefaultEditorTemplate();\n      } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n        template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options);\n      }\n\n      return template;\n    },\n    _createButton: function ($container, button, options, change) {\n      var icon = EDIT_ICON_CLASS[button.name];\n      var useIcons = this.option(\"editing.useIcons\");\n      var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\n      var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n\n      if (button.template && useLegacyColumnButtonTemplate) {\n        this._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (button.template) {\n          $button = $(\"<span>\").addClass(button.cssClass);\n        } else if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n          var iconType = iconUtils.getImageSourceType(icon);\n\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = iconUtils.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n\n          $button.addClass(\"dx-link-icon\");\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n\n        if (isDefined(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n\n        if (this._isButtonDisabled(button, options)) {\n          $button.addClass(\"dx-state-disabled\");\n        } else if (!button.template || button.onClick) {\n          eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction(function (e) {\n            var _button$onClick;\n\n            null === (_button$onClick = button.onClick) || void 0 === _button$onClick ? void 0 : _button$onClick.call(button, extend({}, e, {\n              row: options.row,\n              column: options.column\n            }));\n            e.event.preventDefault();\n            e.event.stopPropagation();\n          }));\n        }\n\n        $container.append($button, \"&nbsp;\");\n\n        if (button.template) {\n          this._rowsView.renderTemplate($button, button.template, options, true, change);\n        }\n      }\n    },\n    getButtonLocalizationNames: () => ({\n      edit: \"dxDataGrid-editingEditRow\",\n      save: \"dxDataGrid-editingSaveRowChanges\",\n      delete: \"dxDataGrid-editingDeleteRow\",\n      undelete: \"dxDataGrid-editingUndeleteRow\",\n      cancel: \"dxDataGrid-editingCancelRowChanges\"\n    }),\n    prepareButtonItem: function (headerPanel, name, methodName, sortIndex) {\n      var editingTexts = this.option(\"editing.texts\") || {};\n      var titleButtonTextByClassNames = {\n        revert: editingTexts.cancelAllChanges,\n        save: editingTexts.saveAllChanges,\n        addRow: editingTexts.addRow\n      };\n      var className = {\n        revert: \"cancel\",\n        save: \"save\",\n        addRow: \"addrow\"\n      }[name];\n      var hintText = titleButtonTextByClassNames[name];\n\n      var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\n\n      return {\n        widget: \"dxButton\",\n        options: {\n          onInitialized: e => {\n            $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"));\n          },\n          icon: \"edit-button-\" + className,\n          disabled: isButtonDisabled,\n          onClick: () => {\n            setTimeout(() => {\n              this[methodName]();\n            });\n          },\n          text: hintText,\n          hint: hintText\n        },\n        showText: \"inMenu\",\n        name: name + \"Button\",\n        location: \"after\",\n        locateInMenu: \"auto\",\n        sortIndex: sortIndex\n      };\n    },\n    prepareEditButtons: function (headerPanel) {\n      var editingOptions = this.option(\"editing\") || {};\n      var buttonItems = [];\n\n      if (editingOptions.allowAdding) {\n        buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20));\n      }\n\n      return buttonItems;\n    },\n    highlightDataCell: function ($cell, parameters) {\n      var cellModified = this.isCellModified(parameters);\n      var shouldHighlight = cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing);\n      shouldHighlight && $cell.addClass(CELL_MODIFIED);\n    },\n    _afterInsertRow: noop,\n    _beforeSaveEditData: function (change) {\n      if (change && !isDefined(change.key) && isDefined(change.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: noop,\n    _beforeCancelEditData: noop,\n    _allowEditAction: function (actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n\n      if (isFunction(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n\n      return allowEditAction;\n    },\n    allowUpdating: function (options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\n      var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function (options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    },\n    isCellModified: function (parameters) {\n      var columnIndex = parameters.columnIndex;\n      var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n      return !!modifiedValues && void 0 !== modifiedValues[columnIndex];\n    },\n    isNewRowInEditMode: function () {\n      var visibleEditRowIndex = this._getVisibleEditRowIndex();\n\n      var rows = this._dataController.items();\n\n      return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false;\n    }\n  };\n}());\nexport var editingModule = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        confirmDelete: true,\n        texts: {\n          editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\",\n        editRowKey: null,\n        editColumnName: null,\n        changes: []\n      },\n      useLegacyColumnButtonTemplate: false\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function (full, repaintChangesOnly) {\n          !repaintChangesOnly && this._editingController.refresh();\n          return this.callBase.apply(this, arguments);\n        },\n        repaintRows: function () {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function (items) {\n          var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n          var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\n          var editItem = items[editRowIndex];\n\n          if (editItem) {\n            var _this$_updateEditItem;\n\n            editItem.isEditing = true;\n            null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem);\n          }\n        },\n        _updateItemsCore: function (change) {\n          this.callBase(change);\n\n          this._updateEditRow(this.items(true));\n        },\n        _applyChangeUpdate: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _applyChangesOnly: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _processItems: function (items, change) {\n          items = this._editingController.processItems(items, change);\n          return this.callBase(items, change);\n        },\n        _processDataItem: function (dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function (item, options) {\n          item = this.callBase(item, options);\n\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n\n          return item;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, rowIndex, isLiveUpdate) {\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var cell = oldRow.cells && oldRow.cells[columnIndex];\n          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\n\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n\n          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        needToRefreshOnDataSourceChange: function (args) {\n          var editingController = this.getController(\"editing\");\n          var isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && editingController.isSaving();\n          return !isParasiteChange;\n        },\n\n        _handleDataSourceChange(args) {\n          var result = this.callBase(args);\n          var changes = this.option(\"editing.changes\");\n          var dataSource = args.value;\n\n          if (Array.isArray(dataSource) && changes.length) {\n            var dataSourceKeys = dataSource.map(item => this.keyOf(item));\n            var newChanges = changes.filter(change => \"insert\" === change.type || dataSourceKeys.some(key => equalByValue(change.key, key)));\n\n            if (newChanges.length !== changes.length) {\n              this.option(\"editing.changes\", newChanges);\n            }\n\n            var editRowKey = this.option(\"editing.editRowKey\");\n            var isEditNewItem = newChanges.some(change => \"insert\" === change.type && equalByValue(editRowKey, change.key));\n\n            if (!isEditNewItem && dataSourceKeys.every(key => !equalByValue(editRowKey, key))) {\n              this.option(\"editing.editRowKey\", null);\n            }\n          }\n\n          return result;\n        }\n\n      }\n    },\n    views: {\n      rowsView: {\n        init: function () {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellIndex: function ($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex);\n            var cellIndex = -1;\n            each($cellElements, function (index, cellElement) {\n              if ($(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        publicMethods: function () {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function (options) {\n          var template = this._editingController.getColumnTemplate(options);\n\n          return template || this.callBase(options);\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isRowRemoved = !!row.removed;\n            var isRowInserted = !!row.isNewRow;\n            var isRowModified = !!row.modified;\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n\n            if (isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n          }\n\n          return $row;\n        },\n        _getColumnIndexByElement: function ($element) {\n          var $tableElement = $element.closest(\"table\");\n          var $tableElements = this.getTableElements();\n\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function (e, eventName) {\n          var editingController = this._editingController;\n          var $targetElement = $(e.event.target);\n\n          var columnIndex = this._getColumnIndexByElement($targetElement);\n\n          var row = this._dataController.items()[e.rowIndex];\n\n          var allowUpdating = editingController.allowUpdating({\n            row: row\n          }, eventName) || row && row.isNewRow;\n\n          var column = this._columnsController.getVisibleColumns()[columnIndex];\n\n          var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\n          var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\n          var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\n\n          if (\"down\" === eventName) {\n            if ((devices.real().ios || devices.real().android) && !isEditedCell) {\n              resetActiveElement();\n            }\n\n            return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n          }\n\n          if (\"click\" === eventName && \"dblClick\" === startEditAction && !isEditedCell) {\n            var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\n            editingController.closeEditCell(false, withoutSaveEditData);\n          }\n\n          if (allowEditing && eventName === startEditAction) {\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n          }\n        },\n        _rowPointerDown: function (e) {\n          this._pointerDownTimeout = setTimeout(() => {\n            this._editCellByClick(e, \"down\");\n          });\n        },\n        _rowClick: function (e) {\n          var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n\n          if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function (e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function ($cell, parameters) {\n          var editingController = this._editingController;\n          var isCommandCell = !!parameters.column.command;\n          var isEditableCell = parameters.setValue;\n          var isEditRow = editingController.isEditRow(parameters.rowIndex);\n          var isEditing = isEditingCell(isEditRow, parameters);\n\n          if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\n            var alignment = parameters.column.alignment;\n            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n\n          if (parameters.column && !isCommandCell) {\n            editingController.highlightDataCell($cell, parameters);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: noop,\n        _formItemPrepared: noop,\n        _getCellOptions: function (options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _createCell: function (options) {\n          var $cell = this.callBase(options);\n\n          var isEditRow = this._editingController.isEditRow(options.rowIndex);\n\n          isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\n          return $cell;\n        },\n        cellValue: function (rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._pointerDownTimeout);\n        },\n        _renderCore: function () {\n          this.callBase.apply(this, arguments);\n\n          this._editingController._focusEditorIfNeed();\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function (args) {\n          var fullName = args.fullName;\n\n          switch (args.name) {\n            case \"editing\":\n              var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\n              var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\n              shouldInvalidate && this._invalidate();\n              this.callBase(args);\n              break;\n\n            case \"useLegacyColumnButtonTemplate\":\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var editingOptions = this.getController(\"editing\").option(\"editing\");\n          return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["_extends","$","domAdapter","eventsEngine","Guid","resetActiveElement","isDefined","isObject","isFunction","isEmptyObject","each","extend","modules","name","clickEventName","pointerEvents","gridCoreUtils","createObjectWithChanges","addNamespace","confirm","messageLocalization","devices","when","Deferred","fromPromise","equalByValue","noop","iconUtils","EDITOR_CELL_CLASS","ROW_CLASS","EDIT_FORM_CLASS","DATA_EDIT_DATA_INSERT_TYPE","DATA_EDIT_DATA_REMOVE_TYPE","EDITING_POPUP_OPTION_NAME","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","TARGET_COMPONENT_NAME","EDITORS_INPUT_SELECTOR","FOCUSABLE_ELEMENT_SELECTOR","EDIT_MODE_ROW","EDIT_MODES","ROW_BASED_MODES","FIRST_NEW_ROW_POSITION","LAST_NEW_ROW_POSITION","PAGE_BOTTOM_NEW_ROW_POSITION","PAGE_TOP_NEW_ROW_POSITION","VIEWPORT_BOTTOM_NEW_ROW_POSITION","VIEWPORT_TOP_NEW_ROW_POSITION","READONLY_CLASS","LINK_CLASS","ROW_SELECTED","EDIT_BUTTON_CLASS","COMMAND_EDIT_CLASS","COMMAND_EDIT_WITH_ICONS_CLASS","INSERT_INDEX","ROW_INSERTED","ROW_MODIFIED","CELL_MODIFIED","EDITING_NAMESPACE","CELL_FOCUS_DISABLED_CLASS","DATA_EDIT_DATA_UPDATE_TYPE","DEFAULT_START_EDIT_ACTION","EDIT_LINK_CLASS","save","cancel","edit","undelete","delete","add","EDIT_ICON_CLASS","METHOD_NAMES","ACTION_OPTION_NAMES","BUTTON_NAMES","EDITING_CHANGES_OPTION_NAME","createFailureHandler","deferred","arg","error","Error","String","reject","isEditingCell","isEditRow","cellOptions","isEditing","column","allowEditing","isEditingOrShowEditorAlwaysDataCell","isCommandCell","command","isEditorCell","showEditorAlways","rowType","EditingController","ViewController","inherit","getButtonIndex","buttons","result","some","button","index","getButtonName","init","_columnsController","getController","_dataController","_rowsView","getView","_lastOperation","_deferreds","forEach","d","_dataChangedHandler","_handleDataChanged","bind","changed","_saveEditorHandler","createAction","excludeValidators","_updateEditColumn","_updateEditButtons","_internalState","component","_optionsByReference","getEditMode","editMode","option","indexOf","_getDefaultEditorTemplate","container","options","$editor","appendTo","createEditor","value","setValue","row","parentType","width","readOnly","isOnForm","id","_getNewRowPosition","newRowPosition","scrollingMode","getChanges","getInsertRowCount","changes","filter","change","type","length","resetChanges","needReset","_silentOption","_getInternalData","key","item","_addInternalData","params","internalData","push","_getOldData","_this$_getInternalDat","oldData","getUpdatedData","data","keyOf","editIndex","getIndexByKey","getInsertedData","map","getRemovedData","_fireDataErrorOccurred","$popupContent","getPopupContent","dataErrorOccurred","fire","_needToCloseEditableCell","_closeEditItem","_isDefaultButtonVisible","allowDeleting","_isButtonVisible","visible","call","_isButtonDisabled","disabled","_getButtonConfig","config","buttonName","editingTexts","saveRowChanges","cancelRowChanges","editRow","undeleteRow","deleteRow","addRowToNode","methodName","editingOptions","actionName","allowAction","text","cssClass","onClick","e","event","stopPropagation","preventDefault","setTimeout","rowIndex","_getEditingButtons","buttonIndex","haveCustomButtons","slice","splice","_renderEditingButtons","$container","_createButton","_getEditCommandCellTemplate","watch","empty","setEmptyText","isRowBasedEditMode","getFirstEditableColumnIndex","columnsController","columnIndex","visibleColumns","getVisibleColumns","getFirstEditableCellInRow","rowsView","_getCellElement","getFocusedCellInRow","items","hasChanges","i","getRowIndexByKey","dispose","callBase","clearTimeout","_inputFocusTimeoutID","off","getDocument","up","_pointerUpEditorHandler","down","_pointerDownEditorHandler","optionChanged","args","fullName","_handleEditRowKeyChange","_handleChangesChange","handled","reinit","_resetEditColumnName","_resetEditRowKey","oldRowIndexCorrection","_getEditRowIndexCorrection","oldRowIndex","previousValue","_editRowFromOptionChanged","cancelEditData","dataController","_processInsertChanges","updateItems","repaintChangesOnly","isLiveUpdate","_addInsertInfo","publicMethods","refresh","_pageIndex","_refreshCore","apply","arguments","isEditRowKeyDefined","_setEditRowKey","silent","_setEditRowKeyByIndex","getKeyByRowIndex","fireError","getEditRowIndex","_getVisibleEditRowIndex","getEditFormRowIndex","isEditRowByIndex","isKeyEqual","isEditCell","visibleRowIndex","_getVisibleEditColumnIndex","_isProcessedItem","_getInsertRowIndex","isProcessedItems","_getInsertAfterOrBeforeKey","isProcessedItem","nextItem","insertAfterKey","_generateNewItem","_this$_getInternalDat2","insertInfo","_getLoadedRowIndex","loadedRowIndex","pageIndex","insertAfterOrBeforeKey","isLastPageLoaded","processItems","changeType","update","_this$_getInternalDat3","isInsert","processDataItem","generateDataValues","columns","_processDataItemCore","isNewRow","modified","modifiedValues","removed","_initNewRow","executeAction","promise","done","resolve","fail","_createInsertInfo","_getInsertIndex","parentKey","_this$_getInternalDat4","_setInsertAfterOrBeforeKey","allItems","itemIndex","isViewportBottom","visibleItemIndex","getBottomVisibleItemIndex","getTopVisibleItemIndex","getVisibleRows","insertKey","insertBeforeKey","maxInsertIndex","editItem","_this$_getInternalDat5","insertChange","_insertChange$insertA","_getPageIndexToInsertRow","lastPageIndex","pageCount","addRow","store","NAME","_addRow","param","oldEditRowIndex","allowCancelEditing","_allowRowAdding","_navigateToNewRow","__KEY__","_addRowCore","insertIndex","initialOldEditRowIndex","editRowIndex","_addChange","_editRowIndex","_change","focusController","c","pageIndexToInsertRow","navigateToRowByKey","navigateToRow","rowIndices","_showAddedRow","_afterInsertRow","_focusFirstEditableCellInRow","_beforeFocusElementInRow","$firstCell","_editCellInProgress","_delayedInputFocus","_isEditingStart","_beforeUpdateItems","editColumnName","getVisibleColumnIndex","_setEditColumnNameByIndex","_visibleColumns$index","_setEditColumnName","_getEditColumn","_getColumnByName","editColumn","columnName","editRowKey","isColumnHidden","visibleWidth","_resetEditIndices","_item$oldData","_editRowFromOptionChangedCore","preventRendering","_needFocusEditor","_focusEditorIfNeed","_showEditPopup","_repaintEditPopup","_getEditPopupHiddenHandler","_getPopupEditFormTemplate","_getSaveButtonConfig","saveEditData","_getCancelButtonConfig","_removeInternalData","_updateInsertAfterOrBeforeKeys","removeChange","_removeChange","executeOperation","func","waitForDeferredOperations","state","_processCanceledEditingCell","_repaintEditCell","oldColumn","loseFocus","$cell","beforeFocusCallback","callBeforeFocusCallbackAlways","inputFocus","$focusableElement","find","first","focusAndSelectElement","_beforeFocusCallback","real","ios","android","_focusEditingCell","$editCell","editColumnIndex","_checkAndDeleteRow","texts","confirmDelete","confirmDeleteMessage","_deleteRowCore","confirmDeleteTitle","showDialogTitle","confirmResult","_afterDeleteRow","_fireOnSaving","onSavingParams","_executeEditingAction","_disposed","_processChanges","deferreds","results","dataChanges","changeCopy","_beforeSaveEditData","remove","insert","newData","doneDeferred","always","_processRemoveIfError","_processRemove","_processRemoveCore","_processSaveEditDataResult","hasSavedData","changesLength","isError","_fireSaveEditDataEvents","_","_ref","isSaving","_resolveAfterSave","_saving","_saveEditDataInner","needFocusEditCell","_afterSaveEditData","dataSource","_ref2","beginLoading","_endSaving","endLoading","_cancelSaving","_beforeEndSaving","_refreshDataAfterSave","refreshMode","isFullRefresh","selection","reload","load","changesOnly","isEditColumnVisible","_isEditColumnVisible","useIcons","addCommandColumn","alignment","cellTemplate","fixedPosition","columnOption","_isEditButtonDisabled","isEditRowDefined","headerPanel","isButtonDisabled","setToolbarItemDisabled","_applyModified","$element","addClass","_beforeCloseEditCellInBatchMode","_cancelEditDataCore","_beforeCancelEditData","_afterCancelEditData","_hideEditPopup","hasEditData","isPageChanged","_getRowIndicesForCascadeUpdating","skipCurrentRow","addDeferred","_prepareChange","_options$row","rowKey","setCellValueResult","setCellValue","displayValueMap","_updateRowValues","values","updateFieldValue","forceUpdateRow","_applyChange","_focusPreviousEditingCellIfNeed","_updateEditRow","_needUpdateRow","isCustomSetCellValue","defaultSetCellValue","isCustomCalculateCellValue","visibleColumn","calculateCellValue","defaultCalculateCellValue","changeOptions","_applyChangeCore","_updateEditRowCore","_updateRowImmediately","_updateRowWithDelay","_validateEditFormAfterUpdate","$focusedElement","getActiveElement","getCellIndex","focusedElement","get","selectionRange","getSelectionRange","$focusedItem","selectionStart","setSelectionRange","changeParams","_this$getChanges","_getFormEditItemTemplate","editCellTemplate","getColumnTemplate","template","isRowMode","isRowEditing","isCellEditing","editingStartOptions","allowUpdating","getEditFormTemplate","icon","useLegacyColumnButtonTemplate","$button","attr","renderTemplate","iconType","getImageSourceType","getImageContainer","localizationName","getButtonLocalizationNames","format","hint","on","_button$onClick","append","prepareButtonItem","sortIndex","titleButtonTextByClassNames","revert","cancelAllChanges","saveAllChanges","className","hintText","widget","onInitialized","element","_getToolbarButtonClass","addWidgetPrefix","showText","location","locateInMenu","prepareEditButtons","buttonItems","allowAdding","highlightDataCell","parameters","cellModified","isCellModified","shouldHighlight","_allowEditAction","allowEditAction","eventName","startEditAction","needCallback","isNewRowInEditMode","visibleEditRowIndex","rows","editingModule","defaultOptions","editing","mode","selectTextOnEditStart","form","colCount","popup","controllers","extenders","_editingController","full","repaintRows","_this$_updateEditItem","_updateEditItem","_updateItemsCore","_applyChangeUpdate","_applyChangesOnly","_processItems","_processDataItem","dataItem","_processItem","dataIndex","_getChangedColumnIndices","oldItem","newItem","_isCellChanged","oldRow","newRow","editingController","cell","cells","needToRefreshOnDataSourceChange","isParasiteChange","Array","isArray","_handleDataSourceChange","dataSourceKeys","newChanges","isEditNewItem","every","views","is","$cellElements","getCellElements","cellIndex","cellElement","concat","_getCellTemplate","_createRow","$row","isRowRemoved","isRowInserted","isRowModified","removeClass","_getColumnIndexByElement","$tableElement","closest","$tableElements","getTableElements","_getColumnIndexByElementCore","$targetElement","_editCellByClick","target","isEditedCell","editCell","withoutSaveEditData","closeEditCell","_rowPointerDown","_pointerDownTimeout","_rowClick","isEditForm","rowElement","hasClass","_rowDblClick","_cellPrepared","isEditableCell","toggleClass","css","_editCellPrepared","_formItemPrepared","_getCellOptions","_createCell","cellValue","columnIdentifier","getCellOptions","_renderCore","_getToolbarItems","editButtonItems","excludedOptions","shouldInvalidate","optionName","_invalidate","isVisible"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    resetActiveElement\r\n} from \"../../core/utils/dom\";\r\nimport {\r\n    isDefined,\r\n    isObject,\r\n    isFunction,\r\n    isEmptyObject\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport pointerEvents from \"../../events/pointer\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    createObjectWithChanges\r\n} from \"../../data/array_utils\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    confirm\r\n} from \"../dialog\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    when,\r\n    Deferred,\r\n    fromPromise\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    equalByValue,\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport * as iconUtils from \"../../core/utils/icon\";\r\nimport {\r\n    EDITOR_CELL_CLASS,\r\n    ROW_CLASS,\r\n    EDIT_FORM_CLASS,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    DATA_EDIT_DATA_REMOVE_TYPE,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_EDITCOLUMNNAME_OPTION_NAME,\r\n    TARGET_COMPONENT_NAME,\r\n    EDITORS_INPUT_SELECTOR,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    EDIT_MODE_ROW,\r\n    EDIT_MODES,\r\n    ROW_BASED_MODES,\r\n    FIRST_NEW_ROW_POSITION,\r\n    LAST_NEW_ROW_POSITION,\r\n    PAGE_BOTTOM_NEW_ROW_POSITION,\r\n    PAGE_TOP_NEW_ROW_POSITION,\r\n    VIEWPORT_BOTTOM_NEW_ROW_POSITION,\r\n    VIEWPORT_TOP_NEW_ROW_POSITION\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar READONLY_CLASS = \"readonly\";\r\nvar LINK_CLASS = \"dx-link\";\r\nvar ROW_SELECTED = \"dx-selection\";\r\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar ROW_MODIFIED = \"dx-row-modified\";\r\nvar CELL_MODIFIED = \"dx-cell-modified\";\r\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\r\nvar DEFAULT_START_EDIT_ACTION = \"click\";\r\nvar EDIT_LINK_CLASS = {\r\n    save: \"dx-link-save\",\r\n    cancel: \"dx-link-cancel\",\r\n    edit: \"dx-link-edit\",\r\n    undelete: \"dx-link-undelete\",\r\n    delete: \"dx-link-delete\",\r\n    add: \"dx-link-add\"\r\n};\r\nvar EDIT_ICON_CLASS = {\r\n    save: \"save\",\r\n    cancel: \"revert\",\r\n    edit: \"edit\",\r\n    undelete: \"revert\",\r\n    delete: \"trash\",\r\n    add: \"add\"\r\n};\r\nvar METHOD_NAMES = {\r\n    edit: \"editRow\",\r\n    delete: \"deleteRow\",\r\n    undelete: \"undeleteRow\",\r\n    save: \"saveEditData\",\r\n    cancel: \"cancelEditData\",\r\n    add: \"addRowByRowIndex\"\r\n};\r\nvar ACTION_OPTION_NAMES = {\r\n    add: \"allowAdding\",\r\n    edit: \"allowUpdating\",\r\n    delete: \"allowDeleting\"\r\n};\r\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\r\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\r\nvar createFailureHandler = function(deferred) {\r\n    return function(arg) {\r\n        var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\r\n        deferred.reject(error)\r\n    }\r\n};\r\nvar isEditingCell = function(isEditRow, cellOptions) {\r\n    return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing\r\n};\r\nvar isEditingOrShowEditorAlwaysDataCell = function(isEditRow, cellOptions) {\r\n    var isCommandCell = !!cellOptions.column.command;\r\n    var isEditing = isEditingCell(isEditRow, cellOptions);\r\n    var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\r\n    return \"data\" === cellOptions.rowType && isEditorCell\r\n};\r\nvar EditingController = modules.ViewController.inherit(function() {\r\n    var getButtonIndex = (buttons, name) => {\r\n        var result = -1;\r\n        buttons.some((button, index) => {\r\n            if (getButtonName(button) === name) {\r\n                result = index;\r\n                return true\r\n            }\r\n        });\r\n        return result\r\n    };\r\n\r\n    function getButtonName(button) {\r\n        return isObject(button) ? button.name : button\r\n    }\r\n    return {\r\n        init: function() {\r\n            this._columnsController = this.getController(\"columns\");\r\n            this._dataController = this.getController(\"data\");\r\n            this._rowsView = this.getView(\"rowsView\");\r\n            this._lastOperation = null;\r\n            if (this._deferreds) {\r\n                this._deferreds.forEach(d => d.reject(\"cancel\"))\r\n            }\r\n            this._deferreds = [];\r\n            if (!this._dataChangedHandler) {\r\n                this._dataChangedHandler = this._handleDataChanged.bind(this);\r\n                this._dataController.changed.add(this._dataChangedHandler)\r\n            }\r\n            if (!this._saveEditorHandler) {\r\n                this.createAction(\"onInitNewRow\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserting\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowInserted\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditingStart\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdating\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowUpdated\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onRowRemoved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onSaving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceling\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                this.createAction(\"onEditCanceled\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                })\r\n            }\r\n            this._updateEditColumn();\r\n            this._updateEditButtons();\r\n            if (!this._internalState) {\r\n                this._internalState = []\r\n            }\r\n            this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\r\n            this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true\r\n        },\r\n        getEditMode: function() {\r\n            var editMode = this.option(\"editing.mode\");\r\n            if (-1 !== EDIT_MODES.indexOf(editMode)) {\r\n                return editMode\r\n            }\r\n            return EDIT_MODE_ROW\r\n        },\r\n        _getDefaultEditorTemplate: function() {\r\n            return (container, options) => {\r\n                var $editor = $(\"<div>\").appendTo(container);\r\n                this.getController(\"editorFactory\").createEditor($editor, extend({}, options.column, {\r\n                    value: options.value,\r\n                    setValue: options.setValue,\r\n                    row: options.row,\r\n                    parentType: \"dataRow\",\r\n                    width: null,\r\n                    readOnly: !options.setValue,\r\n                    isOnForm: options.isOnForm,\r\n                    id: options.id\r\n                }))\r\n            }\r\n        },\r\n        _getNewRowPosition: function() {\r\n            var newRowPosition = this.option(\"editing.newRowPosition\");\r\n            var scrollingMode = this.option(\"scrolling.mode\");\r\n            if (\"virtual\" === scrollingMode) {\r\n                switch (newRowPosition) {\r\n                    case PAGE_TOP_NEW_ROW_POSITION:\r\n                        return VIEWPORT_TOP_NEW_ROW_POSITION;\r\n                    case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                        return VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                    default:\r\n                        return newRowPosition\r\n                }\r\n            }\r\n            return newRowPosition\r\n        },\r\n        getChanges: function() {\r\n            return this.option(EDITING_CHANGES_OPTION_NAME)\r\n        },\r\n        getInsertRowCount: function() {\r\n            var changes = this.option(EDITING_CHANGES_OPTION_NAME);\r\n            return changes.filter(change => \"insert\" === change.type).length\r\n        },\r\n        resetChanges: function() {\r\n            var changes = this.getChanges();\r\n            var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\r\n            if (needReset) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, [])\r\n            }\r\n        },\r\n        _getInternalData: function(key) {\r\n            return this._internalState.filter(item => equalByValue(item.key, key))[0]\r\n        },\r\n        _addInternalData: function(params) {\r\n            var internalData = this._getInternalData(params.key);\r\n            if (internalData) {\r\n                return extend(internalData, params)\r\n            }\r\n            this._internalState.push(params);\r\n            return params\r\n        },\r\n        _getOldData: function(key) {\r\n            var _this$_getInternalDat;\r\n            return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData\r\n        },\r\n        getUpdatedData: function(data) {\r\n            var key = this._dataController.keyOf(data);\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (changes[editIndex]) {\r\n                return createObjectWithChanges(data, changes[editIndex].data)\r\n            }\r\n            return data\r\n        },\r\n        getInsertedData: function() {\r\n            return this.getChanges().filter(change => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map(change => change.data)\r\n        },\r\n        getRemovedData: function() {\r\n            return this.getChanges().filter(change => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map(change => this._getOldData(change.key))\r\n        },\r\n        _fireDataErrorOccurred: function(arg) {\r\n            if (\"cancel\" === arg) {\r\n                return\r\n            }\r\n            var $popupContent = this.getPopupContent();\r\n            this._dataController.dataErrorOccurred.fire(arg, $popupContent)\r\n        },\r\n        _needToCloseEditableCell: noop,\r\n        _closeEditItem: noop,\r\n        _handleDataChanged: noop,\r\n        _isDefaultButtonVisible: function(button, options) {\r\n            var result = true;\r\n            switch (button.name) {\r\n                case \"delete\":\r\n                    result = this.allowDeleting(options);\r\n                    break;\r\n                case \"undelete\":\r\n                    result = false\r\n            }\r\n            return result\r\n        },\r\n        _isButtonVisible: function(button, options) {\r\n            var visible = button.visible;\r\n            if (!isDefined(visible)) {\r\n                return this._isDefaultButtonVisible(button, options)\r\n            }\r\n            return isFunction(visible) ? visible.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : visible\r\n        },\r\n        _isButtonDisabled: function(button, options) {\r\n            var disabled = button.disabled;\r\n            return isFunction(disabled) ? disabled.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : !!disabled\r\n        },\r\n        _getButtonConfig: function(button, options) {\r\n            var config = isObject(button) ? button : {};\r\n            var buttonName = getButtonName(button);\r\n            var editingTexts = (options => {\r\n                var editingTexts = options.component.option(\"editing.texts\") || {};\r\n                return {\r\n                    save: editingTexts.saveRowChanges,\r\n                    cancel: editingTexts.cancelRowChanges,\r\n                    edit: editingTexts.editRow,\r\n                    undelete: editingTexts.undeleteRow,\r\n                    delete: editingTexts.deleteRow,\r\n                    add: editingTexts.addRowToNode\r\n                }\r\n            })(options);\r\n            var methodName = METHOD_NAMES[buttonName];\r\n            var editingOptions = this.option(\"editing\");\r\n            var actionName = ACTION_OPTION_NAMES[buttonName];\r\n            var allowAction = actionName ? editingOptions[actionName] : true;\r\n            return extend({\r\n                name: buttonName,\r\n                text: editingTexts[buttonName],\r\n                cssClass: EDIT_LINK_CLASS[buttonName]\r\n            }, {\r\n                onClick: methodName && (e => {\r\n                    var event = e.event;\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    setTimeout(() => {\r\n                        options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex)\r\n                    })\r\n                })\r\n            }, config)\r\n        },\r\n        _getEditingButtons: function(options) {\r\n            var buttonIndex;\r\n            var haveCustomButtons = !!options.column.buttons;\r\n            var buttons = (options.column.buttons || []).slice();\r\n            if (haveCustomButtons) {\r\n                buttonIndex = getButtonIndex(buttons, \"edit\");\r\n                if (buttonIndex >= 0) {\r\n                    if (getButtonIndex(buttons, \"save\") < 0) {\r\n                        buttons.splice(buttonIndex + 1, 0, \"save\")\r\n                    }\r\n                    if (getButtonIndex(buttons, \"cancel\") < 0) {\r\n                        buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\")\r\n                    }\r\n                }\r\n                buttonIndex = getButtonIndex(buttons, \"delete\");\r\n                if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\r\n                    buttons.splice(buttonIndex + 1, 0, \"undelete\")\r\n                }\r\n            } else {\r\n                buttons = BUTTON_NAMES.slice()\r\n            }\r\n            return buttons.map(button => this._getButtonConfig(button, options))\r\n        },\r\n        _renderEditingButtons: function($container, buttons, options, change) {\r\n            buttons.forEach(button => {\r\n                if (this._isButtonVisible(button, options)) {\r\n                    this._createButton($container, button, options, change)\r\n                }\r\n            })\r\n        },\r\n        _getEditCommandCellTemplate: function() {\r\n            return (container, options, change) => {\r\n                var $container = $(container);\r\n                if (\"data\" === options.rowType) {\r\n                    var buttons = this._getEditingButtons(options);\r\n                    this._renderEditingButtons($container, buttons, options, change);\r\n                    options.watch && options.watch(() => buttons.map(button => this._isButtonVisible(button, options)), () => {\r\n                        $container.empty();\r\n                        this._renderEditingButtons($container, buttons, options)\r\n                    })\r\n                } else {\r\n                    gridCoreUtils.setEmptyText($container)\r\n                }\r\n            }\r\n        },\r\n        isRowBasedEditMode: function() {\r\n            var editMode = this.getEditMode();\r\n            return -1 !== ROW_BASED_MODES.indexOf(editMode)\r\n        },\r\n        getFirstEditableColumnIndex: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var columnIndex;\r\n            var visibleColumns = columnsController.getVisibleColumns();\r\n            each(visibleColumns, (function(index, column) {\r\n                if (column.allowEditing) {\r\n                    columnIndex = index;\r\n                    return false\r\n                }\r\n            }));\r\n            return columnIndex\r\n        },\r\n        getFirstEditableCellInRow: function(rowIndex) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex())\r\n        },\r\n        getFocusedCellInRow: function(rowIndex) {\r\n            return this.getFirstEditableCellInRow(rowIndex)\r\n        },\r\n        getIndexByKey: function(key, items) {\r\n            return gridCoreUtils.getIndexByKey(key, items)\r\n        },\r\n        hasChanges: function(rowIndex) {\r\n            var changes = this.getChanges();\r\n            var result = false;\r\n            for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\r\n                if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\r\n                    result = true;\r\n                    break\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        dispose: function() {\r\n            this.callBase();\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.up, this._pointerUpEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), pointerEvents.down, this._pointerDownEditorHandler);\r\n            eventsEngine.off(domAdapter.getDocument(), clickEventName, this._saveEditorHandler)\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"editing\" === args.name) {\r\n                var fullName = args.fullName;\r\n                if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\r\n                    this._handleEditRowKeyChange(args)\r\n                } else if (fullName === EDITING_CHANGES_OPTION_NAME) {\r\n                    this._handleChangesChange(args)\r\n                } else if (!args.handled) {\r\n                    this._columnsController.reinit();\r\n                    this.init();\r\n                    this.resetChanges();\r\n                    this._resetEditColumnName();\r\n                    this._resetEditRowKey()\r\n                }\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        _handleEditRowKeyChange: function(args) {\r\n            var rowIndex = this._dataController.getRowIndexByKey(args.value);\r\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n            if (isDefined(args.value)) {\r\n                if (args.value !== args.previousValue) {\r\n                    this._editRowFromOptionChanged(rowIndex, oldRowIndex)\r\n                }\r\n            } else {\r\n                this.cancelEditData()\r\n            }\r\n        },\r\n        _handleChangesChange: function(args) {\r\n            var dataController = this._dataController;\r\n            if (!args.value.length && !args.previousValue.length) {\r\n                return\r\n            }\r\n            this._processInsertChanges(args.value);\r\n            dataController.updateItems({\r\n                repaintChangesOnly: true,\r\n                isLiveUpdate: false\r\n            })\r\n        },\r\n        _processInsertChanges: function(changes) {\r\n            changes.forEach(change => {\r\n                if (\"insert\" === change.type) {\r\n                    this._addInsertInfo(change)\r\n                }\r\n            })\r\n        },\r\n        publicMethods: function() {\r\n            return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"]\r\n        },\r\n        refresh: function() {\r\n            if (!isDefined(this._pageIndex)) {\r\n                return\r\n            }\r\n            this._refreshCore.apply(this, arguments)\r\n        },\r\n        _refreshCore: noop,\r\n        isEditing: function() {\r\n            var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n            return isEditRowKeyDefined\r\n        },\r\n        isEditRow: function() {\r\n            return false\r\n        },\r\n        _setEditRowKey: function(value, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            } else {\r\n                this.option(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            }\r\n        },\r\n        _setEditRowKeyByIndex: function(rowIndex, silent) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            if (void 0 === key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            this._setEditRowKey(key, silent)\r\n        },\r\n        getEditRowIndex: function() {\r\n            return this._getVisibleEditRowIndex()\r\n        },\r\n        getEditFormRowIndex: function() {\r\n            return -1\r\n        },\r\n        isEditRowByIndex(rowIndex) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);\r\n            if (isKeyEqual) {\r\n                return this._getVisibleEditRowIndex() === rowIndex\r\n            }\r\n            return isKeyEqual\r\n        },\r\n        isEditCell: function(visibleRowIndex, columnIndex) {\r\n            return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex\r\n        },\r\n        getPopupContent: noop,\r\n        _isProcessedItem: function(item) {\r\n            return false\r\n        },\r\n        _getInsertRowIndex: function(items, change, isProcessedItems) {\r\n            var result = -1;\r\n            var dataController = this._dataController;\r\n            var key = this._getInsertAfterOrBeforeKey(change);\r\n            if (!isDefined(key) && 0 === items.length) {\r\n                result = 0\r\n            } else if (isDefined(key)) {\r\n                items.some((item, index) => {\r\n                    var isProcessedItem = isProcessedItems || this._isProcessedItem(item);\r\n                    if (isObject(item)) {\r\n                        if (isProcessedItem || isDefined(item[INSERT_INDEX])) {\r\n                            if (equalByValue(item.key, key)) {\r\n                                result = index\r\n                            }\r\n                        } else if (equalByValue(dataController.keyOf(item), key)) {\r\n                            result = index\r\n                        }\r\n                    }\r\n                    if (result >= 0) {\r\n                        var nextItem = items[result + 1];\r\n                        if (nextItem && (\"detail\" === nextItem.rowType || \"detailAdaptive\" === nextItem.rowType) && isDefined(change.insertAfterKey)) {\r\n                            return\r\n                        }\r\n                        if (isDefined(change.insertAfterKey)) {\r\n                            result += 1\r\n                        }\r\n                        return true\r\n                    }\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _generateNewItem: function(key) {\r\n            var _this$_getInternalDat2;\r\n            var item = {\r\n                key: key\r\n            };\r\n            var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;\r\n            if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {\r\n                item[INSERT_INDEX] = insertInfo[INSERT_INDEX]\r\n            }\r\n            return item\r\n        },\r\n        _getLoadedRowIndex: function(items, change, isProcessedItems) {\r\n            var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);\r\n            var dataController = this._dataController;\r\n            if (loadedRowIndex < 0) {\r\n                var newRowPosition = this._getNewRowPosition();\r\n                var pageIndex = dataController.pageIndex();\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {\r\n                    loadedRowIndex = 0\r\n                } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController.isLastPageLoaded()) {\r\n                    loadedRowIndex = items.length\r\n                }\r\n            }\r\n            return loadedRowIndex\r\n        },\r\n        processItems: function(items, e) {\r\n            var changeType = e.changeType;\r\n            this.update(changeType);\r\n            var changes = this.getChanges();\r\n            changes.forEach(change => {\r\n                var _this$_getInternalDat3;\r\n                var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;\r\n                if (!isInsert) {\r\n                    return\r\n                }\r\n                var key = change.key;\r\n                var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;\r\n                if (!isDefined(key) || !isDefined(insertInfo)) {\r\n                    insertInfo = this._addInsertInfo(change);\r\n                    key = insertInfo.key\r\n                }\r\n                var loadedRowIndex = this._getLoadedRowIndex(items, change);\r\n                var item = this._generateNewItem(key);\r\n                if (loadedRowIndex >= 0) {\r\n                    items.splice(loadedRowIndex, 0, item)\r\n                }\r\n            });\r\n            return items\r\n        },\r\n        processDataItem: function(item, options, generateDataValues) {\r\n            var columns = options.visibleColumns;\r\n            var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            item.isEditing = false;\r\n            if (editIndex >= 0) {\r\n                this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues)\r\n            }\r\n        },\r\n        _processDataItemCore: function(item, change, key, columns, generateDataValues) {\r\n            var {\r\n                data: data,\r\n                type: type\r\n            } = change;\r\n            switch (type) {\r\n                case DATA_EDIT_DATA_INSERT_TYPE:\r\n                    item.isNewRow = true;\r\n                    item.key = key;\r\n                    item.data = data;\r\n                    break;\r\n                case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                    item.modified = true;\r\n                    item.oldData = item.data;\r\n                    item.data = createObjectWithChanges(item.data, data);\r\n                    item.modifiedValues = generateDataValues(data, columns, true);\r\n                    break;\r\n                case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                    item.removed = true\r\n            }\r\n        },\r\n        _initNewRow: function(options) {\r\n            this.executeAction(\"onInitNewRow\", options);\r\n            if (options.promise) {\r\n                var deferred = new Deferred;\r\n                when(fromPromise(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                return deferred\r\n            }\r\n        },\r\n        _createInsertInfo: function() {\r\n            var insertInfo = {};\r\n            insertInfo[INSERT_INDEX] = this._getInsertIndex();\r\n            return insertInfo\r\n        },\r\n        _addInsertInfo: function(change, parentKey) {\r\n            var _this$_getInternalDat4;\r\n            var insertInfo;\r\n            var {\r\n                key: key\r\n            } = change;\r\n            if (!isDefined(key)) {\r\n                key = String(new Guid);\r\n                change.key = key\r\n            }\r\n            insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;\r\n            if (!isDefined(insertInfo)) {\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                insertInfo = this._createInsertInfo();\r\n                if (!isDefined(insertAfterOrBeforeKey)) {\r\n                    this._setInsertAfterOrBeforeKey(change, parentKey)\r\n                }\r\n            }\r\n            this._addInternalData({\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            });\r\n            return {\r\n                insertInfo: insertInfo,\r\n                key: key\r\n            }\r\n        },\r\n        _setInsertAfterOrBeforeKey: function(change, parentKey) {\r\n            var dataController = this._dataController;\r\n            var allItems = dataController.items(true);\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var newRowPosition = this._getNewRowPosition();\r\n            switch (newRowPosition) {\r\n                case FIRST_NEW_ROW_POSITION:\r\n                case LAST_NEW_ROW_POSITION:\r\n                    break;\r\n                case PAGE_TOP_NEW_ROW_POSITION:\r\n                case PAGE_BOTTOM_NEW_ROW_POSITION:\r\n                    if (allItems.length) {\r\n                        var itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;\r\n                        change[0 === itemIndex ? \"insertBeforeKey\" : \"insertAfterKey\"] = allItems[itemIndex].key\r\n                    }\r\n                    break;\r\n                default:\r\n                    var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;\r\n                    var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();\r\n                    var row = dataController.getVisibleRows()[visibleItemIndex];\r\n                    if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\r\n                        visibleItemIndex++\r\n                    }\r\n                    var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);\r\n                    if (isDefined(insertKey)) {\r\n                        change.insertBeforeKey = insertKey\r\n                    }\r\n            }\r\n        },\r\n        _getInsertIndex: function() {\r\n            var maxInsertIndex = 0;\r\n            this.getChanges().forEach(editItem => {\r\n                var _this$_getInternalDat5;\r\n                var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;\r\n                if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {\r\n                    maxInsertIndex = insertInfo[INSERT_INDEX]\r\n                }\r\n            });\r\n            return maxInsertIndex + 1\r\n        },\r\n        _getInsertAfterOrBeforeKey: function(insertChange) {\r\n            var _insertChange$insertA;\r\n            return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey\r\n        },\r\n        _getPageIndexToInsertRow: function() {\r\n            var newRowPosition = this._getNewRowPosition();\r\n            var dataController = this._dataController;\r\n            var pageIndex = dataController.pageIndex();\r\n            var lastPageIndex = dataController.pageCount() - 1;\r\n            if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {\r\n                return 0\r\n            } else if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {\r\n                return lastPageIndex\r\n            }\r\n            return -1\r\n        },\r\n        addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            if (!store) {\r\n                dataController.fireError(\"E1052\", this.component.NAME);\r\n                return (new Deferred).reject()\r\n            }\r\n            return this._addRow(parentKey)\r\n        },\r\n        _addRow: function(parentKey) {\r\n            var dataController = this._dataController;\r\n            var store = dataController.store();\r\n            var key = store && store.key();\r\n            var param = {\r\n                data: {}\r\n            };\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var deferred = new Deferred;\r\n            this.refresh({\r\n                allowCancelEditing: true\r\n            });\r\n            if (!this._allowRowAdding()) {\r\n                when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);\r\n                return deferred.promise()\r\n            }\r\n            if (!key) {\r\n                param.data.__KEY__ = String(new Guid)\r\n            }\r\n            when(this._initNewRow(param, parentKey)).done(() => {\r\n                if (this._allowRowAdding()) {\r\n                    when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject)\r\n                } else {\r\n                    deferred.reject(\"cancel\")\r\n                }\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _allowRowAdding: function() {\r\n            var insertIndex = this._getInsertIndex();\r\n            if (insertIndex > 1) {\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        _addRowCore: function(data, parentKey, initialOldEditRowIndex) {\r\n            var change = {\r\n                data: data,\r\n                type: DATA_EDIT_DATA_INSERT_TYPE\r\n            };\r\n            var editRowIndex = this._getVisibleEditRowIndex();\r\n            var insertInfo = this._addInsertInfo(change, parentKey);\r\n            var key = insertInfo.key;\r\n            this._setEditRowKey(key, true);\r\n            this._addChange(change);\r\n            return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex)\r\n        },\r\n        _navigateToNewRow: function(oldEditRowIndex, change, editRowIndex) {\r\n            var _editRowIndex, _change;\r\n            var d = new Deferred;\r\n            var dataController = this._dataController;\r\n            var focusController = this.getController(\"focus\");\r\n            editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;\r\n            change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];\r\n            if (!change) {\r\n                return d.reject(\"cancel\").promise()\r\n            }\r\n            var pageIndexToInsertRow = this._getPageIndexToInsertRow();\r\n            var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);\r\n            var navigateToRowByKey = key => {\r\n                when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {\r\n                    rowIndex = dataController.getRowIndexByKey(change.key);\r\n                    d.resolve()\r\n                })\r\n            };\r\n            var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n            if (pageIndexToInsertRow >= 0) {\r\n                dataController.pageIndex(pageIndexToInsertRow).done(() => {\r\n                    navigateToRowByKey(change.key)\r\n                }).fail(d.reject)\r\n            } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {\r\n                navigateToRowByKey(insertAfterOrBeforeKey)\r\n            } else {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]\r\n                });\r\n                rowIndex = dataController.getRowIndexByKey(change.key);\r\n                if (rowIndex < 0) {\r\n                    navigateToRowByKey(change.key)\r\n                } else {\r\n                    d.resolve()\r\n                }\r\n            }\r\n            d.done(() => {\r\n                this._showAddedRow(rowIndex);\r\n                this._afterInsertRow(change.key)\r\n            });\r\n            return d.promise()\r\n        },\r\n        _showAddedRow: function(rowIndex) {\r\n            this._focusFirstEditableCellInRow(rowIndex)\r\n        },\r\n        _beforeFocusElementInRow: noop,\r\n        _focusFirstEditableCellInRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var key = dataController.getKeyByRowIndex(rowIndex);\r\n            var $firstCell = this.getFirstEditableCellInRow(rowIndex);\r\n            this._editCellInProgress = true;\r\n            this._delayedInputFocus($firstCell, () => {\r\n                rowIndex = dataController.getRowIndexByKey(key);\r\n                this._editCellInProgress = false;\r\n                this._beforeFocusElementInRow(rowIndex)\r\n            })\r\n        },\r\n        _isEditingStart: function(options) {\r\n            this.executeAction(\"onEditingStart\", options);\r\n            return options.cancel\r\n        },\r\n        _beforeUpdateItems: noop,\r\n        _getVisibleEditColumnIndex: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            if (!isDefined(editColumnName)) {\r\n                return -1\r\n            }\r\n            return this._columnsController.getVisibleColumnIndex(editColumnName)\r\n        },\r\n        _setEditColumnNameByIndex: function(index, silent) {\r\n            var _visibleColumns$index;\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent)\r\n        },\r\n        _setEditColumnName: function(name, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            } else {\r\n                this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            }\r\n        },\r\n        _resetEditColumnName: function() {\r\n            this._setEditColumnName(null, true)\r\n        },\r\n        _getEditColumn: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            return this._getColumnByName(editColumnName)\r\n        },\r\n        _getColumnByName: function(name) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            var editColumn;\r\n            isDefined(name) && visibleColumns.some(column => {\r\n                if (column.name === name) {\r\n                    editColumn = column;\r\n                    return true\r\n                }\r\n            });\r\n            return editColumn\r\n        },\r\n        _getVisibleEditRowIndex: function(columnName) {\r\n            var dataController = this._dataController;\r\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n            var rowIndex = dataController.getRowIndexByKey(editRowKey);\r\n            if (-1 === rowIndex) {\r\n                return rowIndex\r\n            }\r\n            return rowIndex + this._getEditRowIndexCorrection(columnName)\r\n        },\r\n        _getEditRowIndexCorrection: function(columnName) {\r\n            var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\r\n            var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\r\n            return isColumnHidden ? 1 : 0\r\n        },\r\n        _resetEditRowKey: function() {\r\n            this._setEditRowKey(null, true)\r\n        },\r\n        _resetEditIndices: function() {\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey()\r\n        },\r\n        editRow: function(rowIndex) {\r\n            var _item$oldData;\r\n            var dataController = this._dataController;\r\n            var items = dataController.items();\r\n            var item = items[rowIndex];\r\n            var params = {\r\n                data: item && item.data,\r\n                cancel: false\r\n            };\r\n            var oldRowIndex = this._getVisibleEditRowIndex();\r\n            if (!item) {\r\n                return\r\n            }\r\n            if (rowIndex === oldRowIndex) {\r\n                return true\r\n            }\r\n            if (void 0 === item.key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (this._isEditingStart(params)) {\r\n                return\r\n            }\r\n            this.resetChanges();\r\n            this.init();\r\n            this._resetEditColumnName();\r\n            this._pageIndex = dataController.pageIndex();\r\n            this._addInternalData({\r\n                key: item.key,\r\n                oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data\r\n            });\r\n            this._setEditRowKey(item.key)\r\n        },\r\n        _editRowFromOptionChanged: function(rowIndex, oldRowIndex) {\r\n            var rowIndices = [oldRowIndex, rowIndex];\r\n            this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\r\n            this._editRowFromOptionChangedCore(rowIndices, rowIndex)\r\n        },\r\n        _editRowFromOptionChangedCore: function(rowIndices, rowIndex, preventRendering) {\r\n            this._needFocusEditor = true;\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: rowIndices,\r\n                cancel: preventRendering\r\n            })\r\n        },\r\n        _focusEditorIfNeed: noop,\r\n        _showEditPopup: noop,\r\n        _repaintEditPopup: noop,\r\n        _getEditPopupHiddenHandler: function() {\r\n            return e => {\r\n                if (this.isEditing()) {\r\n                    this.cancelEditData()\r\n                }\r\n            }\r\n        },\r\n        _getPopupEditFormTemplate: noop,\r\n        _getSaveButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.saveRowChanges\"),\r\n                onClick: this.saveEditData.bind(this)\r\n            }\r\n        },\r\n        _getCancelButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.cancelRowChanges\"),\r\n                onClick: this.cancelEditData.bind(this)\r\n            }\r\n        },\r\n        _removeInternalData: function(key) {\r\n            var internalData = this._getInternalData(key);\r\n            var index = this._internalState.indexOf(internalData);\r\n            if (index > -1) {\r\n                this._internalState.splice(index, 1)\r\n            }\r\n        },\r\n        _updateInsertAfterOrBeforeKeys: function(changes, index) {\r\n            var removeChange = changes[index];\r\n            changes.forEach(change => {\r\n                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);\r\n                if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {\r\n                    change[isDefined(change.insertAfterKey) ? \"insertAfterKey\" : \"insertBeforeKey\"] = this._getInsertAfterOrBeforeKey(removeChange)\r\n                }\r\n            })\r\n        },\r\n        _removeChange: function(index) {\r\n            if (index >= 0) {\r\n                var changes = [...this.getChanges()];\r\n                var key = changes[index].key;\r\n                this._removeInternalData(key);\r\n                this._updateInsertAfterOrBeforeKeys(changes, index);\r\n                changes.splice(index, 1);\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n                if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\r\n                    this._resetEditIndices()\r\n                }\r\n            }\r\n        },\r\n        executeOperation: function(deferred, func) {\r\n            this._lastOperation && this._lastOperation.reject();\r\n            this._lastOperation = deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (\"rejected\" === deferred.state()) {\r\n                    return\r\n                }\r\n                func();\r\n                this._lastOperation = null\r\n            }).fail(() => {\r\n                deferred.reject();\r\n                this._lastOperation = null\r\n            })\r\n        },\r\n        waitForDeferredOperations: function() {\r\n            return when(...this._deferreds)\r\n        },\r\n        _processCanceledEditingCell: noop,\r\n        _repaintEditCell: function(column, oldColumn, oldEditRowIndex) {\r\n            this._needFocusEditor = true;\r\n            if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\r\n                this._editCellInProgress = true;\r\n                this.getController(\"editorFactory\").loseFocus();\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\r\n                })\r\n            } else if (column !== oldColumn) {\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: []\r\n                })\r\n            }\r\n        },\r\n        _delayedInputFocus: function($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\r\n            var inputFocus = () => {\r\n                if (beforeFocusCallback) {\r\n                    beforeFocusCallback()\r\n                }\r\n                if ($cell) {\r\n                    var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\r\n                    gridCoreUtils.focusAndSelectElement(this, $focusableElement)\r\n                }\r\n                this._beforeFocusCallback = null\r\n            };\r\n            if (devices.real().ios || devices.real().android) {\r\n                inputFocus()\r\n            } else {\r\n                if (this._beforeFocusCallback) {\r\n                    this._beforeFocusCallback()\r\n                }\r\n                clearTimeout(this._inputFocusTimeoutID);\r\n                if (callBeforeFocusCallbackAlways) {\r\n                    this._beforeFocusCallback = beforeFocusCallback\r\n                }\r\n                this._inputFocusTimeoutID = setTimeout(inputFocus)\r\n            }\r\n        },\r\n        _focusEditingCell: function(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            var editColumnIndex = this._getVisibleEditColumnIndex();\r\n            $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n            if ($editCell) {\r\n                this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)\r\n            }\r\n        },\r\n        deleteRow: function(rowIndex) {\r\n            this._checkAndDeleteRow(rowIndex)\r\n        },\r\n        _checkAndDeleteRow: function(rowIndex) {\r\n            var editingOptions = this.option(\"editing\");\r\n            var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;\r\n            var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;\r\n            var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;\r\n            var item = this._dataController.items()[rowIndex];\r\n            var allowDeleting = !this.isEditing() || item.isNewRow;\r\n            if (item && allowDeleting) {\r\n                if (!confirmDelete || !confirmDeleteMessage) {\r\n                    this._deleteRowCore(rowIndex)\r\n                } else {\r\n                    var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\r\n                    var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\r\n                    confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {\r\n                        if (confirmResult) {\r\n                            this._deleteRowCore(rowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _deleteRowCore: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var key = item && item.key;\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            this.refresh();\r\n            var changes = this.getChanges();\r\n            var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n            if (editIndex >= 0) {\r\n                if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                    this._removeChange(editIndex)\r\n                } else {\r\n                    this._addChange({\r\n                        key: key,\r\n                        type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                    })\r\n                }\r\n            } else {\r\n                this._addChange({\r\n                    key: key,\r\n                    oldData: item.data,\r\n                    type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                })\r\n            }\r\n            return this._afterDeleteRow(rowIndex, oldEditRowIndex)\r\n        },\r\n        _afterDeleteRow: function(rowIndex, oldEditRowIndex) {\r\n            return this.saveEditData()\r\n        },\r\n        undeleteRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var key = item && item.key;\r\n            var changes = this.getChanges();\r\n            if (item) {\r\n                var editIndex = gridCoreUtils.getIndexByKey(key, changes);\r\n                if (editIndex >= 0) {\r\n                    var {\r\n                        data: data\r\n                    } = changes[editIndex];\r\n                    if (isEmptyObject(data)) {\r\n                        this._removeChange(editIndex)\r\n                    } else {\r\n                        this._addChange({\r\n                            key: key,\r\n                            type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                        })\r\n                    }\r\n                    dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldEditRowIndex, rowIndex]\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _fireOnSaving: function() {\r\n            var onSavingParams = {\r\n                cancel: false,\r\n                promise: null,\r\n                changes: [...this.getChanges()]\r\n            };\r\n            this.executeAction(\"onSaving\", onSavingParams);\r\n            var d = new Deferred;\r\n            when(fromPromise(onSavingParams.promise)).done(() => {\r\n                d.resolve(onSavingParams)\r\n            }).fail(arg => {\r\n                createFailureHandler(d);\r\n                this._fireDataErrorOccurred(arg);\r\n                d.resolve({\r\n                    cancel: true\r\n                })\r\n            });\r\n            return d\r\n        },\r\n        _executeEditingAction: function(actionName, params, func) {\r\n            if (this.component._disposed) {\r\n                return null\r\n            }\r\n            var deferred = new Deferred;\r\n            this.executeAction(actionName, params);\r\n            when(fromPromise(params.cancel)).done((function(cancel) {\r\n                if (cancel) {\r\n                    setTimeout((function() {\r\n                        deferred.resolve(\"cancel\")\r\n                    }))\r\n                } else {\r\n                    func(params).done(deferred.resolve).fail(createFailureHandler(deferred))\r\n                }\r\n            })).fail(createFailureHandler(deferred));\r\n            return deferred\r\n        },\r\n        _processChanges: function(deferreds, results, dataChanges, changes) {\r\n            var store = this._dataController.store();\r\n            each(changes, (index, change) => {\r\n                var oldData = this._getOldData(change.key);\r\n                var {\r\n                    data: data,\r\n                    type: type\r\n                } = change;\r\n                var changeCopy = _extends({}, change);\r\n                var deferred;\r\n                var params;\r\n                if (this._beforeSaveEditData(change, index)) {\r\n                    return\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        params = {\r\n                            data: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowRemoving\", params, (function() {\r\n                            return store.remove(change.key).done((function(key) {\r\n                                dataChanges.push({\r\n                                    type: \"remove\",\r\n                                    key: key\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        params = {\r\n                            data: data,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowInserting\", params, (function() {\r\n                            return store.insert(params.data).done((function(data, key) {\r\n                                if (isDefined(key)) {\r\n                                    changeCopy.key = key\r\n                                }\r\n                                if (data && isObject(data) && data !== params.data) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"insert\",\r\n                                    data: data,\r\n                                    index: 0\r\n                                })\r\n                            }))\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        params = {\r\n                            newData: data,\r\n                            oldData: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = this._executeEditingAction(\"onRowUpdating\", params, (function() {\r\n                            return store.update(change.key, params.newData).done((function(data, key) {\r\n                                if (data && isObject(data) && data !== params.newData) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"update\",\r\n                                    key: key,\r\n                                    data: data\r\n                                })\r\n                            }))\r\n                        }))\r\n                }\r\n                changes[index] = changeCopy;\r\n                if (deferred) {\r\n                    var doneDeferred = new Deferred;\r\n                    deferred.always((function(data) {\r\n                        results.push({\r\n                            key: change.key,\r\n                            result: data\r\n                        })\r\n                    })).always(doneDeferred.resolve);\r\n                    deferreds.push(doneDeferred.promise())\r\n                }\r\n            })\r\n        },\r\n        _processRemoveIfError: function(changes, editIndex) {\r\n            var change = changes[editIndex];\r\n            if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                if (editIndex >= 0) {\r\n                    changes.splice(editIndex, 1)\r\n                }\r\n            }\r\n            return true\r\n        },\r\n        _processRemove: function(changes, editIndex, cancel) {\r\n            var change = changes[editIndex];\r\n            if (!cancel || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                return this._processRemoveCore(changes, editIndex, !cancel || !change)\r\n            }\r\n        },\r\n        _processRemoveCore: function(changes, editIndex) {\r\n            if (editIndex >= 0) {\r\n                changes.splice(editIndex, 1)\r\n            }\r\n            return true\r\n        },\r\n        _processSaveEditDataResult: function(results) {\r\n            var hasSavedData = false;\r\n            var changes = [...this.getChanges()];\r\n            var changesLength = changes.length;\r\n            for (var i = 0; i < results.length; i++) {\r\n                var arg = results[i].result;\r\n                var cancel = \"cancel\" === arg;\r\n                var editIndex = gridCoreUtils.getIndexByKey(results[i].key, changes);\r\n                var change = changes[editIndex];\r\n                var isError = arg && arg instanceof Error;\r\n                if (isError) {\r\n                    if (change) {\r\n                        this._addInternalData({\r\n                            key: change.key,\r\n                            error: arg\r\n                        })\r\n                    }\r\n                    this._fireDataErrorOccurred(arg);\r\n                    if (this._processRemoveIfError(changes, editIndex)) {\r\n                        break\r\n                    }\r\n                } else if (this._processRemove(changes, editIndex, cancel)) {\r\n                    hasSavedData = !cancel\r\n                }\r\n            }\r\n            if (changes.length < changesLength) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes)\r\n            }\r\n            return hasSavedData\r\n        },\r\n        _fireSaveEditDataEvents: function(changes) {\r\n            each(changes, (_, _ref) => {\r\n                var {\r\n                    data: data,\r\n                    key: key,\r\n                    type: type\r\n                } = _ref;\r\n                var internalData = this._addInternalData({\r\n                    key: key\r\n                });\r\n                var params = {\r\n                    key: key,\r\n                    data: data\r\n                };\r\n                if (internalData.error) {\r\n                    params.error = internalData.error\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        this.executeAction(\"onRowRemoved\", extend({}, params, {\r\n                            data: internalData.oldData\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        this.executeAction(\"onRowInserted\", params);\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        this.executeAction(\"onRowUpdated\", params)\r\n                }\r\n            });\r\n            this.executeAction(\"onSaved\", {\r\n                changes: changes\r\n            })\r\n        },\r\n        saveEditData: function() {\r\n            var deferred = new Deferred;\r\n            this.waitForDeferredOperations().done(() => {\r\n                if (this.isSaving()) {\r\n                    this._resolveAfterSave(deferred);\r\n                    return\r\n                }\r\n                when(this._beforeSaveEditData()).done(cancel => {\r\n                    if (cancel) {\r\n                        this._resolveAfterSave(deferred, {\r\n                            cancel: cancel\r\n                        });\r\n                        return\r\n                    }\r\n                    this._saving = true;\r\n                    var options = {};\r\n                    this._saveEditDataInner(options).always(() => {\r\n                        this._saving = false;\r\n                        options.needFocusEditCell && this._focusEditingCell()\r\n                    }).done(deferred.resolve).fail(deferred.reject)\r\n                }).fail(deferred.reject)\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _resolveAfterSave: function(deferred) {\r\n            var {\r\n                cancel: cancel,\r\n                error: error\r\n            } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};\r\n            when(this._afterSaveEditData(cancel)).done((function() {\r\n                deferred.resolve(error)\r\n            })).fail(deferred.reject)\r\n        },\r\n        _saveEditDataInner: function(options) {\r\n            var results = [];\r\n            var deferreds = [];\r\n            var dataChanges = [];\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController.dataSource();\r\n            var result = new Deferred;\r\n            when(this._fireOnSaving()).done(_ref2 => {\r\n                var {\r\n                    cancel: cancel,\r\n                    changes: changes\r\n                } = _ref2;\r\n                if (cancel) {\r\n                    return result.resolve().promise()\r\n                }\r\n                this._processChanges(deferreds, results, dataChanges, changes);\r\n                if (deferreds.length) {\r\n                    null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\r\n                    when(...deferreds).done(() => {\r\n                        if (this._processSaveEditDataResult(results)) {\r\n                            this._endSaving(dataChanges, changes, result)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                            result.resolve()\r\n                        }\r\n                    }).fail(error => {\r\n                        null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                        result.resolve(error)\r\n                    });\r\n                    return result.always(() => {\r\n                        options.needFocusEditCell = true\r\n                    }).promise()\r\n                }\r\n                this._cancelSaving(result)\r\n            }).fail(result.reject);\r\n            return result.promise()\r\n        },\r\n        _beforeEndSaving: function(changes) {\r\n            this._resetEditIndices()\r\n        },\r\n        _endSaving: function(dataChanges, changes, deferred) {\r\n            var dataSource = this._dataController.dataSource();\r\n            this._beforeEndSaving(changes);\r\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n            this._refreshDataAfterSave(dataChanges, changes, deferred)\r\n        },\r\n        _cancelSaving: function(result) {\r\n            this.executeAction(\"onSaved\", {\r\n                changes: []\r\n            });\r\n            this._resolveAfterSave(result)\r\n        },\r\n        _refreshDataAfterSave: function(dataChanges, changes, deferred) {\r\n            var dataController = this._dataController;\r\n            var refreshMode = this.option(\"editing.refreshMode\");\r\n            var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\r\n            if (!isFullRefresh) {\r\n                dataController.push(dataChanges)\r\n            }\r\n            when(dataController.refresh({\r\n                selection: isFullRefresh,\r\n                reload: isFullRefresh,\r\n                load: \"reshape\" === refreshMode,\r\n                changesOnly: this.option(\"repaintChangesOnly\")\r\n            })).always(() => {\r\n                this._fireSaveEditDataEvents(changes)\r\n            }).done(() => {\r\n                this._resolveAfterSave(deferred)\r\n            }).fail(error => {\r\n                this._resolveAfterSave(deferred, {\r\n                    error: error\r\n                })\r\n            })\r\n        },\r\n        isSaving: function() {\r\n            return this._saving\r\n        },\r\n        _updateEditColumn: function() {\r\n            var isEditColumnVisible = this._isEditColumnVisible();\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\r\n            this._columnsController.addCommandColumn({\r\n                type: \"buttons\",\r\n                command: \"edit\",\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass,\r\n                width: \"auto\",\r\n                alignment: \"center\",\r\n                cellTemplate: this._getEditCommandCellTemplate(),\r\n                fixedPosition: \"right\"\r\n            });\r\n            this._columnsController.columnOption(\"command:edit\", {\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass\r\n            })\r\n        },\r\n        _isEditColumnVisible: function() {\r\n            var editingOptions = this.option(\"editing\");\r\n            return editingOptions.allowDeleting\r\n        },\r\n        _isEditButtonDisabled: function() {\r\n            var hasChanges = this.hasChanges();\r\n            var isEditRowDefined = isDefined(this.option(\"editing.editRowKey\"));\r\n            return !(isEditRowDefined || hasChanges)\r\n        },\r\n        _updateEditButtons: function() {\r\n            var headerPanel = this.getView(\"headerPanel\");\r\n            var isButtonDisabled = this._isEditButtonDisabled();\r\n            if (headerPanel) {\r\n                headerPanel.setToolbarItemDisabled(\"saveButton\", isButtonDisabled);\r\n                headerPanel.setToolbarItemDisabled(\"revertButton\", isButtonDisabled)\r\n            }\r\n        },\r\n        _applyModified: function($element) {\r\n            $element && $element.addClass(CELL_MODIFIED)\r\n        },\r\n        _beforeCloseEditCellInBatchMode: noop,\r\n        cancelEditData: function() {\r\n            var changes = this.getChanges();\r\n            var params = {\r\n                cancel: false,\r\n                changes: changes\r\n            };\r\n            this.executeAction(\"onEditCanceling\", params);\r\n            if (!params.cancel) {\r\n                this._cancelEditDataCore();\r\n                this.executeAction(\"onEditCanceled\", {\r\n                    changes: changes\r\n                })\r\n            }\r\n        },\r\n        _cancelEditDataCore: function() {\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            this._beforeCancelEditData();\r\n            this.init();\r\n            this.resetChanges();\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey();\r\n            this._afterCancelEditData(rowIndex)\r\n        },\r\n        _afterCancelEditData: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            dataController.updateItems({\r\n                repaintChangesOnly: this.option(\"repaintChangesOnly\")\r\n            })\r\n        },\r\n        _hideEditPopup: noop,\r\n        hasEditData: function() {\r\n            return this.hasChanges()\r\n        },\r\n        update: function(changeType) {\r\n            var dataController = this._dataController;\r\n            if (dataController && this._pageIndex !== dataController.pageIndex()) {\r\n                if (\"refresh\" === changeType) {\r\n                    this.refresh({\r\n                        isPageChanged: true\r\n                    })\r\n                }\r\n                this._pageIndex = dataController.pageIndex()\r\n            }\r\n            this._updateEditButtons()\r\n        },\r\n        _getRowIndicesForCascadeUpdating: function(row, skipCurrentRow) {\r\n            return skipCurrentRow ? [] : [row.rowIndex]\r\n        },\r\n        addDeferred: function(deferred) {\r\n            if (this._deferreds.indexOf(deferred) < 0) {\r\n                this._deferreds.push(deferred);\r\n                deferred.always(() => {\r\n                    var index = this._deferreds.indexOf(deferred);\r\n                    if (index >= 0) {\r\n                        this._deferreds.splice(index, 1)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _prepareChange: function(options, value, text) {\r\n            var _options$row;\r\n            var newData = {};\r\n            var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 !== rowKey) {\r\n                options.value = value;\r\n                var setCellValueResult = fromPromise(options.column.setCellValue(newData, value, extend(true, {}, oldData), text));\r\n                setCellValueResult.done((function() {\r\n                    deferred.resolve({\r\n                        data: newData,\r\n                        key: rowKey,\r\n                        oldData: oldData,\r\n                        type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                    })\r\n                })).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));\r\n                if (isDefined(text) && options.column.displayValueMap) {\r\n                    options.column.displayValueMap[value] = text\r\n                }\r\n                this._updateRowValues(options);\r\n                this.addDeferred(deferred)\r\n            }\r\n            return deferred\r\n        },\r\n        _updateRowValues: function(options) {\r\n            if (options.values) {\r\n                var dataController = this._dataController;\r\n                var rowIndex = dataController.getRowIndexByKey(options.key);\r\n                var row = dataController.getVisibleRows()[rowIndex];\r\n                if (row) {\r\n                    options.values = row.values\r\n                }\r\n                options.values[options.columnIndex] = options.value\r\n            }\r\n        },\r\n        updateFieldValue: function(options, value, text, forceUpdateRow) {\r\n            var rowKey = options.key;\r\n            var deferred = new Deferred;\r\n            if (void 0 === rowKey) {\r\n                this._dataController.fireError(\"E1043\")\r\n            }\r\n            if (options.column.setCellValue) {\r\n                this._prepareChange(options, value, text).done(params => {\r\n                    when(this._applyChange(options, params, forceUpdateRow)).always(() => {\r\n                        deferred.resolve()\r\n                    })\r\n                })\r\n            } else {\r\n                deferred.resolve()\r\n            }\r\n            return deferred.promise()\r\n        },\r\n        _focusPreviousEditingCellIfNeed: function(options) {\r\n            if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {\r\n                this._focusEditingCell();\r\n                this._updateEditRow(options.row, true);\r\n                return true\r\n            }\r\n        },\r\n        _needUpdateRow: function(column) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            if (!column) {\r\n                column = this._getEditColumn()\r\n            }\r\n            var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\r\n            var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);\r\n            return isCustomSetCellValue || isCustomCalculateCellValue\r\n        },\r\n        _applyChange: function(options, params, forceUpdateRow) {\r\n            var changeOptions = _extends({}, options, {\r\n                forceUpdateRow: forceUpdateRow\r\n            });\r\n            this._addChange(params, changeOptions);\r\n            this._updateEditButtons();\r\n            return this._applyChangeCore(options, changeOptions.forceUpdateRow)\r\n        },\r\n        _applyChangeCore: function(options, forceUpdateRow) {\r\n            var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n            var row = options.row;\r\n            if (row) {\r\n                if (forceUpdateRow || isCustomSetCellValue) {\r\n                    this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n                } else if (row.update) {\r\n                    row.update()\r\n                }\r\n            }\r\n        },\r\n        _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n            this._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\r\n            })\r\n        },\r\n        _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            if (forceUpdateRow) {\r\n                this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)\r\n            } else {\r\n                this._updateRowWithDelay(row, isCustomSetCellValue)\r\n            }\r\n        },\r\n        _updateRowImmediately: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\r\n            this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n            if (!forceUpdateRow) {\r\n                this._focusEditingCell()\r\n            }\r\n        },\r\n        _updateRowWithDelay: function(row, isCustomSetCellValue) {\r\n            var deferred = new Deferred;\r\n            this.addDeferred(deferred);\r\n            setTimeout(() => {\r\n                var $focusedElement = $(domAdapter.getActiveElement());\r\n                var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);\r\n                var focusedElement = $focusedElement.get(0);\r\n                var selectionRange = gridCoreUtils.getSelectionRange(focusedElement);\r\n                this._updateEditRowCore(row, false, isCustomSetCellValue);\r\n                this._validateEditFormAfterUpdate(row, isCustomSetCellValue);\r\n                if (columnIndex >= 0) {\r\n                    var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);\r\n                    this._delayedInputFocus($focusedItem, () => {\r\n                        setTimeout(() => {\r\n                            focusedElement = domAdapter.getActiveElement();\r\n                            if (selectionRange.selectionStart >= 0) {\r\n                                gridCoreUtils.setSelectionRange(focusedElement, selectionRange)\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n                deferred.resolve()\r\n            })\r\n        },\r\n        _validateEditFormAfterUpdate: noop,\r\n        _addChange: function(changeParams, options) {\r\n            var _this$getChanges;\r\n            var row = null === options || void 0 === options ? void 0 : options.row;\r\n            var changes = [...this.getChanges()];\r\n            var index = gridCoreUtils.getIndexByKey(changeParams.key, changes);\r\n            if (index < 0) {\r\n                index = changes.length;\r\n                this._addInternalData({\r\n                    key: changeParams.key,\r\n                    oldData: changeParams.oldData\r\n                });\r\n                delete changeParams.oldData;\r\n                changes.push(changeParams)\r\n            }\r\n            var change = _extends({}, changes[index]);\r\n            if (change) {\r\n                if (changeParams.data) {\r\n                    change.data = createObjectWithChanges(change.data, changeParams.data)\r\n                }\r\n                if ((!change.type || !changeParams.data) && changeParams.type) {\r\n                    change.type = changeParams.type\r\n                }\r\n                if (row) {\r\n                    row.oldData = this._getOldData(row.key);\r\n                    row.data = createObjectWithChanges(row.data, changeParams.data)\r\n                }\r\n            }\r\n            changes[index] = change;\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n            if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {\r\n                options.forceUpdateRow = true\r\n            }\r\n            return change\r\n        },\r\n        _getFormEditItemTemplate: function(cellOptions, column) {\r\n            return column.editCellTemplate || this._getDefaultEditorTemplate()\r\n        },\r\n        getColumnTemplate: function(options) {\r\n            var column = options.column;\r\n            var rowIndex = options.row && options.row.rowIndex;\r\n            var template;\r\n            var isRowMode = this.isRowBasedEditMode();\r\n            var isRowEditing = this.isEditRow(rowIndex);\r\n            var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);\r\n            var editingStartOptions;\r\n            if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\r\n                var allowUpdating = this.allowUpdating(options);\r\n                if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {\r\n                    if (column.showEditorAlways && !isRowMode) {\r\n                        editingStartOptions = {\r\n                            cancel: false,\r\n                            key: options.row.isNewRow ? void 0 : options.row.key,\r\n                            data: options.row.data,\r\n                            column: column\r\n                        };\r\n                        this._isEditingStart(editingStartOptions)\r\n                    }\r\n                    if (!editingStartOptions || !editingStartOptions.cancel) {\r\n                        options.setValue = (value, text) => {\r\n                            this.updateFieldValue(options, value, text)\r\n                        }\r\n                    }\r\n                }\r\n                template = column.editCellTemplate || this._getDefaultEditorTemplate()\r\n            } else if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\r\n                template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options)\r\n            }\r\n            return template\r\n        },\r\n        _createButton: function($container, button, options, change) {\r\n            var icon = EDIT_ICON_CLASS[button.name];\r\n            var useIcons = this.option(\"editing.useIcons\");\r\n            var useLegacyColumnButtonTemplate = this.option(\"useLegacyColumnButtonTemplate\");\r\n            var $button = $(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\r\n            if (button.template && useLegacyColumnButtonTemplate) {\r\n                this._rowsView.renderTemplate($container, button.template, options, true)\r\n            } else {\r\n                if (button.template) {\r\n                    $button = $(\"<span>\").addClass(button.cssClass)\r\n                } else if (useIcons && icon || button.icon) {\r\n                    icon = button.icon || icon;\r\n                    var iconType = iconUtils.getImageSourceType(icon);\r\n                    if (\"image\" === iconType || \"svg\" === iconType) {\r\n                        $button = iconUtils.getImageContainer(icon).addClass(button.cssClass)\r\n                    } else {\r\n                        $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text)\r\n                    }\r\n                    $button.addClass(\"dx-link-icon\");\r\n                    $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\r\n                    var localizationName = this.getButtonLocalizationNames()[button.name];\r\n                    localizationName && $button.attr(\"aria-label\", messageLocalization.format(localizationName))\r\n                } else {\r\n                    $button.text(button.text)\r\n                }\r\n                if (isDefined(button.hint)) {\r\n                    $button.attr(\"title\", button.hint)\r\n                }\r\n                if (this._isButtonDisabled(button, options)) {\r\n                    $button.addClass(\"dx-state-disabled\")\r\n                } else if (!button.template || button.onClick) {\r\n                    eventsEngine.on($button, addNamespace(\"click\", EDITING_NAMESPACE), this.createAction((function(e) {\r\n                        var _button$onClick;\r\n                        null === (_button$onClick = button.onClick) || void 0 === _button$onClick ? void 0 : _button$onClick.call(button, extend({}, e, {\r\n                            row: options.row,\r\n                            column: options.column\r\n                        }));\r\n                        e.event.preventDefault();\r\n                        e.event.stopPropagation()\r\n                    })))\r\n                }\r\n                $container.append($button, \"&nbsp;\");\r\n                if (button.template) {\r\n                    this._rowsView.renderTemplate($button, button.template, options, true, change)\r\n                }\r\n            }\r\n        },\r\n        getButtonLocalizationNames: () => ({\r\n            edit: \"dxDataGrid-editingEditRow\",\r\n            save: \"dxDataGrid-editingSaveRowChanges\",\r\n            delete: \"dxDataGrid-editingDeleteRow\",\r\n            undelete: \"dxDataGrid-editingUndeleteRow\",\r\n            cancel: \"dxDataGrid-editingCancelRowChanges\"\r\n        }),\r\n        prepareButtonItem: function(headerPanel, name, methodName, sortIndex) {\r\n            var editingTexts = this.option(\"editing.texts\") || {};\r\n            var titleButtonTextByClassNames = {\r\n                revert: editingTexts.cancelAllChanges,\r\n                save: editingTexts.saveAllChanges,\r\n                addRow: editingTexts.addRow\r\n            };\r\n            var className = {\r\n                revert: \"cancel\",\r\n                save: \"save\",\r\n                addRow: \"addrow\"\r\n            } [name];\r\n            var hintText = titleButtonTextByClassNames[name];\r\n            var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && this._isEditButtonDisabled();\r\n            return {\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    onInitialized: e => {\r\n                        $(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + this.addWidgetPrefix(className) + \"-button\"))\r\n                    },\r\n                    icon: \"edit-button-\" + className,\r\n                    disabled: isButtonDisabled,\r\n                    onClick: () => {\r\n                        setTimeout(() => {\r\n                            this[methodName]()\r\n                        })\r\n                    },\r\n                    text: hintText,\r\n                    hint: hintText\r\n                },\r\n                showText: \"inMenu\",\r\n                name: name + \"Button\",\r\n                location: \"after\",\r\n                locateInMenu: \"auto\",\r\n                sortIndex: sortIndex\r\n            }\r\n        },\r\n        prepareEditButtons: function(headerPanel) {\r\n            var editingOptions = this.option(\"editing\") || {};\r\n            var buttonItems = [];\r\n            if (editingOptions.allowAdding) {\r\n                buttonItems.push(this.prepareButtonItem(headerPanel, \"addRow\", \"addRow\", 20))\r\n            }\r\n            return buttonItems\r\n        },\r\n        highlightDataCell: function($cell, parameters) {\r\n            var cellModified = this.isCellModified(parameters);\r\n            var shouldHighlight = cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing);\r\n            shouldHighlight && $cell.addClass(CELL_MODIFIED)\r\n        },\r\n        _afterInsertRow: noop,\r\n        _beforeSaveEditData: function(change) {\r\n            if (change && !isDefined(change.key) && isDefined(change.type)) {\r\n                return true\r\n            }\r\n        },\r\n        _afterSaveEditData: noop,\r\n        _beforeCancelEditData: noop,\r\n        _allowEditAction: function(actionName, options) {\r\n            var allowEditAction = this.option(\"editing.\" + actionName);\r\n            if (isFunction(allowEditAction)) {\r\n                allowEditAction = allowEditAction({\r\n                    component: this.component,\r\n                    row: options.row\r\n                })\r\n            }\r\n            return allowEditAction\r\n        },\r\n        allowUpdating: function(options, eventName) {\r\n            var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\r\n            var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\r\n            return needCallback && this._allowEditAction(\"allowUpdating\", options)\r\n        },\r\n        allowDeleting: function(options) {\r\n            return this._allowEditAction(\"allowDeleting\", options)\r\n        },\r\n        isCellModified: function(parameters) {\r\n            var columnIndex = parameters.columnIndex;\r\n            var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\r\n            return !!modifiedValues && void 0 !== modifiedValues[columnIndex]\r\n        },\r\n        isNewRowInEditMode: function() {\r\n            var visibleEditRowIndex = this._getVisibleEditRowIndex();\r\n            var rows = this._dataController.items();\r\n            return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false\r\n        }\r\n    }\r\n}());\r\nexport var editingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                mode: \"row\",\r\n                refreshMode: \"full\",\r\n                newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,\r\n                allowAdding: false,\r\n                allowUpdating: false,\r\n                allowDeleting: false,\r\n                useIcons: false,\r\n                selectTextOnEditStart: false,\r\n                confirmDelete: true,\r\n                texts: {\r\n                    editRow: messageLocalization.format(\"dxDataGrid-editingEditRow\"),\r\n                    saveAllChanges: messageLocalization.format(\"dxDataGrid-editingSaveAllChanges\"),\r\n                    saveRowChanges: messageLocalization.format(\"dxDataGrid-editingSaveRowChanges\"),\r\n                    cancelAllChanges: messageLocalization.format(\"dxDataGrid-editingCancelAllChanges\"),\r\n                    cancelRowChanges: messageLocalization.format(\"dxDataGrid-editingCancelRowChanges\"),\r\n                    addRow: messageLocalization.format(\"dxDataGrid-editingAddRow\"),\r\n                    deleteRow: messageLocalization.format(\"dxDataGrid-editingDeleteRow\"),\r\n                    undeleteRow: messageLocalization.format(\"dxDataGrid-editingUndeleteRow\"),\r\n                    confirmDeleteMessage: messageLocalization.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\r\n                    confirmDeleteTitle: \"\"\r\n                },\r\n                form: {\r\n                    colCount: 2\r\n                },\r\n                popup: {},\r\n                startEditAction: \"click\",\r\n                editRowKey: null,\r\n                editColumnName: null,\r\n                changes: []\r\n            },\r\n            useLegacyColumnButtonTemplate: false\r\n        }\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this.callBase()\r\n                },\r\n                reload: function(full, repaintChangesOnly) {\r\n                    !repaintChangesOnly && this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function() {\r\n                    if (this.getController(\"editing\").isSaving()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(items) {\r\n                    var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                    var editRowIndex = gridCoreUtils.getIndexByKey(editRowKey, items);\r\n                    var editItem = items[editRowIndex];\r\n                    if (editItem) {\r\n                        var _this$_updateEditItem;\r\n                        editItem.isEditing = true;\r\n                        null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem)\r\n                    }\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateEditRow(this.items(true))\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _processItems: function(items, change) {\r\n                    items = this._editingController.processItems(items, change);\r\n                    return this.callBase(items, change)\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    this._editingController.processDataItem(dataItem, options, this.generateDataValues);\r\n                    return this.callBase(dataItem, options)\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this.callBase(item, options);\r\n                    if (item.isNewRow) {\r\n                        options.dataIndex--;\r\n                        delete item.dataIndex\r\n                    }\r\n                    return item\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var cell = oldRow.cells && oldRow.cells[columnIndex];\r\n                    var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\r\n                    if (isLiveUpdate && isEditing) {\r\n                        return false\r\n                    }\r\n                    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                needToRefreshOnDataSourceChange: function(args) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && editingController.isSaving();\r\n                    return !isParasiteChange\r\n                },\r\n                _handleDataSourceChange(args) {\r\n                    var result = this.callBase(args);\r\n                    var changes = this.option(\"editing.changes\");\r\n                    var dataSource = args.value;\r\n                    if (Array.isArray(dataSource) && changes.length) {\r\n                        var dataSourceKeys = dataSource.map(item => this.keyOf(item));\r\n                        var newChanges = changes.filter(change => \"insert\" === change.type || dataSourceKeys.some(key => equalByValue(change.key, key)));\r\n                        if (newChanges.length !== changes.length) {\r\n                            this.option(\"editing.changes\", newChanges)\r\n                        }\r\n                        var editRowKey = this.option(\"editing.editRowKey\");\r\n                        var isEditNewItem = newChanges.some(change => \"insert\" === change.type && equalByValue(editRowKey, change.key));\r\n                        if (!isEditNewItem && dataSourceKeys.every(key => !equalByValue(editRowKey, key))) {\r\n                            this.option(\"editing.editRowKey\", null)\r\n                        }\r\n                    }\r\n                    return result\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\")\r\n                },\r\n                getCellIndex: function($cell, rowIndex) {\r\n                    if (!$cell.is(\"td\") && rowIndex >= 0) {\r\n                        var $cellElements = this.getCellElements(rowIndex);\r\n                        var cellIndex = -1;\r\n                        each($cellElements, (function(index, cellElement) {\r\n                            if ($(cellElement).find($cell).length) {\r\n                                cellIndex = index\r\n                            }\r\n                        }));\r\n                        return cellIndex\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                publicMethods: function() {\r\n                    return this.callBase().concat([\"cellValue\"])\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    var template = this._editingController.getColumnTemplate(options);\r\n                    return template || this.callBase(options)\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isRowRemoved = !!row.removed;\r\n                        var isRowInserted = !!row.isNewRow;\r\n                        var isRowModified = !!row.modified;\r\n                        isRowInserted && $row.addClass(ROW_INSERTED);\r\n                        isRowModified && $row.addClass(ROW_MODIFIED);\r\n                        if (isRowInserted || isRowRemoved) {\r\n                            $row.removeClass(ROW_SELECTED)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _getColumnIndexByElement: function($element) {\r\n                    var $tableElement = $element.closest(\"table\");\r\n                    var $tableElements = this.getTableElements();\r\n                    while ($tableElement.length && !$tableElements.filter($tableElement).length) {\r\n                        $element = $tableElement.closest(\"td\");\r\n                        $tableElement = $element.closest(\"table\")\r\n                    }\r\n                    return this._getColumnIndexByElementCore($element)\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\r\n                    return this.getCellIndex($targetElement)\r\n                },\r\n                _editCellByClick: function(e, eventName) {\r\n                    var editingController = this._editingController;\r\n                    var $targetElement = $(e.event.target);\r\n                    var columnIndex = this._getColumnIndexByElement($targetElement);\r\n                    var row = this._dataController.items()[e.rowIndex];\r\n                    var allowUpdating = editingController.allowUpdating({\r\n                        row: row\r\n                    }, eventName) || row && row.isNewRow;\r\n                    var column = this._columnsController.getVisibleColumns()[columnIndex];\r\n                    var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);\r\n                    var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);\r\n                    var startEditAction = this.option(\"editing.startEditAction\") || \"click\";\r\n                    if (\"down\" === eventName) {\r\n                        if ((devices.real().ios || devices.real().android) && !isEditedCell) {\r\n                            resetActiveElement()\r\n                        }\r\n                        return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)\r\n                    }\r\n                    if (\"click\" === eventName && \"dblClick\" === startEditAction && !isEditedCell) {\r\n                        var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;\r\n                        editingController.closeEditCell(false, withoutSaveEditData)\r\n                    }\r\n                    if (allowEditing && eventName === startEditAction) {\r\n                        return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)\r\n                    }\r\n                },\r\n                _rowPointerDown: function(e) {\r\n                    this._pointerDownTimeout = setTimeout(() => {\r\n                        this._editCellByClick(e, \"down\")\r\n                    })\r\n                },\r\n                _rowClick: function(e) {\r\n                    var isEditForm = $(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\r\n                    e.event[TARGET_COMPONENT_NAME] = this.component;\r\n                    if (!this._editCellByClick(e, \"click\") && !isEditForm) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    if (!this._editCellByClick(e, \"dblClick\")) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    var editingController = this._editingController;\r\n                    var isCommandCell = !!parameters.column.command;\r\n                    var isEditableCell = parameters.setValue;\r\n                    var isEditRow = editingController.isEditRow(parameters.rowIndex);\r\n                    var isEditing = isEditingCell(isEditRow, parameters);\r\n                    if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\r\n                        var alignment = parameters.column.alignment;\r\n                        $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\r\n                        if (alignment) {\r\n                            $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment)\r\n                        }\r\n                    }\r\n                    if (isEditing) {\r\n                        this._editCellPrepared($cell)\r\n                    }\r\n                    if (parameters.column && !isCommandCell) {\r\n                        editingController.highlightDataCell($cell, parameters)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editCellPrepared: noop,\r\n                _formItemPrepared: noop,\r\n                _getCellOptions: function(options) {\r\n                    var cellOptions = this.callBase(options);\r\n                    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\r\n                    return cellOptions\r\n                },\r\n                _createCell: function(options) {\r\n                    var $cell = this.callBase(options);\r\n                    var isEditRow = this._editingController.isEditRow(options.rowIndex);\r\n                    isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\r\n                    return $cell\r\n                },\r\n                cellValue: function(rowIndex, columnIdentifier, value, text) {\r\n                    var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\r\n                    if (cellOptions) {\r\n                        if (void 0 === value) {\r\n                            return cellOptions.value\r\n                        } else {\r\n                            this._editingController.updateFieldValue(cellOptions, value, text, true)\r\n                        }\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._pointerDownTimeout)\r\n                },\r\n                _renderCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._editingController._focusEditorIfNeed()\r\n                }\r\n            },\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\r\n                    return editButtonItems.concat(items)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    switch (args.name) {\r\n                        case \"editing\":\r\n                            var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\r\n                            var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);\r\n                            shouldInvalidate && this._invalidate();\r\n                            this.callBase(args);\r\n                            break;\r\n                        case \"useLegacyColumnButtonTemplate\":\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var editingOptions = this.getController(\"editing\").option(\"editing\");\r\n                    return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}