{"ast":null,"code":"import ToText from './totext';\nimport parseText from './parsetext';\nimport RRule from '../index';\nimport ENGLISH from './i18n';\n/*!\n* rrule.js - Library for working with recurrence rules for calendar dates.\n* https://github.com/jakubroztocil/rrule\n*\n* Copyright 2010, Jakub Roztocil and Lars Schoning\n* Licenced under the BSD licence.\n* https://github.com/jakubroztocil/rrule/blob/master/LICENCE\n*\n*/\n\n/**\n *\n * Implementation of RRule.fromText() and RRule::toText().\n *\n *\n * On the client side, this file needs to be included\n * when those functions are used.\n *\n */\n// =============================================================================\n// fromText\n// =============================================================================\n\n/**\n * Will be able to convert some of the below described rules from\n * text format to a rule object.\n *\n *\n * RULES\n *\n * Every ([n])\n *       day(s)\n *     | [weekday], ..., (and) [weekday]\n *     | weekday(s)\n *     | week(s)\n *     | month(s)\n *     | [month], ..., (and) [month]\n *     | year(s)\n *\n *\n * Plus 0, 1, or multiple of these:\n *\n * on [weekday], ..., (or) [weekday] the [monthday], [monthday], ... (or) [monthday]\n *\n * on [weekday], ..., (and) [weekday]\n *\n * on the [monthday], [monthday], ... (and) [monthday] (day of the month)\n *\n * on the [nth-weekday], ..., (and) [nth-weekday] (of the month/year)\n *\n *\n * Plus 0 or 1 of these:\n *\n * for [n] time(s)\n *\n * until [date]\n *\n * Plus (.)\n *\n *\n * Definitely no supported for parsing:\n *\n * (for year):\n *     in week(s) [n], ..., (and) [n]\n *\n *     on the [yearday], ..., (and) [n] day of the year\n *     on day [yearday], ..., (and) [n]\n *\n *\n * NON-TERMINALS\n *\n * [n]: 1, 2 ..., one, two, three ..\n * [month]: January, February, March, April, May, ... December\n * [weekday]: Monday, ... Sunday\n * [nth-weekday]: first [weekday], 2nd [weekday], ... last [weekday], ...\n * [monthday]: first, 1., 2., 1st, 2nd, second, ... 31st, last day, 2nd last day, ..\n * [date]:\n *     [month] (0-31(,) ([year])),\n *     (the) 0-31.(1-12.([year])),\n *     (the) 0-31/(1-12/([year])),\n *     [weekday]\n *\n * [year]: 0000, 0001, ... 01, 02, ..\n *\n * Definitely not supported for parsing:\n *\n * [yearday]: first, 1., 2., 1st, 2nd, second, ... 366th, last day, 2nd last day, ..\n *\n * @param {String} text\n * @return {Object, Boolean} the rule, or null.\n */\n\nvar fromText = function (text, language) {\n  if (language === void 0) {\n    language = ENGLISH;\n  }\n\n  return new RRule(parseText(text, language) || undefined);\n};\n\nvar common = ['count', 'until', 'interval', 'byweekday', 'bymonthday', 'bymonth'];\nToText.IMPLEMENTED = [];\nToText.IMPLEMENTED[RRule.HOURLY] = common;\nToText.IMPLEMENTED[RRule.MINUTELY] = common;\nToText.IMPLEMENTED[RRule.DAILY] = ['byhour'].concat(common);\nToText.IMPLEMENTED[RRule.WEEKLY] = common;\nToText.IMPLEMENTED[RRule.MONTHLY] = common;\nToText.IMPLEMENTED[RRule.YEARLY] = ['byweekno', 'byyearday'].concat(common); // =============================================================================\n// Export\n// =============================================================================\n\nvar toText = function (rrule, gettext, language, dateFormatter) {\n  return new ToText(rrule, gettext, language, dateFormatter).toString();\n};\n\nvar isFullyConvertible = ToText.isFullyConvertible;\nexport { fromText, parseText, isFullyConvertible, toText };","map":{"version":3,"mappings":"AAAA,OAAOA,MAAP,MAA+C,UAA/C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAkC,QAAlC;AAEA;;;;;;;;;;AAUA;;;;;;;;;AAUA;AACA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,IAAMC,QAAQ,GAAG,UAAUC,IAAV,EAAwBC,QAAxB,EAAoD;EAA5B;IAAAA;EAA4B;;EACnE,OAAO,IAAIJ,KAAJ,CAAUD,SAAS,CAACI,IAAD,EAAOC,QAAP,CAAT,IAA6BC,SAAvC,CAAP;AACD,CAFD;;AAIA,IAAMC,MAAM,GAAG,CACb,OADa,EAEb,OAFa,EAGb,UAHa,EAIb,WAJa,EAKb,YALa,EAMb,SANa,CAAf;AASAR,MAAM,CAACS,WAAP,GAAqB,EAArB;AACAT,MAAM,CAACS,WAAP,CAAmBP,KAAK,CAACQ,MAAzB,IAAmCF,MAAnC;AACAR,MAAM,CAACS,WAAP,CAAmBP,KAAK,CAACS,QAAzB,IAAqCH,MAArC;AACAR,MAAM,CAACS,WAAP,CAAmBP,KAAK,CAACU,KAAzB,IAAkC,CAAC,QAAD,EAAWC,MAAX,CAAkBL,MAAlB,CAAlC;AACAR,MAAM,CAACS,WAAP,CAAmBP,KAAK,CAACY,MAAzB,IAAmCN,MAAnC;AACAR,MAAM,CAACS,WAAP,CAAmBP,KAAK,CAACa,OAAzB,IAAoCP,MAApC;AACAR,MAAM,CAACS,WAAP,CAAmBP,KAAK,CAACc,MAAzB,IAAmC,CAAC,UAAD,EAAa,WAAb,EAA0BH,MAA1B,CAAiCL,MAAjC,CAAnC,C,CAEA;AACA;AACA;;AAEA,IAAMS,MAAM,GAAG,UAAUC,KAAV,EAAwBC,OAAxB,EAA2Cb,QAA3C,EAAgEc,aAAhE,EAA6F;EAC1G,OAAO,IAAIpB,MAAJ,CAAWkB,KAAX,EAAkBC,OAAlB,EAA2Bb,QAA3B,EAAqCc,aAArC,EAAoDC,QAApD,EAAP;AACD,CAFD;;AAIQ;AASR,SAASjB,QAAT,EAAmBH,SAAnB,EAA8BqB,kBAA9B,EAAkDL,MAAlD","names":["ToText","parseText","RRule","ENGLISH","fromText","text","language","undefined","common","IMPLEMENTED","HOURLY","MINUTELY","DAILY","concat","WEEKLY","MONTHLY","YEARLY","toText","rrule","gettext","dateFormatter","toString","isFullyConvertible"],"sourceRoot":"","sources":["../../../../src/nlp/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}