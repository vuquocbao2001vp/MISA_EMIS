{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.toolbar.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport Toolbar from \"../toolbar\";\nimport ContextMenu from \"../context_menu\";\nimport DiagramBar from \"./diagram.bar\";\nimport { extend } from \"../../core/utils/extend\";\nimport { hasWindow } from \"../../core/utils/window\";\nimport DiagramPanel from \"./ui.diagram.panel\";\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\nimport { getDiagram } from \"./diagram.importer\";\nimport \"../select_box\";\nimport \"../color_box\";\nimport \"../check_box\";\nvar ACTIVE_FORMAT_CLASS = \"dx-format-active\";\nvar DIAGRAM_TOOLBAR_CLASS = \"dx-diagram-toolbar\";\nvar DIAGRAM_TOOLBAR_SEPARATOR_CLASS = \"dx-diagram-toolbar-separator\";\nvar DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-diagram-toolbar-menu-separator\";\nvar DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS = \"dx-diagram-mobile-toolbar-color-box-opened\";\n\nclass DiagramToolbar extends DiagramPanel {\n  _init() {\n    this._commands = [];\n    this._itemHelpers = {};\n    this._commandContextMenus = {};\n    this._contextMenuList = [];\n    this._valueConverters = {};\n    this.bar = new DiagramToolbarBar(this);\n\n    this._createOnInternalCommand();\n\n    this._createOnCustomCommand();\n\n    this._createOnSubMenuVisibilityChangingAction();\n\n    super._init();\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    var isServerSide = !hasWindow();\n\n    if (!this.option(\"skipAdjustSize\") && !isServerSide) {\n      setWidth(this.$element(), \"\");\n    }\n\n    this._commands = this._getCommands();\n    this._itemHelpers = {};\n    this._commandContextMenus = {};\n    this._contextMenuList = [];\n\n    var $toolbar = this._createMainElement();\n\n    this._renderToolbar($toolbar);\n\n    if (!this.option(\"skipAdjustSize\") && !isServerSide) {\n      var $toolbarContent = this.$element().find(\".dx-toolbar-before\");\n      setWidth(this.$element(), getWidth($toolbarContent));\n    }\n  }\n\n  _createMainElement() {\n    return $(\"<div>\").addClass(DIAGRAM_TOOLBAR_CLASS).appendTo(this._$element);\n  }\n\n  _getCommands() {\n    return this.option(\"commands\") || [];\n  }\n\n  _renderToolbar($toolbar) {\n    var beforeCommands = this._commands.filter(command => -1 === [\"after\", \"center\"].indexOf(command.location));\n\n    var centerCommands = this._commands.filter(command => \"center\" === command.location);\n\n    var afterCommands = this._commands.filter(command => \"after\" === command.location);\n\n    var dataSource = [].concat(this._prepareToolbarItems(beforeCommands, \"before\", this._executeCommand)).concat(this._prepareToolbarItems(centerCommands, \"center\", this._executeCommand)).concat(this._prepareToolbarItems(afterCommands, \"after\", this._executeCommand));\n    this._toolbarInstance = this._createComponent($toolbar, Toolbar, {\n      dataSource: dataSource\n    });\n  }\n\n  _prepareToolbarItems(items, location, actionHandler) {\n    return items.map(item => extend(true, {\n      location: location,\n      locateInMenu: this.option(\"locateInMenu\")\n    }, this._createItem(item, location, actionHandler), this._createItemOptions(item), this._createItemActionOptions(item, actionHandler)));\n  }\n\n  _createItem(item, location, actionHandler) {\n    if (item.getCommandValue || item.getEditorValue || item.getEditorDisplayValue) {\n      this._valueConverters[item.command] = {\n        getCommandValue: item.getCommandValue,\n        getEditorValue: item.getEditorValue,\n        getEditorDisplayValue: item.getEditorDisplayValue\n      };\n    }\n\n    if (\"separator\" === item.widget) {\n      return {\n        template: (data, index, element) => {\n          $(element).addClass(DIAGRAM_TOOLBAR_SEPARATOR_CLASS);\n        },\n        menuItemTemplate: (data, index, element) => {\n          $(element).addClass(DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS);\n        }\n      };\n    }\n\n    return {\n      widget: item.widget || \"dxButton\",\n      cssClass: item.cssClass,\n      options: {\n        stylingMode: this.option(\"buttonStylingMode\"),\n        type: this.option(\"buttonType\"),\n        text: item.text,\n        hint: item.hint,\n        icon: item.icon || item.iconUnchecked || item.iconChecked,\n        iconChecked: item.iconChecked,\n        iconUnchecked: item.iconUnchecked,\n        onInitialized: e => this._onItemInitialized(e.component, item),\n        onContentReady: e => this._onItemContentReady(e.component, item, actionHandler)\n      }\n    };\n  }\n\n  _createItemOptions(_ref) {\n    var {\n      widget: widget,\n      command: command,\n      items: items,\n      valueExpr: valueExpr,\n      displayExpr: displayExpr,\n      showText: showText,\n      hint: hint,\n      icon: icon\n    } = _ref;\n\n    if (\"dxSelectBox\" === widget) {\n      return this._createSelectBoxItemOptions(command, hint, items, valueExpr, displayExpr);\n    } else if (\"dxTextBox\" === widget) {\n      return this._createTextBoxItemOptions(command, hint);\n    } else if (\"dxColorBox\" === widget) {\n      return this._createColorBoxItemOptions(command, hint, icon);\n    } else if (!widget || \"dxButton\" === widget) {\n      return {\n        showText: showText || \"inMenu\"\n      };\n    }\n  }\n\n  _createSelectBoxItemOptions(command, hint, items, valueExpr, displayExpr) {\n    var options = this._createTextEditorItemOptions(hint);\n\n    options = extend(true, options, {\n      options: {\n        dataSource: items,\n        displayExpr: displayExpr || \"text\",\n        valueExpr: valueExpr || \"value\"\n      }\n    });\n    var isSelectButton = items && items.every(i => void 0 !== i.icon);\n\n    if (isSelectButton) {\n      options = extend(true, options, {\n        options: {\n          fieldTemplate: (data, container) => {\n            $(\"<i>\").addClass(data && data.icon || \"dx-diagram-i-selectbox-null-icon dx-diagram-i\").appendTo(container);\n            $(\"<div>\").dxTextBox({\n              readOnly: true,\n              stylingMode: \"outlined\"\n            }).appendTo(container);\n          },\n          itemTemplate: (data, index, container) => {\n            $(container).attr(\"title\", data.hint);\n            return '<i class=\"'.concat(data.icon, '\"></i>');\n          }\n        }\n      });\n    }\n\n    return options;\n  }\n\n  _createTextBoxItemOptions(command, hint) {\n    var options = this._createTextEditorItemOptions(hint);\n\n    options = extend(true, options, {\n      options: {\n        readOnly: true,\n        focusStateEnabled: false,\n        hoverStateEnabled: false,\n        buttons: [{\n          name: \"dropDown\",\n          location: \"after\",\n          options: {\n            icon: \"spindown\",\n            disabled: false,\n            stylingMode: \"text\",\n            onClick: e => {\n              var contextMenu = this._commandContextMenus[command];\n\n              if (contextMenu) {\n                this._toggleContextMenu(contextMenu);\n              }\n            }\n          }\n        }]\n      }\n    });\n    return options;\n  }\n\n  _createColorBoxItemOptions(command, hint, icon) {\n    var options = this._createTextEditorItemOptions(hint);\n\n    if (icon) {\n      options = extend(true, options, {\n        options: {\n          openOnFieldClick: true,\n          fieldTemplate: (data, container) => {\n            $(\"<i>\").addClass(icon).css(\"borderBottomColor\", data).appendTo(container);\n            $(\"<div>\").dxTextBox({\n              readOnly: true,\n              stylingMode: \"outlined\"\n            }).appendTo(container);\n          }\n        }\n      });\n    }\n\n    options = extend(true, options, {\n      options: {\n        onOpened: () => {\n          if (this.option(\"isMobileView\")) {\n            $(\"body\").addClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n          }\n        },\n        onClosed: () => {\n          $(\"body\").removeClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n        }\n      }\n    });\n    return options;\n  }\n\n  _createTextEditorItemOptions(hint) {\n    return {\n      options: {\n        stylingMode: this.option(\"editorStylingMode\"),\n        hint: hint\n      }\n    };\n  }\n\n  _createItemActionOptions(item, handler) {\n    switch (item.widget) {\n      case \"dxSelectBox\":\n      case \"dxColorBox\":\n      case \"dxCheckBox\":\n        return {\n          options: {\n            onValueChanged: e => {\n              var parameter = DiagramMenuHelper.getItemCommandParameter(this, item, e.component.option(\"value\"));\n              handler.call(this, item.command, item.name, parameter);\n            }\n          }\n        };\n\n      case \"dxTextBox\":\n        return {};\n\n      default:\n        return {\n          options: {\n            onClick: e => {\n              if (!item.items) {\n                var parameter = DiagramMenuHelper.getItemCommandParameter(this, item);\n                handler.call(this, item.command, item.name, parameter);\n              } else {\n                var contextMenu = e.component._contextMenu;\n\n                if (contextMenu) {\n                  this._toggleContextMenu(contextMenu);\n                }\n              }\n            }\n          }\n        };\n    }\n  }\n\n  _toggleContextMenu(contextMenu) {\n    this._contextMenuList.forEach(cm => {\n      if (contextMenu !== cm) {\n        cm.hide();\n      }\n    });\n\n    contextMenu.toggle();\n  }\n\n  _onItemInitialized(widget, item) {\n    this._addItemHelper(item.command, new DiagramToolbarItemHelper(widget));\n  }\n\n  _onItemContentReady(widget, item, actionHandler) {\n    if ((\"dxButton\" === widget.NAME || \"dxTextBox\" === widget.NAME) && item.items) {\n      var isTouchMode = this._isTouchMode();\n\n      var $menuContainer = $(\"<div>\").appendTo(this.$element());\n      widget._contextMenu = this._createComponent($menuContainer, ContextMenu, {\n        items: item.items,\n        target: widget.$element(),\n        cssClass: DiagramMenuHelper.getContextMenuCssClass(),\n        showEvent: \"\",\n        hideOnOutsideClick: e => !isTouchMode && 0 === $(e.target).closest(widget._contextMenu._dropDownButtonElement).length,\n        focusStateEnabled: false,\n        position: {\n          at: \"left bottom\"\n        },\n        itemTemplate: function (itemData, itemIndex, itemElement) {\n          DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement);\n        },\n        onItemClick: _ref2 => {\n          var {\n            component: component,\n            itemData: itemData\n          } = _ref2;\n          DiagramMenuHelper.onContextMenuItemClick(this, itemData, actionHandler.bind(this));\n\n          if (!itemData.items || !itemData.items.length) {\n            component.hide();\n          }\n        },\n        onShowing: e => {\n          if (this._showingSubMenu) {\n            return;\n          }\n\n          this._showingSubMenu = e.component;\n\n          this._onSubMenuVisibilityChangingAction({\n            visible: true,\n            component: this\n          });\n\n          e.component.option(\"items\", e.component.option(\"items\"));\n          delete this._showingSubMenu;\n        },\n        onInitialized: _ref3 => {\n          var {\n            component: component\n          } = _ref3;\n          return this._onContextMenuInitialized(component, item, widget);\n        },\n        onDisposing: _ref4 => {\n          var {\n            component: component\n          } = _ref4;\n          return this._onContextMenuDisposing(component, item);\n        }\n      });\n\n      if (!isTouchMode) {\n        widget._contextMenu._dropDownButtonElement = widget.$element();\n\n        if (\"dxTextBox\" === widget.NAME) {\n          widget._contextMenu._dropDownButtonElement = widget.getButton(\"dropDown\").element();\n        }\n      }\n    }\n  }\n\n  _isTouchMode() {\n    var {\n      Browser: Browser\n    } = getDiagram();\n    return Browser.TouchUI;\n  }\n\n  _onContextMenuInitialized(widget, item, rootWidget) {\n    this._contextMenuList.push(widget);\n\n    if (item.command) {\n      this._commandContextMenus[item.command] = widget;\n    }\n\n    this._addContextMenuHelper(item, widget, [], rootWidget);\n  }\n\n  _addItemHelper(command, helper) {\n    if (void 0 !== command) {\n      if (this._itemHelpers[command]) {\n        throw new Error(\"Toolbar cannot contain duplicated commands.\");\n      }\n\n      this._itemHelpers[command] = helper;\n    }\n  }\n\n  _addContextMenuHelper(item, widget, indexPath, rootWidget) {\n    if (item.items) {\n      item.items.forEach((subItem, index) => {\n        var itemIndexPath = indexPath.concat(index);\n\n        this._addItemHelper(subItem.command, new DiagramToolbarSubItemHelper(widget, itemIndexPath, subItem.command, rootWidget));\n\n        this._addContextMenuHelper(subItem, widget, itemIndexPath, rootWidget);\n      });\n    }\n  }\n\n  _onContextMenuDisposing(widget, item) {\n    this._contextMenuList.splice(this._contextMenuList.indexOf(widget), 1);\n\n    delete this._commandContextMenus[item.command];\n  }\n\n  _executeCommand(command, name, value) {\n    if (this._updateLocked) {\n      return;\n    }\n\n    if (\"number\" === typeof command) {\n      var valueConverter = this._valueConverters[command];\n\n      if (valueConverter && valueConverter.getCommandValue) {\n        value = valueConverter.getCommandValue(value);\n      }\n\n      this.bar.raiseBarCommandExecuted(command, value);\n    } else if (\"string\" === typeof command) {\n      this._onInternalCommandAction({\n        command: command\n      });\n    }\n\n    if (void 0 !== name) {\n      this._onCustomCommandAction({\n        name: name\n      });\n    }\n  }\n\n  _createOnInternalCommand() {\n    this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\");\n  }\n\n  _createOnCustomCommand() {\n    this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\");\n  }\n\n  _setItemEnabled(command, enabled) {\n    if (command in this._itemHelpers) {\n      var helper = this._itemHelpers[command];\n\n      if (helper.canUpdate(this._showingSubMenu)) {\n        helper.setEnabled(enabled);\n      }\n    }\n  }\n\n  _setEnabled(enabled) {\n    this._toolbarInstance.option(\"disabled\", !enabled);\n\n    this._contextMenuList.forEach(contextMenu => {\n      contextMenu.option(\"disabled\", !enabled);\n    });\n  }\n\n  _setItemValue(command, value) {\n    try {\n      this._updateLocked = true;\n\n      if (command in this._itemHelpers) {\n        var helper = this._itemHelpers[command];\n\n        if (helper.canUpdate(this._showingSubMenu)) {\n          var valueConverter = this._valueConverters[command];\n\n          if (valueConverter && valueConverter.getEditorValue) {\n            value = valueConverter.getEditorValue(value);\n          }\n\n          var displayValue;\n\n          if (valueConverter && valueConverter.getEditorDisplayValue) {\n            displayValue = valueConverter.getEditorDisplayValue(value);\n          }\n\n          var contextMenu = this._commandContextMenus[command];\n          helper.setValue(value, displayValue, contextMenu, contextMenu && command);\n        }\n      }\n    } finally {\n      this._updateLocked = false;\n    }\n  }\n\n  _setItemSubItems(command, items) {\n    this._updateLocked = true;\n\n    if (command in this._itemHelpers) {\n      var helper = this._itemHelpers[command];\n\n      if (helper.canUpdate(this._showingSubMenu)) {\n        var contextMenu = this._commandContextMenus[command];\n        helper.setItems(items, contextMenu, contextMenu && command);\n      }\n    }\n\n    this._updateLocked = false;\n  }\n\n  _createOnSubMenuVisibilityChangingAction() {\n    this._onSubMenuVisibilityChangingAction = this._createActionByOption(\"onSubMenuVisibilityChanging\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"isMobileView\":\n        $(\"body\").removeClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\n\n        this._invalidate();\n\n        break;\n\n      case \"onSubMenuVisibilityChanging\":\n        this._createOnSubMenuVisibilityChangingAction();\n\n        break;\n\n      case \"onInternalCommand\":\n        this._createOnInternalCommand();\n\n        break;\n\n      case \"onCustomCommand\":\n        this._createOnCustomCommand();\n\n        break;\n\n      case \"container\":\n      case \"commands\":\n        this._invalidate();\n\n        break;\n\n      case \"export\":\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      isMobileView: false,\n      export: {\n        fileName: \"Diagram\",\n        proxyUrl: void 0\n      },\n      locateInMenu: \"auto\",\n      buttonStylingMode: \"text\",\n      buttonType: \"normal\",\n      editorStylingMode: \"filled\",\n      skipAdjustSize: false\n    });\n  }\n\n  setCommandChecked(command, checked) {\n    this._setItemValue(command, checked);\n  }\n\n  setCommandEnabled(command, enabled) {\n    this._setItemEnabled(command, enabled);\n  }\n\n}\n\nclass DiagramToolbarBar extends DiagramBar {\n  getCommandKeys() {\n    return this._getKeys(this._owner._commands);\n  }\n\n  setItemValue(key, value) {\n    this._owner._setItemValue(key, value);\n  }\n\n  setItemEnabled(key, enabled) {\n    this._owner._setItemEnabled(key, enabled);\n  }\n\n  setEnabled(enabled) {\n    this._owner._setEnabled(enabled);\n  }\n\n  setItemSubItems(key, items) {\n    this._owner._setItemSubItems(key, items);\n  }\n\n}\n\nclass DiagramToolbarItemHelper {\n  constructor(widget) {\n    this._widget = widget;\n  }\n\n  canUpdate(showingSubMenu) {\n    return void 0 === showingSubMenu;\n  }\n\n  setEnabled(enabled) {\n    this._widget.option(\"disabled\", !enabled);\n  }\n\n  setValue(value, displayValue, contextMenu, rootCommandKey) {\n    if (\"value\" in this._widget.option()) {\n      this._updateEditorValue(value, displayValue);\n    } else if (void 0 !== value) {\n      this._updateButtonValue(value);\n    }\n\n    if (contextMenu) {\n      this._updateContextMenuItemValue(contextMenu, \"\", rootCommandKey, value);\n    }\n  }\n\n  setItems(items, contextMenu, rootCommandKey) {\n    if (contextMenu) {\n      this._updateContextMenuItems(contextMenu, \"\", rootCommandKey, items);\n    } else {\n      this._updateEditorItems(items);\n    }\n  }\n\n  _updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items) {\n    DiagramMenuHelper.updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items);\n  }\n\n  _updateEditorItems(items) {\n    if (\"items\" in this._widget.option()) {\n      this._widget.option(\"items\", items.map(item => ({\n        value: DiagramMenuHelper.getItemValue(item),\n        text: item.text\n      })));\n    }\n  }\n\n  _updateEditorValue(value, displayValue) {\n    this._widget.option(\"value\", value);\n\n    if (!this._widget.option(\"selectedItem\") && displayValue) {\n      this._widget.option(\"value\", displayValue);\n    }\n  }\n\n  _updateButtonValue(value) {\n    if (this._widget.option(\"iconChecked\") && this._widget.option(\"iconUnchecked\")) {\n      this._widget.option(\"icon\", value ? this._widget.option(\"iconChecked\") : this._widget.option(\"iconUnchecked\"));\n    } else {\n      this._widget.$element().toggleClass(ACTIVE_FORMAT_CLASS, value);\n    }\n  }\n\n  _updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value) {\n    DiagramMenuHelper.updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value);\n  }\n\n}\n\nclass DiagramToolbarSubItemHelper extends DiagramToolbarItemHelper {\n  constructor(widget, indexPath, rootCommandKey, rootWidget) {\n    super(widget);\n    this._indexPath = indexPath;\n    this._rootCommandKey = rootCommandKey;\n    this._rootWidget = rootWidget;\n  }\n\n  canUpdate(showingSubMenu) {\n    return super.canUpdate(showingSubMenu) || showingSubMenu === this._widget;\n  }\n\n  setEnabled(enabled) {\n    this._widget.option(this._getItemOptionText() + \"disabled\", !enabled);\n\n    var rootEnabled = this._hasEnabledCommandItems(this._widget.option(\"items\"));\n\n    this._rootWidget.option(\"disabled\", !rootEnabled);\n  }\n\n  _hasEnabledCommandItems(items) {\n    if (items) {\n      return items.some(item => void 0 !== item.command && !item.disabled || this._hasEnabledCommandItems(item.items));\n    }\n\n    return false;\n  }\n\n  setValue(value) {\n    this._updateContextMenuItemValue(this._widget, this._getItemOptionText(), this._rootCommandKey, value);\n  }\n\n  setItems(items) {\n    this._updateContextMenuItems(this._widget, this._getItemOptionText(), this._rootCommandKey, items);\n  }\n\n  _getItemOptionText() {\n    return DiagramMenuHelper.getItemOptionText(this._widget, this._indexPath);\n  }\n\n}\n\nexport default DiagramToolbar;","map":{"version":3,"names":["setWidth","getWidth","$","Toolbar","ContextMenu","DiagramBar","extend","hasWindow","DiagramPanel","DiagramMenuHelper","getDiagram","ACTIVE_FORMAT_CLASS","DIAGRAM_TOOLBAR_CLASS","DIAGRAM_TOOLBAR_SEPARATOR_CLASS","DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS","DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS","DiagramToolbar","_init","_commands","_itemHelpers","_commandContextMenus","_contextMenuList","_valueConverters","bar","DiagramToolbarBar","_createOnInternalCommand","_createOnCustomCommand","_createOnSubMenuVisibilityChangingAction","_initMarkup","isServerSide","option","$element","_getCommands","$toolbar","_createMainElement","_renderToolbar","$toolbarContent","find","addClass","appendTo","_$element","beforeCommands","filter","command","indexOf","location","centerCommands","afterCommands","dataSource","concat","_prepareToolbarItems","_executeCommand","_toolbarInstance","_createComponent","items","actionHandler","map","item","locateInMenu","_createItem","_createItemOptions","_createItemActionOptions","getCommandValue","getEditorValue","getEditorDisplayValue","widget","template","data","index","element","menuItemTemplate","cssClass","options","stylingMode","type","text","hint","icon","iconUnchecked","iconChecked","onInitialized","e","_onItemInitialized","component","onContentReady","_onItemContentReady","_ref","valueExpr","displayExpr","showText","_createSelectBoxItemOptions","_createTextBoxItemOptions","_createColorBoxItemOptions","_createTextEditorItemOptions","isSelectButton","every","i","fieldTemplate","container","dxTextBox","readOnly","itemTemplate","attr","focusStateEnabled","hoverStateEnabled","buttons","name","disabled","onClick","contextMenu","_toggleContextMenu","openOnFieldClick","css","onOpened","onClosed","removeClass","handler","onValueChanged","parameter","getItemCommandParameter","call","_contextMenu","forEach","cm","hide","toggle","_addItemHelper","DiagramToolbarItemHelper","NAME","isTouchMode","_isTouchMode","$menuContainer","target","getContextMenuCssClass","showEvent","hideOnOutsideClick","closest","_dropDownButtonElement","length","position","at","itemData","itemIndex","itemElement","getContextMenuItemTemplate","onItemClick","_ref2","onContextMenuItemClick","bind","onShowing","_showingSubMenu","_onSubMenuVisibilityChangingAction","visible","_ref3","_onContextMenuInitialized","onDisposing","_ref4","_onContextMenuDisposing","getButton","Browser","TouchUI","rootWidget","push","_addContextMenuHelper","helper","Error","indexPath","subItem","itemIndexPath","DiagramToolbarSubItemHelper","splice","value","_updateLocked","valueConverter","raiseBarCommandExecuted","_onInternalCommandAction","_onCustomCommandAction","_createActionByOption","_setItemEnabled","enabled","canUpdate","setEnabled","_setEnabled","_setItemValue","displayValue","setValue","_setItemSubItems","setItems","_optionChanged","args","_invalidate","_getDefaultOptions","isMobileView","export","fileName","proxyUrl","buttonStylingMode","buttonType","editorStylingMode","skipAdjustSize","setCommandChecked","checked","setCommandEnabled","getCommandKeys","_getKeys","_owner","setItemValue","key","setItemEnabled","setItemSubItems","constructor","_widget","showingSubMenu","rootCommandKey","_updateEditorValue","_updateButtonValue","_updateContextMenuItemValue","_updateContextMenuItems","_updateEditorItems","itemOptionText","updateContextMenuItems","getItemValue","toggleClass","updateContextMenuItemValue","_indexPath","_rootCommandKey","_rootWidget","_getItemOptionText","rootEnabled","_hasEnabledCommandItems","some","getItemOptionText"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/diagram/ui.diagram.toolbar.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.toolbar.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setWidth,\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport Toolbar from \"../toolbar\";\r\nimport ContextMenu from \"../context_menu\";\r\nimport DiagramBar from \"./diagram.bar\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport DiagramPanel from \"./ui.diagram.panel\";\r\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\r\nimport {\r\n    getDiagram\r\n} from \"./diagram.importer\";\r\nimport \"../select_box\";\r\nimport \"../color_box\";\r\nimport \"../check_box\";\r\nvar ACTIVE_FORMAT_CLASS = \"dx-format-active\";\r\nvar DIAGRAM_TOOLBAR_CLASS = \"dx-diagram-toolbar\";\r\nvar DIAGRAM_TOOLBAR_SEPARATOR_CLASS = \"dx-diagram-toolbar-separator\";\r\nvar DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-diagram-toolbar-menu-separator\";\r\nvar DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS = \"dx-diagram-mobile-toolbar-color-box-opened\";\r\nclass DiagramToolbar extends DiagramPanel {\r\n    _init() {\r\n        this._commands = [];\r\n        this._itemHelpers = {};\r\n        this._commandContextMenus = {};\r\n        this._contextMenuList = [];\r\n        this._valueConverters = {};\r\n        this.bar = new DiagramToolbarBar(this);\r\n        this._createOnInternalCommand();\r\n        this._createOnCustomCommand();\r\n        this._createOnSubMenuVisibilityChangingAction();\r\n        super._init()\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        var isServerSide = !hasWindow();\r\n        if (!this.option(\"skipAdjustSize\") && !isServerSide) {\r\n            setWidth(this.$element(), \"\")\r\n        }\r\n        this._commands = this._getCommands();\r\n        this._itemHelpers = {};\r\n        this._commandContextMenus = {};\r\n        this._contextMenuList = [];\r\n        var $toolbar = this._createMainElement();\r\n        this._renderToolbar($toolbar);\r\n        if (!this.option(\"skipAdjustSize\") && !isServerSide) {\r\n            var $toolbarContent = this.$element().find(\".dx-toolbar-before\");\r\n            setWidth(this.$element(), getWidth($toolbarContent))\r\n        }\r\n    }\r\n    _createMainElement() {\r\n        return $(\"<div>\").addClass(DIAGRAM_TOOLBAR_CLASS).appendTo(this._$element)\r\n    }\r\n    _getCommands() {\r\n        return this.option(\"commands\") || []\r\n    }\r\n    _renderToolbar($toolbar) {\r\n        var beforeCommands = this._commands.filter(command => -1 === [\"after\", \"center\"].indexOf(command.location));\r\n        var centerCommands = this._commands.filter(command => \"center\" === command.location);\r\n        var afterCommands = this._commands.filter(command => \"after\" === command.location);\r\n        var dataSource = [].concat(this._prepareToolbarItems(beforeCommands, \"before\", this._executeCommand)).concat(this._prepareToolbarItems(centerCommands, \"center\", this._executeCommand)).concat(this._prepareToolbarItems(afterCommands, \"after\", this._executeCommand));\r\n        this._toolbarInstance = this._createComponent($toolbar, Toolbar, {\r\n            dataSource: dataSource\r\n        })\r\n    }\r\n    _prepareToolbarItems(items, location, actionHandler) {\r\n        return items.map(item => extend(true, {\r\n            location: location,\r\n            locateInMenu: this.option(\"locateInMenu\")\r\n        }, this._createItem(item, location, actionHandler), this._createItemOptions(item), this._createItemActionOptions(item, actionHandler)))\r\n    }\r\n    _createItem(item, location, actionHandler) {\r\n        if (item.getCommandValue || item.getEditorValue || item.getEditorDisplayValue) {\r\n            this._valueConverters[item.command] = {\r\n                getCommandValue: item.getCommandValue,\r\n                getEditorValue: item.getEditorValue,\r\n                getEditorDisplayValue: item.getEditorDisplayValue\r\n            }\r\n        }\r\n        if (\"separator\" === item.widget) {\r\n            return {\r\n                template: (data, index, element) => {\r\n                    $(element).addClass(DIAGRAM_TOOLBAR_SEPARATOR_CLASS)\r\n                },\r\n                menuItemTemplate: (data, index, element) => {\r\n                    $(element).addClass(DIAGRAM_TOOLBAR_MENU_SEPARATOR_CLASS)\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            widget: item.widget || \"dxButton\",\r\n            cssClass: item.cssClass,\r\n            options: {\r\n                stylingMode: this.option(\"buttonStylingMode\"),\r\n                type: this.option(\"buttonType\"),\r\n                text: item.text,\r\n                hint: item.hint,\r\n                icon: item.icon || item.iconUnchecked || item.iconChecked,\r\n                iconChecked: item.iconChecked,\r\n                iconUnchecked: item.iconUnchecked,\r\n                onInitialized: e => this._onItemInitialized(e.component, item),\r\n                onContentReady: e => this._onItemContentReady(e.component, item, actionHandler)\r\n            }\r\n        }\r\n    }\r\n    _createItemOptions(_ref) {\r\n        var {\r\n            widget: widget,\r\n            command: command,\r\n            items: items,\r\n            valueExpr: valueExpr,\r\n            displayExpr: displayExpr,\r\n            showText: showText,\r\n            hint: hint,\r\n            icon: icon\r\n        } = _ref;\r\n        if (\"dxSelectBox\" === widget) {\r\n            return this._createSelectBoxItemOptions(command, hint, items, valueExpr, displayExpr)\r\n        } else if (\"dxTextBox\" === widget) {\r\n            return this._createTextBoxItemOptions(command, hint)\r\n        } else if (\"dxColorBox\" === widget) {\r\n            return this._createColorBoxItemOptions(command, hint, icon)\r\n        } else if (!widget || \"dxButton\" === widget) {\r\n            return {\r\n                showText: showText || \"inMenu\"\r\n            }\r\n        }\r\n    }\r\n    _createSelectBoxItemOptions(command, hint, items, valueExpr, displayExpr) {\r\n        var options = this._createTextEditorItemOptions(hint);\r\n        options = extend(true, options, {\r\n            options: {\r\n                dataSource: items,\r\n                displayExpr: displayExpr || \"text\",\r\n                valueExpr: valueExpr || \"value\"\r\n            }\r\n        });\r\n        var isSelectButton = items && items.every(i => void 0 !== i.icon);\r\n        if (isSelectButton) {\r\n            options = extend(true, options, {\r\n                options: {\r\n                    fieldTemplate: (data, container) => {\r\n                        $(\"<i>\").addClass(data && data.icon || \"dx-diagram-i-selectbox-null-icon dx-diagram-i\").appendTo(container);\r\n                        $(\"<div>\").dxTextBox({\r\n                            readOnly: true,\r\n                            stylingMode: \"outlined\"\r\n                        }).appendTo(container)\r\n                    },\r\n                    itemTemplate: (data, index, container) => {\r\n                        $(container).attr(\"title\", data.hint);\r\n                        return '<i class=\"'.concat(data.icon, '\"></i>')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        return options\r\n    }\r\n    _createTextBoxItemOptions(command, hint) {\r\n        var options = this._createTextEditorItemOptions(hint);\r\n        options = extend(true, options, {\r\n            options: {\r\n                readOnly: true,\r\n                focusStateEnabled: false,\r\n                hoverStateEnabled: false,\r\n                buttons: [{\r\n                    name: \"dropDown\",\r\n                    location: \"after\",\r\n                    options: {\r\n                        icon: \"spindown\",\r\n                        disabled: false,\r\n                        stylingMode: \"text\",\r\n                        onClick: e => {\r\n                            var contextMenu = this._commandContextMenus[command];\r\n                            if (contextMenu) {\r\n                                this._toggleContextMenu(contextMenu)\r\n                            }\r\n                        }\r\n                    }\r\n                }]\r\n            }\r\n        });\r\n        return options\r\n    }\r\n    _createColorBoxItemOptions(command, hint, icon) {\r\n        var options = this._createTextEditorItemOptions(hint);\r\n        if (icon) {\r\n            options = extend(true, options, {\r\n                options: {\r\n                    openOnFieldClick: true,\r\n                    fieldTemplate: (data, container) => {\r\n                        $(\"<i>\").addClass(icon).css(\"borderBottomColor\", data).appendTo(container);\r\n                        $(\"<div>\").dxTextBox({\r\n                            readOnly: true,\r\n                            stylingMode: \"outlined\"\r\n                        }).appendTo(container)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        options = extend(true, options, {\r\n            options: {\r\n                onOpened: () => {\r\n                    if (this.option(\"isMobileView\")) {\r\n                        $(\"body\").addClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS)\r\n                    }\r\n                },\r\n                onClosed: () => {\r\n                    $(\"body\").removeClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS)\r\n                }\r\n            }\r\n        });\r\n        return options\r\n    }\r\n    _createTextEditorItemOptions(hint) {\r\n        return {\r\n            options: {\r\n                stylingMode: this.option(\"editorStylingMode\"),\r\n                hint: hint\r\n            }\r\n        }\r\n    }\r\n    _createItemActionOptions(item, handler) {\r\n        switch (item.widget) {\r\n            case \"dxSelectBox\":\r\n            case \"dxColorBox\":\r\n            case \"dxCheckBox\":\r\n                return {\r\n                    options: {\r\n                        onValueChanged: e => {\r\n                            var parameter = DiagramMenuHelper.getItemCommandParameter(this, item, e.component.option(\"value\"));\r\n                            handler.call(this, item.command, item.name, parameter)\r\n                        }\r\n                    }\r\n                };\r\n            case \"dxTextBox\":\r\n                return {};\r\n            default:\r\n                return {\r\n                    options: {\r\n                        onClick: e => {\r\n                            if (!item.items) {\r\n                                var parameter = DiagramMenuHelper.getItemCommandParameter(this, item);\r\n                                handler.call(this, item.command, item.name, parameter)\r\n                            } else {\r\n                                var contextMenu = e.component._contextMenu;\r\n                                if (contextMenu) {\r\n                                    this._toggleContextMenu(contextMenu)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n    _toggleContextMenu(contextMenu) {\r\n        this._contextMenuList.forEach(cm => {\r\n            if (contextMenu !== cm) {\r\n                cm.hide()\r\n            }\r\n        });\r\n        contextMenu.toggle()\r\n    }\r\n    _onItemInitialized(widget, item) {\r\n        this._addItemHelper(item.command, new DiagramToolbarItemHelper(widget))\r\n    }\r\n    _onItemContentReady(widget, item, actionHandler) {\r\n        if ((\"dxButton\" === widget.NAME || \"dxTextBox\" === widget.NAME) && item.items) {\r\n            var isTouchMode = this._isTouchMode();\r\n            var $menuContainer = $(\"<div>\").appendTo(this.$element());\r\n            widget._contextMenu = this._createComponent($menuContainer, ContextMenu, {\r\n                items: item.items,\r\n                target: widget.$element(),\r\n                cssClass: DiagramMenuHelper.getContextMenuCssClass(),\r\n                showEvent: \"\",\r\n                hideOnOutsideClick: e => !isTouchMode && 0 === $(e.target).closest(widget._contextMenu._dropDownButtonElement).length,\r\n                focusStateEnabled: false,\r\n                position: {\r\n                    at: \"left bottom\"\r\n                },\r\n                itemTemplate: function(itemData, itemIndex, itemElement) {\r\n                    DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement)\r\n                },\r\n                onItemClick: _ref2 => {\r\n                    var {\r\n                        component: component,\r\n                        itemData: itemData\r\n                    } = _ref2;\r\n                    DiagramMenuHelper.onContextMenuItemClick(this, itemData, actionHandler.bind(this));\r\n                    if (!itemData.items || !itemData.items.length) {\r\n                        component.hide()\r\n                    }\r\n                },\r\n                onShowing: e => {\r\n                    if (this._showingSubMenu) {\r\n                        return\r\n                    }\r\n                    this._showingSubMenu = e.component;\r\n                    this._onSubMenuVisibilityChangingAction({\r\n                        visible: true,\r\n                        component: this\r\n                    });\r\n                    e.component.option(\"items\", e.component.option(\"items\"));\r\n                    delete this._showingSubMenu\r\n                },\r\n                onInitialized: _ref3 => {\r\n                    var {\r\n                        component: component\r\n                    } = _ref3;\r\n                    return this._onContextMenuInitialized(component, item, widget)\r\n                },\r\n                onDisposing: _ref4 => {\r\n                    var {\r\n                        component: component\r\n                    } = _ref4;\r\n                    return this._onContextMenuDisposing(component, item)\r\n                }\r\n            });\r\n            if (!isTouchMode) {\r\n                widget._contextMenu._dropDownButtonElement = widget.$element();\r\n                if (\"dxTextBox\" === widget.NAME) {\r\n                    widget._contextMenu._dropDownButtonElement = widget.getButton(\"dropDown\").element()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _isTouchMode() {\r\n        var {\r\n            Browser: Browser\r\n        } = getDiagram();\r\n        return Browser.TouchUI\r\n    }\r\n    _onContextMenuInitialized(widget, item, rootWidget) {\r\n        this._contextMenuList.push(widget);\r\n        if (item.command) {\r\n            this._commandContextMenus[item.command] = widget\r\n        }\r\n        this._addContextMenuHelper(item, widget, [], rootWidget)\r\n    }\r\n    _addItemHelper(command, helper) {\r\n        if (void 0 !== command) {\r\n            if (this._itemHelpers[command]) {\r\n                throw new Error(\"Toolbar cannot contain duplicated commands.\")\r\n            }\r\n            this._itemHelpers[command] = helper\r\n        }\r\n    }\r\n    _addContextMenuHelper(item, widget, indexPath, rootWidget) {\r\n        if (item.items) {\r\n            item.items.forEach((subItem, index) => {\r\n                var itemIndexPath = indexPath.concat(index);\r\n                this._addItemHelper(subItem.command, new DiagramToolbarSubItemHelper(widget, itemIndexPath, subItem.command, rootWidget));\r\n                this._addContextMenuHelper(subItem, widget, itemIndexPath, rootWidget)\r\n            })\r\n        }\r\n    }\r\n    _onContextMenuDisposing(widget, item) {\r\n        this._contextMenuList.splice(this._contextMenuList.indexOf(widget), 1);\r\n        delete this._commandContextMenus[item.command]\r\n    }\r\n    _executeCommand(command, name, value) {\r\n        if (this._updateLocked) {\r\n            return\r\n        }\r\n        if (\"number\" === typeof command) {\r\n            var valueConverter = this._valueConverters[command];\r\n            if (valueConverter && valueConverter.getCommandValue) {\r\n                value = valueConverter.getCommandValue(value)\r\n            }\r\n            this.bar.raiseBarCommandExecuted(command, value)\r\n        } else if (\"string\" === typeof command) {\r\n            this._onInternalCommandAction({\r\n                command: command\r\n            })\r\n        }\r\n        if (void 0 !== name) {\r\n            this._onCustomCommandAction({\r\n                name: name\r\n            })\r\n        }\r\n    }\r\n    _createOnInternalCommand() {\r\n        this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\")\r\n    }\r\n    _createOnCustomCommand() {\r\n        this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\")\r\n    }\r\n    _setItemEnabled(command, enabled) {\r\n        if (command in this._itemHelpers) {\r\n            var helper = this._itemHelpers[command];\r\n            if (helper.canUpdate(this._showingSubMenu)) {\r\n                helper.setEnabled(enabled)\r\n            }\r\n        }\r\n    }\r\n    _setEnabled(enabled) {\r\n        this._toolbarInstance.option(\"disabled\", !enabled);\r\n        this._contextMenuList.forEach(contextMenu => {\r\n            contextMenu.option(\"disabled\", !enabled)\r\n        })\r\n    }\r\n    _setItemValue(command, value) {\r\n        try {\r\n            this._updateLocked = true;\r\n            if (command in this._itemHelpers) {\r\n                var helper = this._itemHelpers[command];\r\n                if (helper.canUpdate(this._showingSubMenu)) {\r\n                    var valueConverter = this._valueConverters[command];\r\n                    if (valueConverter && valueConverter.getEditorValue) {\r\n                        value = valueConverter.getEditorValue(value)\r\n                    }\r\n                    var displayValue;\r\n                    if (valueConverter && valueConverter.getEditorDisplayValue) {\r\n                        displayValue = valueConverter.getEditorDisplayValue(value)\r\n                    }\r\n                    var contextMenu = this._commandContextMenus[command];\r\n                    helper.setValue(value, displayValue, contextMenu, contextMenu && command)\r\n                }\r\n            }\r\n        } finally {\r\n            this._updateLocked = false\r\n        }\r\n    }\r\n    _setItemSubItems(command, items) {\r\n        this._updateLocked = true;\r\n        if (command in this._itemHelpers) {\r\n            var helper = this._itemHelpers[command];\r\n            if (helper.canUpdate(this._showingSubMenu)) {\r\n                var contextMenu = this._commandContextMenus[command];\r\n                helper.setItems(items, contextMenu, contextMenu && command)\r\n            }\r\n        }\r\n        this._updateLocked = false\r\n    }\r\n    _createOnSubMenuVisibilityChangingAction() {\r\n        this._onSubMenuVisibilityChangingAction = this._createActionByOption(\"onSubMenuVisibilityChanging\")\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"isMobileView\":\r\n                $(\"body\").removeClass(DIAGRAM_MOBILE_TOOLBAR_COLOR_BOX_OPENED_CLASS);\r\n                this._invalidate();\r\n                break;\r\n            case \"onSubMenuVisibilityChanging\":\r\n                this._createOnSubMenuVisibilityChangingAction();\r\n                break;\r\n            case \"onInternalCommand\":\r\n                this._createOnInternalCommand();\r\n                break;\r\n            case \"onCustomCommand\":\r\n                this._createOnCustomCommand();\r\n                break;\r\n            case \"container\":\r\n            case \"commands\":\r\n                this._invalidate();\r\n                break;\r\n            case \"export\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            isMobileView: false,\r\n            export: {\r\n                fileName: \"Diagram\",\r\n                proxyUrl: void 0\r\n            },\r\n            locateInMenu: \"auto\",\r\n            buttonStylingMode: \"text\",\r\n            buttonType: \"normal\",\r\n            editorStylingMode: \"filled\",\r\n            skipAdjustSize: false\r\n        })\r\n    }\r\n    setCommandChecked(command, checked) {\r\n        this._setItemValue(command, checked)\r\n    }\r\n    setCommandEnabled(command, enabled) {\r\n        this._setItemEnabled(command, enabled)\r\n    }\r\n}\r\nclass DiagramToolbarBar extends DiagramBar {\r\n    getCommandKeys() {\r\n        return this._getKeys(this._owner._commands)\r\n    }\r\n    setItemValue(key, value) {\r\n        this._owner._setItemValue(key, value)\r\n    }\r\n    setItemEnabled(key, enabled) {\r\n        this._owner._setItemEnabled(key, enabled)\r\n    }\r\n    setEnabled(enabled) {\r\n        this._owner._setEnabled(enabled)\r\n    }\r\n    setItemSubItems(key, items) {\r\n        this._owner._setItemSubItems(key, items)\r\n    }\r\n}\r\nclass DiagramToolbarItemHelper {\r\n    constructor(widget) {\r\n        this._widget = widget\r\n    }\r\n    canUpdate(showingSubMenu) {\r\n        return void 0 === showingSubMenu\r\n    }\r\n    setEnabled(enabled) {\r\n        this._widget.option(\"disabled\", !enabled)\r\n    }\r\n    setValue(value, displayValue, contextMenu, rootCommandKey) {\r\n        if (\"value\" in this._widget.option()) {\r\n            this._updateEditorValue(value, displayValue)\r\n        } else if (void 0 !== value) {\r\n            this._updateButtonValue(value)\r\n        }\r\n        if (contextMenu) {\r\n            this._updateContextMenuItemValue(contextMenu, \"\", rootCommandKey, value)\r\n        }\r\n    }\r\n    setItems(items, contextMenu, rootCommandKey) {\r\n        if (contextMenu) {\r\n            this._updateContextMenuItems(contextMenu, \"\", rootCommandKey, items)\r\n        } else {\r\n            this._updateEditorItems(items)\r\n        }\r\n    }\r\n    _updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items) {\r\n        DiagramMenuHelper.updateContextMenuItems(contextMenu, itemOptionText, rootCommandKey, items)\r\n    }\r\n    _updateEditorItems(items) {\r\n        if (\"items\" in this._widget.option()) {\r\n            this._widget.option(\"items\", items.map(item => ({\r\n                value: DiagramMenuHelper.getItemValue(item),\r\n                text: item.text\r\n            })))\r\n        }\r\n    }\r\n    _updateEditorValue(value, displayValue) {\r\n        this._widget.option(\"value\", value);\r\n        if (!this._widget.option(\"selectedItem\") && displayValue) {\r\n            this._widget.option(\"value\", displayValue)\r\n        }\r\n    }\r\n    _updateButtonValue(value) {\r\n        if (this._widget.option(\"iconChecked\") && this._widget.option(\"iconUnchecked\")) {\r\n            this._widget.option(\"icon\", value ? this._widget.option(\"iconChecked\") : this._widget.option(\"iconUnchecked\"))\r\n        } else {\r\n            this._widget.$element().toggleClass(ACTIVE_FORMAT_CLASS, value)\r\n        }\r\n    }\r\n    _updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value) {\r\n        DiagramMenuHelper.updateContextMenuItemValue(contextMenu, itemOptionText, rootCommandKey, value)\r\n    }\r\n}\r\nclass DiagramToolbarSubItemHelper extends DiagramToolbarItemHelper {\r\n    constructor(widget, indexPath, rootCommandKey, rootWidget) {\r\n        super(widget);\r\n        this._indexPath = indexPath;\r\n        this._rootCommandKey = rootCommandKey;\r\n        this._rootWidget = rootWidget\r\n    }\r\n    canUpdate(showingSubMenu) {\r\n        return super.canUpdate(showingSubMenu) || showingSubMenu === this._widget\r\n    }\r\n    setEnabled(enabled) {\r\n        this._widget.option(this._getItemOptionText() + \"disabled\", !enabled);\r\n        var rootEnabled = this._hasEnabledCommandItems(this._widget.option(\"items\"));\r\n        this._rootWidget.option(\"disabled\", !rootEnabled)\r\n    }\r\n    _hasEnabledCommandItems(items) {\r\n        if (items) {\r\n            return items.some(item => void 0 !== item.command && !item.disabled || this._hasEnabledCommandItems(item.items))\r\n        }\r\n        return false\r\n    }\r\n    setValue(value) {\r\n        this._updateContextMenuItemValue(this._widget, this._getItemOptionText(), this._rootCommandKey, value)\r\n    }\r\n    setItems(items) {\r\n        this._updateContextMenuItems(this._widget, this._getItemOptionText(), this._rootCommandKey, items)\r\n    }\r\n    _getItemOptionText() {\r\n        return DiagramMenuHelper.getItemOptionText(this._widget, this._indexPath)\r\n    }\r\n}\r\nexport default DiagramToolbar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}