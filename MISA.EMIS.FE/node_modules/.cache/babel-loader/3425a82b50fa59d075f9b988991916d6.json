{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.context_menu.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Widget from \"../widget/ui.widget\";\nimport ContextMenu from \"../context_menu\";\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\nimport DiagramBar from \"./diagram.bar\";\nimport { getDiagram } from \"./diagram.importer\";\nvar DIAGRAM_TOUCHBAR_CLASS = \"dx-diagram-touchbar\";\nvar DIAGRAM_TOUCHBAR_OVERLAY_CLASS = \"dx-diagram-touchbar-overlay\";\nvar DIAGRAM_TOUCHBAR_TARGET_CLASS = \"dx-diagram-touchbar-target\";\nvar DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH = 800;\nvar DIAGRAM_TOUCHBAR_Y_OFFSET = 32;\n\nclass DiagramContextMenuWrapper extends Widget {\n  _init() {\n    super._init();\n\n    this._createOnVisibilityChangingAction();\n\n    this._createOnInternalCommand();\n\n    this._createOnCustomCommand();\n\n    this._createOnItemClickAction();\n\n    this._tempState = void 0;\n    this._commands = [];\n    this._commandToIndexMap = {};\n    this.bar = new DiagramContextMenuBar(this);\n  }\n\n  _initMarkup() {\n    super._initMarkup();\n\n    this._commands = this._getCommands();\n    this._commandToIndexMap = {};\n\n    this._fillCommandToIndexMap(this._commands, []);\n\n    this._$contextMenuTargetElement = $(\"<div>\").addClass(DIAGRAM_TOUCHBAR_TARGET_CLASS).appendTo(this.$element());\n    var $contextMenu = $(\"<div>\").appendTo(this.$element());\n    this._contextMenuInstance = this._createComponent($contextMenu, DiagramContextMenu, {\n      isTouchBarMode: this._isTouchBarMode(),\n      cssClass: this._isTouchBarMode() ? DIAGRAM_TOUCHBAR_CLASS : DiagramMenuHelper.getContextMenuCssClass(),\n      hideOnOutsideClick: false,\n      showEvent: \"\",\n      focusStateEnabled: false,\n      items: this._commands,\n      position: this._isTouchBarMode() ? {\n        my: {\n          x: \"center\",\n          y: \"bottom\"\n        },\n        at: {\n          x: \"center\",\n          y: \"top\"\n        },\n        of: this._$contextMenuTargetElement\n      } : {},\n      itemTemplate: function (itemData, itemIndex, itemElement) {\n        DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement);\n      },\n      onItemClick: _ref => {\n        var {\n          itemData: itemData\n        } = _ref;\n        return this._onItemClick(itemData);\n      },\n      onShowing: e => {\n        if (true === this._inOnShowing) {\n          return;\n        }\n\n        this._inOnShowing = true;\n\n        this._onVisibilityChangingAction({\n          visible: true,\n          component: this\n        });\n\n        e.component.option(\"items\", e.component.option(\"items\"));\n        delete this._inOnShowing;\n      }\n    });\n  }\n\n  _show(x, y, selection) {\n    this._contextMenuInstance.hide();\n\n    if (this._isTouchBarMode()) {\n      this._$contextMenuTargetElement.show();\n\n      if (!selection) {\n        selection = {\n          x: x,\n          y: y,\n          width: 0,\n          height: 0\n        };\n      }\n\n      var widthCorrection = selection.width > DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH ? 0 : (DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH - selection.width) / 2;\n\n      this._$contextMenuTargetElement.css({\n        left: selection.x - widthCorrection,\n        top: selection.y - DIAGRAM_TOUCHBAR_Y_OFFSET,\n        width: selection.width + 2 * widthCorrection,\n        height: selection.height + 2 * DIAGRAM_TOUCHBAR_Y_OFFSET\n      });\n\n      this._contextMenuInstance.show();\n    } else {\n      this._contextMenuInstance.option(\"position\", {\n        offset: x + \" \" + y\n      });\n\n      this._contextMenuInstance.show();\n    }\n  }\n\n  _hide() {\n    this._$contextMenuTargetElement.hide();\n\n    this._contextMenuInstance.hide();\n  }\n\n  _isTouchBarMode() {\n    var {\n      Browser: Browser\n    } = getDiagram();\n    return Browser.TouchUI;\n  }\n\n  _onItemClick(itemData) {\n    var processed = false;\n\n    if (this._onItemClickAction) {\n      processed = this._onItemClickAction(itemData);\n    }\n\n    if (!processed) {\n      DiagramMenuHelper.onContextMenuItemClick(this, itemData, this._executeCommand.bind(this));\n\n      this._contextMenuInstance.hide();\n    }\n  }\n\n  _executeCommand(command, name, value) {\n    if (\"number\" === typeof command) {\n      this.bar.raiseBarCommandExecuted(command, value);\n    } else if (\"string\" === typeof command) {\n      this._onInternalCommandAction({\n        command: command\n      });\n    }\n\n    if (void 0 !== name) {\n      this._onCustomCommandAction({\n        name: name\n      });\n    }\n  }\n\n  _createOnInternalCommand() {\n    this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\");\n  }\n\n  _createOnCustomCommand() {\n    this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\");\n  }\n\n  _getCommands() {\n    return DiagramCommandsManager.getContextMenuCommands(this.option(\"commands\"));\n  }\n\n  _fillCommandToIndexMap(commands, indexPath) {\n    commands.forEach((command, index) => {\n      var commandIndexPath = indexPath.concat([index]);\n\n      if (void 0 !== command.command) {\n        this._commandToIndexMap[command.command] = commandIndexPath;\n      }\n\n      if (Array.isArray(command.items)) {\n        this._fillCommandToIndexMap(command.items, commandIndexPath);\n      }\n    });\n  }\n\n  _setItemEnabled(key, enabled) {\n    this._setItemVisible(key, enabled);\n  }\n\n  _setItemVisible(key, visible) {\n    var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n    DiagramMenuHelper.updateContextMenuItemVisible(this._contextMenuInstance, itemOptionText, visible);\n  }\n\n  _setItemValue(key, value) {\n    var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n    DiagramMenuHelper.updateContextMenuItemValue(this._contextMenuInstance, itemOptionText, key, value);\n  }\n\n  _setItemSubItems(key, items) {\n    var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\n    DiagramMenuHelper.updateContextMenuItems(this._contextMenuInstance, itemOptionText, key, items);\n  }\n\n  _setEnabled(enabled) {\n    this._contextMenuInstance.option(\"disabled\", !enabled);\n  }\n\n  isVisible() {\n    return this._inOnShowing;\n  }\n\n  _createOnVisibilityChangingAction() {\n    this._onVisibilityChangingAction = this._createActionByOption(\"onVisibilityChanging\");\n  }\n\n  _createOnItemClickAction() {\n    this._onItemClickAction = this._createActionByOption(\"onItemClick\");\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"onVisibilityChanging\":\n        this._createOnVisibilityChangingAction();\n\n        break;\n\n      case \"onInternalCommand\":\n        this._createOnInternalCommand();\n\n        break;\n\n      case \"onCustomCommand\":\n        this._createOnCustomCommand();\n\n        break;\n\n      case \"onItemClick\":\n        this._createOnItemClickAction();\n\n        break;\n\n      case \"commands\":\n        this._invalidate();\n\n        break;\n\n      case \"export\":\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n}\n\nclass DiagramContextMenu extends ContextMenu {\n  _renderContextMenuOverlay() {\n    super._renderContextMenuOverlay();\n\n    if (this._overlay && this.option(\"isTouchBarMode\")) {\n      this._overlay && this._overlay.option(\"onShown\", () => {\n        var $content = $(this._overlay.$content());\n        $content.parent().addClass(DIAGRAM_TOUCHBAR_OVERLAY_CLASS);\n      });\n    }\n  }\n\n}\n\nclass DiagramContextMenuBar extends DiagramBar {\n  constructor(owner) {\n    super(owner);\n  }\n\n  getCommandKeys() {\n    return this._getKeys(this._owner._commands);\n  }\n\n  setItemValue(key, value) {\n    this._owner._setItemValue(key, value);\n  }\n\n  setItemEnabled(key, enabled) {\n    this._owner._setItemEnabled(key, enabled);\n  }\n\n  setItemVisible(key, visible) {\n    this._owner._setItemVisible(key, visible);\n  }\n\n  setItemSubItems(key, items) {\n    this._owner._setItemSubItems(key, items);\n  }\n\n  setEnabled(enabled) {\n    this._owner._setEnabled(enabled);\n  }\n\n  isVisible() {\n    return this._owner.isVisible();\n  }\n\n}\n\nexport default {\n  DiagramContextMenuWrapper: DiagramContextMenuWrapper,\n  DiagramContextMenu: DiagramContextMenu\n};","map":{"version":3,"names":["$","Widget","ContextMenu","DiagramCommandsManager","DiagramMenuHelper","DiagramBar","getDiagram","DIAGRAM_TOUCHBAR_CLASS","DIAGRAM_TOUCHBAR_OVERLAY_CLASS","DIAGRAM_TOUCHBAR_TARGET_CLASS","DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH","DIAGRAM_TOUCHBAR_Y_OFFSET","DiagramContextMenuWrapper","_init","_createOnVisibilityChangingAction","_createOnInternalCommand","_createOnCustomCommand","_createOnItemClickAction","_tempState","_commands","_commandToIndexMap","bar","DiagramContextMenuBar","_initMarkup","_getCommands","_fillCommandToIndexMap","_$contextMenuTargetElement","addClass","appendTo","$element","$contextMenu","_contextMenuInstance","_createComponent","DiagramContextMenu","isTouchBarMode","_isTouchBarMode","cssClass","getContextMenuCssClass","hideOnOutsideClick","showEvent","focusStateEnabled","items","position","my","x","y","at","of","itemTemplate","itemData","itemIndex","itemElement","getContextMenuItemTemplate","onItemClick","_ref","_onItemClick","onShowing","e","_inOnShowing","_onVisibilityChangingAction","visible","component","option","_show","selection","hide","show","width","height","widthCorrection","css","left","top","offset","_hide","Browser","TouchUI","processed","_onItemClickAction","onContextMenuItemClick","_executeCommand","bind","command","name","value","raiseBarCommandExecuted","_onInternalCommandAction","_onCustomCommandAction","_createActionByOption","getContextMenuCommands","commands","indexPath","forEach","index","commandIndexPath","concat","Array","isArray","_setItemEnabled","key","enabled","_setItemVisible","itemOptionText","getItemOptionText","updateContextMenuItemVisible","_setItemValue","updateContextMenuItemValue","_setItemSubItems","updateContextMenuItems","_setEnabled","isVisible","_optionChanged","args","_invalidate","_renderContextMenuOverlay","_overlay","$content","parent","constructor","owner","getCommandKeys","_getKeys","_owner","setItemValue","setItemEnabled","setItemVisible","setItemSubItems","setEnabled"],"sources":["E:/MisaProject/W2022_06/misa_emis/node_modules/devextreme/esm/ui/diagram/ui.diagram.context_menu.js"],"sourcesContent":["/**\r\n * DevExtreme (esm/ui/diagram/ui.diagram.context_menu.js)\r\n * Version: 22.1.4\r\n * Build date: Fri Jul 22 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport ContextMenu from \"../context_menu\";\r\nimport DiagramCommandsManager from \"./diagram.commands_manager\";\r\nimport DiagramMenuHelper from \"./ui.diagram.menu_helper\";\r\nimport DiagramBar from \"./diagram.bar\";\r\nimport {\r\n    getDiagram\r\n} from \"./diagram.importer\";\r\nvar DIAGRAM_TOUCHBAR_CLASS = \"dx-diagram-touchbar\";\r\nvar DIAGRAM_TOUCHBAR_OVERLAY_CLASS = \"dx-diagram-touchbar-overlay\";\r\nvar DIAGRAM_TOUCHBAR_TARGET_CLASS = \"dx-diagram-touchbar-target\";\r\nvar DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH = 800;\r\nvar DIAGRAM_TOUCHBAR_Y_OFFSET = 32;\r\nclass DiagramContextMenuWrapper extends Widget {\r\n    _init() {\r\n        super._init();\r\n        this._createOnVisibilityChangingAction();\r\n        this._createOnInternalCommand();\r\n        this._createOnCustomCommand();\r\n        this._createOnItemClickAction();\r\n        this._tempState = void 0;\r\n        this._commands = [];\r\n        this._commandToIndexMap = {};\r\n        this.bar = new DiagramContextMenuBar(this)\r\n    }\r\n    _initMarkup() {\r\n        super._initMarkup();\r\n        this._commands = this._getCommands();\r\n        this._commandToIndexMap = {};\r\n        this._fillCommandToIndexMap(this._commands, []);\r\n        this._$contextMenuTargetElement = $(\"<div>\").addClass(DIAGRAM_TOUCHBAR_TARGET_CLASS).appendTo(this.$element());\r\n        var $contextMenu = $(\"<div>\").appendTo(this.$element());\r\n        this._contextMenuInstance = this._createComponent($contextMenu, DiagramContextMenu, {\r\n            isTouchBarMode: this._isTouchBarMode(),\r\n            cssClass: this._isTouchBarMode() ? DIAGRAM_TOUCHBAR_CLASS : DiagramMenuHelper.getContextMenuCssClass(),\r\n            hideOnOutsideClick: false,\r\n            showEvent: \"\",\r\n            focusStateEnabled: false,\r\n            items: this._commands,\r\n            position: this._isTouchBarMode() ? {\r\n                my: {\r\n                    x: \"center\",\r\n                    y: \"bottom\"\r\n                },\r\n                at: {\r\n                    x: \"center\",\r\n                    y: \"top\"\r\n                },\r\n                of: this._$contextMenuTargetElement\r\n            } : {},\r\n            itemTemplate: function(itemData, itemIndex, itemElement) {\r\n                DiagramMenuHelper.getContextMenuItemTemplate(this, itemData, itemIndex, itemElement)\r\n            },\r\n            onItemClick: _ref => {\r\n                var {\r\n                    itemData: itemData\r\n                } = _ref;\r\n                return this._onItemClick(itemData)\r\n            },\r\n            onShowing: e => {\r\n                if (true === this._inOnShowing) {\r\n                    return\r\n                }\r\n                this._inOnShowing = true;\r\n                this._onVisibilityChangingAction({\r\n                    visible: true,\r\n                    component: this\r\n                });\r\n                e.component.option(\"items\", e.component.option(\"items\"));\r\n                delete this._inOnShowing\r\n            }\r\n        })\r\n    }\r\n    _show(x, y, selection) {\r\n        this._contextMenuInstance.hide();\r\n        if (this._isTouchBarMode()) {\r\n            this._$contextMenuTargetElement.show();\r\n            if (!selection) {\r\n                selection = {\r\n                    x: x,\r\n                    y: y,\r\n                    width: 0,\r\n                    height: 0\r\n                }\r\n            }\r\n            var widthCorrection = selection.width > DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH ? 0 : (DIAGRAM_TOUCHBAR_MIN_UNWRAPPED_WIDTH - selection.width) / 2;\r\n            this._$contextMenuTargetElement.css({\r\n                left: selection.x - widthCorrection,\r\n                top: selection.y - DIAGRAM_TOUCHBAR_Y_OFFSET,\r\n                width: selection.width + 2 * widthCorrection,\r\n                height: selection.height + 2 * DIAGRAM_TOUCHBAR_Y_OFFSET\r\n            });\r\n            this._contextMenuInstance.show()\r\n        } else {\r\n            this._contextMenuInstance.option(\"position\", {\r\n                offset: x + \" \" + y\r\n            });\r\n            this._contextMenuInstance.show()\r\n        }\r\n    }\r\n    _hide() {\r\n        this._$contextMenuTargetElement.hide();\r\n        this._contextMenuInstance.hide()\r\n    }\r\n    _isTouchBarMode() {\r\n        var {\r\n            Browser: Browser\r\n        } = getDiagram();\r\n        return Browser.TouchUI\r\n    }\r\n    _onItemClick(itemData) {\r\n        var processed = false;\r\n        if (this._onItemClickAction) {\r\n            processed = this._onItemClickAction(itemData)\r\n        }\r\n        if (!processed) {\r\n            DiagramMenuHelper.onContextMenuItemClick(this, itemData, this._executeCommand.bind(this));\r\n            this._contextMenuInstance.hide()\r\n        }\r\n    }\r\n    _executeCommand(command, name, value) {\r\n        if (\"number\" === typeof command) {\r\n            this.bar.raiseBarCommandExecuted(command, value)\r\n        } else if (\"string\" === typeof command) {\r\n            this._onInternalCommandAction({\r\n                command: command\r\n            })\r\n        }\r\n        if (void 0 !== name) {\r\n            this._onCustomCommandAction({\r\n                name: name\r\n            })\r\n        }\r\n    }\r\n    _createOnInternalCommand() {\r\n        this._onInternalCommandAction = this._createActionByOption(\"onInternalCommand\")\r\n    }\r\n    _createOnCustomCommand() {\r\n        this._onCustomCommandAction = this._createActionByOption(\"onCustomCommand\")\r\n    }\r\n    _getCommands() {\r\n        return DiagramCommandsManager.getContextMenuCommands(this.option(\"commands\"))\r\n    }\r\n    _fillCommandToIndexMap(commands, indexPath) {\r\n        commands.forEach((command, index) => {\r\n            var commandIndexPath = indexPath.concat([index]);\r\n            if (void 0 !== command.command) {\r\n                this._commandToIndexMap[command.command] = commandIndexPath\r\n            }\r\n            if (Array.isArray(command.items)) {\r\n                this._fillCommandToIndexMap(command.items, commandIndexPath)\r\n            }\r\n        })\r\n    }\r\n    _setItemEnabled(key, enabled) {\r\n        this._setItemVisible(key, enabled)\r\n    }\r\n    _setItemVisible(key, visible) {\r\n        var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\r\n        DiagramMenuHelper.updateContextMenuItemVisible(this._contextMenuInstance, itemOptionText, visible)\r\n    }\r\n    _setItemValue(key, value) {\r\n        var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\r\n        DiagramMenuHelper.updateContextMenuItemValue(this._contextMenuInstance, itemOptionText, key, value)\r\n    }\r\n    _setItemSubItems(key, items) {\r\n        var itemOptionText = DiagramMenuHelper.getItemOptionText(this._contextMenuInstance, this._commandToIndexMap[key]);\r\n        DiagramMenuHelper.updateContextMenuItems(this._contextMenuInstance, itemOptionText, key, items)\r\n    }\r\n    _setEnabled(enabled) {\r\n        this._contextMenuInstance.option(\"disabled\", !enabled)\r\n    }\r\n    isVisible() {\r\n        return this._inOnShowing\r\n    }\r\n    _createOnVisibilityChangingAction() {\r\n        this._onVisibilityChangingAction = this._createActionByOption(\"onVisibilityChanging\")\r\n    }\r\n    _createOnItemClickAction() {\r\n        this._onItemClickAction = this._createActionByOption(\"onItemClick\")\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"onVisibilityChanging\":\r\n                this._createOnVisibilityChangingAction();\r\n                break;\r\n            case \"onInternalCommand\":\r\n                this._createOnInternalCommand();\r\n                break;\r\n            case \"onCustomCommand\":\r\n                this._createOnCustomCommand();\r\n                break;\r\n            case \"onItemClick\":\r\n                this._createOnItemClickAction();\r\n                break;\r\n            case \"commands\":\r\n                this._invalidate();\r\n                break;\r\n            case \"export\":\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n}\r\nclass DiagramContextMenu extends ContextMenu {\r\n    _renderContextMenuOverlay() {\r\n        super._renderContextMenuOverlay();\r\n        if (this._overlay && this.option(\"isTouchBarMode\")) {\r\n            this._overlay && this._overlay.option(\"onShown\", () => {\r\n                var $content = $(this._overlay.$content());\r\n                $content.parent().addClass(DIAGRAM_TOUCHBAR_OVERLAY_CLASS)\r\n            })\r\n        }\r\n    }\r\n}\r\nclass DiagramContextMenuBar extends DiagramBar {\r\n    constructor(owner) {\r\n        super(owner)\r\n    }\r\n    getCommandKeys() {\r\n        return this._getKeys(this._owner._commands)\r\n    }\r\n    setItemValue(key, value) {\r\n        this._owner._setItemValue(key, value)\r\n    }\r\n    setItemEnabled(key, enabled) {\r\n        this._owner._setItemEnabled(key, enabled)\r\n    }\r\n    setItemVisible(key, visible) {\r\n        this._owner._setItemVisible(key, visible)\r\n    }\r\n    setItemSubItems(key, items) {\r\n        this._owner._setItemSubItems(key, items)\r\n    }\r\n    setEnabled(enabled) {\r\n        this._owner._setEnabled(enabled)\r\n    }\r\n    isVisible() {\r\n        return this._owner.isVisible()\r\n    }\r\n}\r\nexport default {\r\n    DiagramContextMenuWrapper: DiagramContextMenuWrapper,\r\n    DiagramContextMenu: DiagramContextMenu\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}